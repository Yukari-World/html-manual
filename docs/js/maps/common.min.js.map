{"version":3,"sources":["common.js"],"names":["Popup","[object Object]","name","this","nodeBody","document","body","div","createElement","setAttribute","style","position","insertBefore","querySelector","text","top","left","getElementById","display","textContent","IndexedDBConnecter","dbName","dbVersion","dbTable","window","indexedDB","console","warn","func","dbSourse","open","addEventListener","event","target","result","close","errorCode","value","Promise","resolve","reject","getReq","transaction","objectStore","get","trans","putReq","put","storageAvailable","type","storage","x","setItem","removeItem","e","DOMException","code","length","date_days","targetDate","match","date","Date","getFullYear","Number","split","getMonth","getDate"],"mappings":"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","file":"common.min.js","sourcesContent":["/**\n * @file マニュアル用コモンJavaScript\n *\n * @module  manual-common\n * @since   1.0.0\n * @version 1.0.1\n */\n\n// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n// Initialize\n\n// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n// Export Class\n\n/**\n * ポップアップクラス\n *\n * @type    {class}\n * @since   1.0.1\n * @version 1.0.1\n */\nexport class Popup {\n\t/**\n\t * コンストラクタメソッド\n\t *\n\t * @constructs\n\t * @param {string}  name    Name\n\t */\n\tconstructor(name) {\n\t\t/**\n\t\t * ポップアップ表示ID\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = 'popup_' + name;\n\n\t\tlet nodeBody = document.body;\n\t\tconst div = document.createElement('div');\n\t\tdiv.setAttribute('id', this.name);\n\t\tdiv.style.position = 'absolute';\n\n\t\tnodeBody.insertBefore(div, document.querySelector('header'));\n\t}\n\n\tshow(text, top, left) {\n\t\tconst div = document.getElementById(this.name);\n\t\tdiv.style.display = 'block';\n\t\tdiv.style.top = top;\n\t\tdiv.style.left = left;\n\t\tdiv.textContent = text;\n\t}\n\n\tmove(top, left) {\n\t\tconst div = document.getElementById(this.name);\n\t\tdiv.style.top = top;\n\t\tdiv.style.left = left;\n\t}\n\n\thide() {\n\t\tconst div = document.getElementById(this.name);\n\t\tdiv.style.display = 'none';\n\t\tdiv.textContent = '';\n\t}\n}\n\n/**\n * IndexedDBコネクター\n *\n * @type    {class}\n * @since   1.1.0\n * @version 1.1.0\n */\nexport class IndexedDBConnecter {\n\t/**\n\t * コンストラクタメソッド\n\t *\n\t * @constructs\n\t * @param   {string}    dbName      Database Name\n\t * @param   {number}    dbVersion   Database Version\n\t * @returns {boolean}               接続判定\n\t */\n\tconstructor(dbName, dbVersion) {\n\t\t/**\n\t\t * データベースの接続先テーブル\n\t\t * @type {string}\n\t\t */\n\t\tthis.dbTable = '';\n\n\t\tif (!window.indexedDB) {\n\t\t\tconsole.warn('このブラウザーは安定版の IndexedDB をサポートしていません。IndexedDB の機能は利用できません。');\n\t\t\treturn false;\n\t\t} else {\n\t\t\t/**\n\t\t\t * データベース名\n\t\t\t * @type {string}\n\t\t\t */\n\t\t\tthis.dbName = dbName;\n\n\t\t\t/**\n\t\t\t * データベースのバージョン\n\t\t\t * @type {number}\n\t\t\t */\n\t\t\tthis.dbVersion = dbVersion;\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * 初回接続処理\n\t *\n\t * @param   {Function}  func    更新処理に使う関数\n\t * @returns {void}\n\t */\n\tinitializeConnection(func) {\n\t\t// データベースに接続\n\t\tconst dbSourse = indexedDB.open(this.dbName, this.dbVersion);\n\n\t\t// データベース更新処理\n\t\t// 内容を細かく指定できるように外部関数から引っ張ってくる\n\t\tdbSourse.addEventListener('upgradeneeded', func);\n\n\t\t// データベースを開いた時の処理。あくまでデータベースの作成だけなので処理はない\n\t\tdbSourse.addEventListener('success', function (event) {\n\t\t\tlet db = event.target.result;\n\t\t\t// 接続を解除する\n\t\t\tdb.close();\n\t\t\treturn true;\n\t\t});\n\n\t\tdbSourse.addEventListener('error', function (event) {\n\t\t\t// console.error('Database Connection Error: ' + event.target.errorCode);\n\t\t\treturn event.target.errorCode;\n\t\t});\n\t}\n\n\t/**\n\t * テーブルから値を参照\n\t *\n\t * @param   {object}    value   参照する値\n\t * @returns {Promise}           出力結果\n\t */\n\tgetValue(value) {\n\t\t// Initialize\n\t\t// 関数内ではthisが無効なので変数に吐き出す\n\t\tconst dbName = this.dbName;\n\t\tconst dbTable = this.dbTable;\n\n\t\treturn new Promise(function (resolve, reject) {\n\t\t\t// データベースに接続\n\t\t\tconst dbSourse = indexedDB.open(dbName);\n\n\t\t\tdbSourse.addEventListener('success', function (event) {\n\t\t\t\tconst db = event.target.result;\n\t\t\t\tconst trans = db.transaction(dbTable, 'readonly');\n\t\t\t\tconst store = trans.objectStore(dbTable);\n\t\t\t\tconst getReq = store.get(value);\n\n\t\t\t\tgetReq.addEventListener('success', function (event) {\n\t\t\t\t\t// console.log(event.target.result);\n\t\t\t\t\tresolve(event.target.result);\n\t\t\t\t});\n\n\t\t\t\tgetReq.addEventListener('error', function (event) {\n\t\t\t\t\t// console.error('Database Error: ' + event.target.errorCode);\n\t\t\t\t\treject(event.target.errorCode);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tdbSourse.addEventListener('error', function (event) {\n\t\t\t\t// console.error('Database Connection Error: ' + event.target.errorCode);\n\t\t\t\treject(event.target.errorCode);\n\t\t\t});\n\t\t});\n\t}\n\n\n\t/**\n\t * テーブルに値を挿入\n\t *\n\t * 同じキーが既に存在する場合、値は更新されます\n\t *\n\t * @param   {object}    value   参照する値\n\t * @returns {Promise}           出力結果\n\t */\n\tsetValue(value) {\n\t\t// Initialize\n\t\t// 関数内ではthisが無効なので変数に吐き出す\n\t\tconst dbName = this.dbName;\n\t\tconst dbTable = this.dbTable;\n\n\t\treturn new Promise(function (resolve, reject) {\n\t\t\t// データベースに接続\n\t\t\tconst dbSourse = indexedDB.open(dbName);\n\n\t\t\tdbSourse.addEventListener('success', function (event) {\n\t\t\t\tconst db = event.target.result;\n\t\t\t\tconst trans = db.transaction(dbTable, 'readwrite');\n\t\t\t\tconst store = trans.objectStore(dbTable);\n\t\t\t\tconst putReq = store.put(value);\n\n\t\t\t\tputReq.addEventListener('success', function () {\n\t\t\t\t\t// console.log('put data success');\n\t\t\t\t});\n\n\t\t\t\tputReq.addEventListener('error', function (event) {\n\t\t\t\t\t// console.error('Database Error: ' + event.target.errorCode);\n\t\t\t\t\treject(event.target.errorCode);\n\t\t\t\t});\n\n\t\t\t\ttrans.addEventListener('complete', function () {\n\t\t\t\t\t// トランザクション完了時(putReq.onsuccessの後)に実行\n\t\t\t\t\t// console.log('transaction complete');\n\t\t\t\t\tresolve(true);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tdbSourse.addEventListener('error', function (event) {\n\t\t\t\t// console.error('Database Connection Error: ' + event.target.errorCode);\n\t\t\t\treject(event.target.errorCode);\n\t\t\t});\n\t\t});\n\t}\n}\n\n// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n// Export Function\n\n/**\n * ローカルストレージの環境が利用可能か調べる関数\n *\n * {@link https://developer.mozilla.org/ja/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API MDN}より参照\n *\n * @param   {string}    type    調べる項目\n * @returns {boolean}           利用可能かのbool\n * @since   1.0.1\n * @version 1.0.1\n */\nexport function storageAvailable(type) {\n\tlet storage = window[type];\n\ttry {\n\t\tlet x = '__storage_test__';\n\t\tstorage.setItem(x, x);\n\t\tstorage.removeItem(x);\n\t\treturn true;\n\t} catch (e) {\n\t\treturn e instanceof DOMException && (\n\t\t\t// everything except Firefox\n\t\t\te.code === 22 ||\n\t\t\t// Firefox\n\t\t\te.code === 1014 ||\n\t\t\t// test name field too, because code might not be present\n\t\t\t// everything except Firefox\n\t\t\te.name === 'QuotaExceededError' ||\n\t\t\t// Firefox\n\t\t\te.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n\t\t\t// acknowledge QuotaExceededError only if there's something already stored\n\t\t\tstorage.length !== 0;\n\t}\n}\n\n/**\n * 日付の整合性を調べる\n *\n * @param   {string}    targetDate  対象の日付文字列\n * @returns {boolean}               整合性結果\n * @since   1.0.0\n * @version 1.0.1\n */\nexport function date_days(targetDate) {\n\t// 空文字は問答無用でエラー\n\tif (targetDate === '') {\n\t\treturn false;\n\t}\n\n\t// Year/Month/Day もしくは Year-Month-Day の形式のみ許容する\n\tif (targetDate.match(/^\\d{4}\\/\\d{1,2}\\/\\d{1,2}$/)) {\n\t\tlet date = new Date(targetDate);\n\t\tif (date.getFullYear() !== Number(targetDate.split('/')[0]) || date.getMonth() !== Number(targetDate.split('/')[1] - 1) || date.getDate() !== Number(targetDate.split('/')[2])) {\n\t\t\treturn false;\n\t\t}\n\t} else if (targetDate.match(/^\\d{4}-\\d{1,2}-\\d{1,2}$/)) {\n\t\tlet date = new Date(targetDate);\n\t\tif (date.getFullYear() !== Number(targetDate.split('-')[0]) || date.getMonth() !== Number(targetDate.split('-')[1] - 1) || date.getDate() !== Number(targetDate.split('-')[2])) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n"]}