/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./HTML Manual Repository/public/js/Main.js":
/*!**************************************************!*\
  !*** ./HTML Manual Repository/public/js/Main.js ***!
  \**************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _common_min_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.min.js */ \"./HTML Manual Repository/public/js/common.min.js\");\n/* harmony import */ var _ajax_response_min_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ajax-response.min.js */ \"./HTML Manual Repository/public/js/ajax-response.min.js\");\n/**\n * @file マニュアル用JavaScript\n *\n * @module  manual\n * @since   1.0.0\n * @version 1.5.0\n */\n// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n// Initialize\n// ----------------------------------------------------------------------------------------------------\n// Import\n\n // ----------------------------------------------------------------------------------------------------\n// Constant\n\n/**\n * メニューカテゴリリスト\n * @constant\n * @default\n * @type {string[]}\n * @since   1.1.0\n * @version 1.5.0\n */\n\nconst sideList = ['Main', 'CSS', 'HTML', 'JavaScript', 'Language', 'Node', 'PHP', 'SCSS', 'SQL', 'Wordpress', 'Other'];\nconst startTime = Date.now();\nconst dbName = 'Technical-Manual';\nconst dbVersion = 1; // ----------------------------------------------------------------------------------------------------\n// Value\n\nlet bWordDecide = false; // let cPopup;\n\nlet sideToggle = [];\n/**\n * ランダムワードマニア\n *\n * @constant\n * @property {object[]} randomWordList          項目\n * @property {string}   randomWordList.title    タイトル\n * @property {string}   randomWordList.original 引用元\n * @property {string}   randomWordList.summary  概要\n * @type     {object[]}\n */\n\nlet randomWordList;\nlet xorRand; // --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n// Class\n\n/**\n * Xor Shift乱数\n *\n * @type    {class}\n * @since   1.1.0\n * @version 1.5.0\n */\n\nclass XorShift {\n  /**\n   * コンストラクタメソッド\n   *\n   * @constructs\n   * @param {number}  [w=Math.floor(Date.now() / 1000)]   Seed Number\n   */\n  constructor(w = Math.floor(Date.now() / 1000)) {\n    // Initialize\n    let dateTemp = new Date();\n    /**\n     * 乱数 X\n     *\n     * 値は以下の何れかから大きい値を選択\n     * <ul>\n     * <li>Day ^ (Month / 4 + 2)</li>\n     * <li>Month * Day * max(Seconds ^ 2, 31) * max(Minites ^ 2, 53)</li>\n     * </ul>\n     *\n     * @default max(Day ^ (Month / 4 + 2), Month * Day * max(Seconds ^ 2, 31) * max(Minites ^ 2, 53))\n     * @type {number}\n     */\n\n    this.x = Math.max(Math.floor(dateTemp.getDate() ** ((dateTemp.getMonth() + 1) / 4 + 2)), (dateTemp.getMonth() + 1) * dateTemp.getDate() * Math.max(dateTemp.getSeconds() ** 2, 31) * Math.max(dateTemp.getMinutes() ** 2, 53)); // 123456789\n\n    /**\n     * 乱数 Y\n     *\n     * @default max(Seconds, 5) ^ floor(max(Minites, 10) / 10) + max(Seconds, 1) * max(Minites, 1) * floor(Year / 10)\n     * @type {number}\n     */\n\n    this.y = Math.max(Math.max(dateTemp.getSeconds(), 5) ** Math.floor(Math.max(dateTemp.getMinutes(), 10) / 10) + Math.max(dateTemp.getSeconds(), 1) * Math.max(dateTemp.getMinutes(), 1) * Math.floor(dateTemp.getFullYear() / 10)); // 362436069\n\n    /**\n     * 乱数 Z\n     *\n     * @default randomWordList.length ^ 4 + (配列randomWordListの2, 3, 5, 7 の文字列の文字数の和) * (配列randomWordListの11, 13, 17, 19 の文字列の文字数の和) * (配列randomWordListの23, 29 の文字列の文字数の和) + (配列randomWordListの31, 37 の文字列の文字数の和)\n     * @type {number}\n     */\n\n    this.z = randomWordList.length ** 4 + (randomWordList[2].summary.length + randomWordList[3].summary.length + randomWordList[5].summary.length + randomWordList[7].summary.length) * (randomWordList[11].summary.length + randomWordList[13].summary.length + randomWordList[17].summary.length + randomWordList[19].summary.length) * (randomWordList[23].summary.length + randomWordList[29].summary.length) + (randomWordList[31].summary.length + randomWordList[37].summary.length); // 521288629;\n\n    /**\n     * 乱数 W\n     *\n     * デフォルト初期値は現在の時間の1970/01/01 00:00:00からの秒数\n     *\n     * @type {number}\n     */\n\n    this.w = w;\n    console.log('XorShift Seed Info:\\n' + 'X: ' + this.toHex(this.x) + ' (' + this.x + ')\\n' + 'Y: ' + this.toHex(this.y) + ' (' + this.y + ')\\n' + 'Z: ' + this.toHex(this.z) + ' (' + this.z + ')\\n' + 'W: ' + this.toHex(this.w) + ' (' + this.w + ')');\n  }\n  /**\n   * ログ用10進数→4byte16進数出力\n   *\n   * @public\n   * @param   {number}    val 変換する10進数\n   * @returns {string}        16進数\n   * @since   1.3.7\n   * @version 1.5.0\n   */\n\n\n  toHex(val) {\n    return '0x' + ('00000000' + val.toString(16).toUpperCase()).substr(-8);\n  }\n  /**\n   * 乱数の生成\n   *\n   * @public\n   * @returns {number}    乱数の結果\n   * @since   1.1.0\n   * @version 1.5.0\n   */\n\n\n  randomInt32() {\n    let t = this.x ^ this.x << 11;\n    this.x = this.y;\n    this.y = this.z;\n    this.z = this.w;\n    this.w = this.w ^ this.w >>> 19 ^ (t ^ t >>> 8); // console.log('Number: ' + this.w);\n\n    return this.w;\n  }\n  /**\n   * 浮動少数の乱数の生成\n   *\n   * @public\n   * @returns {number}    乱数の結果\n   * @since   1.1.0\n   * @version 1.5.0\n   */\n\n\n  randomFloat() {\n    let randNumber = this.randomInt32();\n\n    if (randNumber < 0) {\n      randNumber = ~randNumber;\n    }\n\n    return randNumber / (2 ** 31 - 1);\n  }\n\n} // --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n// Function\n\n/**\n * ランダムワード取得\n *\n * @returns  {Promise}  終了コード\n * @requires module:ajax-response\n * @since   1.2.0\n * @version 1.5.0\n */\n\n\nfunction getRandomWord() {\n  return new Promise(function (resolve, reject) {\n    Object(_ajax_response_min_js__WEBPACK_IMPORTED_MODULE_1__[\"SendAjax\"])('json/randomWord.json', new FormData(), 'GET').then(function (json) {\n      // console.log(json);\n      resolve(json);\n    }).catch(function (error) {\n      console.error('request failed', error);\n      reject(error);\n    });\n  });\n}\n/**\n * 指定時間毎に実行する\n *\n * @param   {number}    [seconds=5] 更新間隔(秒)\n * @returns {void}\n * @since   1.0.0\n * @version 1.5.0\n */\n\n\nfunction secondsInterval(seconds = 5) {\n  // Initialize\n  let bdate = new Date();\n\n  if (bdate.getSeconds() % seconds === 0 && bWordDecide === false) {\n    bWordDecide = true;\n    setrandomWord();\n  } else if (bdate.getSeconds() % seconds === 1 && bWordDecide === true) {\n    bWordDecide = false;\n  }\n}\n/**\n * ランダムワードの解説を出力\n *\n * @async\n * @param   {JSON}  jsonData    JSON Data\n * @returns {void}\n * @since   1.0.0\n * @version 1.5.0\n */\n\n\nasync function randomOutput(jsonData) {\n  // Initialize\n  const textRandom = document.getElementById('randomOutput');\n  const dl = document.createElement('dl');\n  let listCount = 0; // リストを置く場所を予め作る\n\n  dl.setAttribute('id', 'RandomList');\n  textRandom.textContent = '';\n  textRandom.appendChild(dl);\n  const randomList = document.getElementById('RandomList'); // Workerの使用可否の確認\n\n  if (window.Worker) {\n    /**\n     * Workerの読み込み\n     * 相対パスで読み込む場合実行するHTMLからの相対パスなので要注意\n     */\n    // const worker = new Worker('js/WorkerTask.js', { name: 'Worker Task', type: 'module' });\n    const worker = new Worker('js/WorkerTask.min.js', {\n      name: 'Worker Task'\n    }); // Workerからデータを受け取る時の処理\n    // Switch文を利用することで処理分岐を作成している\n\n    worker.addEventListener('message', function (event) {\n      let temp = event.data;\n\n      switch (temp.mode) {\n        case 'listResult':\n          randomList.insertAdjacentHTML('beforeend', temp.post);\n          break;\n\n        case 'tagList':\n          console.log(temp.post);\n          break;\n\n        default:\n          console.log('Task mode \"' + temp.mode + '\" is not found.');\n          break;\n      }\n    });\n    worker.addEventListener('messageerror', function (event) {\n      console.error('Task failed', event.data);\n    }); // JSONデータを丸投げ\n\n    worker.postMessage({\n      'mode': 'createRandList'\n    });\n  } else {\n    for (let dataTemp of jsonData) {\n      const dt = document.createElement('dt');\n      const dd = document.createElement('dd');\n      dt.setAttribute('id', 'wordID' + ++listCount);\n      dt.insertAdjacentHTML('beforeend', '<h3>' + dataTemp.title + '</h3><h4>出典: ' + dataTemp.original + '</h4>');\n      dd.insertAdjacentHTML('beforeend', dataTemp.summary);\n      randomList.appendChild(dt);\n      randomList.appendChild(dd);\n    }\n  }\n}\n/**\n * ランダムワードの出力\n *\n * @returns {void}\n * @since   1.0.0\n * @version 1.5.0\n */\n\n\nfunction setrandomWord() {\n  // 乱数の生成\n  let wordNum = Math.floor(xorRand.randomFloat() * randomWordList.length);\n  const randomWord = document.getElementById('randomWord');\n  randomWord.setAttribute('href', 'scp-randomWord.html#wordID' + (wordNum + 1));\n  randomWord.textContent = '';\n  randomWord.insertAdjacentHTML('beforeend', randomWordList[wordNum].title);\n} // --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n// DOM Content\n// HTMLの読み込み完了時に行われれる処理\n\n\ndocument.addEventListener('DOMContentLoaded', async function () {\n  // Initialize\n  // ローカルストレージサポートの確認\n  const isEnableStorage = Object(_common_min_js__WEBPACK_IMPORTED_MODULE_0__[\"storageAvailable\"])('localStorage');\n  const dbTable = 'boxState';\n  let isIndexedDB = false;\n  await getRandomWord().then(function (json) {\n    randomWordList = json;\n  }).catch(function (error) {\n    console.error(error);\n  });\n  xorRand = new XorShift(); // cPopup = new Popup('test');\n  // let anchorList = document.querySelectorAll('a[title]');\n  // anchorList.forEach(function (anchor) {\n  // \t1;\n  // });\n  // ----------------------------------------------------------------------------------------------------\n  // データベースの作成\n  // 更新等もここで行われる\n\n  /**\n   * データベース更新処理\n   *\n   * @param   {object}    event   event value\n   * @returns {void}\n   * @since   1.5.0\n   * @version 1.5.0\n   */\n\n  function aa(event) {\n    let db = event.target.result;\n    let objectStore = db.createObjectStore(dbTable, {\n      keyPath: 'id'\n    }); // objectStore.createIndex('value', 'value', { unique: false });\n    // データを追加する前に objectStore の作成を完了させるため、transaction oncomplete を使用する\n\n    objectStore.transaction.addEventListener('complete', function () {\n      // 新たに作成した objectStore に値を保存する\n      let customerObjectStore = db.transaction(dbTable, 'readwrite').objectStore(dbTable);\n\n      for (let sideName of sideList) {\n        customerObjectStore.add({\n          id: sideName,\n          value: 'false'\n        });\n      }\n    });\n  }\n\n  let dbConnection;\n\n  if ((dbConnection = new _common_min_js__WEBPACK_IMPORTED_MODULE_0__[\"IndexedDBConnecter\"](dbName, dbVersion)) !== false) {\n    dbConnection.initializeConnection(aa);\n    dbConnection.dbTable = dbTable;\n    isIndexedDB = true;\n  } // ----------------------------------------------------------------------------------------------------\n  // 全て展開\n  // この作成方法はlet + constだからこそ成り立っており、varでは作成できない\n\n\n  document.getElementById('expandAll').addEventListener('click', function () {\n    for (let sideName of sideList) {\n      const btnElement = document.getElementById('btn' + sideName);\n      const linkElement = document.getElementById('link' + sideName); // trueに変更\n\n      linkElement.checked = true;\n      sideToggle[sideName] = 'true';\n      btnElement.textContent = '-'; // ローカルストレージサポートの確認\n\n      if (isIndexedDB) {\n        const data = {\n          id: sideName,\n          value: 'true'\n        };\n        dbConnection.setValue(data);\n      } else if (isEnableStorage) {\n        localStorage.setItem(sideName + 'Toggle', 'true');\n      }\n    }\n  }); // ----------------------------------------------------------------------------------------------------\n  // 全て折りたたむ\n  // この作成方法はlet + constだからこそ成り立っており、varでは作成できない\n\n  document.getElementById('collapseAll').addEventListener('click', function () {\n    for (let sideName of sideList) {\n      const btnElement = document.getElementById('btn' + sideName);\n      const linkElement = document.getElementById('link' + sideName); // falseに変更\n\n      linkElement.checked = false;\n      sideToggle[sideName] = 'false';\n      btnElement.textContent = '+'; // ローカルストレージサポートの確認\n\n      if (isIndexedDB) {\n        const data = {\n          id: sideName,\n          value: 'false'\n        };\n        dbConnection.setValue(data);\n      } else if (isEnableStorage) {\n        localStorage.setItem(sideName + 'Toggle', 'false');\n      }\n    }\n  }); // ----------------------------------------------------------------------------------------------------\n  // サイドバーの処理\n\n  for (let sideName of sideList) {\n    const btnElement = document.getElementById('btn' + sideName);\n    const linkElement = document.getElementById('link' + sideName); // ローカルストレージから情報を取得\n    // 対応していない場合、常に折りたたんだ状態にする\n\n    if (isIndexedDB) {\n      await dbConnection.getValue(sideName).then(function (dbValue) {\n        if (dbValue !== undefined) {\n          // console.log(dbValue);\n          sideToggle[sideName] = dbValue.value;\n        } else {\n          sideToggle[sideName] = 'false';\n        }\n      }).catch(function (error) {\n        console.error(error);\n      });\n    } else if (isEnableStorage) {\n      sideToggle[sideName] = localStorage.getItem(sideName + 'Toggle');\n    } else {\n      sideToggle[sideName] = 'false';\n    } // 初期フラグの設定\n    // フラグを基に隠すかの指定\n    // console.log(sideToggle[sideName]);\n\n\n    if (sideToggle[sideName] === null || sideToggle[sideName] === 'false') {// Null\n    } else {\n      btnElement.textContent = '-';\n      linkElement.checked = true;\n    } // イベントの登録\n\n\n    linkElement.addEventListener('change', function () {\n      // フラグを基に隠すかの指定\n      if (sideToggle[sideName] === null || sideToggle[sideName] === 'false') {\n        sideToggle[sideName] = 'true';\n\n        if (isIndexedDB) {\n          const data = {\n            id: sideName,\n            value: 'true'\n          };\n          dbConnection.setValue(data);\n        } else if (isEnableStorage) {\n          localStorage.setItem(sideName + 'Toggle', 'true');\n        }\n\n        btnElement.textContent = '-';\n      } else {\n        sideToggle[sideName] = 'false';\n\n        if (isIndexedDB) {\n          const data = {\n            id: sideName,\n            value: 'false'\n          };\n          dbConnection.setValue(data);\n        } else if (isEnableStorage) {\n          localStorage.setItem(sideName + 'Toggle', 'false');\n        }\n\n        btnElement.textContent = '+';\n      }\n    });\n  } // ----------------------------------------------------------------------------------------------------\n\n  /**\n   * 現在の個数\n   * @constant\n   * @type {HTMLElement}\n   */\n\n\n  const cntRandom = document.getElementById('countRandom');\n\n  if (cntRandom !== null) {\n    cntRandom.textContent = randomWordList.length;\n  } // ----------------------------------------------------------------------------------------------------\n\n  /**\n   * ランダムワードの出力位置\n   * @constant\n   * @type {HTMLElement}\n   */\n\n\n  const textRandom = document.getElementById('randomOutput');\n\n  if (textRandom !== null) {\n    randomOutput(randomWordList);\n  }\n\n  setrandomWord();\n  setInterval(function () {\n    secondsInterval(10);\n  }, 50);\n}); // --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n// load\n// 全ての読み込みが完了すると行われる処理\n\nwindow.addEventListener('load', function () {\n  document.getElementById('LoadTime').textContent = Date.now() - startTime + 'ms';\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9IVE1MIE1hbnVhbCBSZXBvc2l0b3J5L3B1YmxpYy9qcy9NYWluLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vSFRNTCBNYW51YWwgUmVwb3NpdG9yeS9wdWJsaWMvanMvTWFpbi5qcz84ZjAyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUg44Oe44OL44Ol44Ki44Or55SoSmF2YVNjcmlwdFxuICpcbiAqIEBtb2R1bGUgIG1hbnVhbFxuICogQHNpbmNlICAgMS4wLjBcbiAqIEB2ZXJzaW9uIDEuNS4wXG4gKi9cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEluaXRpYWxpemVcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSW1wb3J0XG5pbXBvcnQgeyBzdG9yYWdlQXZhaWxhYmxlLCBJbmRleGVkREJDb25uZWN0ZXIgfSBmcm9tICcuL2NvbW1vbi5taW4uanMnO1xuaW1wb3J0IHsgU2VuZEFqYXggfSBmcm9tICcuL2FqYXgtcmVzcG9uc2UubWluLmpzJztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gQ29uc3RhbnRcbi8qKlxuICog44Oh44OL44Ol44O844Kr44OG44K044Oq44Oq44K544OIXG4gKiBAY29uc3RhbnRcbiAqIEBkZWZhdWx0XG4gKiBAdHlwZSB7c3RyaW5nW119XG4gKiBAc2luY2UgICAxLjEuMFxuICogQHZlcnNpb24gMS41LjBcbiAqL1xuY29uc3Qgc2lkZUxpc3QgPSBbXG5cdCdNYWluJyxcblx0J0NTUycsXG5cdCdIVE1MJyxcblx0J0phdmFTY3JpcHQnLFxuXHQnTGFuZ3VhZ2UnLFxuXHQnTm9kZScsXG5cdCdQSFAnLFxuXHQnU0NTUycsXG5cdCdTUUwnLFxuXHQnV29yZHByZXNzJyxcblx0J090aGVyJyxcbl07XG5cbmNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG5jb25zdCBkYk5hbWUgPSAnVGVjaG5pY2FsLU1hbnVhbCc7XG5jb25zdCBkYlZlcnNpb24gPSAxO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBWYWx1ZVxubGV0IGJXb3JkRGVjaWRlID0gZmFsc2U7XG4vLyBsZXQgY1BvcHVwO1xubGV0IHNpZGVUb2dnbGUgPSBbXTtcbi8qKlxuICog44Op44Oz44OA44Og44Ov44O844OJ44Oe44OL44KiXG4gKlxuICogQGNvbnN0YW50XG4gKiBAcHJvcGVydHkge29iamVjdFtdfSByYW5kb21Xb3JkTGlzdCAgICAgICAgICDpoIXnm65cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSAgIHJhbmRvbVdvcmRMaXN0LnRpdGxlICAgIOOCv+OCpOODiOODq1xuICogQHByb3BlcnR5IHtzdHJpbmd9ICAgcmFuZG9tV29yZExpc3Qub3JpZ2luYWwg5byV55So5YWDXG4gKiBAcHJvcGVydHkge3N0cmluZ30gICByYW5kb21Xb3JkTGlzdC5zdW1tYXJ5ICDmpoLopoFcbiAqIEB0eXBlICAgICB7b2JqZWN0W119XG4gKi9cbmxldCByYW5kb21Xb3JkTGlzdDtcbmxldCB4b3JSYW5kO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gQ2xhc3NcblxuLyoqXG4gKiBYb3IgU2hpZnTkubHmlbBcbiAqXG4gKiBAdHlwZSAgICB7Y2xhc3N9XG4gKiBAc2luY2UgICAxLjEuMFxuICogQHZlcnNpb24gMS41LjBcbiAqL1xuY2xhc3MgWG9yU2hpZnQge1xuXHQvKipcblx0ICog44Kz44Oz44K544OI44Op44Kv44K/44Oh44K944OD44OJXG5cdCAqXG5cdCAqIEBjb25zdHJ1Y3RzXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSAgW3c9TWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCldICAgU2VlZCBOdW1iZXJcblx0ICovXG5cdGNvbnN0cnVjdG9yKHcgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKSkge1xuXHRcdC8vIEluaXRpYWxpemVcblx0XHRsZXQgZGF0ZVRlbXAgPSBuZXcgRGF0ZSgpO1xuXG5cdFx0LyoqXG5cdFx0ICog5Lmx5pWwIFhcblx0XHQgKlxuXHRcdCAqIOWApOOBr+S7peS4i+OBruS9leOCjOOBi+OBi+OCieWkp+OBjeOBhOWApOOCkumBuOaKnlxuXHRcdCAqIDx1bD5cblx0XHQgKiA8bGk+RGF5IF4gKE1vbnRoIC8gNCArIDIpPC9saT5cblx0XHQgKiA8bGk+TW9udGggKiBEYXkgKiBtYXgoU2Vjb25kcyBeIDIsIDMxKSAqIG1heChNaW5pdGVzIF4gMiwgNTMpPC9saT5cblx0XHQgKiA8L3VsPlxuXHRcdCAqXG5cdFx0ICogQGRlZmF1bHQgbWF4KERheSBeIChNb250aCAvIDQgKyAyKSwgTW9udGggKiBEYXkgKiBtYXgoU2Vjb25kcyBeIDIsIDMxKSAqIG1heChNaW5pdGVzIF4gMiwgNTMpKVxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgoTWF0aC5mbG9vcihkYXRlVGVtcC5nZXREYXRlKCkgKiogKChkYXRlVGVtcC5nZXRNb250aCgpICsgMSkgLyA0ICsgMikpLCAoZGF0ZVRlbXAuZ2V0TW9udGgoKSArIDEpICogZGF0ZVRlbXAuZ2V0RGF0ZSgpICogTWF0aC5tYXgoZGF0ZVRlbXAuZ2V0U2Vjb25kcygpICoqIDIsIDMxKSAqIE1hdGgubWF4KGRhdGVUZW1wLmdldE1pbnV0ZXMoKSAqKiAyLCA1MykpOyAvLyAxMjM0NTY3ODlcblxuXHRcdC8qKlxuXHRcdCAqIOS5seaVsCBZXG5cdFx0ICpcblx0XHQgKiBAZGVmYXVsdCBtYXgoU2Vjb25kcywgNSkgXiBmbG9vcihtYXgoTWluaXRlcywgMTApIC8gMTApICsgbWF4KFNlY29uZHMsIDEpICogbWF4KE1pbml0ZXMsIDEpICogZmxvb3IoWWVhciAvIDEwKVxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoTWF0aC5tYXgoZGF0ZVRlbXAuZ2V0U2Vjb25kcygpLCA1KSAqKiBNYXRoLmZsb29yKE1hdGgubWF4KGRhdGVUZW1wLmdldE1pbnV0ZXMoKSwgMTApIC8gMTApICsgTWF0aC5tYXgoZGF0ZVRlbXAuZ2V0U2Vjb25kcygpLCAxKSAqIE1hdGgubWF4KGRhdGVUZW1wLmdldE1pbnV0ZXMoKSwgMSkgKiBNYXRoLmZsb29yKGRhdGVUZW1wLmdldEZ1bGxZZWFyKCkgLyAxMCkpOyAvLyAzNjI0MzYwNjlcblxuXHRcdC8qKlxuXHRcdCAqIOS5seaVsCBaXG5cdFx0ICpcblx0XHQgKiBAZGVmYXVsdCByYW5kb21Xb3JkTGlzdC5sZW5ndGggXiA0ICsgKOmFjeWIl3JhbmRvbVdvcmRMaXN044GuMiwgMywgNSwgNyDjga7mloflrZfliJfjga7mloflrZfmlbDjga7lkowpICogKOmFjeWIl3JhbmRvbVdvcmRMaXN044GuMTEsIDEzLCAxNywgMTkg44Gu5paH5a2X5YiX44Gu5paH5a2X5pWw44Gu5ZKMKSAqICjphY3liJdyYW5kb21Xb3JkTGlzdOOBrjIzLCAyOSDjga7mloflrZfliJfjga7mloflrZfmlbDjga7lkowpICsgKOmFjeWIl3JhbmRvbVdvcmRMaXN044GuMzEsIDM3IOOBruaWh+Wtl+WIl+OBruaWh+Wtl+aVsOOBruWSjClcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMueiA9IHJhbmRvbVdvcmRMaXN0Lmxlbmd0aCAqKiA0ICsgKHJhbmRvbVdvcmRMaXN0WzJdLnN1bW1hcnkubGVuZ3RoICsgcmFuZG9tV29yZExpc3RbM10uc3VtbWFyeS5sZW5ndGggKyByYW5kb21Xb3JkTGlzdFs1XS5zdW1tYXJ5Lmxlbmd0aCArIHJhbmRvbVdvcmRMaXN0WzddLnN1bW1hcnkubGVuZ3RoKSAqIChyYW5kb21Xb3JkTGlzdFsxMV0uc3VtbWFyeS5sZW5ndGggKyByYW5kb21Xb3JkTGlzdFsxM10uc3VtbWFyeS5sZW5ndGggKyByYW5kb21Xb3JkTGlzdFsxN10uc3VtbWFyeS5sZW5ndGggKyByYW5kb21Xb3JkTGlzdFsxOV0uc3VtbWFyeS5sZW5ndGgpICogKHJhbmRvbVdvcmRMaXN0WzIzXS5zdW1tYXJ5Lmxlbmd0aCArIHJhbmRvbVdvcmRMaXN0WzI5XS5zdW1tYXJ5Lmxlbmd0aCkgKyAocmFuZG9tV29yZExpc3RbMzFdLnN1bW1hcnkubGVuZ3RoICsgcmFuZG9tV29yZExpc3RbMzddLnN1bW1hcnkubGVuZ3RoKTsgLy8gNTIxMjg4NjI5O1xuXG5cdFx0LyoqXG5cdFx0ICog5Lmx5pWwIFdcblx0XHQgKlxuXHRcdCAqIOODh+ODleOCqeODq+ODiOWIneacn+WApOOBr+ePvuWcqOOBruaZgumWk+OBrjE5NzAvMDEvMDEgMDA6MDA6MDDjgYvjgonjga7np5LmlbBcblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy53ID0gdztcblxuXHRcdGNvbnNvbGUubG9nKCdYb3JTaGlmdCBTZWVkIEluZm86XFxuJyArXG5cdFx0XHQnWDogJyArIHRoaXMudG9IZXgodGhpcy54KSArICcgKCcgKyB0aGlzLnggKyAnKVxcbicgK1xuXHRcdFx0J1k6ICcgKyB0aGlzLnRvSGV4KHRoaXMueSkgKyAnICgnICsgdGhpcy55ICsgJylcXG4nICtcblx0XHRcdCdaOiAnICsgdGhpcy50b0hleCh0aGlzLnopICsgJyAoJyArIHRoaXMueiArICcpXFxuJyArXG5cdFx0XHQnVzogJyArIHRoaXMudG9IZXgodGhpcy53KSArICcgKCcgKyB0aGlzLncgKyAnKSdcblx0XHQpO1xuXHR9XG5cblx0LyoqXG5cdCAqIOODreOCsOeUqDEw6YCy5pWw4oaSNGJ5dGUxNumAsuaVsOWHuuWKm1xuXHQgKlxuXHQgKiBAcHVibGljXG5cdCAqIEBwYXJhbSAgIHtudW1iZXJ9ICAgIHZhbCDlpInmj5vjgZnjgosxMOmAsuaVsFxuXHQgKiBAcmV0dXJucyB7c3RyaW5nfSAgICAgICAgMTbpgLLmlbBcblx0ICogQHNpbmNlICAgMS4zLjdcblx0ICogQHZlcnNpb24gMS41LjBcblx0ICovXG5cdHRvSGV4KHZhbCkge1xuXHRcdHJldHVybiAnMHgnICsgKCcwMDAwMDAwMCcgKyB2YWwudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkpLnN1YnN0cigtOCk7XG5cdH1cblxuXHQvKipcblx0ICog5Lmx5pWw44Gu55Sf5oiQXG5cdCAqXG5cdCAqIEBwdWJsaWNcblx0ICogQHJldHVybnMge251bWJlcn0gICAg5Lmx5pWw44Gu57WQ5p6cXG5cdCAqIEBzaW5jZSAgIDEuMS4wXG5cdCAqIEB2ZXJzaW9uIDEuNS4wXG5cdCAqL1xuXHRyYW5kb21JbnQzMigpIHtcblx0XHRsZXQgdCA9IHRoaXMueCBeIHRoaXMueCA8PCAxMTtcblx0XHR0aGlzLnggPSB0aGlzLnk7XG5cdFx0dGhpcy55ID0gdGhpcy56O1xuXHRcdHRoaXMueiA9IHRoaXMudztcblx0XHR0aGlzLncgPSB0aGlzLncgXiB0aGlzLncgPj4+IDE5IF4gKHQgXiB0ID4+PiA4KTtcblxuXHRcdC8vIGNvbnNvbGUubG9nKCdOdW1iZXI6ICcgKyB0aGlzLncpO1xuXHRcdHJldHVybiB0aGlzLnc7XG5cdH1cblxuXHQvKipcblx0ICog5rWu5YuV5bCR5pWw44Gu5Lmx5pWw44Gu55Sf5oiQXG5cdCAqXG5cdCAqIEBwdWJsaWNcblx0ICogQHJldHVybnMge251bWJlcn0gICAg5Lmx5pWw44Gu57WQ5p6cXG5cdCAqIEBzaW5jZSAgIDEuMS4wXG5cdCAqIEB2ZXJzaW9uIDEuNS4wXG5cdCAqL1xuXHRyYW5kb21GbG9hdCgpIHtcblx0XHRsZXQgcmFuZE51bWJlciA9IHRoaXMucmFuZG9tSW50MzIoKTtcblx0XHRpZiAocmFuZE51bWJlciA8IDApIHtcblx0XHRcdHJhbmROdW1iZXIgPSB+cmFuZE51bWJlcjtcblx0XHR9XG5cdFx0cmV0dXJuIHJhbmROdW1iZXIgLyAoMiAqKiAzMSAtIDEpO1xuXHR9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBGdW5jdGlvblxuXG4vKipcbiAqIOODqeODs+ODgOODoOODr+ODvOODieWPluW+l1xuICpcbiAqIEByZXR1cm5zICB7UHJvbWlzZX0gIOe1guS6huOCs+ODvOODiVxuICogQHJlcXVpcmVzIG1vZHVsZTphamF4LXJlc3BvbnNlXG4gKiBAc2luY2UgICAxLjIuMFxuICogQHZlcnNpb24gMS41LjBcbiAqL1xuZnVuY3Rpb24gZ2V0UmFuZG9tV29yZCgpIHtcblx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0XHRTZW5kQWpheCgnanNvbi9yYW5kb21Xb3JkLmpzb24nLCBuZXcgRm9ybURhdGEoKSwgJ0dFVCcpXG5cdFx0XHQudGhlbihmdW5jdGlvbiAoanNvbikge1xuXHRcdFx0XHQvLyBjb25zb2xlLmxvZyhqc29uKTtcblx0XHRcdFx0cmVzb2x2ZShqc29uKTtcblx0XHRcdH0pXG5cdFx0XHQuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoJ3JlcXVlc3QgZmFpbGVkJywgZXJyb3IpO1xuXHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0fSk7XG5cdH0pO1xufVxuXG4vKipcbiAqIOaMh+WumuaZgumWk+avjuOBq+Wun+ihjOOBmeOCi1xuICpcbiAqIEBwYXJhbSAgIHtudW1iZXJ9ICAgIFtzZWNvbmRzPTVdIOabtOaWsOmWk+malCjnp5IpXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqIEBzaW5jZSAgIDEuMC4wXG4gKiBAdmVyc2lvbiAxLjUuMFxuICovXG5mdW5jdGlvbiBzZWNvbmRzSW50ZXJ2YWwoc2Vjb25kcyA9IDUpIHtcblx0Ly8gSW5pdGlhbGl6ZVxuXHRsZXQgYmRhdGUgPSBuZXcgRGF0ZSgpO1xuXG5cdGlmIChiZGF0ZS5nZXRTZWNvbmRzKCkgJSBzZWNvbmRzID09PSAwICYmIGJXb3JkRGVjaWRlID09PSBmYWxzZSkge1xuXHRcdGJXb3JkRGVjaWRlID0gdHJ1ZTtcblx0XHRzZXRyYW5kb21Xb3JkKCk7XG5cdH0gZWxzZSBpZiAoYmRhdGUuZ2V0U2Vjb25kcygpICUgc2Vjb25kcyA9PT0gMSAmJiBiV29yZERlY2lkZSA9PT0gdHJ1ZSkge1xuXHRcdGJXb3JkRGVjaWRlID0gZmFsc2U7XG5cdH1cbn1cblxuLyoqXG4gKiDjg6njg7Pjg4Djg6Djg6/jg7zjg4njga7op6PoqqzjgpLlh7rliptcbiAqXG4gKiBAYXN5bmNcbiAqIEBwYXJhbSAgIHtKU09OfSAganNvbkRhdGEgICAgSlNPTiBEYXRhXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqIEBzaW5jZSAgIDEuMC4wXG4gKiBAdmVyc2lvbiAxLjUuMFxuICovXG5hc3luYyBmdW5jdGlvbiByYW5kb21PdXRwdXQoanNvbkRhdGEpIHtcblx0Ly8gSW5pdGlhbGl6ZVxuXHRjb25zdCB0ZXh0UmFuZG9tID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JhbmRvbU91dHB1dCcpO1xuXHRjb25zdCBkbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RsJyk7XG5cdGxldCBsaXN0Q291bnQgPSAwO1xuXG5cdC8vIOODquOCueODiOOCkue9ruOBj+WgtOaJgOOCkuS6iOOCgeS9nOOCi1xuXHRkbC5zZXRBdHRyaWJ1dGUoJ2lkJywgJ1JhbmRvbUxpc3QnKTtcblx0dGV4dFJhbmRvbS50ZXh0Q29udGVudCA9ICcnO1xuXHR0ZXh0UmFuZG9tLmFwcGVuZENoaWxkKGRsKTtcblxuXHRjb25zdCByYW5kb21MaXN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ1JhbmRvbUxpc3QnKTtcblxuXHQvLyBXb3JrZXLjga7kvb/nlKjlj6/lkKbjga7norroqo1cblx0aWYgKHdpbmRvdy5Xb3JrZXIpIHtcblx0XHQvKipcblx0XHQgKiBXb3JrZXLjga7oqq3jgb/ovrzjgb9cblx0XHQgKiDnm7jlr77jg5Hjgrnjgafoqq3jgb/ovrzjgoDloLTlkIjlrp/ooYzjgZnjgotIVE1M44GL44KJ44Gu55u45a++44OR44K544Gq44Gu44Gn6KaB5rOo5oSPXG5cdFx0ICovXG5cdFx0Ly8gY29uc3Qgd29ya2VyID0gbmV3IFdvcmtlcignanMvV29ya2VyVGFzay5qcycsIHsgbmFtZTogJ1dvcmtlciBUYXNrJywgdHlwZTogJ21vZHVsZScgfSk7XG5cdFx0Y29uc3Qgd29ya2VyID0gbmV3IFdvcmtlcignanMvV29ya2VyVGFzay5taW4uanMnLCB7IG5hbWU6ICdXb3JrZXIgVGFzaycgfSk7XG5cblx0XHQvLyBXb3JrZXLjgYvjgonjg4fjg7zjgr/jgpLlj5fjgZHlj5bjgovmmYLjga7lh6bnkIZcblx0XHQvLyBTd2l0Y2jmlofjgpLliKnnlKjjgZnjgovjgZPjgajjgaflh6bnkIbliIblspDjgpLkvZzmiJDjgZfjgabjgYTjgotcblx0XHR3b3JrZXIuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGZ1bmN0aW9uIChldmVudCkge1xuXHRcdFx0bGV0IHRlbXAgPSBldmVudC5kYXRhO1xuXHRcdFx0c3dpdGNoICh0ZW1wLm1vZGUpIHtcblx0XHRcdGNhc2UgJ2xpc3RSZXN1bHQnOlxuXHRcdFx0XHRyYW5kb21MaXN0Lmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgdGVtcC5wb3N0KTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICd0YWdMaXN0Jzpcblx0XHRcdFx0Y29uc29sZS5sb2codGVtcC5wb3N0KTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRjb25zb2xlLmxvZygnVGFzayBtb2RlIFwiJyArIHRlbXAubW9kZSArICdcIiBpcyBub3QgZm91bmQuJyk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHdvcmtlci5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlZXJyb3InLCBmdW5jdGlvbiAoZXZlbnQpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ1Rhc2sgZmFpbGVkJywgZXZlbnQuZGF0YSk7XG5cdFx0fSk7XG5cblx0XHQvLyBKU09O44OH44O844K/44KS5Li45oqV44GSXG5cdFx0d29ya2VyLnBvc3RNZXNzYWdlKHsnbW9kZSc6ICdjcmVhdGVSYW5kTGlzdCd9KTtcblx0fSBlbHNlIHtcblx0XHRmb3IgKGxldCBkYXRhVGVtcCBvZiBqc29uRGF0YSkge1xuXHRcdFx0Y29uc3QgZHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkdCcpO1xuXHRcdFx0Y29uc3QgZGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkZCcpO1xuXG5cdFx0XHRkdC5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3dvcmRJRCcgKyArK2xpc3RDb3VudCk7XG5cblx0XHRcdGR0Lmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgJzxoMz4nICsgZGF0YVRlbXAudGl0bGUgKyAnPC9oMz48aDQ+5Ye65YW4OiAnICsgZGF0YVRlbXAub3JpZ2luYWwgKyAnPC9oND4nKTtcblx0XHRcdGRkLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgZGF0YVRlbXAuc3VtbWFyeSk7XG5cblx0XHRcdHJhbmRvbUxpc3QuYXBwZW5kQ2hpbGQoZHQpO1xuXHRcdFx0cmFuZG9tTGlzdC5hcHBlbmRDaGlsZChkZCk7XG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICog44Op44Oz44OA44Og44Ov44O844OJ44Gu5Ye65YqbXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKiBAc2luY2UgICAxLjAuMFxuICogQHZlcnNpb24gMS41LjBcbiAqL1xuZnVuY3Rpb24gc2V0cmFuZG9tV29yZCgpIHtcblx0Ly8g5Lmx5pWw44Gu55Sf5oiQXG5cdGxldCB3b3JkTnVtID0gTWF0aC5mbG9vcih4b3JSYW5kLnJhbmRvbUZsb2F0KCkgKiByYW5kb21Xb3JkTGlzdC5sZW5ndGgpO1xuXHRjb25zdCByYW5kb21Xb3JkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JhbmRvbVdvcmQnKTtcblxuXHRyYW5kb21Xb3JkLnNldEF0dHJpYnV0ZSgnaHJlZicsICdzY3AtcmFuZG9tV29yZC5odG1sI3dvcmRJRCcgKyAod29yZE51bSArIDEpKTtcblx0cmFuZG9tV29yZC50ZXh0Q29udGVudCA9ICcnO1xuXHRyYW5kb21Xb3JkLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgcmFuZG9tV29yZExpc3Rbd29yZE51bV0udGl0bGUpO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gRE9NIENvbnRlbnRcbi8vIEhUTUzjga7oqq3jgb/ovrzjgb/lrozkuobmmYLjgavooYzjgo/jgozjgozjgovlh6bnkIZcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG5cdC8vIEluaXRpYWxpemVcblx0Ly8g44Ot44O844Kr44Or44K544OI44Os44O844K444K144Od44O844OI44Gu56K66KqNXG5cdGNvbnN0IGlzRW5hYmxlU3RvcmFnZSA9IHN0b3JhZ2VBdmFpbGFibGUoJ2xvY2FsU3RvcmFnZScpO1xuXHRjb25zdCBkYlRhYmxlID0gJ2JveFN0YXRlJztcblx0bGV0IGlzSW5kZXhlZERCID0gZmFsc2U7XG5cblx0YXdhaXQgZ2V0UmFuZG9tV29yZCgpXG5cdFx0LnRoZW4oZnVuY3Rpb24gKGpzb24pIHtcblx0XHRcdHJhbmRvbVdvcmRMaXN0ID0ganNvbjtcblx0XHR9KVxuXHRcdC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuXHRcdH0pO1xuXHR4b3JSYW5kID0gbmV3IFhvclNoaWZ0KCk7XG5cdC8vIGNQb3B1cCA9IG5ldyBQb3B1cCgndGVzdCcpO1xuXG5cdC8vIGxldCBhbmNob3JMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYVt0aXRsZV0nKTtcblx0Ly8gYW5jaG9yTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChhbmNob3IpIHtcblx0Ly8gXHQxO1xuXHQvLyB9KTtcblxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdC8vIOODh+ODvOOCv+ODmeODvOOCueOBruS9nOaIkFxuXHQvLyDmm7TmlrDnrYnjgoLjgZPjgZPjgafooYzjgo/jgozjgotcblx0LyoqXG5cdCAqIOODh+ODvOOCv+ODmeODvOOCueabtOaWsOWHpueQhlxuXHQgKlxuXHQgKiBAcGFyYW0gICB7b2JqZWN0fSAgICBldmVudCAgIGV2ZW50IHZhbHVlXG5cdCAqIEByZXR1cm5zIHt2b2lkfVxuXHQgKiBAc2luY2UgICAxLjUuMFxuXHQgKiBAdmVyc2lvbiAxLjUuMFxuXHQgKi9cblx0ZnVuY3Rpb24gYWEoZXZlbnQpIHtcblx0XHRsZXQgZGIgPSBldmVudC50YXJnZXQucmVzdWx0O1xuXG5cdFx0bGV0IG9iamVjdFN0b3JlID0gZGIuY3JlYXRlT2JqZWN0U3RvcmUoZGJUYWJsZSwge2tleVBhdGg6ICdpZCd9KTtcblxuXHRcdC8vIG9iamVjdFN0b3JlLmNyZWF0ZUluZGV4KCd2YWx1ZScsICd2YWx1ZScsIHsgdW5pcXVlOiBmYWxzZSB9KTtcblxuXHRcdC8vIOODh+ODvOOCv+OCkui/veWKoOOBmeOCi+WJjeOBqyBvYmplY3RTdG9yZSDjga7kvZzmiJDjgpLlrozkuobjgZXjgZvjgovjgZ/jgoHjgIF0cmFuc2FjdGlvbiBvbmNvbXBsZXRlIOOCkuS9v+eUqOOBmeOCi1xuXHRcdG9iamVjdFN0b3JlLnRyYW5zYWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBsZXRlJywgZnVuY3Rpb24gKCkge1xuXHRcdFx0Ly8g5paw44Gf44Gr5L2c5oiQ44GX44GfIG9iamVjdFN0b3JlIOOBq+WApOOCkuS/neWtmOOBmeOCi1xuXHRcdFx0bGV0IGN1c3RvbWVyT2JqZWN0U3RvcmUgPSBkYi50cmFuc2FjdGlvbihkYlRhYmxlLCAncmVhZHdyaXRlJykub2JqZWN0U3RvcmUoZGJUYWJsZSk7XG5cdFx0XHRmb3IgKGxldCBzaWRlTmFtZSBvZiBzaWRlTGlzdCkge1xuXHRcdFx0XHRjdXN0b21lck9iamVjdFN0b3JlLmFkZCh7aWQ6IHNpZGVOYW1lLCB2YWx1ZTogJ2ZhbHNlJ30pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0bGV0IGRiQ29ubmVjdGlvbjtcblx0aWYgKChkYkNvbm5lY3Rpb24gPSBuZXcgSW5kZXhlZERCQ29ubmVjdGVyKGRiTmFtZSwgZGJWZXJzaW9uKSkgIT09IGZhbHNlKSB7XG5cdFx0ZGJDb25uZWN0aW9uLmluaXRpYWxpemVDb25uZWN0aW9uKGFhKTtcblx0XHRkYkNvbm5lY3Rpb24uZGJUYWJsZSA9IGRiVGFibGU7XG5cdFx0aXNJbmRleGVkREIgPSB0cnVlO1xuXHR9XG5cblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQvLyDlhajjgablsZXplotcblx0Ly8g44GT44Gu5L2c5oiQ5pa55rOV44GvbGV0ICsgY29uc3TjgaDjgYvjgonjgZPjgZ3miJDjgornq4vjgaPjgabjgYrjgorjgIF2YXLjgafjga/kvZzmiJDjgafjgY3jgarjgYRcblx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4cGFuZEFsbCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuXHRcdGZvciAobGV0IHNpZGVOYW1lIG9mIHNpZGVMaXN0KSB7XG5cdFx0XHRjb25zdCBidG5FbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J0bicgKyBzaWRlTmFtZSk7XG5cdFx0XHRjb25zdCBsaW5rRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsaW5rJyArIHNpZGVOYW1lKTtcblxuXHRcdFx0Ly8gdHJ1ZeOBq+WkieabtFxuXHRcdFx0bGlua0VsZW1lbnQuY2hlY2tlZCA9IHRydWU7XG5cdFx0XHRzaWRlVG9nZ2xlW3NpZGVOYW1lXSA9ICd0cnVlJztcblx0XHRcdGJ0bkVsZW1lbnQudGV4dENvbnRlbnQgPSAnLSc7XG5cdFx0XHQvLyDjg63jg7zjgqvjg6vjgrnjg4jjg6zjg7zjgrjjgrXjg53jg7zjg4jjga7norroqo1cblx0XHRcdGlmIChpc0luZGV4ZWREQikge1xuXHRcdFx0XHRjb25zdCBkYXRhID0ge2lkOiBzaWRlTmFtZSwgdmFsdWU6ICd0cnVlJ307XG5cdFx0XHRcdGRiQ29ubmVjdGlvbi5zZXRWYWx1ZShkYXRhKTtcblx0XHRcdH0gZWxzZSBpZiAoaXNFbmFibGVTdG9yYWdlKSB7XG5cdFx0XHRcdGxvY2FsU3RvcmFnZS5zZXRJdGVtKHNpZGVOYW1lICsgJ1RvZ2dsZScsICd0cnVlJyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdC8vIOWFqOOBpuaKmOOCiuOBn+OBn+OCgFxuXHQvLyDjgZPjga7kvZzmiJDmlrnms5Xjga9sZXQgKyBjb25zdOOBoOOBi+OCieOBk+OBneaIkOOCiueri+OBo+OBpuOBiuOCiuOAgXZhcuOBp+OBr+S9nOaIkOOBp+OBjeOBquOBhFxuXHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29sbGFwc2VBbGwnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcblx0XHRmb3IgKGxldCBzaWRlTmFtZSBvZiBzaWRlTGlzdCkge1xuXHRcdFx0Y29uc3QgYnRuRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidG4nICsgc2lkZU5hbWUpO1xuXHRcdFx0Y29uc3QgbGlua0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGluaycgKyBzaWRlTmFtZSk7XG5cblx0XHRcdC8vIGZhbHNl44Gr5aSJ5pu0XG5cdFx0XHRsaW5rRWxlbWVudC5jaGVja2VkID0gZmFsc2U7XG5cdFx0XHRzaWRlVG9nZ2xlW3NpZGVOYW1lXSA9ICdmYWxzZSc7XG5cdFx0XHRidG5FbGVtZW50LnRleHRDb250ZW50ID0gJysnO1xuXHRcdFx0Ly8g44Ot44O844Kr44Or44K544OI44Os44O844K444K144Od44O844OI44Gu56K66KqNXG5cdFx0XHRpZiAoaXNJbmRleGVkREIpIHtcblx0XHRcdFx0Y29uc3QgZGF0YSA9IHtpZDogc2lkZU5hbWUsIHZhbHVlOiAnZmFsc2UnfTtcblx0XHRcdFx0ZGJDb25uZWN0aW9uLnNldFZhbHVlKGRhdGEpO1xuXHRcdFx0fSBlbHNlIGlmIChpc0VuYWJsZVN0b3JhZ2UpIHtcblx0XHRcdFx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oc2lkZU5hbWUgKyAnVG9nZ2xlJywgJ2ZhbHNlJyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdC8vIOOCteOCpOODieODkOODvOOBruWHpueQhlxuXHRmb3IgKGxldCBzaWRlTmFtZSBvZiBzaWRlTGlzdCkge1xuXHRcdGNvbnN0IGJ0bkVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnRuJyArIHNpZGVOYW1lKTtcblx0XHRjb25zdCBsaW5rRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsaW5rJyArIHNpZGVOYW1lKTtcblxuXHRcdC8vIOODreODvOOCq+ODq+OCueODiOODrOODvOOCuOOBi+OCieaDheWgseOCkuWPluW+l1xuXHRcdC8vIOWvvuW/nOOBl+OBpuOBhOOBquOBhOWgtOWQiOOAgeW4uOOBq+aKmOOCiuOBn+OBn+OCk+OBoOeKtuaFi+OBq+OBmeOCi1xuXHRcdGlmIChpc0luZGV4ZWREQikge1xuXHRcdFx0YXdhaXQgZGJDb25uZWN0aW9uLmdldFZhbHVlKHNpZGVOYW1lKVxuXHRcdFx0XHQudGhlbihmdW5jdGlvbiAoZGJWYWx1ZSkge1xuXHRcdFx0XHRcdGlmIChkYlZhbHVlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdC8vIGNvbnNvbGUubG9nKGRiVmFsdWUpO1xuXHRcdFx0XHRcdFx0c2lkZVRvZ2dsZVtzaWRlTmFtZV0gPSBkYlZhbHVlLnZhbHVlO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzaWRlVG9nZ2xlW3NpZGVOYW1lXSA9ICdmYWxzZSc7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KVxuXHRcdFx0XHQuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcihlcnJvcik7XG5cdFx0XHRcdH0pO1xuXHRcdH0gZWxzZSBpZiAoaXNFbmFibGVTdG9yYWdlKSB7XG5cdFx0XHRzaWRlVG9nZ2xlW3NpZGVOYW1lXSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKHNpZGVOYW1lICsgJ1RvZ2dsZScpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzaWRlVG9nZ2xlW3NpZGVOYW1lXSA9ICdmYWxzZSc7XG5cdFx0fVxuXG5cdFx0Ly8g5Yid5pyf44OV44Op44Kw44Gu6Kit5a6aXG5cdFx0Ly8g44OV44Op44Kw44KS5Z+644Gr6Zqg44GZ44GL44Gu5oyH5a6aXG5cdFx0Ly8gY29uc29sZS5sb2coc2lkZVRvZ2dsZVtzaWRlTmFtZV0pO1xuXHRcdGlmIChzaWRlVG9nZ2xlW3NpZGVOYW1lXSA9PT0gbnVsbCB8fCBzaWRlVG9nZ2xlW3NpZGVOYW1lXSA9PT0gJ2ZhbHNlJykge1xuXHRcdFx0Ly8gTnVsbFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRidG5FbGVtZW50LnRleHRDb250ZW50ID0gJy0nO1xuXHRcdFx0bGlua0VsZW1lbnQuY2hlY2tlZCA9IHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8g44Kk44OZ44Oz44OI44Gu55m76YyyXG5cdFx0bGlua0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuXHRcdFx0Ly8g44OV44Op44Kw44KS5Z+644Gr6Zqg44GZ44GL44Gu5oyH5a6aXG5cdFx0XHRpZiAoc2lkZVRvZ2dsZVtzaWRlTmFtZV0gPT09IG51bGwgfHwgc2lkZVRvZ2dsZVtzaWRlTmFtZV0gPT09ICdmYWxzZScpIHtcblx0XHRcdFx0c2lkZVRvZ2dsZVtzaWRlTmFtZV0gPSAndHJ1ZSc7XG5cblx0XHRcdFx0aWYgKGlzSW5kZXhlZERCKSB7XG5cdFx0XHRcdFx0Y29uc3QgZGF0YSA9IHtpZDogc2lkZU5hbWUsIHZhbHVlOiAndHJ1ZSd9O1xuXHRcdFx0XHRcdGRiQ29ubmVjdGlvbi5zZXRWYWx1ZShkYXRhKTtcblx0XHRcdFx0fSBlbHNlIGlmIChpc0VuYWJsZVN0b3JhZ2UpIHtcblx0XHRcdFx0XHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbShzaWRlTmFtZSArICdUb2dnbGUnLCAndHJ1ZScpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJ0bkVsZW1lbnQudGV4dENvbnRlbnQgPSAnLSc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzaWRlVG9nZ2xlW3NpZGVOYW1lXSA9ICdmYWxzZSc7XG5cdFx0XHRcdGlmIChpc0luZGV4ZWREQikge1xuXHRcdFx0XHRcdGNvbnN0IGRhdGEgPSB7aWQ6IHNpZGVOYW1lLCB2YWx1ZTogJ2ZhbHNlJ307XG5cdFx0XHRcdFx0ZGJDb25uZWN0aW9uLnNldFZhbHVlKGRhdGEpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGlzRW5hYmxlU3RvcmFnZSkge1xuXHRcdFx0XHRcdGxvY2FsU3RvcmFnZS5zZXRJdGVtKHNpZGVOYW1lICsgJ1RvZ2dsZScsICdmYWxzZScpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJ0bkVsZW1lbnQudGV4dENvbnRlbnQgPSAnKyc7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdC8qKlxuXHQgKiDnj77lnKjjga7lgIvmlbBcblx0ICogQGNvbnN0YW50XG5cdCAqIEB0eXBlIHtIVE1MRWxlbWVudH1cblx0ICovXG5cdGNvbnN0IGNudFJhbmRvbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb3VudFJhbmRvbScpO1xuXHRpZiAoY250UmFuZG9tICE9PSBudWxsKSB7XG5cdFx0Y250UmFuZG9tLnRleHRDb250ZW50ID0gcmFuZG9tV29yZExpc3QubGVuZ3RoO1xuXHR9XG5cblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQvKipcblx0ICog44Op44Oz44OA44Og44Ov44O844OJ44Gu5Ye65Yqb5L2N572uXG5cdCAqIEBjb25zdGFudFxuXHQgKiBAdHlwZSB7SFRNTEVsZW1lbnR9XG5cdCAqL1xuXHRjb25zdCB0ZXh0UmFuZG9tID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JhbmRvbU91dHB1dCcpO1xuXHRpZiAodGV4dFJhbmRvbSAhPT0gbnVsbCkge1xuXHRcdHJhbmRvbU91dHB1dChyYW5kb21Xb3JkTGlzdCk7XG5cdH1cblxuXHRzZXRyYW5kb21Xb3JkKCk7XG5cblx0c2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuXHRcdHNlY29uZHNJbnRlcnZhbCgxMCk7XG5cdH0sIDUwKTtcbn0pO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gbG9hZFxuLy8g5YWo44Gm44Gu6Kqt44G/6L6844G/44GM5a6M5LqG44GZ44KL44Go6KGM44KP44KM44KL5Yem55CGXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uICgpIHtcblx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0xvYWRUaW1lJykudGV4dENvbnRlbnQgPSBEYXRlLm5vdygpIC0gc3RhcnRUaW1lICsgJ21zJztcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7OztBQVFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFBQTs7Ozs7Ozs7O0FBUUE7QUFjQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FBVUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFPQTtBQUNBOzs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7Ozs7Ozs7OztBQVlBO0FBQ0E7QUFDQTs7Ozs7OztBQU1BO0FBQ0E7QUFDQTs7Ozs7OztBQU1BO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFPQTtBQUVBO0FBTUE7QUFFQTs7Ozs7Ozs7Ozs7QUFTQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7Ozs7OztBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBOzs7Ozs7Ozs7O0FBUUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUF6R0E7QUE0R0E7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FBUUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7Ozs7O0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7Ozs7OztBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUFBO0FBQUE7QUFHQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBVEE7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTs7Ozs7Ozs7O0FBUUE7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUlBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7OztBQUtBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7O0FBS0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./HTML Manual Repository/public/js/Main.js\n");

/***/ }),

/***/ "./HTML Manual Repository/public/js/Main.min.js":
/*!******************************************************!*\
  !*** ./HTML Manual Repository/public/js/Main.min.js ***!
  \******************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _common_min_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.min.js */ \"./HTML Manual Repository/public/js/common.min.js\");\n/* harmony import */ var _ajax_response_min_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ajax-response.min.js */ \"./HTML Manual Repository/public/js/ajax-response.min.js\");\n\n\nconst sideList = [\"Main\", \"CSS\", \"HTML\", \"JavaScript\", \"Language\", \"Node\", \"PHP\", \"SCSS\", \"SQL\", \"Wordpress\", \"Other\"],\n      startTime = Date.now(),\n      dbName = \"Technical-Manual\",\n      dbVersion = 1;\nlet randomWordList,\n    xorRand,\n    bWordDecide = !1,\n    sideToggle = [];\n\nclass XorShift {\n  constructor(e = Math.floor(Date.now() / 1e3)) {\n    let t = new Date();\n    this.x = Math.max(Math.floor(t.getDate() ** ((t.getMonth() + 1) / 4 + 2)), (t.getMonth() + 1) * t.getDate() * Math.max(t.getSeconds() ** 2, 31) * Math.max(t.getMinutes() ** 2, 53)), this.y = Math.max(Math.max(t.getSeconds(), 5) ** Math.floor(Math.max(t.getMinutes(), 10) / 10) + Math.max(t.getSeconds(), 1) * Math.max(t.getMinutes(), 1) * Math.floor(t.getFullYear() / 10)), this.z = randomWordList.length ** 4 + (randomWordList[2].summary.length + randomWordList[3].summary.length + randomWordList[5].summary.length + randomWordList[7].summary.length) * (randomWordList[11].summary.length + randomWordList[13].summary.length + randomWordList[17].summary.length + randomWordList[19].summary.length) * (randomWordList[23].summary.length + randomWordList[29].summary.length) + (randomWordList[31].summary.length + randomWordList[37].summary.length), this.w = e, console.log(\"XorShift Seed Info:\\nX: \" + this.toHex(this.x) + \" (\" + this.x + \")\\nY: \" + this.toHex(this.y) + \" (\" + this.y + \")\\nZ: \" + this.toHex(this.z) + \" (\" + this.z + \")\\nW: \" + this.toHex(this.w) + \" (\" + this.w + \")\");\n  }\n\n  toHex(e) {\n    return \"0x\" + (\"00000000\" + e.toString(16).toUpperCase()).substr(-8);\n  }\n\n  randomInt32() {\n    let e = this.x ^ this.x << 11;\n    return this.x = this.y, this.y = this.z, this.z = this.w, this.w = this.w ^ this.w >>> 19 ^ e ^ e >>> 8, this.w;\n  }\n\n  randomFloat() {\n    let e = this.randomInt32();\n    return e < 0 && (e = ~e), e / (2 ** 31 - 1);\n  }\n\n}\n\nfunction getRandomWord() {\n  return new Promise(function (e, t) {\n    Object(_ajax_response_min_js__WEBPACK_IMPORTED_MODULE_1__[\"SendAjax\"])(\"json/randomWord.json\", new FormData(), \"GET\").then(function (t) {\n      e(t);\n    }).catch(function (e) {\n      console.error(\"request failed\", e), t(e);\n    });\n  });\n}\n\nfunction secondsInterval(e = 5) {\n  let t = new Date();\n  t.getSeconds() % e == 0 && !1 === bWordDecide ? (bWordDecide = !0, setrandomWord()) : t.getSeconds() % e == 1 && !0 === bWordDecide && (bWordDecide = !1);\n}\n\nasync function randomOutput(e) {\n  const t = document.getElementById(\"randomOutput\"),\n        n = document.createElement(\"dl\");\n  let o = 0;\n  n.setAttribute(\"id\", \"RandomList\"), t.textContent = \"\", t.appendChild(n);\n  const a = document.getElementById(\"RandomList\");\n\n  if (window.Worker) {\n    const e = new Worker(\"js/WorkerTask.min.js\", {\n      name: \"Worker Task\"\n    });\n    e.addEventListener(\"message\", function (e) {\n      let t = e.data;\n\n      switch (t.mode) {\n        case \"listResult\":\n          a.insertAdjacentHTML(\"beforeend\", t.post);\n          break;\n\n        case \"tagList\":\n          console.log(t.post);\n          break;\n\n        default:\n          console.log('Task mode \"' + t.mode + '\" is not found.');\n      }\n    }), e.addEventListener(\"messageerror\", function (e) {\n      console.error(\"Task failed\", e.data);\n    }), e.postMessage({\n      mode: \"createRandList\"\n    });\n  } else for (let t of e) {\n    const e = document.createElement(\"dt\"),\n          n = document.createElement(\"dd\");\n    e.setAttribute(\"id\", \"wordID\" + ++o), e.insertAdjacentHTML(\"beforeend\", \"<h3>\" + t.title + \"</h3><h4>出典: \" + t.original + \"</h4>\"), n.insertAdjacentHTML(\"beforeend\", t.summary), a.appendChild(e), a.appendChild(n);\n  }\n}\n\nfunction setrandomWord() {\n  let e = Math.floor(xorRand.randomFloat() * randomWordList.length);\n  const t = document.getElementById(\"randomWord\");\n  t.setAttribute(\"href\", \"scp-randomWord.html#wordID\" + (e + 1)), t.textContent = \"\", t.insertAdjacentHTML(\"beforeend\", randomWordList[e].title);\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", async function () {\n  const e = Object(_common_min_js__WEBPACK_IMPORTED_MODULE_0__[\"storageAvailable\"])(\"localStorage\"),\n        t = \"boxState\";\n  let n,\n      o = !1;\n  await getRandomWord().then(function (e) {\n    randomWordList = e;\n  }).catch(function (e) {\n    console.error(e);\n  }), xorRand = new XorShift(), !1 !== (n = new _common_min_js__WEBPACK_IMPORTED_MODULE_0__[\"IndexedDBConnecter\"](dbName, 1)) && (n.initializeConnection(function (e) {\n    let n = e.target.result;\n    n.createObjectStore(t, {\n      keyPath: \"id\"\n    }).transaction.addEventListener(\"complete\", function () {\n      let e = n.transaction(t, \"readwrite\").objectStore(t);\n\n      for (let t of sideList) e.add({\n        id: t,\n        value: \"false\"\n      });\n    });\n  }), n.dbTable = t, o = !0), document.getElementById(\"expandAll\").addEventListener(\"click\", function () {\n    for (let t of sideList) {\n      const a = document.getElementById(\"btn\" + t);\n\n      if (document.getElementById(\"link\" + t).checked = !0, sideToggle[t] = \"true\", a.textContent = \"-\", o) {\n        const e = {\n          id: t,\n          value: \"true\"\n        };\n        n.setValue(e);\n      } else e && localStorage.setItem(t + \"Toggle\", \"true\");\n    }\n  }), document.getElementById(\"collapseAll\").addEventListener(\"click\", function () {\n    for (let t of sideList) {\n      const a = document.getElementById(\"btn\" + t);\n\n      if (document.getElementById(\"link\" + t).checked = !1, sideToggle[t] = \"false\", a.textContent = \"+\", o) {\n        const e = {\n          id: t,\n          value: \"false\"\n        };\n        n.setValue(e);\n      } else e && localStorage.setItem(t + \"Toggle\", \"false\");\n    }\n  });\n\n  for (let t of sideList) {\n    const a = document.getElementById(\"btn\" + t),\n          d = document.getElementById(\"link\" + t);\n    o ? await n.getValue(t).then(function (e) {\n      sideToggle[t] = void 0 !== e ? e.value : \"false\";\n    }).catch(function (e) {\n      console.error(e);\n    }) : sideToggle[t] = e ? localStorage.getItem(t + \"Toggle\") : \"false\", null === sideToggle[t] || \"false\" === sideToggle[t] || (a.textContent = \"-\", d.checked = !0), d.addEventListener(\"change\", function () {\n      if (null === sideToggle[t] || \"false\" === sideToggle[t]) {\n        if (sideToggle[t] = \"true\", o) {\n          const e = {\n            id: t,\n            value: \"true\"\n          };\n          n.setValue(e);\n        } else e && localStorage.setItem(t + \"Toggle\", \"true\");\n\n        a.textContent = \"-\";\n      } else {\n        if (sideToggle[t] = \"false\", o) {\n          const e = {\n            id: t,\n            value: \"false\"\n          };\n          n.setValue(e);\n        } else e && localStorage.setItem(t + \"Toggle\", \"false\");\n\n        a.textContent = \"+\";\n      }\n    });\n  }\n\n  const a = document.getElementById(\"countRandom\");\n  null !== a && (a.textContent = randomWordList.length), null !== document.getElementById(\"randomOutput\") && randomOutput(randomWordList), setrandomWord(), setInterval(function () {\n    secondsInterval(10);\n  }, 50);\n}), window.addEventListener(\"load\", function () {\n  document.getElementById(\"LoadTime\").textContent = Date.now() - startTime + \"ms\";\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9IVE1MIE1hbnVhbCBSZXBvc2l0b3J5L3B1YmxpYy9qcy9NYWluLm1pbi5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9NYWluLmpzPzM5ZGMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSDjg57jg4vjg6XjgqLjg6vnlKhKYXZhU2NyaXB0XG4gKlxuICogQG1vZHVsZSAgbWFudWFsXG4gKiBAc2luY2UgICAxLjAuMFxuICogQHZlcnNpb24gMS41LjBcbiAqL1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSW5pdGlhbGl6ZVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBJbXBvcnRcbmltcG9ydCB7IHN0b3JhZ2VBdmFpbGFibGUsIEluZGV4ZWREQkNvbm5lY3RlciB9IGZyb20gJy4vY29tbW9uLm1pbi5qcyc7XG5pbXBvcnQgeyBTZW5kQWpheCB9IGZyb20gJy4vYWpheC1yZXNwb25zZS5taW4uanMnO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBDb25zdGFudFxuLyoqXG4gKiDjg6Hjg4vjg6Xjg7zjgqvjg4bjgrTjg6rjg6rjgrnjg4hcbiAqIEBjb25zdGFudFxuICogQGRlZmF1bHRcbiAqIEB0eXBlIHtzdHJpbmdbXX1cbiAqIEBzaW5jZSAgIDEuMS4wXG4gKiBAdmVyc2lvbiAxLjUuMFxuICovXG5jb25zdCBzaWRlTGlzdCA9IFtcblx0J01haW4nLFxuXHQnQ1NTJyxcblx0J0hUTUwnLFxuXHQnSmF2YVNjcmlwdCcsXG5cdCdMYW5ndWFnZScsXG5cdCdOb2RlJyxcblx0J1BIUCcsXG5cdCdTQ1NTJyxcblx0J1NRTCcsXG5cdCdXb3JkcHJlc3MnLFxuXHQnT3RoZXInLFxuXTtcblxuY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbmNvbnN0IGRiTmFtZSA9ICdUZWNobmljYWwtTWFudWFsJztcbmNvbnN0IGRiVmVyc2lvbiA9IDE7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFZhbHVlXG5sZXQgYldvcmREZWNpZGUgPSBmYWxzZTtcbi8vIGxldCBjUG9wdXA7XG5sZXQgc2lkZVRvZ2dsZSA9IFtdO1xuLyoqXG4gKiDjg6njg7Pjg4Djg6Djg6/jg7zjg4njg57jg4vjgqJcbiAqXG4gKiBAY29uc3RhbnRcbiAqIEBwcm9wZXJ0eSB7b2JqZWN0W119IHJhbmRvbVdvcmRMaXN0ICAgICAgICAgIOmgheebrlxuICogQHByb3BlcnR5IHtzdHJpbmd9ICAgcmFuZG9tV29yZExpc3QudGl0bGUgICAg44K/44Kk44OI44OrXG4gKiBAcHJvcGVydHkge3N0cmluZ30gICByYW5kb21Xb3JkTGlzdC5vcmlnaW5hbCDlvJXnlKjlhYNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSAgIHJhbmRvbVdvcmRMaXN0LnN1bW1hcnkgIOamguimgVxuICogQHR5cGUgICAgIHtvYmplY3RbXX1cbiAqL1xubGV0IHJhbmRvbVdvcmRMaXN0O1xubGV0IHhvclJhbmQ7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBDbGFzc1xuXG4vKipcbiAqIFhvciBTaGlmdOS5seaVsFxuICpcbiAqIEB0eXBlICAgIHtjbGFzc31cbiAqIEBzaW5jZSAgIDEuMS4wXG4gKiBAdmVyc2lvbiAxLjUuMFxuICovXG5jbGFzcyBYb3JTaGlmdCB7XG5cdC8qKlxuXHQgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr/jg6Hjgr3jg4Pjg4lcblx0ICpcblx0ICogQGNvbnN0cnVjdHNcblx0ICogQHBhcmFtIHtudW1iZXJ9ICBbdz1NYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKV0gICBTZWVkIE51bWJlclxuXHQgKi9cblx0Y29uc3RydWN0b3IodyA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApKSB7XG5cdFx0Ly8gSW5pdGlhbGl6ZVxuXHRcdGxldCBkYXRlVGVtcCA9IG5ldyBEYXRlKCk7XG5cblx0XHQvKipcblx0XHQgKiDkubHmlbAgWFxuXHRcdCAqXG5cdFx0ICog5YCk44Gv5Lul5LiL44Gu5L2V44KM44GL44GL44KJ5aSn44GN44GE5YCk44KS6YG45oqeXG5cdFx0ICogPHVsPlxuXHRcdCAqIDxsaT5EYXkgXiAoTW9udGggLyA0ICsgMik8L2xpPlxuXHRcdCAqIDxsaT5Nb250aCAqIERheSAqIG1heChTZWNvbmRzIF4gMiwgMzEpICogbWF4KE1pbml0ZXMgXiAyLCA1Myk8L2xpPlxuXHRcdCAqIDwvdWw+XG5cdFx0ICpcblx0XHQgKiBAZGVmYXVsdCBtYXgoRGF5IF4gKE1vbnRoIC8gNCArIDIpLCBNb250aCAqIERheSAqIG1heChTZWNvbmRzIF4gMiwgMzEpICogbWF4KE1pbml0ZXMgXiAyLCA1MykpXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLnggPSBNYXRoLm1heChNYXRoLmZsb29yKGRhdGVUZW1wLmdldERhdGUoKSAqKiAoKGRhdGVUZW1wLmdldE1vbnRoKCkgKyAxKSAvIDQgKyAyKSksIChkYXRlVGVtcC5nZXRNb250aCgpICsgMSkgKiBkYXRlVGVtcC5nZXREYXRlKCkgKiBNYXRoLm1heChkYXRlVGVtcC5nZXRTZWNvbmRzKCkgKiogMiwgMzEpICogTWF0aC5tYXgoZGF0ZVRlbXAuZ2V0TWludXRlcygpICoqIDIsIDUzKSk7IC8vIDEyMzQ1Njc4OVxuXG5cdFx0LyoqXG5cdFx0ICog5Lmx5pWwIFlcblx0XHQgKlxuXHRcdCAqIEBkZWZhdWx0IG1heChTZWNvbmRzLCA1KSBeIGZsb29yKG1heChNaW5pdGVzLCAxMCkgLyAxMCkgKyBtYXgoU2Vjb25kcywgMSkgKiBtYXgoTWluaXRlcywgMSkgKiBmbG9vcihZZWFyIC8gMTApXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLnkgPSBNYXRoLm1heChNYXRoLm1heChkYXRlVGVtcC5nZXRTZWNvbmRzKCksIDUpICoqIE1hdGguZmxvb3IoTWF0aC5tYXgoZGF0ZVRlbXAuZ2V0TWludXRlcygpLCAxMCkgLyAxMCkgKyBNYXRoLm1heChkYXRlVGVtcC5nZXRTZWNvbmRzKCksIDEpICogTWF0aC5tYXgoZGF0ZVRlbXAuZ2V0TWludXRlcygpLCAxKSAqIE1hdGguZmxvb3IoZGF0ZVRlbXAuZ2V0RnVsbFllYXIoKSAvIDEwKSk7IC8vIDM2MjQzNjA2OVxuXG5cdFx0LyoqXG5cdFx0ICog5Lmx5pWwIFpcblx0XHQgKlxuXHRcdCAqIEBkZWZhdWx0IHJhbmRvbVdvcmRMaXN0Lmxlbmd0aCBeIDQgKyAo6YWN5YiXcmFuZG9tV29yZExpc3Tjga4yLCAzLCA1LCA3IOOBruaWh+Wtl+WIl+OBruaWh+Wtl+aVsOOBruWSjCkgKiAo6YWN5YiXcmFuZG9tV29yZExpc3Tjga4xMSwgMTMsIDE3LCAxOSDjga7mloflrZfliJfjga7mloflrZfmlbDjga7lkowpICogKOmFjeWIl3JhbmRvbVdvcmRMaXN044GuMjMsIDI5IOOBruaWh+Wtl+WIl+OBruaWh+Wtl+aVsOOBruWSjCkgKyAo6YWN5YiXcmFuZG9tV29yZExpc3Tjga4zMSwgMzcg44Gu5paH5a2X5YiX44Gu5paH5a2X5pWw44Gu5ZKMKVxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy56ID0gcmFuZG9tV29yZExpc3QubGVuZ3RoICoqIDQgKyAocmFuZG9tV29yZExpc3RbMl0uc3VtbWFyeS5sZW5ndGggKyByYW5kb21Xb3JkTGlzdFszXS5zdW1tYXJ5Lmxlbmd0aCArIHJhbmRvbVdvcmRMaXN0WzVdLnN1bW1hcnkubGVuZ3RoICsgcmFuZG9tV29yZExpc3RbN10uc3VtbWFyeS5sZW5ndGgpICogKHJhbmRvbVdvcmRMaXN0WzExXS5zdW1tYXJ5Lmxlbmd0aCArIHJhbmRvbVdvcmRMaXN0WzEzXS5zdW1tYXJ5Lmxlbmd0aCArIHJhbmRvbVdvcmRMaXN0WzE3XS5zdW1tYXJ5Lmxlbmd0aCArIHJhbmRvbVdvcmRMaXN0WzE5XS5zdW1tYXJ5Lmxlbmd0aCkgKiAocmFuZG9tV29yZExpc3RbMjNdLnN1bW1hcnkubGVuZ3RoICsgcmFuZG9tV29yZExpc3RbMjldLnN1bW1hcnkubGVuZ3RoKSArIChyYW5kb21Xb3JkTGlzdFszMV0uc3VtbWFyeS5sZW5ndGggKyByYW5kb21Xb3JkTGlzdFszN10uc3VtbWFyeS5sZW5ndGgpOyAvLyA1MjEyODg2Mjk7XG5cblx0XHQvKipcblx0XHQgKiDkubHmlbAgV1xuXHRcdCAqXG5cdFx0ICog44OH44OV44Kp44Or44OI5Yid5pyf5YCk44Gv54++5Zyo44Gu5pmC6ZaT44GuMTk3MC8wMS8wMSAwMDowMDowMOOBi+OCieOBruenkuaVsFxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLncgPSB3O1xuXG5cdFx0Y29uc29sZS5sb2coJ1hvclNoaWZ0IFNlZWQgSW5mbzpcXG4nICtcblx0XHRcdCdYOiAnICsgdGhpcy50b0hleCh0aGlzLngpICsgJyAoJyArIHRoaXMueCArICcpXFxuJyArXG5cdFx0XHQnWTogJyArIHRoaXMudG9IZXgodGhpcy55KSArICcgKCcgKyB0aGlzLnkgKyAnKVxcbicgK1xuXHRcdFx0J1o6ICcgKyB0aGlzLnRvSGV4KHRoaXMueikgKyAnICgnICsgdGhpcy56ICsgJylcXG4nICtcblx0XHRcdCdXOiAnICsgdGhpcy50b0hleCh0aGlzLncpICsgJyAoJyArIHRoaXMudyArICcpJ1xuXHRcdCk7XG5cdH1cblxuXHQvKipcblx0ICog44Ot44Kw55SoMTDpgLLmlbDihpI0Ynl0ZTE26YCy5pWw5Ye65YqbXG5cdCAqXG5cdCAqIEBwdWJsaWNcblx0ICogQHBhcmFtICAge251bWJlcn0gICAgdmFsIOWkieaPm+OBmeOCizEw6YCy5pWwXG5cdCAqIEByZXR1cm5zIHtzdHJpbmd9ICAgICAgICAxNumAsuaVsFxuXHQgKiBAc2luY2UgICAxLjMuN1xuXHQgKiBAdmVyc2lvbiAxLjUuMFxuXHQgKi9cblx0dG9IZXgodmFsKSB7XG5cdFx0cmV0dXJuICcweCcgKyAoJzAwMDAwMDAwJyArIHZhbC50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSkuc3Vic3RyKC04KTtcblx0fVxuXG5cdC8qKlxuXHQgKiDkubHmlbDjga7nlJ/miJBcblx0ICpcblx0ICogQHB1YmxpY1xuXHQgKiBAcmV0dXJucyB7bnVtYmVyfSAgICDkubHmlbDjga7ntZDmnpxcblx0ICogQHNpbmNlICAgMS4xLjBcblx0ICogQHZlcnNpb24gMS41LjBcblx0ICovXG5cdHJhbmRvbUludDMyKCkge1xuXHRcdGxldCB0ID0gdGhpcy54IF4gdGhpcy54IDw8IDExO1xuXHRcdHRoaXMueCA9IHRoaXMueTtcblx0XHR0aGlzLnkgPSB0aGlzLno7XG5cdFx0dGhpcy56ID0gdGhpcy53O1xuXHRcdHRoaXMudyA9IHRoaXMudyBeIHRoaXMudyA+Pj4gMTkgXiAodCBeIHQgPj4+IDgpO1xuXG5cdFx0Ly8gY29uc29sZS5sb2coJ051bWJlcjogJyArIHRoaXMudyk7XG5cdFx0cmV0dXJuIHRoaXMudztcblx0fVxuXG5cdC8qKlxuXHQgKiDmta7li5XlsJHmlbDjga7kubHmlbDjga7nlJ/miJBcblx0ICpcblx0ICogQHB1YmxpY1xuXHQgKiBAcmV0dXJucyB7bnVtYmVyfSAgICDkubHmlbDjga7ntZDmnpxcblx0ICogQHNpbmNlICAgMS4xLjBcblx0ICogQHZlcnNpb24gMS41LjBcblx0ICovXG5cdHJhbmRvbUZsb2F0KCkge1xuXHRcdGxldCByYW5kTnVtYmVyID0gdGhpcy5yYW5kb21JbnQzMigpO1xuXHRcdGlmIChyYW5kTnVtYmVyIDwgMCkge1xuXHRcdFx0cmFuZE51bWJlciA9IH5yYW5kTnVtYmVyO1xuXHRcdH1cblx0XHRyZXR1cm4gcmFuZE51bWJlciAvICgyICoqIDMxIC0gMSk7XG5cdH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEZ1bmN0aW9uXG5cbi8qKlxuICog44Op44Oz44OA44Og44Ov44O844OJ5Y+W5b6XXG4gKlxuICogQHJldHVybnMgIHtQcm9taXNlfSAg57WC5LqG44Kz44O844OJXG4gKiBAcmVxdWlyZXMgbW9kdWxlOmFqYXgtcmVzcG9uc2VcbiAqIEBzaW5jZSAgIDEuMi4wXG4gKiBAdmVyc2lvbiAxLjUuMFxuICovXG5mdW5jdGlvbiBnZXRSYW5kb21Xb3JkKCkge1xuXHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFNlbmRBamF4KCdqc29uL3JhbmRvbVdvcmQuanNvbicsIG5ldyBGb3JtRGF0YSgpLCAnR0VUJylcblx0XHRcdC50aGVuKGZ1bmN0aW9uIChqc29uKSB7XG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKGpzb24pO1xuXHRcdFx0XHRyZXNvbHZlKGpzb24pO1xuXHRcdFx0fSlcblx0XHRcdC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcblx0XHRcdFx0Y29uc29sZS5lcnJvcigncmVxdWVzdCBmYWlsZWQnLCBlcnJvcik7XG5cdFx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICog5oyH5a6a5pmC6ZaT5q+O44Gr5a6f6KGM44GZ44KLXG4gKlxuICogQHBhcmFtICAge251bWJlcn0gICAgW3NlY29uZHM9NV0g5pu05paw6ZaT6ZqUKOenkilcbiAqIEByZXR1cm5zIHt2b2lkfVxuICogQHNpbmNlICAgMS4wLjBcbiAqIEB2ZXJzaW9uIDEuNS4wXG4gKi9cbmZ1bmN0aW9uIHNlY29uZHNJbnRlcnZhbChzZWNvbmRzID0gNSkge1xuXHQvLyBJbml0aWFsaXplXG5cdGxldCBiZGF0ZSA9IG5ldyBEYXRlKCk7XG5cblx0aWYgKGJkYXRlLmdldFNlY29uZHMoKSAlIHNlY29uZHMgPT09IDAgJiYgYldvcmREZWNpZGUgPT09IGZhbHNlKSB7XG5cdFx0YldvcmREZWNpZGUgPSB0cnVlO1xuXHRcdHNldHJhbmRvbVdvcmQoKTtcblx0fSBlbHNlIGlmIChiZGF0ZS5nZXRTZWNvbmRzKCkgJSBzZWNvbmRzID09PSAxICYmIGJXb3JkRGVjaWRlID09PSB0cnVlKSB7XG5cdFx0YldvcmREZWNpZGUgPSBmYWxzZTtcblx0fVxufVxuXG4vKipcbiAqIOODqeODs+ODgOODoOODr+ODvOODieOBruino+iqrOOCkuWHuuWKm1xuICpcbiAqIEBhc3luY1xuICogQHBhcmFtICAge0pTT059ICBqc29uRGF0YSAgICBKU09OIERhdGFcbiAqIEByZXR1cm5zIHt2b2lkfVxuICogQHNpbmNlICAgMS4wLjBcbiAqIEB2ZXJzaW9uIDEuNS4wXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHJhbmRvbU91dHB1dChqc29uRGF0YSkge1xuXHQvLyBJbml0aWFsaXplXG5cdGNvbnN0IHRleHRSYW5kb20gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmFuZG9tT3V0cHV0Jyk7XG5cdGNvbnN0IGRsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGwnKTtcblx0bGV0IGxpc3RDb3VudCA9IDA7XG5cblx0Ly8g44Oq44K544OI44KS572u44GP5aC05omA44KS5LqI44KB5L2c44KLXG5cdGRsLnNldEF0dHJpYnV0ZSgnaWQnLCAnUmFuZG9tTGlzdCcpO1xuXHR0ZXh0UmFuZG9tLnRleHRDb250ZW50ID0gJyc7XG5cdHRleHRSYW5kb20uYXBwZW5kQ2hpbGQoZGwpO1xuXG5cdGNvbnN0IHJhbmRvbUxpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnUmFuZG9tTGlzdCcpO1xuXG5cdC8vIFdvcmtlcuOBruS9v+eUqOWPr+WQpuOBrueiuuiqjVxuXHRpZiAod2luZG93Lldvcmtlcikge1xuXHRcdC8qKlxuXHRcdCAqIFdvcmtlcuOBruiqreOBv+i+vOOBv1xuXHRcdCAqIOebuOWvvuODkeOCueOBp+iqreOBv+i+vOOCgOWgtOWQiOWun+ihjOOBmeOCi0hUTUzjgYvjgonjga7nm7jlr77jg5Hjgrnjgarjga7jgafopoHms6jmhI9cblx0XHQgKi9cblx0XHQvLyBjb25zdCB3b3JrZXIgPSBuZXcgV29ya2VyKCdqcy9Xb3JrZXJUYXNrLmpzJywgeyBuYW1lOiAnV29ya2VyIFRhc2snLCB0eXBlOiAnbW9kdWxlJyB9KTtcblx0XHRjb25zdCB3b3JrZXIgPSBuZXcgV29ya2VyKCdqcy9Xb3JrZXJUYXNrLm1pbi5qcycsIHsgbmFtZTogJ1dvcmtlciBUYXNrJyB9KTtcblxuXHRcdC8vIFdvcmtlcuOBi+OCieODh+ODvOOCv+OCkuWPl+OBkeWPluOCi+aZguOBruWHpueQhlxuXHRcdC8vIFN3aXRjaOaWh+OCkuWIqeeUqOOBmeOCi+OBk+OBqOOBp+WHpueQhuWIhuWykOOCkuS9nOaIkOOBl+OBpuOBhOOCi1xuXHRcdHdvcmtlci5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZnVuY3Rpb24gKGV2ZW50KSB7XG5cdFx0XHRsZXQgdGVtcCA9IGV2ZW50LmRhdGE7XG5cdFx0XHRzd2l0Y2ggKHRlbXAubW9kZSkge1xuXHRcdFx0Y2FzZSAnbGlzdFJlc3VsdCc6XG5cdFx0XHRcdHJhbmRvbUxpc3QuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCB0ZW1wLnBvc3QpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ3RhZ0xpc3QnOlxuXHRcdFx0XHRjb25zb2xlLmxvZyh0ZW1wLnBvc3QpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGNvbnNvbGUubG9nKCdUYXNrIG1vZGUgXCInICsgdGVtcC5tb2RlICsgJ1wiIGlzIG5vdCBmb3VuZC4nKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0d29ya2VyLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2VlcnJvcicsIGZ1bmN0aW9uIChldmVudCkge1xuXHRcdFx0Y29uc29sZS5lcnJvcignVGFzayBmYWlsZWQnLCBldmVudC5kYXRhKTtcblx0XHR9KTtcblxuXHRcdC8vIEpTT07jg4fjg7zjgr/jgpLkuLjmipXjgZJcblx0XHR3b3JrZXIucG9zdE1lc3NhZ2Uoeydtb2RlJzogJ2NyZWF0ZVJhbmRMaXN0J30pO1xuXHR9IGVsc2Uge1xuXHRcdGZvciAobGV0IGRhdGFUZW1wIG9mIGpzb25EYXRhKSB7XG5cdFx0XHRjb25zdCBkdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2R0Jyk7XG5cdFx0XHRjb25zdCBkZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RkJyk7XG5cblx0XHRcdGR0LnNldEF0dHJpYnV0ZSgnaWQnLCAnd29yZElEJyArICsrbGlzdENvdW50KTtcblxuXHRcdFx0ZHQuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCAnPGgzPicgKyBkYXRhVGVtcC50aXRsZSArICc8L2gzPjxoND7lh7rlhbg6ICcgKyBkYXRhVGVtcC5vcmlnaW5hbCArICc8L2g0PicpO1xuXHRcdFx0ZGQuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBkYXRhVGVtcC5zdW1tYXJ5KTtcblxuXHRcdFx0cmFuZG9tTGlzdC5hcHBlbmRDaGlsZChkdCk7XG5cdFx0XHRyYW5kb21MaXN0LmFwcGVuZENoaWxkKGRkKTtcblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiDjg6njg7Pjg4Djg6Djg6/jg7zjg4njga7lh7rliptcbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqIEBzaW5jZSAgIDEuMC4wXG4gKiBAdmVyc2lvbiAxLjUuMFxuICovXG5mdW5jdGlvbiBzZXRyYW5kb21Xb3JkKCkge1xuXHQvLyDkubHmlbDjga7nlJ/miJBcblx0bGV0IHdvcmROdW0gPSBNYXRoLmZsb29yKHhvclJhbmQucmFuZG9tRmxvYXQoKSAqIHJhbmRvbVdvcmRMaXN0Lmxlbmd0aCk7XG5cdGNvbnN0IHJhbmRvbVdvcmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmFuZG9tV29yZCcpO1xuXG5cdHJhbmRvbVdvcmQuc2V0QXR0cmlidXRlKCdocmVmJywgJ3NjcC1yYW5kb21Xb3JkLmh0bWwjd29yZElEJyArICh3b3JkTnVtICsgMSkpO1xuXHRyYW5kb21Xb3JkLnRleHRDb250ZW50ID0gJyc7XG5cdHJhbmRvbVdvcmQuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCByYW5kb21Xb3JkTGlzdFt3b3JkTnVtXS50aXRsZSk7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBET00gQ29udGVudFxuLy8gSFRNTOOBruiqreOBv+i+vOOBv+WujOS6huaZguOBq+ihjOOCj+OCjOOCjOOCi+WHpueQhlxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcblx0Ly8gSW5pdGlhbGl6ZVxuXHQvLyDjg63jg7zjgqvjg6vjgrnjg4jjg6zjg7zjgrjjgrXjg53jg7zjg4jjga7norroqo1cblx0Y29uc3QgaXNFbmFibGVTdG9yYWdlID0gc3RvcmFnZUF2YWlsYWJsZSgnbG9jYWxTdG9yYWdlJyk7XG5cdGNvbnN0IGRiVGFibGUgPSAnYm94U3RhdGUnO1xuXHRsZXQgaXNJbmRleGVkREIgPSBmYWxzZTtcblxuXHRhd2FpdCBnZXRSYW5kb21Xb3JkKClcblx0XHQudGhlbihmdW5jdGlvbiAoanNvbikge1xuXHRcdFx0cmFuZG9tV29yZExpc3QgPSBqc29uO1xuXHRcdH0pXG5cdFx0LmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuXHRcdFx0Y29uc29sZS5lcnJvcihlcnJvcik7XG5cdFx0fSk7XG5cdHhvclJhbmQgPSBuZXcgWG9yU2hpZnQoKTtcblx0Ly8gY1BvcHVwID0gbmV3IFBvcHVwKCd0ZXN0Jyk7XG5cblx0Ly8gbGV0IGFuY2hvckxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdhW3RpdGxlXScpO1xuXHQvLyBhbmNob3JMaXN0LmZvckVhY2goZnVuY3Rpb24gKGFuY2hvcikge1xuXHQvLyBcdDE7XG5cdC8vIH0pO1xuXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0Ly8g44OH44O844K/44OZ44O844K544Gu5L2c5oiQXG5cdC8vIOabtOaWsOetieOCguOBk+OBk+OBp+ihjOOCj+OCjOOCi1xuXHQvKipcblx0ICog44OH44O844K/44OZ44O844K55pu05paw5Yem55CGXG5cdCAqXG5cdCAqIEBwYXJhbSAgIHtvYmplY3R9ICAgIGV2ZW50ICAgZXZlbnQgdmFsdWVcblx0ICogQHJldHVybnMge3ZvaWR9XG5cdCAqIEBzaW5jZSAgIDEuNS4wXG5cdCAqIEB2ZXJzaW9uIDEuNS4wXG5cdCAqL1xuXHRmdW5jdGlvbiBhYShldmVudCkge1xuXHRcdGxldCBkYiA9IGV2ZW50LnRhcmdldC5yZXN1bHQ7XG5cblx0XHRsZXQgb2JqZWN0U3RvcmUgPSBkYi5jcmVhdGVPYmplY3RTdG9yZShkYlRhYmxlLCB7a2V5UGF0aDogJ2lkJ30pO1xuXG5cdFx0Ly8gb2JqZWN0U3RvcmUuY3JlYXRlSW5kZXgoJ3ZhbHVlJywgJ3ZhbHVlJywgeyB1bmlxdWU6IGZhbHNlIH0pO1xuXG5cdFx0Ly8g44OH44O844K/44KS6L+95Yqg44GZ44KL5YmN44GrIG9iamVjdFN0b3JlIOOBruS9nOaIkOOCkuWujOS6huOBleOBm+OCi+OBn+OCgeOAgXRyYW5zYWN0aW9uIG9uY29tcGxldGUg44KS5L2/55So44GZ44KLXG5cdFx0b2JqZWN0U3RvcmUudHJhbnNhY3Rpb24uYWRkRXZlbnRMaXN0ZW5lcignY29tcGxldGUnLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHQvLyDmlrDjgZ/jgavkvZzmiJDjgZfjgZ8gb2JqZWN0U3RvcmUg44Gr5YCk44KS5L+d5a2Y44GZ44KLXG5cdFx0XHRsZXQgY3VzdG9tZXJPYmplY3RTdG9yZSA9IGRiLnRyYW5zYWN0aW9uKGRiVGFibGUsICdyZWFkd3JpdGUnKS5vYmplY3RTdG9yZShkYlRhYmxlKTtcblx0XHRcdGZvciAobGV0IHNpZGVOYW1lIG9mIHNpZGVMaXN0KSB7XG5cdFx0XHRcdGN1c3RvbWVyT2JqZWN0U3RvcmUuYWRkKHtpZDogc2lkZU5hbWUsIHZhbHVlOiAnZmFsc2UnfSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRsZXQgZGJDb25uZWN0aW9uO1xuXHRpZiAoKGRiQ29ubmVjdGlvbiA9IG5ldyBJbmRleGVkREJDb25uZWN0ZXIoZGJOYW1lLCBkYlZlcnNpb24pKSAhPT0gZmFsc2UpIHtcblx0XHRkYkNvbm5lY3Rpb24uaW5pdGlhbGl6ZUNvbm5lY3Rpb24oYWEpO1xuXHRcdGRiQ29ubmVjdGlvbi5kYlRhYmxlID0gZGJUYWJsZTtcblx0XHRpc0luZGV4ZWREQiA9IHRydWU7XG5cdH1cblxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdC8vIOWFqOOBpuWxlemWi1xuXHQvLyDjgZPjga7kvZzmiJDmlrnms5Xjga9sZXQgKyBjb25zdOOBoOOBi+OCieOBk+OBneaIkOOCiueri+OBo+OBpuOBiuOCiuOAgXZhcuOBp+OBr+S9nOaIkOOBp+OBjeOBquOBhFxuXHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXhwYW5kQWxsJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG5cdFx0Zm9yIChsZXQgc2lkZU5hbWUgb2Ygc2lkZUxpc3QpIHtcblx0XHRcdGNvbnN0IGJ0bkVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnRuJyArIHNpZGVOYW1lKTtcblx0XHRcdGNvbnN0IGxpbmtFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xpbmsnICsgc2lkZU5hbWUpO1xuXG5cdFx0XHQvLyB0cnVl44Gr5aSJ5pu0XG5cdFx0XHRsaW5rRWxlbWVudC5jaGVja2VkID0gdHJ1ZTtcblx0XHRcdHNpZGVUb2dnbGVbc2lkZU5hbWVdID0gJ3RydWUnO1xuXHRcdFx0YnRuRWxlbWVudC50ZXh0Q29udGVudCA9ICctJztcblx0XHRcdC8vIOODreODvOOCq+ODq+OCueODiOODrOODvOOCuOOCteODneODvOODiOOBrueiuuiqjVxuXHRcdFx0aWYgKGlzSW5kZXhlZERCKSB7XG5cdFx0XHRcdGNvbnN0IGRhdGEgPSB7aWQ6IHNpZGVOYW1lLCB2YWx1ZTogJ3RydWUnfTtcblx0XHRcdFx0ZGJDb25uZWN0aW9uLnNldFZhbHVlKGRhdGEpO1xuXHRcdFx0fSBlbHNlIGlmIChpc0VuYWJsZVN0b3JhZ2UpIHtcblx0XHRcdFx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oc2lkZU5hbWUgKyAnVG9nZ2xlJywgJ3RydWUnKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0Ly8g5YWo44Gm5oqY44KK44Gf44Gf44KAXG5cdC8vIOOBk+OBruS9nOaIkOaWueazleOBr2xldCArIGNvbnN044Gg44GL44KJ44GT44Gd5oiQ44KK56uL44Gj44Gm44GK44KK44CBdmFy44Gn44Gv5L2c5oiQ44Gn44GN44Gq44GEXG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb2xsYXBzZUFsbCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuXHRcdGZvciAobGV0IHNpZGVOYW1lIG9mIHNpZGVMaXN0KSB7XG5cdFx0XHRjb25zdCBidG5FbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J0bicgKyBzaWRlTmFtZSk7XG5cdFx0XHRjb25zdCBsaW5rRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsaW5rJyArIHNpZGVOYW1lKTtcblxuXHRcdFx0Ly8gZmFsc2XjgavlpInmm7Rcblx0XHRcdGxpbmtFbGVtZW50LmNoZWNrZWQgPSBmYWxzZTtcblx0XHRcdHNpZGVUb2dnbGVbc2lkZU5hbWVdID0gJ2ZhbHNlJztcblx0XHRcdGJ0bkVsZW1lbnQudGV4dENvbnRlbnQgPSAnKyc7XG5cdFx0XHQvLyDjg63jg7zjgqvjg6vjgrnjg4jjg6zjg7zjgrjjgrXjg53jg7zjg4jjga7norroqo1cblx0XHRcdGlmIChpc0luZGV4ZWREQikge1xuXHRcdFx0XHRjb25zdCBkYXRhID0ge2lkOiBzaWRlTmFtZSwgdmFsdWU6ICdmYWxzZSd9O1xuXHRcdFx0XHRkYkNvbm5lY3Rpb24uc2V0VmFsdWUoZGF0YSk7XG5cdFx0XHR9IGVsc2UgaWYgKGlzRW5hYmxlU3RvcmFnZSkge1xuXHRcdFx0XHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbShzaWRlTmFtZSArICdUb2dnbGUnLCAnZmFsc2UnKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0Ly8g44K144Kk44OJ44OQ44O844Gu5Yem55CGXG5cdGZvciAobGV0IHNpZGVOYW1lIG9mIHNpZGVMaXN0KSB7XG5cdFx0Y29uc3QgYnRuRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidG4nICsgc2lkZU5hbWUpO1xuXHRcdGNvbnN0IGxpbmtFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xpbmsnICsgc2lkZU5hbWUpO1xuXG5cdFx0Ly8g44Ot44O844Kr44Or44K544OI44Os44O844K444GL44KJ5oOF5aCx44KS5Y+W5b6XXG5cdFx0Ly8g5a++5b+c44GX44Gm44GE44Gq44GE5aC05ZCI44CB5bi444Gr5oqY44KK44Gf44Gf44KT44Gg54q25oWL44Gr44GZ44KLXG5cdFx0aWYgKGlzSW5kZXhlZERCKSB7XG5cdFx0XHRhd2FpdCBkYkNvbm5lY3Rpb24uZ2V0VmFsdWUoc2lkZU5hbWUpXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uIChkYlZhbHVlKSB7XG5cdFx0XHRcdFx0aWYgKGRiVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coZGJWYWx1ZSk7XG5cdFx0XHRcdFx0XHRzaWRlVG9nZ2xlW3NpZGVOYW1lXSA9IGRiVmFsdWUudmFsdWU7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNpZGVUb2dnbGVbc2lkZU5hbWVdID0gJ2ZhbHNlJztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKGVycm9yKTtcblx0XHRcdFx0fSk7XG5cdFx0fSBlbHNlIGlmIChpc0VuYWJsZVN0b3JhZ2UpIHtcblx0XHRcdHNpZGVUb2dnbGVbc2lkZU5hbWVdID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oc2lkZU5hbWUgKyAnVG9nZ2xlJyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNpZGVUb2dnbGVbc2lkZU5hbWVdID0gJ2ZhbHNlJztcblx0XHR9XG5cblx0XHQvLyDliJ3mnJ/jg5Xjg6njgrDjga7oqK3lrppcblx0XHQvLyDjg5Xjg6njgrDjgpLln7rjgavpmqDjgZnjgYvjga7mjIflrppcblx0XHQvLyBjb25zb2xlLmxvZyhzaWRlVG9nZ2xlW3NpZGVOYW1lXSk7XG5cdFx0aWYgKHNpZGVUb2dnbGVbc2lkZU5hbWVdID09PSBudWxsIHx8IHNpZGVUb2dnbGVbc2lkZU5hbWVdID09PSAnZmFsc2UnKSB7XG5cdFx0XHQvLyBOdWxsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGJ0bkVsZW1lbnQudGV4dENvbnRlbnQgPSAnLSc7XG5cdFx0XHRsaW5rRWxlbWVudC5jaGVja2VkID0gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyDjgqTjg5njg7Pjg4jjga7nmbvpjLJcblx0XHRsaW5rRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHQvLyDjg5Xjg6njgrDjgpLln7rjgavpmqDjgZnjgYvjga7mjIflrppcblx0XHRcdGlmIChzaWRlVG9nZ2xlW3NpZGVOYW1lXSA9PT0gbnVsbCB8fCBzaWRlVG9nZ2xlW3NpZGVOYW1lXSA9PT0gJ2ZhbHNlJykge1xuXHRcdFx0XHRzaWRlVG9nZ2xlW3NpZGVOYW1lXSA9ICd0cnVlJztcblxuXHRcdFx0XHRpZiAoaXNJbmRleGVkREIpIHtcblx0XHRcdFx0XHRjb25zdCBkYXRhID0ge2lkOiBzaWRlTmFtZSwgdmFsdWU6ICd0cnVlJ307XG5cdFx0XHRcdFx0ZGJDb25uZWN0aW9uLnNldFZhbHVlKGRhdGEpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGlzRW5hYmxlU3RvcmFnZSkge1xuXHRcdFx0XHRcdGxvY2FsU3RvcmFnZS5zZXRJdGVtKHNpZGVOYW1lICsgJ1RvZ2dsZScsICd0cnVlJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnRuRWxlbWVudC50ZXh0Q29udGVudCA9ICctJztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNpZGVUb2dnbGVbc2lkZU5hbWVdID0gJ2ZhbHNlJztcblx0XHRcdFx0aWYgKGlzSW5kZXhlZERCKSB7XG5cdFx0XHRcdFx0Y29uc3QgZGF0YSA9IHtpZDogc2lkZU5hbWUsIHZhbHVlOiAnZmFsc2UnfTtcblx0XHRcdFx0XHRkYkNvbm5lY3Rpb24uc2V0VmFsdWUoZGF0YSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoaXNFbmFibGVTdG9yYWdlKSB7XG5cdFx0XHRcdFx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oc2lkZU5hbWUgKyAnVG9nZ2xlJywgJ2ZhbHNlJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnRuRWxlbWVudC50ZXh0Q29udGVudCA9ICcrJztcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0LyoqXG5cdCAqIOePvuWcqOOBruWAi+aVsFxuXHQgKiBAY29uc3RhbnRcblx0ICogQHR5cGUge0hUTUxFbGVtZW50fVxuXHQgKi9cblx0Y29uc3QgY250UmFuZG9tID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvdW50UmFuZG9tJyk7XG5cdGlmIChjbnRSYW5kb20gIT09IG51bGwpIHtcblx0XHRjbnRSYW5kb20udGV4dENvbnRlbnQgPSByYW5kb21Xb3JkTGlzdC5sZW5ndGg7XG5cdH1cblxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdC8qKlxuXHQgKiDjg6njg7Pjg4Djg6Djg6/jg7zjg4njga7lh7rlipvkvY3nva5cblx0ICogQGNvbnN0YW50XG5cdCAqIEB0eXBlIHtIVE1MRWxlbWVudH1cblx0ICovXG5cdGNvbnN0IHRleHRSYW5kb20gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmFuZG9tT3V0cHV0Jyk7XG5cdGlmICh0ZXh0UmFuZG9tICE9PSBudWxsKSB7XG5cdFx0cmFuZG9tT3V0cHV0KHJhbmRvbVdvcmRMaXN0KTtcblx0fVxuXG5cdHNldHJhbmRvbVdvcmQoKTtcblxuXHRzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG5cdFx0c2Vjb25kc0ludGVydmFsKDEwKTtcblx0fSwgNTApO1xufSk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBsb2FkXG4vLyDlhajjgabjga7oqq3jgb/ovrzjgb/jgYzlrozkuobjgZnjgovjgajooYzjgo/jgozjgovlh6bnkIZcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuXHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnTG9hZFRpbWUnKS50ZXh0Q29udGVudCA9IERhdGUubm93KCkgLSBzdGFydFRpbWUgKyAnbXMnO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQWFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFhQTtBQUFBO0FBQUE7QUFBQTtBQW9CQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUErQkE7QUFFQTtBQWNBO0FBNENBO0FBQ0E7QUFEQTtBQUNBO0FBV0E7QUFDQTtBQURBO0FBQ0E7QUFPQTtBQVdBO0FBQ0E7QUFEQTtBQUNBO0FBSUE7QUFBQTtBQUNBO0FBeEdBO0FBQ0E7QUFxSEE7QUFDQTtBQUNBO0FBR0E7QUFBQTtBQUdBO0FBQ0E7QUFBQTtBQWFBO0FBQ0E7QUFEQTtBQUVBO0FBRUE7QUFpQkE7QUFDQTtBQURBO0FBRUE7QUFBQTtBQUVBO0FBR0E7QUFJQTtBQUNBO0FBRUE7QUFNQTtBQUFBO0FBQUE7QUFJQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBUkE7QUFRQTtBQUtBO0FBQUE7QUFJQTtBQUFBO0FBQUE7QUFHQTtBQUFBO0FBR0E7QUFNQTtBQVlBO0FBQ0E7QUFEQTtBQUVBO0FBQ0E7QUFFQTtBQVFBO0FBQ0E7QUFEQTtBQUdBO0FBQUE7QUFFQTtBQUFBO0FBQUE7QUFJQTtBQUFBO0FBR0E7QUFBQTtBQXNCQTtBQUVBO0FBQUE7QUFBQTtBQU9BO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFnQkE7QUFDQTtBQUNBO0FBT0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFFQTtBQUFBO0FBU0E7QUFDQTtBQUNBO0FBT0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFFQTtBQUFBO0FBQ0E7QUFNQTtBQUNBO0FBQUE7QUFLQTtBQUtBO0FBRUE7QUFJQTtBQUFBO0FBcUJBO0FBR0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUdBO0FBQUE7QUFHQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBR0E7QUFBQTtBQUFBO0FBV0E7QUFDQTtBQURBO0FBQ0E7QUFrQkE7QUFBQTtBQUNBO0FBT0E7QUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./HTML Manual Repository/public/js/Main.min.js\n");

/***/ }),

/***/ "./HTML Manual Repository/public/js/WorkerTask.js":
/*!********************************************************!*\
  !*** ./HTML Manual Repository/public/js/WorkerTask.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * @file Worker Task\n *\n * @module  manual-worker\n * @since   1.0.0\n * @version 1.0.2\n */\n// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n// Initialize\n// SendAjax関数の呼び出し\n// import { SendAjax } from './ajax-response.min.js';\n\n/**\n * ランダムワードマニア\n * @constant\n * @type {JSON}\n */\nlet randomWordList;\nlet randomWordTags = [];\n/**\n * 送信リスト\n * @type {Object}\n */\n\nlet sendList; // --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n// Function\n\n/**\n * HTTPステータスコードの確認\n *\n * @param   {Response}       response    レスポンスデータ\n * @returns {Response|Error}             HTTPステータスコードが200番台ならレスポンスデータ、そうでなければエラー\n * @since   1.0.0\n * @version 1.0.2\n */\n\nfunction checkStatus(response) {\n  // HTTPステータスコードが200番台ではない場合\n  // 類似方法にresponse.okがあるが大部分のブラウザが非対応なので非推奨\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  } else {\n    let error = new Error(response.statusText);\n    error.response = response;\n    throw error;\n  }\n}\n/**\n * JSONデータの切り出し\n *\n * @param   {Response}  response    レスポンスデータ\n * @returns {JSON}                  レスポンスに格納されているJSONデータ\n * @since   1.0.0\n * @version 1.0.2\n */\n\n\nfunction parseJSON(response) {\n  // console.log(response);\n  return response.json();\n}\n/**\n * Ajax転送処理\n *\n * @param   {string}                        sendURL             転送先URL\n * @param   {FormData}                      [form]              転送するForm Data(無くても問題ない)\n * @param   {string}                        [methodType='POST'] 転送メソッド\n * @returns {Promise.JSON|Promise.Error}                        JSONデータもしくはエラー内容\n * @since   1.0.0\n * @version 1.0.2\n */\n\n\nfunction SendAjax(sendURL, form, methodType) {\n  return new Promise(function (resolve, reject) {\n    if (self.fetch) {\n      let sendStruct;\n      let url; // POSTとGETでは転送処理が異なるのでここで処理を行う\n\n      if (methodType === 'POST' || methodType === 'post') {\n        url = sendURL;\n        sendStruct = {\n          method: methodType,\n          body: form\n        };\n      } else {\n        url = sendURL + '?'; // GETのURLを作ってくれるらしい\n\n        const params = new URLSearchParams(); // MicrosoftEdgeは未対応のための処置(対策になっていない)\n\n        if (form.keys !== undefined) {\n          for (let a of form.keys()) {\n            params.set(a, form.get(a));\n          }\n        }\n\n        url += params;\n        sendStruct = {\n          method: methodType\n        };\n      }\n\n      fetch(url, sendStruct).then(checkStatus).then(parseJSON).then(function (json) {\n        resolve(json);\n      }).catch(function (error) {\n        reject(error);\n      });\n    } else {\n      // Fetch API未対応時の処理\n      let xhr = new XMLHttpRequest();\n      xhr.open('POST', sendURL, true);\n      xhr.addEventListener('load', function () {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n          resolve(xhr.response);\n        }\n      });\n      xhr.addEventListener('error', function (error) {\n        reject(error);\n      });\n      xhr.addEventListener('timeout', function () {\n        reject('connection timeout');\n      });\n      xhr.timeout = 30000;\n      xhr.send(form);\n    }\n  });\n}\n/**\n * ランダムワード取得\n *\n * @async\n * @returns {Promise}   終了コード\n * @since   1.0.0\n * @version 1.0.2\n */\n\n\nasync function getrandomWord() {\n  return new Promise(function (resolve, reject) {\n    SendAjax('../json/randomWord.json', new FormData(), 'GET').then(function (json) {\n      // console.log(json);\n      resolve(json);\n    }).catch(function (error) {\n      console.error('request failed', error); // document.getElementById('errors').appendChild(document.createTextNode(event.toString));\n\n      reject(error);\n    });\n  });\n} // --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n// Task\n\n/**\n * Worker Task\n */\n\n\nself.addEventListener('message', async function (event) {\n  console.log('Worker Task: Running task.'); // 送られてきたデータを格納\n\n  const temp = event.data;\n  await getrandomWord().then(function (json) {\n    randomWordList = json;\n  }).catch(function (error) {\n    console.error(error);\n  });\n  let listCount = 0;\n\n  switch (temp.mode) {\n    case 'createRandList':\n      console.log('Worker Task: Create Random Word List');\n\n      for (let dataTemp of randomWordList) {\n        let tagText = '';\n        let TagSQL = '';\n\n        for (let searchTag of dataTemp.tags) {\n          if (!randomWordTags.includes(searchTag, 0)) {\n            randomWordTags.push(searchTag);\n          }\n\n          tagText += '<li><a data-tag=\"' + searchTag + '\">' + searchTag + '</a></li>';\n          TagSQL += '\"' + searchTag + '\", ';\n        }\n\n        TagSQL = TagSQL.slice(0, TagSQL.length - 2);\n        sendList = {\n          'mode': 'listResult',\n          'post': '<dt id=\"wordID' + ++listCount + '\"><h3>' + dataTemp.title + '</h3><h4>出典: ' + dataTemp.original + '</h4></dt><dd>' + dataTemp.summary + '<div class=\"boxTag\"><ul class=\"tagList\">' + tagText + '</ul></div></dd>' // 'SQL': 'INSERT INTO `random_word` (`title`, `original`, `summary`, `tag`) VALUES (\\'' + dataTemp.title.replace('\\'', '\\\\\\'') + '\\', \\'' + dataTemp.original.replace('\\'', '\\\\\\'') + '\\', \\'' + dataTemp.summary.replace('\\'', '\\\\\\'') + '\\', \\'' + TagSQL.replace('\\'', '\\\\\\'') + '\\');'\n\n        };\n        postMessage(sendList); // console.log(sendList.SQL);\n      } // タグリストの生成\n\n\n      randomWordTags.sort();\n      console.log(randomWordTags);\n      sendList = {\n        'mode': 'tagList',\n        'post': randomWordTags\n      };\n      postMessage(sendList);\n      break;\n\n    default:\n      console.log('Worker Task: Task mode \"' + temp.mode + '\" is not found.');\n      break;\n  }\n});\nconsole.log('Worker task is now running.');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./HTML Manual Repository/public/js/WorkerTask.js\n");

/***/ }),

/***/ "./HTML Manual Repository/public/js/WorkerTask.min.js":
/*!************************************************************!*\
  !*** ./HTML Manual Repository/public/js/WorkerTask.min.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("let randomWordList,\n    sendList,\n    randomWordTags = [];\n\nfunction checkStatus(e) {\n  if (e.status >= 200 && e.status < 300) return e;\n  {\n    let t = new Error(e.statusText);\n    throw t.response = e, t;\n  }\n}\n\nfunction parseJSON(e) {\n  return e.json();\n}\n\nfunction SendAjax(e, t, o) {\n  return new Promise(function (n, s) {\n    if (self.fetch) {\n      let r, a;\n      if (\"POST\" === o || \"post\" === o) a = e, r = {\n        method: o,\n        body: t\n      };else {\n        a = e + \"?\";\n        const n = new URLSearchParams();\n        if (void 0 !== t.keys) for (let e of t.keys()) n.set(e, t.get(e));\n        a += n, r = {\n          method: o\n        };\n      }\n      fetch(a, r).then(checkStatus).then(parseJSON).then(function (e) {\n        n(e);\n      }).catch(function (e) {\n        s(e);\n      });\n    } else {\n      let o = new XMLHttpRequest();\n      o.open(\"POST\", e, !0), o.addEventListener(\"load\", function () {\n        4 === o.readyState && 200 === o.status && n(o.response);\n      }), o.addEventListener(\"error\", function (e) {\n        s(e);\n      }), o.addEventListener(\"timeout\", function () {\n        s(\"connection timeout\");\n      }), o.timeout = 3e4, o.send(t);\n    }\n  });\n}\n\nasync function getrandomWord() {\n  return new Promise(function (e, t) {\n    SendAjax(\"../json/randomWord.json\", new FormData(), \"GET\").then(function (t) {\n      e(t);\n    }).catch(function (e) {\n      console.error(\"request failed\", e), t(e);\n    });\n  });\n}\n\nself.addEventListener(\"message\", async function (e) {\n  console.log(\"Worker Task: Running task.\");\n  const t = e.data;\n  await getrandomWord().then(function (e) {\n    randomWordList = e;\n  }).catch(function (e) {\n    console.error(e);\n  });\n  let o = 0;\n\n  switch (t.mode) {\n    case \"createRandList\":\n      console.log(\"Worker Task: Create Random Word List\");\n\n      for (let e of randomWordList) {\n        let t = \"\",\n            n = \"\";\n\n        for (let o of e.tags) randomWordTags.includes(o, 0) || randomWordTags.push(o), t += '<li><a data-tag=\"' + o + '\">' + o + \"</a></li>\", n += '\"' + o + '\", ';\n\n        n = n.slice(0, n.length - 2), sendList = {\n          mode: \"listResult\",\n          post: '<dt id=\"wordID' + ++o + '\"><h3>' + e.title + \"</h3><h4>出典: \" + e.original + \"</h4></dt><dd>\" + e.summary + '<div class=\"boxTag\"><ul class=\"tagList\">' + t + \"</ul></div></dd>\"\n        }, postMessage(sendList);\n      }\n\n      randomWordTags.sort(), console.log(randomWordTags), sendList = {\n        mode: \"tagList\",\n        post: randomWordTags\n      }, postMessage(sendList);\n      break;\n\n    default:\n      console.log('Worker Task: Task mode \"' + t.mode + '\" is not found.');\n  }\n}), console.log(\"Worker task is now running.\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./HTML Manual Repository/public/js/WorkerTask.min.js\n");

/***/ }),

/***/ "./HTML Manual Repository/public/js/ajax-response.js":
/*!***********************************************************!*\
  !*** ./HTML Manual Repository/public/js/ajax-response.js ***!
  \***********************************************************/
/*! exports provided: SendAjax */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SendAjax\", function() { return SendAjax; });\n/**\n * @fileoverview Ajaxレスポンス取得処理に使用するAjax\n *\n * @module  ajax-response\n * @since   1.0.0\n * @version 1.0.2\n */\n// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n// Function\n\n/**\n * HTTPステータスコードの確認\n *\n * @param   {Response}          response    レスポンスデータ\n * @returns {Response|Error}                HTTPステータスコードが200番台ならレスポンスデータ、そうでなければエラー\n * @since   1.0.0\n * @version 1.0.2\n */\nfunction checkStatus(response) {\n  // HTTPステータスコードが200番台ではない場合\n  // 類似方法にresponse.okがあるが大部分のブラウザが非対応なので非推奨\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  } else {\n    let error = new Error(response.statusText);\n    error.response = response;\n    throw error;\n  }\n}\n/**\n * JSONデータの切り出し\n *\n * @param   {Response}  response    レスポンスデータ\n * @returns {JSON}                  レスポンスに格納されているJSONデータ\n * @since   1.0.0\n * @version 1.0.2\n */\n\n\nfunction parseJSON(response) {\n  // console.log(response);\n  return response.json();\n} // --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n// Export Function\n\n/**\n * Ajax転送処理\n *\n * @param   {string}                        sendURL             転送先URL\n * @param   {FormData}                      [form]              転送するForm Data(無くても問題ない)\n * @param   {string}                        [methodType='POST'] 転送メソッド\n * @returns {Promise.JSON|Promise.Error}                        JSONデータもしくはエラー内容\n * @since   1.0.0\n * @version 1.0.2\n */\n\n\nfunction SendAjax(sendURL, form, methodType) {\n  return new Promise(function (resolve, reject) {\n    if (self.fetch) {\n      let sendStruct;\n      let url; // POSTとGETでは転送処理が異なるのでここで処理を行う\n\n      if (methodType === 'POST' || methodType === 'post') {\n        url = sendURL;\n        sendStruct = {\n          method: methodType,\n          body: form\n        };\n      } else {\n        url = sendURL + '?'; // GETのURLを作ってくれるらしい\n\n        const params = new URLSearchParams(); // MicrosoftEdgeは未対応のための処置(対策になっていない)\n\n        if (form.keys !== undefined) {\n          for (let a of form.keys()) {\n            params.set(a, form.get(a));\n          }\n        }\n\n        url += params;\n        sendStruct = {\n          method: methodType\n        };\n      }\n\n      fetch(url, sendStruct).then(checkStatus).then(parseJSON).then(function (json) {\n        resolve(json);\n      }).catch(function (error) {\n        reject(error);\n      });\n    } else {\n      // Fetch API未対応時の処理\n      let xhr = new XMLHttpRequest();\n      xhr.open(methodType, sendURL, true);\n      xhr.addEventListener('load', function () {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n          resolve(xhr.response);\n        }\n      });\n      xhr.addEventListener('error', function (error) {\n        reject(error);\n      });\n      xhr.addEventListener('timeout', function () {\n        reject('connection timeout');\n      });\n      xhr.timeout = 30000;\n      xhr.send(form);\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9IVE1MIE1hbnVhbCBSZXBvc2l0b3J5L3B1YmxpYy9qcy9hamF4LXJlc3BvbnNlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vSFRNTCBNYW51YWwgUmVwb3NpdG9yeS9wdWJsaWMvanMvYWpheC1yZXNwb25zZS5qcz82NTFiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBBamF444Os44K544Od44Oz44K55Y+W5b6X5Yem55CG44Gr5L2/55So44GZ44KLQWpheFxuICpcbiAqIEBtb2R1bGUgIGFqYXgtcmVzcG9uc2VcbiAqIEBzaW5jZSAgIDEuMC4wXG4gKiBAdmVyc2lvbiAxLjAuMlxuICovXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBGdW5jdGlvblxuXG4vKipcbiAqIEhUVFDjgrnjg4bjg7zjgr/jgrnjgrPjg7zjg4njga7norroqo1cbiAqXG4gKiBAcGFyYW0gICB7UmVzcG9uc2V9ICAgICAgICAgIHJlc3BvbnNlICAgIOODrOOCueODneODs+OCueODh+ODvOOCv1xuICogQHJldHVybnMge1Jlc3BvbnNlfEVycm9yfSAgICAgICAgICAgICAgICBIVFRQ44K544OG44O844K/44K544Kz44O844OJ44GMMjAw55Wq5Y+w44Gq44KJ44Os44K544Od44Oz44K544OH44O844K/44CB44Gd44GG44Gn44Gq44GR44KM44Gw44Ko44Op44O8XG4gKiBAc2luY2UgICAxLjAuMFxuICogQHZlcnNpb24gMS4wLjJcbiAqL1xuZnVuY3Rpb24gY2hlY2tTdGF0dXMocmVzcG9uc2UpIHtcblx0Ly8gSFRUUOOCueODhuODvOOCv+OCueOCs+ODvOODieOBjDIwMOeVquWPsOOBp+OBr+OBquOBhOWgtOWQiFxuXHQvLyDpoZ7kvLzmlrnms5XjgatyZXNwb25zZS5va+OBjOOBguOCi+OBjOWkp+mDqOWIhuOBruODluODqeOCpuOCtuOBjOmdnuWvvuW/nOOBquOBruOBp+mdnuaOqOWlqFxuXHRpZiAocmVzcG9uc2Uuc3RhdHVzID49IDIwMCAmJiByZXNwb25zZS5zdGF0dXMgPCAzMDApIHtcblx0XHRyZXR1cm4gcmVzcG9uc2U7XG5cdH0gZWxzZSB7XG5cdFx0bGV0IGVycm9yID0gbmV3IEVycm9yKHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuXHRcdGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH1cbn1cblxuLyoqXG4gKiBKU09O44OH44O844K/44Gu5YiH44KK5Ye644GXXG4gKlxuICogQHBhcmFtICAge1Jlc3BvbnNlfSAgcmVzcG9uc2UgICAg44Os44K544Od44Oz44K544OH44O844K/XG4gKiBAcmV0dXJucyB7SlNPTn0gICAgICAgICAgICAgICAgICDjg6zjgrnjg53jg7PjgrnjgavmoLzntI3jgZXjgozjgabjgYTjgotKU09O44OH44O844K/XG4gKiBAc2luY2UgICAxLjAuMFxuICogQHZlcnNpb24gMS4wLjJcbiAqL1xuZnVuY3Rpb24gcGFyc2VKU09OKHJlc3BvbnNlKSB7XG5cdC8vIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcblx0cmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEV4cG9ydCBGdW5jdGlvblxuXG4vKipcbiAqIEFqYXjou6LpgIHlh6bnkIZcbiAqXG4gKiBAcGFyYW0gICB7c3RyaW5nfSAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRVUkwgICAgICAgICAgICAg6Lui6YCB5YWIVVJMXG4gKiBAcGFyYW0gICB7Rm9ybURhdGF9ICAgICAgICAgICAgICAgICAgICAgIFtmb3JtXSAgICAgICAgICAgICAg6Lui6YCB44GZ44KLRm9ybSBEYXRhKOeEoeOBj+OBpuOCguWVj+mhjOOBquOBhClcbiAqIEBwYXJhbSAgIHtzdHJpbmd9ICAgICAgICAgICAgICAgICAgICAgICAgW21ldGhvZFR5cGU9J1BPU1QnXSDou6LpgIHjg6Hjgr3jg4Pjg4lcbiAqIEByZXR1cm5zIHtQcm9taXNlLkpTT058UHJvbWlzZS5FcnJvcn0gICAgICAgICAgICAgICAgICAgICAgICBKU09O44OH44O844K/44KC44GX44GP44Gv44Ko44Op44O85YaF5a65XG4gKiBAc2luY2UgICAxLjAuMFxuICogQHZlcnNpb24gMS4wLjJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFNlbmRBamF4KHNlbmRVUkwsIGZvcm0sIG1ldGhvZFR5cGUpIHtcblx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0XHRpZiAoc2VsZi5mZXRjaCkge1xuXHRcdFx0bGV0IHNlbmRTdHJ1Y3Q7XG5cdFx0XHRsZXQgdXJsO1xuXG5cdFx0XHQvLyBQT1NU44GoR0VU44Gn44Gv6Lui6YCB5Yem55CG44GM55Ww44Gq44KL44Gu44Gn44GT44GT44Gn5Yem55CG44KS6KGM44GGXG5cdFx0XHRpZiAobWV0aG9kVHlwZSA9PT0gJ1BPU1QnIHx8IG1ldGhvZFR5cGUgPT09ICdwb3N0Jykge1xuXHRcdFx0XHR1cmwgPSBzZW5kVVJMO1xuXHRcdFx0XHRzZW5kU3RydWN0ID0ge1xuXHRcdFx0XHRcdG1ldGhvZDogbWV0aG9kVHlwZSxcblx0XHRcdFx0XHRib2R5OiAgIGZvcm1cblx0XHRcdFx0fTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHVybCA9IHNlbmRVUkwgKyAnPyc7XG5cblx0XHRcdFx0Ly8gR0VU44GuVVJM44KS5L2c44Gj44Gm44GP44KM44KL44KJ44GX44GEXG5cdFx0XHRcdGNvbnN0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcblx0XHRcdFx0Ly8gTWljcm9zb2Z0RWRnZeOBr+acquWvvuW/nOOBruOBn+OCgeOBruWHpue9rijlr77nrZbjgavjgarjgaPjgabjgYTjgarjgYQpXG5cdFx0XHRcdGlmIChmb3JtLmtleXMgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdGZvciAobGV0IGEgb2YgZm9ybS5rZXlzKCkpIHtcblx0XHRcdFx0XHRcdHBhcmFtcy5zZXQoYSwgZm9ybS5nZXQoYSkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHR1cmwgKz0gcGFyYW1zO1xuXHRcdFx0XHRzZW5kU3RydWN0ID0ge1xuXHRcdFx0XHRcdG1ldGhvZDogbWV0aG9kVHlwZSxcblx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0ZmV0Y2godXJsLCBzZW5kU3RydWN0KVxuXHRcdFx0XHQudGhlbihjaGVja1N0YXR1cylcblx0XHRcdFx0LnRoZW4ocGFyc2VKU09OKVxuXHRcdFx0XHQudGhlbihmdW5jdGlvbiAoanNvbikge1xuXHRcdFx0XHRcdHJlc29sdmUoanNvbik7XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcblx0XHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gRmV0Y2ggQVBJ5pyq5a++5b+c5pmC44Gu5Yem55CGXG5cdFx0XHRsZXQgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cdFx0XHR4aHIub3BlbihtZXRob2RUeXBlLCBzZW5kVVJMLCB0cnVlKTtcblx0XHRcdHhoci5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQgJiYgeGhyLnN0YXR1cyA9PT0gMjAwKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZSh4aHIucmVzcG9uc2UpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0eGhyLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZnVuY3Rpb24gKGVycm9yKSB7XG5cdFx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0XHR9KTtcblxuXHRcdFx0eGhyLmFkZEV2ZW50TGlzdGVuZXIoJ3RpbWVvdXQnLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHJlamVjdCgnY29ubmVjdGlvbiB0aW1lb3V0Jyk7XG5cdFx0XHR9KTtcblxuXHRcdFx0eGhyLnRpbWVvdXQgPSAzMDAwMDtcblx0XHRcdHhoci5zZW5kKGZvcm0pO1xuXHRcdH1cblx0fSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTs7Ozs7OztBQVFBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7Ozs7OztBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7QUFVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./HTML Manual Repository/public/js/ajax-response.js\n");

/***/ }),

/***/ "./HTML Manual Repository/public/js/ajax-response.min.js":
/*!***************************************************************!*\
  !*** ./HTML Manual Repository/public/js/ajax-response.min.js ***!
  \***************************************************************/
/*! exports provided: SendAjax */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SendAjax\", function() { return SendAjax; });\nfunction checkStatus(e) {\n  if (e.status >= 200 && e.status < 300) return e;\n  {\n    let t = new Error(e.statusText);\n    throw t.response = e, t;\n  }\n}\n\nfunction parseJSON(e) {\n  return e.json();\n}\n\nfunction SendAjax(e, t, n) {\n  return new Promise(function (o, s) {\n    if (self.fetch) {\n      let r, i;\n      if (\"POST\" === n || \"post\" === n) i = e, r = {\n        method: n,\n        body: t\n      };else {\n        i = e + \"?\";\n        const o = new URLSearchParams();\n        if (void 0 !== t.keys) for (let e of t.keys()) o.set(e, t.get(e));\n        i += o, r = {\n          method: n\n        };\n      }\n      fetch(i, r).then(checkStatus).then(parseJSON).then(function (e) {\n        o(e);\n      }).catch(function (e) {\n        s(e);\n      });\n    } else {\n      let r = new XMLHttpRequest();\n      r.open(n, e, !0), r.addEventListener(\"load\", function () {\n        4 === r.readyState && 200 === r.status && o(r.response);\n      }), r.addEventListener(\"error\", function (e) {\n        s(e);\n      }), r.addEventListener(\"timeout\", function () {\n        s(\"connection timeout\");\n      }), r.timeout = 3e4, r.send(t);\n    }\n  });\n}\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9IVE1MIE1hbnVhbCBSZXBvc2l0b3J5L3B1YmxpYy9qcy9hamF4LXJlc3BvbnNlLm1pbi5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9hamF4LXJlc3BvbnNlLmpzP2JiOWMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEFqYXjjg6zjgrnjg53jg7Pjgrnlj5blvpflh6bnkIbjgavkvb/nlKjjgZnjgotBamF4XG4gKlxuICogQG1vZHVsZSAgYWpheC1yZXNwb25zZVxuICogQHNpbmNlICAgMS4wLjBcbiAqIEB2ZXJzaW9uIDEuMC4yXG4gKi9cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEZ1bmN0aW9uXG5cbi8qKlxuICogSFRUUOOCueODhuODvOOCv+OCueOCs+ODvOODieOBrueiuuiqjVxuICpcbiAqIEBwYXJhbSAgIHtSZXNwb25zZX0gICAgICAgICAgcmVzcG9uc2UgICAg44Os44K544Od44Oz44K544OH44O844K/XG4gKiBAcmV0dXJucyB7UmVzcG9uc2V8RXJyb3J9ICAgICAgICAgICAgICAgIEhUVFDjgrnjg4bjg7zjgr/jgrnjgrPjg7zjg4njgYwyMDDnlarlj7Djgarjgonjg6zjgrnjg53jg7Pjgrnjg4fjg7zjgr/jgIHjgZ3jgYbjgafjgarjgZHjgozjgbDjgqjjg6njg7xcbiAqIEBzaW5jZSAgIDEuMC4wXG4gKiBAdmVyc2lvbiAxLjAuMlxuICovXG5mdW5jdGlvbiBjaGVja1N0YXR1cyhyZXNwb25zZSkge1xuXHQvLyBIVFRQ44K544OG44O844K/44K544Kz44O844OJ44GMMjAw55Wq5Y+w44Gn44Gv44Gq44GE5aC05ZCIXG5cdC8vIOmhnuS8vOaWueazleOBq3Jlc3BvbnNlLm9r44GM44GC44KL44GM5aSn6YOo5YiG44Gu44OW44Op44Km44K244GM6Z2e5a++5b+c44Gq44Gu44Gn6Z2e5o6o5aWoXG5cdGlmIChyZXNwb25zZS5zdGF0dXMgPj0gMjAwICYmIHJlc3BvbnNlLnN0YXR1cyA8IDMwMCkge1xuXHRcdHJldHVybiByZXNwb25zZTtcblx0fSBlbHNlIHtcblx0XHRsZXQgZXJyb3IgPSBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG5cdFx0ZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcblx0XHR0aHJvdyBlcnJvcjtcblx0fVxufVxuXG4vKipcbiAqIEpTT07jg4fjg7zjgr/jga7liIfjgorlh7rjgZdcbiAqXG4gKiBAcGFyYW0gICB7UmVzcG9uc2V9ICByZXNwb25zZSAgICDjg6zjgrnjg53jg7Pjgrnjg4fjg7zjgr9cbiAqIEByZXR1cm5zIHtKU09OfSAgICAgICAgICAgICAgICAgIOODrOOCueODneODs+OCueOBq+agvOe0jeOBleOCjOOBpuOBhOOCi0pTT07jg4fjg7zjgr9cbiAqIEBzaW5jZSAgIDEuMC4wXG4gKiBAdmVyc2lvbiAxLjAuMlxuICovXG5mdW5jdGlvbiBwYXJzZUpTT04ocmVzcG9uc2UpIHtcblx0Ly8gY29uc29sZS5sb2cocmVzcG9uc2UpO1xuXHRyZXR1cm4gcmVzcG9uc2UuanNvbigpO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gRXhwb3J0IEZ1bmN0aW9uXG5cbi8qKlxuICogQWpheOi7oumAgeWHpueQhlxuICpcbiAqIEBwYXJhbSAgIHtzdHJpbmd9ICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFVSTCAgICAgICAgICAgICDou6LpgIHlhYhVUkxcbiAqIEBwYXJhbSAgIHtGb3JtRGF0YX0gICAgICAgICAgICAgICAgICAgICAgW2Zvcm1dICAgICAgICAgICAgICDou6LpgIHjgZnjgotGb3JtIERhdGEo54Sh44GP44Gm44KC5ZWP6aGM44Gq44GEKVxuICogQHBhcmFtICAge3N0cmluZ30gICAgICAgICAgICAgICAgICAgICAgICBbbWV0aG9kVHlwZT0nUE9TVCddIOi7oumAgeODoeOCveODg+ODiVxuICogQHJldHVybnMge1Byb21pc2UuSlNPTnxQcm9taXNlLkVycm9yfSAgICAgICAgICAgICAgICAgICAgICAgIEpTT07jg4fjg7zjgr/jgoLjgZfjgY/jga/jgqjjg6njg7zlhoXlrrlcbiAqIEBzaW5jZSAgIDEuMC4wXG4gKiBAdmVyc2lvbiAxLjAuMlxuICovXG5leHBvcnQgZnVuY3Rpb24gU2VuZEFqYXgoc2VuZFVSTCwgZm9ybSwgbWV0aG9kVHlwZSkge1xuXHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdGlmIChzZWxmLmZldGNoKSB7XG5cdFx0XHRsZXQgc2VuZFN0cnVjdDtcblx0XHRcdGxldCB1cmw7XG5cblx0XHRcdC8vIFBPU1TjgahHRVTjgafjga/ou6LpgIHlh6bnkIbjgYznlbDjgarjgovjga7jgafjgZPjgZPjgaflh6bnkIbjgpLooYzjgYZcblx0XHRcdGlmIChtZXRob2RUeXBlID09PSAnUE9TVCcgfHwgbWV0aG9kVHlwZSA9PT0gJ3Bvc3QnKSB7XG5cdFx0XHRcdHVybCA9IHNlbmRVUkw7XG5cdFx0XHRcdHNlbmRTdHJ1Y3QgPSB7XG5cdFx0XHRcdFx0bWV0aG9kOiBtZXRob2RUeXBlLFxuXHRcdFx0XHRcdGJvZHk6ICAgZm9ybVxuXHRcdFx0XHR9O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dXJsID0gc2VuZFVSTCArICc/JztcblxuXHRcdFx0XHQvLyBHRVTjga5VUkzjgpLkvZzjgaPjgabjgY/jgozjgovjgonjgZfjgYRcblx0XHRcdFx0Y29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuXHRcdFx0XHQvLyBNaWNyb3NvZnRFZGdl44Gv5pyq5a++5b+c44Gu44Gf44KB44Gu5Yem572uKOWvvuetluOBq+OBquOBo+OBpuOBhOOBquOBhClcblx0XHRcdFx0aWYgKGZvcm0ua2V5cyAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0Zm9yIChsZXQgYSBvZiBmb3JtLmtleXMoKSkge1xuXHRcdFx0XHRcdFx0cGFyYW1zLnNldChhLCBmb3JtLmdldChhKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHVybCArPSBwYXJhbXM7XG5cdFx0XHRcdHNlbmRTdHJ1Y3QgPSB7XG5cdFx0XHRcdFx0bWV0aG9kOiBtZXRob2RUeXBlLFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRmZXRjaCh1cmwsIHNlbmRTdHJ1Y3QpXG5cdFx0XHRcdC50aGVuKGNoZWNrU3RhdHVzKVxuXHRcdFx0XHQudGhlbihwYXJzZUpTT04pXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uIChqc29uKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZShqc29uKTtcblx0XHRcdFx0fSlcblx0XHRcdFx0LmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuXHRcdFx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBGZXRjaCBBUEnmnKrlr77lv5zmmYLjga7lh6bnkIZcblx0XHRcdGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblx0XHRcdHhoci5vcGVuKG1ldGhvZFR5cGUsIHNlbmRVUkwsIHRydWUpO1xuXHRcdFx0eGhyLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCAmJiB4aHIuc3RhdHVzID09PSAyMDApIHtcblx0XHRcdFx0XHRyZXNvbHZlKHhoci5yZXNwb25zZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHR4aHIuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBmdW5jdGlvbiAoZXJyb3IpIHtcblx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdH0pO1xuXG5cdFx0XHR4aHIuYWRkRXZlbnRMaXN0ZW5lcigndGltZW91dCcsIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0cmVqZWN0KCdjb25uZWN0aW9uIHRpbWVvdXQnKTtcblx0XHRcdH0pO1xuXG5cdFx0XHR4aHIudGltZW91dCA9IDMwMDAwO1xuXHRcdFx0eGhyLnNlbmQoZm9ybSk7XG5cdFx0fVxuXHR9KTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBbUJBO0FBQUE7QUFBQTtBQUdBO0FBRUE7QUFDQTtBQUVBO0FBQUE7QUFZQTtBQUNBO0FBREE7QUFFQTtBQUFBO0FBQ0E7QUFEQTtBQWlCQTtBQUNBO0FBQ0E7QUFJQTtBQUdBO0FBQ0E7QUFGQTtBQUtBO0FBR0E7QUFFQTtBQUtBO0FBRUE7QUFEQTtBQUtBO0FBQUE7QUFJQTtBQUFBO0FBR0E7QUFBQTtBQUFBO0FBSUE7QUFDQTtBQUVBO0FBQ0E7QUFLQTtBQUFBO0FBSUE7QUFBQTtBQUlBO0FBQUE7QUFBQTtBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./HTML Manual Repository/public/js/ajax-response.min.js\n");

/***/ }),

/***/ "./HTML Manual Repository/public/js/common.js":
/*!****************************************************!*\
  !*** ./HTML Manual Repository/public/js/common.js ***!
  \****************************************************/
/*! exports provided: Popup, IndexedDBConnecter, storageAvailable, date_days */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Popup\", function() { return Popup; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IndexedDBConnecter\", function() { return IndexedDBConnecter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"storageAvailable\", function() { return storageAvailable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"date_days\", function() { return date_days; });\n/**\n * @file マニュアル用コモンJavaScript\n *\n * @module  manual-common\n * @since   1.0.0\n * @version 1.0.1\n */\n// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n// Initialize\n// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n// Export Class\n\n/**\n * ポップアップクラス\n *\n * @type    {class}\n * @since   1.0.1\n * @version 1.0.1\n */\nclass Popup {\n  /**\n   * コンストラクタメソッド\n   *\n   * @constructs\n   * @param {string}  name    Name\n   */\n  constructor(name) {\n    /**\n     * ポップアップ表示ID\n     * @type {string}\n     */\n    this.name = 'popup_' + name;\n    let nodeBody = document.body;\n    const div = document.createElement('div');\n    div.setAttribute('id', this.name);\n    div.style.position = 'absolute';\n    nodeBody.insertBefore(div, document.querySelector('header'));\n  }\n\n  show(text, top, left) {\n    const div = document.getElementById(this.name);\n    div.style.display = 'block';\n    div.style.top = top;\n    div.style.left = left;\n    div.textContent = text;\n  }\n\n  move(top, left) {\n    const div = document.getElementById(this.name);\n    div.style.top = top;\n    div.style.left = left;\n  }\n\n  hide() {\n    const div = document.getElementById(this.name);\n    div.style.display = 'none';\n    div.textContent = '';\n  }\n\n}\n/**\n * IndexedDBコネクター\n *\n * @type    {class}\n * @since   1.1.0\n * @version 1.1.0\n */\n\nclass IndexedDBConnecter {\n  /**\n   * コンストラクタメソッド\n   *\n   * @constructs\n   * @param   {string}    dbName      Database Name\n   * @param   {number}    dbVersion   Database Version\n   * @returns {boolean}               接続判定\n   */\n  constructor(dbName, dbVersion) {\n    /**\n     * データベースの接続先テーブル\n     * @type {string}\n     */\n    this.dbTable = '';\n\n    if (!window.indexedDB) {\n      console.warn('このブラウザーは安定版の IndexedDB をサポートしていません。IndexedDB の機能は利用できません。');\n      return false;\n    } else {\n      /**\n       * データベース名\n       * @type {string}\n       */\n      this.dbName = dbName;\n      /**\n       * データベースのバージョン\n       * @type {number}\n       */\n\n      this.dbVersion = dbVersion;\n      return true;\n    }\n  }\n  /**\n   * 初回接続処理\n   *\n   * @param   {Function}  func    更新処理に使う関数\n   * @returns {void}\n   */\n\n\n  initializeConnection(func) {\n    // データベースに接続\n    const dbSourse = indexedDB.open(this.dbName, this.dbVersion); // データベース更新処理\n    // 内容を細かく指定できるように外部関数から引っ張ってくる\n\n    dbSourse.addEventListener('upgradeneeded', func); // データベースを開いた時の処理。あくまでデータベースの作成だけなので処理はない\n\n    dbSourse.addEventListener('success', function (event) {\n      let db = event.target.result; // 接続を解除する\n\n      db.close();\n      return true;\n    });\n    dbSourse.addEventListener('error', function (event) {\n      // console.error('Database Connection Error: ' + event.target.errorCode);\n      return event.target.errorCode;\n    });\n  }\n  /**\n   * テーブルから値を参照\n   *\n   * @param   {object}    value   参照する値\n   * @returns {Promise}           出力結果\n   */\n\n\n  getValue(value) {\n    // Initialize\n    // 関数内ではthisが無効なので変数に吐き出す\n    const dbName = this.dbName;\n    const dbTable = this.dbTable;\n    return new Promise(function (resolve, reject) {\n      // データベースに接続\n      const dbSourse = indexedDB.open(dbName);\n      dbSourse.addEventListener('success', function (event) {\n        const db = event.target.result;\n        const trans = db.transaction(dbTable, 'readonly');\n        const store = trans.objectStore(dbTable);\n        const getReq = store.get(value);\n        getReq.addEventListener('success', function (event) {\n          // console.log(event.target.result);\n          resolve(event.target.result);\n        });\n        getReq.addEventListener('error', function (event) {\n          // console.error('Database Error: ' + event.target.errorCode);\n          reject(event.target.errorCode);\n        });\n      });\n      dbSourse.addEventListener('error', function (event) {\n        // console.error('Database Connection Error: ' + event.target.errorCode);\n        reject(event.target.errorCode);\n      });\n    });\n  }\n  /**\n   * テーブルに値を挿入\n   *\n   * 同じキーが既に存在する場合、値は更新されます\n   *\n   * @param   {object}    value   参照する値\n   * @returns {Promise}           出力結果\n   */\n\n\n  setValue(value) {\n    // Initialize\n    // 関数内ではthisが無効なので変数に吐き出す\n    const dbName = this.dbName;\n    const dbTable = this.dbTable;\n    return new Promise(function (resolve, reject) {\n      // データベースに接続\n      const dbSourse = indexedDB.open(dbName);\n      dbSourse.addEventListener('success', function (event) {\n        const db = event.target.result;\n        const trans = db.transaction(dbTable, 'readwrite');\n        const store = trans.objectStore(dbTable);\n        const putReq = store.put(value);\n        putReq.addEventListener('success', function () {// console.log('put data success');\n        });\n        putReq.addEventListener('error', function (event) {\n          // console.error('Database Error: ' + event.target.errorCode);\n          reject(event.target.errorCode);\n        });\n        trans.addEventListener('complete', function () {\n          // トランザクション完了時(putReq.onsuccessの後)に実行\n          // console.log('transaction complete');\n          resolve(true);\n        });\n      });\n      dbSourse.addEventListener('error', function (event) {\n        // console.error('Database Connection Error: ' + event.target.errorCode);\n        reject(event.target.errorCode);\n      });\n    });\n  }\n\n} // --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n// Export Function\n\n/**\n * ローカルストレージの環境が利用可能か調べる関数\n *\n * {@link https://developer.mozilla.org/ja/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API MDN}より参照\n *\n * @param   {string}    type    調べる項目\n * @returns {boolean}           利用可能かのbool\n * @since   1.0.1\n * @version 1.0.1\n */\n\nfunction storageAvailable(type) {\n  let storage = window[type];\n\n  try {\n    let x = '__storage_test__';\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return e instanceof DOMException && ( // everything except Firefox\n    e.code === 22 || // Firefox\n    e.code === 1014 || // test name field too, because code might not be present\n    // everything except Firefox\n    e.name === 'QuotaExceededError' || // Firefox\n    e.name === 'NS_ERROR_DOM_QUOTA_REACHED') && // acknowledge QuotaExceededError only if there's something already stored\n    storage.length !== 0;\n  }\n}\n/**\n * 日付の整合性を調べる\n *\n * @param   {string}    targetDate  対象の日付文字列\n * @returns {boolean}               整合性結果\n * @since   1.0.0\n * @version 1.0.1\n */\n\nfunction date_days(targetDate) {\n  // 空文字は問答無用でエラー\n  if (targetDate === '') {\n    return false;\n  } // Year/Month/Day もしくは Year-Month-Day の形式のみ許容する\n\n\n  if (targetDate.match(/^\\d{4}\\/\\d{1,2}\\/\\d{1,2}$/)) {\n    let date = new Date(targetDate);\n\n    if (date.getFullYear() !== Number(targetDate.split('/')[0]) || date.getMonth() !== Number(targetDate.split('/')[1] - 1) || date.getDate() !== Number(targetDate.split('/')[2])) {\n      return false;\n    }\n  } else if (targetDate.match(/^\\d{4}-\\d{1,2}-\\d{1,2}$/)) {\n    let date = new Date(targetDate);\n\n    if (date.getFullYear() !== Number(targetDate.split('-')[0]) || date.getMonth() !== Number(targetDate.split('-')[1] - 1) || date.getDate() !== Number(targetDate.split('-')[2])) {\n      return false;\n    }\n  }\n\n  return true;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9IVE1MIE1hbnVhbCBSZXBvc2l0b3J5L3B1YmxpYy9qcy9jb21tb24uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9IVE1MIE1hbnVhbCBSZXBvc2l0b3J5L3B1YmxpYy9qcy9jb21tb24uanM/NjE4MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIOODnuODi+ODpeOCouODq+eUqOOCs+ODouODs0phdmFTY3JpcHRcbiAqXG4gKiBAbW9kdWxlICBtYW51YWwtY29tbW9uXG4gKiBAc2luY2UgICAxLjAuMFxuICogQHZlcnNpb24gMS4wLjFcbiAqL1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSW5pdGlhbGl6ZVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gRXhwb3J0IENsYXNzXG5cbi8qKlxuICog44Od44OD44OX44Ki44OD44OX44Kv44Op44K5XG4gKlxuICogQHR5cGUgICAge2NsYXNzfVxuICogQHNpbmNlICAgMS4wLjFcbiAqIEB2ZXJzaW9uIDEuMC4xXG4gKi9cbmV4cG9ydCBjbGFzcyBQb3B1cCB7XG5cdC8qKlxuXHQgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr/jg6Hjgr3jg4Pjg4lcblx0ICpcblx0ICogQGNvbnN0cnVjdHNcblx0ICogQHBhcmFtIHtzdHJpbmd9ICBuYW1lICAgIE5hbWVcblx0ICovXG5cdGNvbnN0cnVjdG9yKG5hbWUpIHtcblx0XHQvKipcblx0XHQgKiDjg53jg4Pjg5fjgqLjg4Pjg5fooajnpLpJRFxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy5uYW1lID0gJ3BvcHVwXycgKyBuYW1lO1xuXG5cdFx0bGV0IG5vZGVCb2R5ID0gZG9jdW1lbnQuYm9keTtcblx0XHRjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0XHRkaXYuc2V0QXR0cmlidXRlKCdpZCcsIHRoaXMubmFtZSk7XG5cdFx0ZGl2LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcblxuXHRcdG5vZGVCb2R5Lmluc2VydEJlZm9yZShkaXYsIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWRlcicpKTtcblx0fVxuXG5cdHNob3codGV4dCwgdG9wLCBsZWZ0KSB7XG5cdFx0Y29uc3QgZGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5uYW1lKTtcblx0XHRkaXYuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG5cdFx0ZGl2LnN0eWxlLnRvcCA9IHRvcDtcblx0XHRkaXYuc3R5bGUubGVmdCA9IGxlZnQ7XG5cdFx0ZGl2LnRleHRDb250ZW50ID0gdGV4dDtcblx0fVxuXG5cdG1vdmUodG9wLCBsZWZ0KSB7XG5cdFx0Y29uc3QgZGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5uYW1lKTtcblx0XHRkaXYuc3R5bGUudG9wID0gdG9wO1xuXHRcdGRpdi5zdHlsZS5sZWZ0ID0gbGVmdDtcblx0fVxuXG5cdGhpZGUoKSB7XG5cdFx0Y29uc3QgZGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5uYW1lKTtcblx0XHRkaXYuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblx0XHRkaXYudGV4dENvbnRlbnQgPSAnJztcblx0fVxufVxuXG4vKipcbiAqIEluZGV4ZWREQuOCs+ODjeOCr+OCv+ODvFxuICpcbiAqIEB0eXBlICAgIHtjbGFzc31cbiAqIEBzaW5jZSAgIDEuMS4wXG4gKiBAdmVyc2lvbiAxLjEuMFxuICovXG5leHBvcnQgY2xhc3MgSW5kZXhlZERCQ29ubmVjdGVyIHtcblx0LyoqXG5cdCAqIOOCs+ODs+OCueODiOODqeOCr+OCv+ODoeOCveODg+ODiVxuXHQgKlxuXHQgKiBAY29uc3RydWN0c1xuXHQgKiBAcGFyYW0gICB7c3RyaW5nfSAgICBkYk5hbWUgICAgICBEYXRhYmFzZSBOYW1lXG5cdCAqIEBwYXJhbSAgIHtudW1iZXJ9ICAgIGRiVmVyc2lvbiAgIERhdGFiYXNlIFZlcnNpb25cblx0ICogQHJldHVybnMge2Jvb2xlYW59ICAgICAgICAgICAgICAg5o6l57aa5Yik5a6aXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihkYk5hbWUsIGRiVmVyc2lvbikge1xuXHRcdC8qKlxuXHRcdCAqIOODh+ODvOOCv+ODmeODvOOCueOBruaOpee2muWFiOODhuODvOODluODq1xuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy5kYlRhYmxlID0gJyc7XG5cblx0XHRpZiAoIXdpbmRvdy5pbmRleGVkREIpIHtcblx0XHRcdGNvbnNvbGUud2Fybign44GT44Gu44OW44Op44Km44K244O844Gv5a6J5a6a54mI44GuIEluZGV4ZWREQiDjgpLjgrXjg53jg7zjg4jjgZfjgabjgYTjgb7jgZvjgpPjgIJJbmRleGVkREIg44Gu5qmf6IO944Gv5Yip55So44Gn44GN44G+44Gb44KT44CCJyk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8qKlxuXHRcdFx0ICog44OH44O844K/44OZ44O844K55ZCNXG5cdFx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdFx0ICovXG5cdFx0XHR0aGlzLmRiTmFtZSA9IGRiTmFtZTtcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiDjg4fjg7zjgr/jg5njg7zjgrnjga7jg5Djg7zjgrjjg6fjg7Ncblx0XHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0XHQgKi9cblx0XHRcdHRoaXMuZGJWZXJzaW9uID0gZGJWZXJzaW9uO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIOWIneWbnuaOpee2muWHpueQhlxuXHQgKlxuXHQgKiBAcGFyYW0gICB7RnVuY3Rpb259ICBmdW5jICAgIOabtOaWsOWHpueQhuOBq+S9v+OBhumWouaVsFxuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG5cdGluaXRpYWxpemVDb25uZWN0aW9uKGZ1bmMpIHtcblx0XHQvLyDjg4fjg7zjgr/jg5njg7zjgrnjgavmjqXntppcblx0XHRjb25zdCBkYlNvdXJzZSA9IGluZGV4ZWREQi5vcGVuKHRoaXMuZGJOYW1lLCB0aGlzLmRiVmVyc2lvbik7XG5cblx0XHQvLyDjg4fjg7zjgr/jg5njg7zjgrnmm7TmlrDlh6bnkIZcblx0XHQvLyDlhoXlrrnjgpLntLDjgYvjgY/mjIflrprjgafjgY3jgovjgojjgYbjgavlpJbpg6jplqLmlbDjgYvjgonlvJXjgaPlvLXjgaPjgabjgY/jgotcblx0XHRkYlNvdXJzZS5hZGRFdmVudExpc3RlbmVyKCd1cGdyYWRlbmVlZGVkJywgZnVuYyk7XG5cblx0XHQvLyDjg4fjg7zjgr/jg5njg7zjgrnjgpLplovjgYTjgZ/mmYLjga7lh6bnkIbjgILjgYLjgY/jgb7jgafjg4fjg7zjgr/jg5njg7zjgrnjga7kvZzmiJDjgaDjgZHjgarjga7jgaflh6bnkIbjga/jgarjgYRcblx0XHRkYlNvdXJzZS5hZGRFdmVudExpc3RlbmVyKCdzdWNjZXNzJywgZnVuY3Rpb24gKGV2ZW50KSB7XG5cdFx0XHRsZXQgZGIgPSBldmVudC50YXJnZXQucmVzdWx0O1xuXHRcdFx0Ly8g5o6l57aa44KS6Kej6Zmk44GZ44KLXG5cdFx0XHRkYi5jbG9zZSgpO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSk7XG5cblx0XHRkYlNvdXJzZS5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGZ1bmN0aW9uIChldmVudCkge1xuXHRcdFx0Ly8gY29uc29sZS5lcnJvcignRGF0YWJhc2UgQ29ubmVjdGlvbiBFcnJvcjogJyArIGV2ZW50LnRhcmdldC5lcnJvckNvZGUpO1xuXHRcdFx0cmV0dXJuIGV2ZW50LnRhcmdldC5lcnJvckNvZGU7XG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICog44OG44O844OW44Or44GL44KJ5YCk44KS5Y+C54WnXG5cdCAqXG5cdCAqIEBwYXJhbSAgIHtvYmplY3R9ICAgIHZhbHVlICAg5Y+C54Wn44GZ44KL5YCkXG5cdCAqIEByZXR1cm5zIHtQcm9taXNlfSAgICAgICAgICAg5Ye65Yqb57WQ5p6cXG5cdCAqL1xuXHRnZXRWYWx1ZSh2YWx1ZSkge1xuXHRcdC8vIEluaXRpYWxpemVcblx0XHQvLyDplqLmlbDlhoXjgafjga90aGlz44GM54Sh5Yq544Gq44Gu44Gn5aSJ5pWw44Gr5ZCQ44GN5Ye644GZXG5cdFx0Y29uc3QgZGJOYW1lID0gdGhpcy5kYk5hbWU7XG5cdFx0Y29uc3QgZGJUYWJsZSA9IHRoaXMuZGJUYWJsZTtcblxuXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHQvLyDjg4fjg7zjgr/jg5njg7zjgrnjgavmjqXntppcblx0XHRcdGNvbnN0IGRiU291cnNlID0gaW5kZXhlZERCLm9wZW4oZGJOYW1lKTtcblxuXHRcdFx0ZGJTb3Vyc2UuYWRkRXZlbnRMaXN0ZW5lcignc3VjY2VzcycsIGZ1bmN0aW9uIChldmVudCkge1xuXHRcdFx0XHRjb25zdCBkYiA9IGV2ZW50LnRhcmdldC5yZXN1bHQ7XG5cdFx0XHRcdGNvbnN0IHRyYW5zID0gZGIudHJhbnNhY3Rpb24oZGJUYWJsZSwgJ3JlYWRvbmx5Jyk7XG5cdFx0XHRcdGNvbnN0IHN0b3JlID0gdHJhbnMub2JqZWN0U3RvcmUoZGJUYWJsZSk7XG5cdFx0XHRcdGNvbnN0IGdldFJlcSA9IHN0b3JlLmdldCh2YWx1ZSk7XG5cblx0XHRcdFx0Z2V0UmVxLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Y2Nlc3MnLCBmdW5jdGlvbiAoZXZlbnQpIHtcblx0XHRcdFx0XHQvLyBjb25zb2xlLmxvZyhldmVudC50YXJnZXQucmVzdWx0KTtcblx0XHRcdFx0XHRyZXNvbHZlKGV2ZW50LnRhcmdldC5yZXN1bHQpO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRnZXRSZXEuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBmdW5jdGlvbiAoZXZlbnQpIHtcblx0XHRcdFx0XHQvLyBjb25zb2xlLmVycm9yKCdEYXRhYmFzZSBFcnJvcjogJyArIGV2ZW50LnRhcmdldC5lcnJvckNvZGUpO1xuXHRcdFx0XHRcdHJlamVjdChldmVudC50YXJnZXQuZXJyb3JDb2RlKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblxuXHRcdFx0ZGJTb3Vyc2UuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBmdW5jdGlvbiAoZXZlbnQpIHtcblx0XHRcdFx0Ly8gY29uc29sZS5lcnJvcignRGF0YWJhc2UgQ29ubmVjdGlvbiBFcnJvcjogJyArIGV2ZW50LnRhcmdldC5lcnJvckNvZGUpO1xuXHRcdFx0XHRyZWplY3QoZXZlbnQudGFyZ2V0LmVycm9yQ29kZSk7XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fVxuXG5cblx0LyoqXG5cdCAqIOODhuODvOODluODq+OBq+WApOOCkuaMv+WFpVxuXHQgKlxuXHQgKiDlkIzjgZjjgq3jg7zjgYzml6LjgavlrZjlnKjjgZnjgovloLTlkIjjgIHlgKTjga/mm7TmlrDjgZXjgozjgb7jgZlcblx0ICpcblx0ICogQHBhcmFtICAge29iamVjdH0gICAgdmFsdWUgICDlj4LnhafjgZnjgovlgKRcblx0ICogQHJldHVybnMge1Byb21pc2V9ICAgICAgICAgICDlh7rlipvntZDmnpxcblx0ICovXG5cdHNldFZhbHVlKHZhbHVlKSB7XG5cdFx0Ly8gSW5pdGlhbGl6ZVxuXHRcdC8vIOmWouaVsOWGheOBp+OBr3RoaXPjgYznhKHlirnjgarjga7jgaflpInmlbDjgavlkJDjgY3lh7rjgZlcblx0XHRjb25zdCBkYk5hbWUgPSB0aGlzLmRiTmFtZTtcblx0XHRjb25zdCBkYlRhYmxlID0gdGhpcy5kYlRhYmxlO1xuXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdC8vIOODh+ODvOOCv+ODmeODvOOCueOBq+aOpee2mlxuXHRcdFx0Y29uc3QgZGJTb3Vyc2UgPSBpbmRleGVkREIub3BlbihkYk5hbWUpO1xuXG5cdFx0XHRkYlNvdXJzZS5hZGRFdmVudExpc3RlbmVyKCdzdWNjZXNzJywgZnVuY3Rpb24gKGV2ZW50KSB7XG5cdFx0XHRcdGNvbnN0IGRiID0gZXZlbnQudGFyZ2V0LnJlc3VsdDtcblx0XHRcdFx0Y29uc3QgdHJhbnMgPSBkYi50cmFuc2FjdGlvbihkYlRhYmxlLCAncmVhZHdyaXRlJyk7XG5cdFx0XHRcdGNvbnN0IHN0b3JlID0gdHJhbnMub2JqZWN0U3RvcmUoZGJUYWJsZSk7XG5cdFx0XHRcdGNvbnN0IHB1dFJlcSA9IHN0b3JlLnB1dCh2YWx1ZSk7XG5cblx0XHRcdFx0cHV0UmVxLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Y2Nlc3MnLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coJ3B1dCBkYXRhIHN1Y2Nlc3MnKTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0cHV0UmVxLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZnVuY3Rpb24gKGV2ZW50KSB7XG5cdFx0XHRcdFx0Ly8gY29uc29sZS5lcnJvcignRGF0YWJhc2UgRXJyb3I6ICcgKyBldmVudC50YXJnZXQuZXJyb3JDb2RlKTtcblx0XHRcdFx0XHRyZWplY3QoZXZlbnQudGFyZ2V0LmVycm9yQ29kZSk7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHRyYW5zLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBsZXRlJywgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdC8vIOODiOODqeODs+OCtuOCr+OCt+ODp+ODs+WujOS6huaZgihwdXRSZXEub25zdWNjZXNz44Gu5b6MKeOBq+Wun+ihjFxuXHRcdFx0XHRcdC8vIGNvbnNvbGUubG9nKCd0cmFuc2FjdGlvbiBjb21wbGV0ZScpO1xuXHRcdFx0XHRcdHJlc29sdmUodHJ1ZSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cblx0XHRcdGRiU291cnNlLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZnVuY3Rpb24gKGV2ZW50KSB7XG5cdFx0XHRcdC8vIGNvbnNvbGUuZXJyb3IoJ0RhdGFiYXNlIENvbm5lY3Rpb24gRXJyb3I6ICcgKyBldmVudC50YXJnZXQuZXJyb3JDb2RlKTtcblx0XHRcdFx0cmVqZWN0KGV2ZW50LnRhcmdldC5lcnJvckNvZGUpO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEV4cG9ydCBGdW5jdGlvblxuXG4vKipcbiAqIOODreODvOOCq+ODq+OCueODiOODrOODvOOCuOOBrueSsOWig+OBjOWIqeeUqOWPr+iDveOBi+iqv+OBueOCi+mWouaVsFxuICpcbiAqIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9qYS9kb2NzL1dlYi9BUEkvV2ViX1N0b3JhZ2VfQVBJL1VzaW5nX3RoZV9XZWJfU3RvcmFnZV9BUEkgTUROfeOCiOOCiuWPgueFp1xuICpcbiAqIEBwYXJhbSAgIHtzdHJpbmd9ICAgIHR5cGUgICAg6Kq/44G544KL6aCF55uuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gICAgICAgICAgIOWIqeeUqOWPr+iDveOBi+OBrmJvb2xcbiAqIEBzaW5jZSAgIDEuMC4xXG4gKiBAdmVyc2lvbiAxLjAuMVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RvcmFnZUF2YWlsYWJsZSh0eXBlKSB7XG5cdGxldCBzdG9yYWdlID0gd2luZG93W3R5cGVdO1xuXHR0cnkge1xuXHRcdGxldCB4ID0gJ19fc3RvcmFnZV90ZXN0X18nO1xuXHRcdHN0b3JhZ2Uuc2V0SXRlbSh4LCB4KTtcblx0XHRzdG9yYWdlLnJlbW92ZUl0ZW0oeCk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZSBpbnN0YW5jZW9mIERPTUV4Y2VwdGlvbiAmJiAoXG5cdFx0XHQvLyBldmVyeXRoaW5nIGV4Y2VwdCBGaXJlZm94XG5cdFx0XHRlLmNvZGUgPT09IDIyIHx8XG5cdFx0XHQvLyBGaXJlZm94XG5cdFx0XHRlLmNvZGUgPT09IDEwMTQgfHxcblx0XHRcdC8vIHRlc3QgbmFtZSBmaWVsZCB0b28sIGJlY2F1c2UgY29kZSBtaWdodCBub3QgYmUgcHJlc2VudFxuXHRcdFx0Ly8gZXZlcnl0aGluZyBleGNlcHQgRmlyZWZveFxuXHRcdFx0ZS5uYW1lID09PSAnUXVvdGFFeGNlZWRlZEVycm9yJyB8fFxuXHRcdFx0Ly8gRmlyZWZveFxuXHRcdFx0ZS5uYW1lID09PSAnTlNfRVJST1JfRE9NX1FVT1RBX1JFQUNIRUQnKSAmJlxuXHRcdFx0Ly8gYWNrbm93bGVkZ2UgUXVvdGFFeGNlZWRlZEVycm9yIG9ubHkgaWYgdGhlcmUncyBzb21ldGhpbmcgYWxyZWFkeSBzdG9yZWRcblx0XHRcdHN0b3JhZ2UubGVuZ3RoICE9PSAwO1xuXHR9XG59XG5cbi8qKlxuICog5pel5LuY44Gu5pW05ZCI5oCn44KS6Kq/44G544KLXG4gKlxuICogQHBhcmFtICAge3N0cmluZ30gICAgdGFyZ2V0RGF0ZSAg5a++6LGh44Gu5pel5LuY5paH5a2X5YiXXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gICAgICAgICAgICAgICDmlbTlkIjmgKfntZDmnpxcbiAqIEBzaW5jZSAgIDEuMC4wXG4gKiBAdmVyc2lvbiAxLjAuMVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGF0ZV9kYXlzKHRhcmdldERhdGUpIHtcblx0Ly8g56m65paH5a2X44Gv5ZWP562U54Sh55So44Gn44Ko44Op44O8XG5cdGlmICh0YXJnZXREYXRlID09PSAnJykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vIFllYXIvTW9udGgvRGF5IOOCguOBl+OBj+OBryBZZWFyLU1vbnRoLURheSDjga7lvaLlvI/jga7jgb/oqLHlrrnjgZnjgotcblx0aWYgKHRhcmdldERhdGUubWF0Y2goL15cXGR7NH1cXC9cXGR7MSwyfVxcL1xcZHsxLDJ9JC8pKSB7XG5cdFx0bGV0IGRhdGUgPSBuZXcgRGF0ZSh0YXJnZXREYXRlKTtcblx0XHRpZiAoZGF0ZS5nZXRGdWxsWWVhcigpICE9PSBOdW1iZXIodGFyZ2V0RGF0ZS5zcGxpdCgnLycpWzBdKSB8fCBkYXRlLmdldE1vbnRoKCkgIT09IE51bWJlcih0YXJnZXREYXRlLnNwbGl0KCcvJylbMV0gLSAxKSB8fCBkYXRlLmdldERhdGUoKSAhPT0gTnVtYmVyKHRhcmdldERhdGUuc3BsaXQoJy8nKVsyXSkpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH0gZWxzZSBpZiAodGFyZ2V0RGF0ZS5tYXRjaCgvXlxcZHs0fS1cXGR7MSwyfS1cXGR7MSwyfSQvKSkge1xuXHRcdGxldCBkYXRlID0gbmV3IERhdGUodGFyZ2V0RGF0ZSk7XG5cdFx0aWYgKGRhdGUuZ2V0RnVsbFllYXIoKSAhPT0gTnVtYmVyKHRhcmdldERhdGUuc3BsaXQoJy0nKVswXSkgfHwgZGF0ZS5nZXRNb250aCgpICE9PSBOdW1iZXIodGFyZ2V0RGF0ZS5zcGxpdCgnLScpWzFdIC0gMSkgfHwgZGF0ZS5nZXREYXRlKCkgIT09IE51bWJlcih0YXJnZXREYXRlLnNwbGl0KCctJylbMl0pKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRydWU7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7OztBQVFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQU9BO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7Ozs7QUFJQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXpDQTtBQTJDQTs7Ozs7Ozs7QUFPQTtBQUNBOzs7Ozs7OztBQVFBO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBRUE7Ozs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBOzs7Ozs7Ozs7O0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXRKQTtBQXlKQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FBVUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7OztBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./HTML Manual Repository/public/js/common.js\n");

/***/ }),

/***/ "./HTML Manual Repository/public/js/common.min.js":
/*!********************************************************!*\
  !*** ./HTML Manual Repository/public/js/common.min.js ***!
  \********************************************************/
/*! exports provided: Popup, IndexedDBConnecter, storageAvailable, date_days */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Popup\", function() { return Popup; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IndexedDBConnecter\", function() { return IndexedDBConnecter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"storageAvailable\", function() { return storageAvailable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"date_days\", function() { return date_days; });\nclass Popup {\n  constructor(e) {\n    this.name = \"popup_\" + e;\n    let t = document.body;\n    const n = document.createElement(\"div\");\n    n.setAttribute(\"id\", this.name), n.style.position = \"absolute\", t.insertBefore(n, document.querySelector(\"header\"));\n  }\n\n  show(e, t, n) {\n    const r = document.getElementById(this.name);\n    r.style.display = \"block\", r.style.top = t, r.style.left = n, r.textContent = e;\n  }\n\n  move(e, t) {\n    const n = document.getElementById(this.name);\n    n.style.top = e, n.style.left = t;\n  }\n\n  hide() {\n    const e = document.getElementById(this.name);\n    e.style.display = \"none\", e.textContent = \"\";\n  }\n\n}\n;\nclass IndexedDBConnecter {\n  constructor(e, t) {\n    return this.dbTable = \"\", window.indexedDB ? (this.dbName = e, this.dbVersion = t, !0) : (console.warn(\"このブラウザーは安定版の IndexedDB をサポートしていません。IndexedDB の機能は利用できません。\"), !1);\n  }\n\n  initializeConnection(e) {\n    const t = indexedDB.open(this.dbName, this.dbVersion);\n    t.addEventListener(\"upgradeneeded\", e), t.addEventListener(\"success\", function (e) {\n      return e.target.result.close(), !0;\n    }), t.addEventListener(\"error\", function (e) {\n      return e.target.errorCode;\n    });\n  }\n\n  getValue(e) {\n    const t = this.dbName,\n          n = this.dbTable;\n    return new Promise(function (r, o) {\n      const s = indexedDB.open(t);\n      s.addEventListener(\"success\", function (t) {\n        const s = t.target.result.transaction(n, \"readonly\").objectStore(n).get(e);\n        s.addEventListener(\"success\", function (e) {\n          r(e.target.result);\n        }), s.addEventListener(\"error\", function (e) {\n          o(e.target.errorCode);\n        });\n      }), s.addEventListener(\"error\", function (e) {\n        o(e.target.errorCode);\n      });\n    });\n  }\n\n  setValue(e) {\n    const t = this.dbName,\n          n = this.dbTable;\n    return new Promise(function (r, o) {\n      const s = indexedDB.open(t);\n      s.addEventListener(\"success\", function (t) {\n        const s = t.target.result.transaction(n, \"readwrite\"),\n              d = s.objectStore(n).put(e);\n        d.addEventListener(\"success\", function () {}), d.addEventListener(\"error\", function (e) {\n          o(e.target.errorCode);\n        }), s.addEventListener(\"complete\", function () {\n          r(!0);\n        });\n      }), s.addEventListener(\"error\", function (e) {\n        o(e.target.errorCode);\n      });\n    });\n  }\n\n}\n;\nfunction storageAvailable(e) {\n  let t = window[e];\n\n  try {\n    let e = \"__storage_test__\";\n    return t.setItem(e, e), t.removeItem(e), !0;\n  } catch (e) {\n    return e instanceof DOMException && (22 === e.code || 1014 === e.code || \"QuotaExceededError\" === e.name || \"NS_ERROR_DOM_QUOTA_REACHED\" === e.name) && 0 !== t.length;\n  }\n}\n;\nfunction date_days(e) {\n  if (\"\" === e) return !1;\n\n  if (e.match(/^\\d{4}\\/\\d{1,2}\\/\\d{1,2}$/)) {\n    let t = new Date(e);\n    if (t.getFullYear() !== Number(e.split(\"/\")[0]) || t.getMonth() !== Number(e.split(\"/\")[1] - 1) || t.getDate() !== Number(e.split(\"/\")[2])) return !1;\n  } else if (e.match(/^\\d{4}-\\d{1,2}-\\d{1,2}$/)) {\n    let t = new Date(e);\n    if (t.getFullYear() !== Number(e.split(\"-\")[0]) || t.getMonth() !== Number(e.split(\"-\")[1] - 1) || t.getDate() !== Number(e.split(\"-\")[2])) return !1;\n  }\n\n  return !0;\n}\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./HTML Manual Repository/public/js/common.min.js\n");

/***/ }),

/***/ "./HTML Manual Repository/public/js/index.js":
/*!***************************************************!*\
  !*** ./HTML Manual Repository/public/js/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/******/\n(function (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId]) {\n      /******/\n      return installedModules[moduleId].exports;\n      /******/\n    }\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n\n    var module = installedModules[moduleId] = {\n      /******/\n      i: moduleId,\n\n      /******/\n      l: false,\n\n      /******/\n      exports: {}\n      /******/\n\n    };\n    /******/\n\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.l = true;\n    /******/\n\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n\n  /******/\n\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n\n  /******/\n  // define getter function for harmony exports\n\n  /******/\n\n  __webpack_require__.d = function (exports, name, getter) {\n    /******/\n    if (!__webpack_require__.o(exports, name)) {\n      /******/\n      Object.defineProperty(exports, name, {\n        enumerable: true,\n        get: getter\n      });\n      /******/\n    }\n    /******/\n\n  };\n  /******/\n\n  /******/\n  // define __esModule on exports\n\n  /******/\n\n\n  __webpack_require__.r = function (exports) {\n    /******/\n    if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n      /******/\n      Object.defineProperty(exports, Symbol.toStringTag, {\n        value: 'Module'\n      });\n      /******/\n    }\n    /******/\n\n\n    Object.defineProperty(exports, '__esModule', {\n      value: true\n    });\n    /******/\n  };\n  /******/\n\n  /******/\n  // create a fake namespace object\n\n  /******/\n  // mode & 1: value is a module id, require it\n\n  /******/\n  // mode & 2: merge all properties of value into the ns\n\n  /******/\n  // mode & 4: return value when already ns object\n\n  /******/\n  // mode & 8|1: behave like require\n\n  /******/\n\n\n  __webpack_require__.t = function (value, mode) {\n    /******/\n    if (mode & 1) value = __webpack_require__(value);\n    /******/\n\n    if (mode & 8) return value;\n    /******/\n\n    if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;\n    /******/\n\n    var ns = Object.create(null);\n    /******/\n\n    __webpack_require__.r(ns);\n    /******/\n\n\n    Object.defineProperty(ns, 'default', {\n      enumerable: true,\n      value: value\n    });\n    /******/\n\n    if (mode & 2 && typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) {\n      return value[key];\n    }.bind(null, key));\n    /******/\n\n    return ns;\n    /******/\n  };\n  /******/\n\n  /******/\n  // getDefaultExport function for compatibility with non-harmony modules\n\n  /******/\n\n\n  __webpack_require__.n = function (module) {\n    /******/\n    var getter = module && module.__esModule ?\n    /******/\n    function getDefault() {\n      return module['default'];\n    } :\n    /******/\n    function getModuleExports() {\n      return module;\n    };\n    /******/\n\n    __webpack_require__.d(getter, 'a', getter);\n    /******/\n\n\n    return getter;\n    /******/\n  };\n  /******/\n\n  /******/\n  // Object.prototype.hasOwnProperty.call\n\n  /******/\n\n\n  __webpack_require__.o = function (object, property) {\n    return Object.prototype.hasOwnProperty.call(object, property);\n  };\n  /******/\n\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n\n  __webpack_require__.p = \"\";\n  /******/\n\n  /******/\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(__webpack_require__.s = \"./HTML Manual/js/Main.js\");\n  /******/\n})(\n/************************************************************************/\n\n/******/\n{\n  /***/\n  \"./HTML Manual/js/Main.js\":\n  /*!********************************!*\\\n    !*** ./HTML Manual/js/Main.js ***!\n    \\********************************/\n\n  /*! no exports provided */\n\n  /***/\n  function (module, __webpack_exports__, __webpack_require__) {\n    \"use strict\";\n\n    eval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony import */ var _ajax_response_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ajax-response.js */ \\\"./HTML Manual/js/ajax-response.js\\\");\\n/**\\n * @file マニュアル用JavaScript\\n *\\n * @since   1.0.0\\n * @version 1.3.5\\n */\\n// Init\\n// SendAjax関数の呼び出し\\n // const imdWidth = 992;\\n\\nconst sideList = ['Main', 'CSS', 'HTML', 'JavaScript', 'Language', 'Node', 'PHP', 'SCSS', 'SQL', 'Wordpress', 'Other'];\\nlet bWordDecide = false;\\nlet sideToggle = [];\\n/**\\n * ランダムワードマニア\\n * @constant {string[][]}\\n */\\n\\nlet randomWordList;\\nlet xorRand;\\n/**\\n * Xor Shift乱数\\n *\\n * @type    {class}\\n * @since   1.1.0\\n * @version 1.3.5\\n */\\n\\nclass xorShift {\\n  /**\\n   * コンストラクタメソッド\\n   *\\n   * @constructs\\n   * @param {number} [w=Math.floor(Date.now() / 1000)] Seed Number\\n   */\\n  constructor(w = Math.floor(Date.now() / 1000)) {\\n    let dateTemp = new Date();\\n    /**\\n     * 乱数 X\\n     *\\n     * 値は以下の何れかから大きい値を選択\\n     * <ul>\\n     * <li>Day ^ Month / 2</li>\\n     * <li>Month * Day * max(Seconds, 5) * max(Minites, 3)</li>\\n     * </ul>\\n     *\\n     * @type {number}\\n     */\\n\\n    this.x = Math.max(Math.floor(dateTemp.getDay() ** (dateTemp.getMonth() / 2)), dateTemp.getMonth() * dateTemp.getDay() * Math.max(dateTemp.getSeconds(), 5) * Math.max(dateTemp.getMinutes(), 3)); // 123456789\\n\\n    /**\\n     * 乱数 Y\\n     *\\n     * max(Seconds, 5) ^ floor(max(Minites, 10) / 10) + max(Seconds, 1) * max(Minites, 1) * floor(Year / 10)\\n     *\\n     * @type {number}\\n     */\\n\\n    this.y = Math.max(Math.max(dateTemp.getSeconds(), 5) ** Math.floor(Math.max(dateTemp.getMinutes(), 10) / 10) + Math.max(dateTemp.getSeconds(), 1) * Math.max(dateTemp.getMinutes(), 1) * Math.floor(dateTemp.getFullYear() / 10)); // 362436069\\n\\n    /**\\n     * 乱数 Z\\n     *\\n     * randomWordList.length + (配列randomWordListの2, 3, 5, 7 の文字列の文字数の和) * (配列randomWordListの11, 13, 17, 19 の文字列の文字数の和) * (配列randomWordListの23, 29 の文字列の文字数の和) * (配列randomWordListの31, 37 の文字列の文字数の和)\\n     *\\n     * @type {number}\\n     */\\n\\n    this.z = randomWordList.length + (randomWordList[2].summary.length + randomWordList[3].summary.length + randomWordList[5].summary.length + randomWordList[7].summary.length) * (randomWordList[11].summary.length + randomWordList[13].summary.length + randomWordList[17].summary.length + randomWordList[19].summary.length) * (randomWordList[23].summary.length + randomWordList[29].summary.length) * (randomWordList[31].summary.length + randomWordList[37].summary.length); // 521288629;\\n\\n    /**\\n     * 乱数 W\\n     *\\n     * デフォルト初期値は現在の時間の1970/01/01 00:00:00からの秒数\\n     *\\n     * @type {number}\\n     */\\n\\n    this.w = w;\\n    console.log('Seed Info:');\\n    console.log('X: ' + this.x);\\n    console.log('Y: ' + this.y);\\n    console.log('Z: ' + this.z);\\n    console.log('W: ' + this.w);\\n  }\\n  /**\\n   * 乱数の生成\\n   *\\n   * @returns {number} 乱数の結果\\n   */\\n\\n\\n  randomInt32() {\\n    let t = this.x ^ this.x << 11;\\n    this.x = this.y;\\n    this.y = this.z;\\n    this.z = this.w;\\n    this.w = this.w ^ this.w >>> 19 ^ (t ^ t >>> 8); // console.log('Number: ' + this.w);\\n\\n    return this.w;\\n  }\\n  /**\\n   * 浮動少数の乱数の生成\\n   *\\n   * @returns {number} 乱数の結果\\n   */\\n\\n\\n  randomFloat() {\\n    let randNumber = this.randomInt32();\\n\\n    if (randNumber < 0) {\\n      randNumber = ~randNumber;\\n    }\\n\\n    return randNumber / (2 ** 31 - 1);\\n  }\\n\\n}\\n/**\\n * ローカルストレージの環境が利用可能か調べる関数\\n *\\n * {@link https://developer.mozilla.org/ja/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API MDN}より参照\\n *\\n * @param   {String}    type    調べる項目\\n * @returns {boolean}           利用可能かのbool\\n * @since   1.3.0\\n * @version 1.3.5\\n */\\n\\n\\nfunction storageAvailable(type) {\\n  let storage = window[type];\\n\\n  try {\\n    let x = '__storage_test__';\\n    storage.setItem(x, x);\\n    storage.removeItem(x);\\n    return true;\\n  } catch (e) {\\n    return e instanceof DOMException && ( // everything except Firefox\\n    e.code === 22 || // Firefox\\n    e.code === 1014 || // test name field too, because code might not be present\\n    // everything except Firefox\\n    e.name === 'QuotaExceededError' || // Firefox\\n    e.name === 'NS_ERROR_DOM_QUOTA_REACHED') && // acknowledge QuotaExceededError only if there's something already stored\\n    storage.length !== 0;\\n  }\\n}\\n/**\\n * ランダムワード取得\\n *\\n * @returns {Promise}   終了コード\\n * @since   1.2.0\\n * @version 1.3.5\\n */\\n\\n\\nfunction getrandomWord() {\\n  return new Promise(function (resolve, reject) {\\n    let fd = new FormData();\\n    Object(_ajax_response_js__WEBPACK_IMPORTED_MODULE_0__[\\\"SendAjax\\\"])('json/randomWord.json', fd).then(function (json) {\\n      // console.log(json);\\n      resolve(json);\\n    }).catch(function (error) {\\n      console.error('request failed', error); // document.getElementById('errors').appendChild(document.createTextNode(event.toString));\\n\\n      reject(error);\\n    });\\n  });\\n}\\n/**\\n * 指定時間毎に実行する\\n *\\n * @param   {number}    [seconds=5]  更新間隔(秒)\\n * @returns {void}\\n * @since   1.0.0\\n * @version 1.3.5\\n */\\n\\n\\nfunction secondsInterval(seconds = 5) {\\n  let bdate = new Date();\\n\\n  if (bdate.getSeconds() % seconds === 0 && bWordDecide === false) {\\n    bWordDecide = true;\\n    setrandomWord();\\n  } else if (bdate.getSeconds() % seconds === 1 && bWordDecide === true) {\\n    bWordDecide = false;\\n  }\\n}\\n/**\\n * ランダムワードの解説を出力\\n *\\n * @async\\n * @interface\\n * @param   {JSON}  jsonData    JSON Data\\n * @returns {void}\\n * @since   1.0.0\\n * @version 1.3.5\\n */\\n\\n\\nasync function randomOutput(jsonData) {\\n  // Init\\n  const textRandom = document.getElementById('randomOutput');\\n  const dl = document.createElement('dl');\\n  let listCount = 0; // リストを置く場所を予め作る\\n\\n  dl.setAttribute('id', 'RandomList');\\n  textRandom.innerHTML = '';\\n  textRandom.appendChild(dl);\\n  const randomList = document.getElementById('RandomList'); // Workerの使用可否の確認\\n\\n  if (window.Worker) {\\n    // Workerの読み込み\\n    // 相対パスで読み込む場合HTMLからの相対パスなので要注意\\n    // const worker = new Worker('js/WorkerTask.js', { type: 'module' });\\n    let worker = new Worker('js/WorkerTask.js');\\n    worker.addEventListener('message', function (event) {\\n      randomList.innerHTML += event.data;\\n    });\\n    worker.addEventListener('messageerror', function (event) {\\n      console.error('Task failed', event.data);\\n    }); // JSONデータを丸投げ\\n\\n    worker.postMessage({\\n      'mode': 'createRandList'\\n    });\\n  } else {\\n    for (let dataTemp of jsonData) {\\n      const dt = document.createElement('dt');\\n      const dd = document.createElement('dd');\\n      dt.setAttribute('id', 'wordID' + ++listCount);\\n      dt.innerHTML = '<h3>' + dataTemp.title + '</h3><h4>出典: ' + dataTemp.original + '</h4>';\\n      dd.innerHTML = dataTemp.summary;\\n      randomList.appendChild(dt);\\n      randomList.appendChild(dd);\\n    }\\n  }\\n}\\n/**\\n * ランダムワードの出力\\n *\\n * @interface\\n * @returns {void}\\n * @since   1.0.0\\n * @version 1.3.5\\n */\\n\\n\\nfunction setrandomWord() {\\n  let wordNum = Math.floor(xorRand.randomFloat() * randomWordList.length);\\n  document.getElementById('randomWord').setAttribute('href', 'scp-randomWord.html#wordID' + (wordNum + 1));\\n  document.getElementById('randomWord').innerHTML = randomWordList[wordNum].title;\\n}\\n/**\\n * HTMLの読み込み終了時に行われれる処理\\n */\\n\\n\\ndocument.addEventListener('DOMContentLoaded', async function () {\\n  const isEnableStorage = storageAvailable('localStorage');\\n  randomWordList = await getrandomWord();\\n  xorRand = new xorShift();\\n  document.getElementById('expandAll').addEventListener('click', function () {\\n    for (let sideName of sideList) {\\n      let btnElement = document.getElementById('btn' + sideName);\\n      let linkElement = document.getElementById('link' + sideName); // trueに変更\\n\\n      linkElement.checked = true;\\n      sideToggle[sideName] = 'true';\\n      btnElement.textContent = '-'; // ローカルストレージサポートの確認\\n\\n      if (isEnableStorage) {\\n        localStorage.setItem(sideName + 'Toggle', 'true');\\n      }\\n    }\\n  });\\n  document.getElementById('collapseAll').addEventListener('click', function () {\\n    for (let sideName of sideList) {\\n      const btnElement = document.getElementById('btn' + sideName);\\n      const linkElement = document.getElementById('link' + sideName); // falseに変更\\n\\n      linkElement.checked = false;\\n      sideToggle[sideName] = 'false';\\n      btnElement.textContent = '+'; // ローカルストレージサポートの確認\\n\\n      if (isEnableStorage) {\\n        localStorage.setItem(sideName + 'Toggle', 'false');\\n      }\\n    }\\n  }); // サイドバーの処理\\n  // ローカルストレージサポートの確認\\n\\n  if (storageAvailable('localStorage')) {\\n    for (let sideName of sideList) {\\n      const btnElement = document.getElementById('btn' + sideName);\\n      const linkElement = document.getElementById('link' + sideName); // ローカルストレージから情報を取得\\n\\n      sideToggle[sideName] = localStorage.getItem(sideName + 'Toggle'); // フラグを基に隠すかの指定\\n\\n      if (sideToggle[sideName] === null || sideToggle[sideName] === 'false') {// Null\\n      } else {\\n        btnElement.textContent = '-';\\n        linkElement.checked = true;\\n      } // イベントの登録\\n\\n\\n      linkElement.addEventListener('change', function () {\\n        if (sideToggle[sideName] === null || sideToggle[sideName] === 'false') {\\n          sideToggle[sideName] = 'true';\\n          localStorage.setItem(sideName + 'Toggle', 'true');\\n          btnElement.textContent = '-';\\n        } else {\\n          sideToggle[sideName] = 'false';\\n          localStorage.setItem(sideName + 'Toggle', 'false');\\n          btnElement.textContent = '+';\\n        }\\n      });\\n    }\\n  }\\n  /**\\n   * 現在の個数\\n   * @constant {Element}\\n   */\\n\\n\\n  const cntRandom = document.getElementById('countRandom');\\n\\n  if (cntRandom !== null) {\\n    cntRandom.textContent = randomWordList.length;\\n  }\\n  /**\\n   * ランダムワードの出力位置\\n   * @constant {Element}\\n   */\\n\\n\\n  const textRandom = document.getElementById('randomOutput');\\n\\n  if (textRandom !== null) {\\n    randomOutput(randomWordList);\\n  }\\n\\n  setrandomWord();\\n  setInterval(function () {\\n    secondsInterval(10);\\n  }, 50);\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9IVE1MIE1hbnVhbC9qcy9NYWluLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vSFRNTCBNYW51YWwvanMvTWFpbi5qcz9iNzU1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUg44Oe44OL44Ol44Ki44Or55SoSmF2YVNjcmlwdFxuICpcbiAqIEBzaW5jZSAgIDEuMC4wXG4gKiBAdmVyc2lvbiAxLjMuNVxuICovXG5cbi8vIEluaXRcbi8vIFNlbmRBamF46Zai5pWw44Gu5ZG844Gz5Ye644GXXG5pbXBvcnQgeyBTZW5kQWpheCB9IGZyb20gJy4vYWpheC1yZXNwb25zZS5qcyc7XG5cbi8vIGNvbnN0IGltZFdpZHRoID0gOTkyO1xuY29uc3Qgc2lkZUxpc3QgPSBbXG5cdCdNYWluJyxcblx0J0NTUycsXG5cdCdIVE1MJyxcblx0J0phdmFTY3JpcHQnLFxuXHQnTGFuZ3VhZ2UnLFxuXHQnTm9kZScsXG5cdCdQSFAnLFxuXHQnU0NTUycsXG5cdCdTUUwnLFxuXHQnV29yZHByZXNzJyxcblx0J090aGVyJyxcbl07XG5cbmxldCBiV29yZERlY2lkZSA9IGZhbHNlO1xubGV0IHNpZGVUb2dnbGUgPSBbXTtcbi8qKlxuICog44Op44Oz44OA44Og44Ov44O844OJ44Oe44OL44KiXG4gKiBAY29uc3RhbnQge3N0cmluZ1tdW119XG4gKi9cbmxldCByYW5kb21Xb3JkTGlzdDtcbmxldCB4b3JSYW5kO1xuXG4vKipcbiAqIFhvciBTaGlmdOS5seaVsFxuICpcbiAqIEB0eXBlICAgIHtjbGFzc31cbiAqIEBzaW5jZSAgIDEuMS4wXG4gKiBAdmVyc2lvbiAxLjMuNVxuICovXG5jbGFzcyB4b3JTaGlmdCB7XG5cdC8qKlxuXHQgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr/jg6Hjgr3jg4Pjg4lcblx0ICpcblx0ICogQGNvbnN0cnVjdHNcblx0ICogQHBhcmFtIHtudW1iZXJ9IFt3PU1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApXSBTZWVkIE51bWJlclxuXHQgKi9cblx0Y29uc3RydWN0b3IodyA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApKSB7XG5cdFx0bGV0IGRhdGVUZW1wID0gbmV3IERhdGUoKTtcblxuXHRcdC8qKlxuXHRcdCAqIOS5seaVsCBYXG5cdFx0ICpcblx0XHQgKiDlgKTjga/ku6XkuIvjga7kvZXjgozjgYvjgYvjgonlpKfjgY3jgYTlgKTjgpLpgbjmip5cblx0XHQgKiA8dWw+XG5cdFx0ICogPGxpPkRheSBeIE1vbnRoIC8gMjwvbGk+XG5cdFx0ICogPGxpPk1vbnRoICogRGF5ICogbWF4KFNlY29uZHMsIDUpICogbWF4KE1pbml0ZXMsIDMpPC9saT5cblx0XHQgKiA8L3VsPlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLnggPSBNYXRoLm1heChNYXRoLmZsb29yKGRhdGVUZW1wLmdldERheSgpICoqIChkYXRlVGVtcC5nZXRNb250aCgpIC8gMikpLCBkYXRlVGVtcC5nZXRNb250aCgpICogZGF0ZVRlbXAuZ2V0RGF5KCkgKiBNYXRoLm1heChkYXRlVGVtcC5nZXRTZWNvbmRzKCksIDUpICogTWF0aC5tYXgoZGF0ZVRlbXAuZ2V0TWludXRlcygpLCAzKSk7IC8vIDEyMzQ1Njc4OVxuXG5cdFx0LyoqXG5cdFx0ICog5Lmx5pWwIFlcblx0XHQgKlxuXHRcdCAqIG1heChTZWNvbmRzLCA1KSBeIGZsb29yKG1heChNaW5pdGVzLCAxMCkgLyAxMCkgKyBtYXgoU2Vjb25kcywgMSkgKiBtYXgoTWluaXRlcywgMSkgKiBmbG9vcihZZWFyIC8gMTApXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMueSA9IE1hdGgubWF4KE1hdGgubWF4KGRhdGVUZW1wLmdldFNlY29uZHMoKSwgNSkgKiogTWF0aC5mbG9vcihNYXRoLm1heChkYXRlVGVtcC5nZXRNaW51dGVzKCksIDEwKSAvIDEwKSArIE1hdGgubWF4KGRhdGVUZW1wLmdldFNlY29uZHMoKSwgMSkgKiBNYXRoLm1heChkYXRlVGVtcC5nZXRNaW51dGVzKCksIDEpICogTWF0aC5mbG9vcihkYXRlVGVtcC5nZXRGdWxsWWVhcigpIC8gMTApKTsgLy8gMzYyNDM2MDY5XG5cblx0XHQvKipcblx0XHQgKiDkubHmlbAgWlxuXHRcdCAqXG5cdFx0ICogcmFuZG9tV29yZExpc3QubGVuZ3RoICsgKOmFjeWIl3JhbmRvbVdvcmRMaXN044GuMiwgMywgNSwgNyDjga7mloflrZfliJfjga7mloflrZfmlbDjga7lkowpICogKOmFjeWIl3JhbmRvbVdvcmRMaXN044GuMTEsIDEzLCAxNywgMTkg44Gu5paH5a2X5YiX44Gu5paH5a2X5pWw44Gu5ZKMKSAqICjphY3liJdyYW5kb21Xb3JkTGlzdOOBrjIzLCAyOSDjga7mloflrZfliJfjga7mloflrZfmlbDjga7lkowpICogKOmFjeWIl3JhbmRvbVdvcmRMaXN044GuMzEsIDM3IOOBruaWh+Wtl+WIl+OBruaWh+Wtl+aVsOOBruWSjClcblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy56ID0gcmFuZG9tV29yZExpc3QubGVuZ3RoICsgKHJhbmRvbVdvcmRMaXN0WzJdLnN1bW1hcnkubGVuZ3RoICsgcmFuZG9tV29yZExpc3RbM10uc3VtbWFyeS5sZW5ndGggKyByYW5kb21Xb3JkTGlzdFs1XS5zdW1tYXJ5Lmxlbmd0aCArIHJhbmRvbVdvcmRMaXN0WzddLnN1bW1hcnkubGVuZ3RoKSAqIChyYW5kb21Xb3JkTGlzdFsxMV0uc3VtbWFyeS5sZW5ndGggKyByYW5kb21Xb3JkTGlzdFsxM10uc3VtbWFyeS5sZW5ndGggKyByYW5kb21Xb3JkTGlzdFsxN10uc3VtbWFyeS5sZW5ndGggKyByYW5kb21Xb3JkTGlzdFsxOV0uc3VtbWFyeS5sZW5ndGgpICogKHJhbmRvbVdvcmRMaXN0WzIzXS5zdW1tYXJ5Lmxlbmd0aCArIHJhbmRvbVdvcmRMaXN0WzI5XS5zdW1tYXJ5Lmxlbmd0aCkgKiAocmFuZG9tV29yZExpc3RbMzFdLnN1bW1hcnkubGVuZ3RoICsgcmFuZG9tV29yZExpc3RbMzddLnN1bW1hcnkubGVuZ3RoKTsgLy8gNTIxMjg4NjI5O1xuXG5cdFx0LyoqXG5cdFx0ICog5Lmx5pWwIFdcblx0XHQgKlxuXHRcdCAqIOODh+ODleOCqeODq+ODiOWIneacn+WApOOBr+ePvuWcqOOBruaZgumWk+OBrjE5NzAvMDEvMDEgMDA6MDA6MDDjgYvjgonjga7np5LmlbBcblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy53ID0gdztcblx0XHRjb25zb2xlLmxvZygnU2VlZCBJbmZvOicpO1xuXHRcdGNvbnNvbGUubG9nKCdYOiAnICsgdGhpcy54KTtcblx0XHRjb25zb2xlLmxvZygnWTogJyArIHRoaXMueSk7XG5cdFx0Y29uc29sZS5sb2coJ1o6ICcgKyB0aGlzLnopO1xuXHRcdGNvbnNvbGUubG9nKCdXOiAnICsgdGhpcy53KTtcblx0fVxuXG5cdC8qKlxuXHQgKiDkubHmlbDjga7nlJ/miJBcblx0ICpcblx0ICogQHJldHVybnMge251bWJlcn0g5Lmx5pWw44Gu57WQ5p6cXG5cdCAqL1xuXHRyYW5kb21JbnQzMigpIHtcblx0XHRsZXQgdCA9IHRoaXMueCBeIHRoaXMueCA8PCAxMTtcblx0XHR0aGlzLnggPSB0aGlzLnk7XG5cdFx0dGhpcy55ID0gdGhpcy56O1xuXHRcdHRoaXMueiA9IHRoaXMudztcblx0XHR0aGlzLncgPSB0aGlzLncgXiB0aGlzLncgPj4+IDE5IF4gKHQgXiB0ID4+PiA4KTtcblxuXHRcdC8vIGNvbnNvbGUubG9nKCdOdW1iZXI6ICcgKyB0aGlzLncpO1xuXHRcdHJldHVybiB0aGlzLnc7XG5cdH1cblxuXHQvKipcblx0ICog5rWu5YuV5bCR5pWw44Gu5Lmx5pWw44Gu55Sf5oiQXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtudW1iZXJ9IOS5seaVsOOBrue1kOaenFxuXHQgKi9cblx0cmFuZG9tRmxvYXQoKSB7XG5cdFx0bGV0IHJhbmROdW1iZXIgPSB0aGlzLnJhbmRvbUludDMyKCk7XG5cdFx0aWYgKHJhbmROdW1iZXIgPCAwKSB7XG5cdFx0XHRyYW5kTnVtYmVyID0gfnJhbmROdW1iZXI7XG5cdFx0fVxuXHRcdHJldHVybiByYW5kTnVtYmVyIC8gKDIgKiogMzEgLSAxKTtcblx0fVxufVxuXG4vKipcbiAqIOODreODvOOCq+ODq+OCueODiOODrOODvOOCuOOBrueSsOWig+OBjOWIqeeUqOWPr+iDveOBi+iqv+OBueOCi+mWouaVsFxuICpcbiAqIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9qYS9kb2NzL1dlYi9BUEkvV2ViX1N0b3JhZ2VfQVBJL1VzaW5nX3RoZV9XZWJfU3RvcmFnZV9BUEkgTUROfeOCiOOCiuWPgueFp1xuICpcbiAqIEBwYXJhbSAgIHtTdHJpbmd9ICAgIHR5cGUgICAg6Kq/44G544KL6aCF55uuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gICAgICAgICAgIOWIqeeUqOWPr+iDveOBi+OBrmJvb2xcbiAqIEBzaW5jZSAgIDEuMy4wXG4gKiBAdmVyc2lvbiAxLjMuNVxuICovXG5mdW5jdGlvbiBzdG9yYWdlQXZhaWxhYmxlKHR5cGUpIHtcblx0bGV0IHN0b3JhZ2UgPSB3aW5kb3dbdHlwZV07XG5cdHRyeSB7XG5cdFx0bGV0XHR4ID0gJ19fc3RvcmFnZV90ZXN0X18nO1xuXHRcdHN0b3JhZ2Uuc2V0SXRlbSh4LCB4KTtcblx0XHRzdG9yYWdlLnJlbW92ZUl0ZW0oeCk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZSBpbnN0YW5jZW9mIERPTUV4Y2VwdGlvbiAmJiAoXG5cdFx0XHQvLyBldmVyeXRoaW5nIGV4Y2VwdCBGaXJlZm94XG5cdFx0XHRlLmNvZGUgPT09IDIyIHx8XG5cdFx0XHQvLyBGaXJlZm94XG5cdFx0XHRlLmNvZGUgPT09IDEwMTQgfHxcblx0XHRcdC8vIHRlc3QgbmFtZSBmaWVsZCB0b28sIGJlY2F1c2UgY29kZSBtaWdodCBub3QgYmUgcHJlc2VudFxuXHRcdFx0Ly8gZXZlcnl0aGluZyBleGNlcHQgRmlyZWZveFxuXHRcdFx0ZS5uYW1lID09PSAnUXVvdGFFeGNlZWRlZEVycm9yJyB8fFxuXHRcdFx0Ly8gRmlyZWZveFxuXHRcdFx0ZS5uYW1lID09PSAnTlNfRVJST1JfRE9NX1FVT1RBX1JFQUNIRUQnKSAmJlxuXHRcdFx0Ly8gYWNrbm93bGVkZ2UgUXVvdGFFeGNlZWRlZEVycm9yIG9ubHkgaWYgdGhlcmUncyBzb21ldGhpbmcgYWxyZWFkeSBzdG9yZWRcblx0XHRcdHN0b3JhZ2UubGVuZ3RoICE9PSAwO1xuXHR9XG59XG5cbi8qKlxuICog44Op44Oz44OA44Og44Ov44O844OJ5Y+W5b6XXG4gKlxuICogQHJldHVybnMge1Byb21pc2V9ICAg57WC5LqG44Kz44O844OJXG4gKiBAc2luY2UgICAxLjIuMFxuICogQHZlcnNpb24gMS4zLjVcbiAqL1xuZnVuY3Rpb24gZ2V0cmFuZG9tV29yZCgpIHtcblx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0XHRsZXQgZmQgPSBuZXcgRm9ybURhdGEoKTtcblxuXHRcdFNlbmRBamF4KCdqc29uL3JhbmRvbVdvcmQuanNvbicsIGZkKVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24gKGpzb24pIHtcblx0XHRcdFx0Ly8gY29uc29sZS5sb2coanNvbik7XG5cdFx0XHRcdHJlc29sdmUoanNvbik7XG5cdFx0XHR9KVxuXHRcdFx0LmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKCdyZXF1ZXN0IGZhaWxlZCcsIGVycm9yKTtcblx0XHRcdFx0Ly8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Vycm9ycycpLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGV2ZW50LnRvU3RyaW5nKSk7XG5cdFx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICog5oyH5a6a5pmC6ZaT5q+O44Gr5a6f6KGM44GZ44KLXG4gKlxuICogQHBhcmFtICAge251bWJlcn0gICAgW3NlY29uZHM9NV0gIOabtOaWsOmWk+malCjnp5IpXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqIEBzaW5jZSAgIDEuMC4wXG4gKiBAdmVyc2lvbiAxLjMuNVxuICovXG5mdW5jdGlvbiBzZWNvbmRzSW50ZXJ2YWwoc2Vjb25kcyA9IDUpIHtcblx0bGV0IGJkYXRlID0gbmV3IERhdGUoKTtcblx0aWYgKGJkYXRlLmdldFNlY29uZHMoKSAlIHNlY29uZHMgPT09IDAgJiYgYldvcmREZWNpZGUgPT09IGZhbHNlKSB7XG5cdFx0YldvcmREZWNpZGUgPSB0cnVlO1xuXHRcdHNldHJhbmRvbVdvcmQoKTtcblx0fSBlbHNlIGlmIChiZGF0ZS5nZXRTZWNvbmRzKCkgJSBzZWNvbmRzID09PSAxICYmIGJXb3JkRGVjaWRlID09PSB0cnVlKSB7XG5cdFx0YldvcmREZWNpZGUgPSBmYWxzZTtcblx0fVxufVxuXG4vKipcbiAqIOODqeODs+ODgOODoOODr+ODvOODieOBruino+iqrOOCkuWHuuWKm1xuICpcbiAqIEBhc3luY1xuICogQGludGVyZmFjZVxuICogQHBhcmFtICAge0pTT059ICBqc29uRGF0YSAgICBKU09OIERhdGFcbiAqIEByZXR1cm5zIHt2b2lkfVxuICogQHNpbmNlICAgMS4wLjBcbiAqIEB2ZXJzaW9uIDEuMy41XG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHJhbmRvbU91dHB1dChqc29uRGF0YSkge1xuXHQvLyBJbml0XG5cdGNvbnN0IHRleHRSYW5kb20gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmFuZG9tT3V0cHV0Jyk7XG5cdGNvbnN0IGRsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGwnKTtcblx0bGV0IGxpc3RDb3VudCA9IDA7XG5cblx0Ly8g44Oq44K544OI44KS572u44GP5aC05omA44KS5LqI44KB5L2c44KLXG5cdGRsLnNldEF0dHJpYnV0ZSgnaWQnLCAnUmFuZG9tTGlzdCcpO1xuXHR0ZXh0UmFuZG9tLmlubmVySFRNTCA9ICcnO1xuXHR0ZXh0UmFuZG9tLmFwcGVuZENoaWxkKGRsKTtcblxuXHRjb25zdCByYW5kb21MaXN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ1JhbmRvbUxpc3QnKTtcblxuXHQvLyBXb3JrZXLjga7kvb/nlKjlj6/lkKbjga7norroqo1cblx0aWYgKHdpbmRvdy5Xb3JrZXIpIHtcblx0XHQvLyBXb3JrZXLjga7oqq3jgb/ovrzjgb9cblx0XHQvLyDnm7jlr77jg5Hjgrnjgafoqq3jgb/ovrzjgoDloLTlkIhIVE1M44GL44KJ44Gu55u45a++44OR44K544Gq44Gu44Gn6KaB5rOo5oSPXG5cdFx0Ly8gY29uc3Qgd29ya2VyID0gbmV3IFdvcmtlcignanMvV29ya2VyVGFzay5qcycsIHsgdHlwZTogJ21vZHVsZScgfSk7XG5cdFx0bGV0IHdvcmtlciA9IG5ldyBXb3JrZXIoJ2pzL1dvcmtlclRhc2suanMnKTtcblxuXHRcdHdvcmtlci5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZnVuY3Rpb24gKGV2ZW50KSB7XG5cdFx0XHRyYW5kb21MaXN0LmlubmVySFRNTCArPSBldmVudC5kYXRhO1xuXHRcdH0pO1xuXHRcdHdvcmtlci5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlZXJyb3InLCBmdW5jdGlvbiAoZXZlbnQpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ1Rhc2sgZmFpbGVkJywgZXZlbnQuZGF0YSk7XG5cdFx0fSk7XG5cblx0XHQvLyBKU09O44OH44O844K/44KS5Li45oqV44GSXG5cdFx0d29ya2VyLnBvc3RNZXNzYWdlKHsnbW9kZSc6ICdjcmVhdGVSYW5kTGlzdCd9KTtcblx0fSBlbHNlIHtcblx0XHRmb3IgKGxldCBkYXRhVGVtcCBvZiBqc29uRGF0YSkge1xuXHRcdFx0Y29uc3QgZHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkdCcpO1xuXHRcdFx0Y29uc3QgZGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkZCcpO1xuXG5cdFx0XHRkdC5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3dvcmRJRCcgKyArK2xpc3RDb3VudCk7XG5cblx0XHRcdGR0LmlubmVySFRNTCA9ICc8aDM+JyArIGRhdGFUZW1wLnRpdGxlICsgJzwvaDM+PGg0PuWHuuWFuDogJyArIGRhdGFUZW1wLm9yaWdpbmFsICsgJzwvaDQ+Jztcblx0XHRcdGRkLmlubmVySFRNTCA9IGRhdGFUZW1wLnN1bW1hcnk7XG5cblx0XHRcdHJhbmRvbUxpc3QuYXBwZW5kQ2hpbGQoZHQpO1xuXHRcdFx0cmFuZG9tTGlzdC5hcHBlbmRDaGlsZChkZCk7XG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICog44Op44Oz44OA44Og44Ov44O844OJ44Gu5Ye65YqbXG4gKlxuICogQGludGVyZmFjZVxuICogQHJldHVybnMge3ZvaWR9XG4gKiBAc2luY2UgICAxLjAuMFxuICogQHZlcnNpb24gMS4zLjVcbiAqL1xuZnVuY3Rpb24gc2V0cmFuZG9tV29yZCgpIHtcblx0bGV0IHdvcmROdW0gPSBNYXRoLmZsb29yKHhvclJhbmQucmFuZG9tRmxvYXQoKSAqIHJhbmRvbVdvcmRMaXN0Lmxlbmd0aCk7XG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyYW5kb21Xb3JkJykuc2V0QXR0cmlidXRlKCdocmVmJywgJ3NjcC1yYW5kb21Xb3JkLmh0bWwjd29yZElEJyArICh3b3JkTnVtICsgMSkpO1xuXHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmFuZG9tV29yZCcpLmlubmVySFRNTCA9ICByYW5kb21Xb3JkTGlzdFt3b3JkTnVtXS50aXRsZTtcbn1cblxuLyoqXG4gKiBIVE1M44Gu6Kqt44G/6L6844G/57WC5LqG5pmC44Gr6KGM44KP44KM44KM44KL5Yem55CGXG4gKi9cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG5cdGNvbnN0IGlzRW5hYmxlU3RvcmFnZSA9IHN0b3JhZ2VBdmFpbGFibGUoJ2xvY2FsU3RvcmFnZScpO1xuXHRyYW5kb21Xb3JkTGlzdCA9IGF3YWl0IGdldHJhbmRvbVdvcmQoKTtcblx0eG9yUmFuZCA9IG5ldyB4b3JTaGlmdCgpO1xuXG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleHBhbmRBbGwnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcblx0XHRmb3IgKGxldCBzaWRlTmFtZSBvZiBzaWRlTGlzdCkge1xuXHRcdFx0bGV0IGJ0bkVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnRuJyArIHNpZGVOYW1lKTtcblx0XHRcdGxldCBsaW5rRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsaW5rJyArIHNpZGVOYW1lKTtcblxuXHRcdFx0Ly8gdHJ1ZeOBq+WkieabtFxuXHRcdFx0bGlua0VsZW1lbnQuY2hlY2tlZCA9IHRydWU7XG5cdFx0XHRzaWRlVG9nZ2xlW3NpZGVOYW1lXSA9ICd0cnVlJztcblx0XHRcdGJ0bkVsZW1lbnQudGV4dENvbnRlbnQgPSAnLSc7XG5cdFx0XHQvLyDjg63jg7zjgqvjg6vjgrnjg4jjg6zjg7zjgrjjgrXjg53jg7zjg4jjga7norroqo1cblx0XHRcdGlmIChpc0VuYWJsZVN0b3JhZ2UpIHtcblx0XHRcdFx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oc2lkZU5hbWUgKyAnVG9nZ2xlJywgJ3RydWUnKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb2xsYXBzZUFsbCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuXHRcdGZvciAobGV0IHNpZGVOYW1lIG9mIHNpZGVMaXN0KSB7XG5cdFx0XHRjb25zdCBidG5FbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J0bicgKyBzaWRlTmFtZSk7XG5cdFx0XHRjb25zdCBsaW5rRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsaW5rJyArIHNpZGVOYW1lKTtcblxuXHRcdFx0Ly8gZmFsc2XjgavlpInmm7Rcblx0XHRcdGxpbmtFbGVtZW50LmNoZWNrZWQgPSBmYWxzZTtcblx0XHRcdHNpZGVUb2dnbGVbc2lkZU5hbWVdID0gJ2ZhbHNlJztcblx0XHRcdGJ0bkVsZW1lbnQudGV4dENvbnRlbnQgPSAnKyc7XG5cdFx0XHQvLyDjg63jg7zjgqvjg6vjgrnjg4jjg6zjg7zjgrjjgrXjg53jg7zjg4jjga7norroqo1cblx0XHRcdGlmIChpc0VuYWJsZVN0b3JhZ2UpIHtcblx0XHRcdFx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oc2lkZU5hbWUgKyAnVG9nZ2xlJywgJ2ZhbHNlJyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHQvLyDjgrXjgqTjg4njg5Djg7zjga7lh6bnkIZcblx0Ly8g44Ot44O844Kr44Or44K544OI44Os44O844K444K144Od44O844OI44Gu56K66KqNXG5cdGlmIChzdG9yYWdlQXZhaWxhYmxlKCdsb2NhbFN0b3JhZ2UnKSkge1xuXHRcdGZvciAobGV0IHNpZGVOYW1lIG9mIHNpZGVMaXN0KSB7XG5cdFx0XHRjb25zdCBidG5FbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J0bicgKyBzaWRlTmFtZSk7XG5cdFx0XHRjb25zdCBsaW5rRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsaW5rJyArIHNpZGVOYW1lKTtcblx0XHRcdC8vIOODreODvOOCq+ODq+OCueODiOODrOODvOOCuOOBi+OCieaDheWgseOCkuWPluW+l1xuXHRcdFx0c2lkZVRvZ2dsZVtzaWRlTmFtZV0gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShzaWRlTmFtZSArICdUb2dnbGUnKTtcblxuXHRcdFx0Ly8g44OV44Op44Kw44KS5Z+644Gr6Zqg44GZ44GL44Gu5oyH5a6aXG5cdFx0XHRpZiAoc2lkZVRvZ2dsZVtzaWRlTmFtZV0gPT09IG51bGwgfHwgc2lkZVRvZ2dsZVtzaWRlTmFtZV0gPT09ICdmYWxzZScpIHtcblx0XHRcdFx0Ly8gTnVsbFxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnRuRWxlbWVudC50ZXh0Q29udGVudCA9ICctJztcblx0XHRcdFx0bGlua0VsZW1lbnQuY2hlY2tlZCA9IHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIOOCpOODmeODs+ODiOOBrueZu+mMslxuXHRcdFx0bGlua0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRpZiAoc2lkZVRvZ2dsZVtzaWRlTmFtZV0gPT09IG51bGwgfHwgc2lkZVRvZ2dsZVtzaWRlTmFtZV0gPT09ICdmYWxzZScpIHtcblx0XHRcdFx0XHRzaWRlVG9nZ2xlW3NpZGVOYW1lXSA9ICd0cnVlJztcblx0XHRcdFx0XHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbShzaWRlTmFtZSArICdUb2dnbGUnLCAndHJ1ZScpO1xuXHRcdFx0XHRcdGJ0bkVsZW1lbnQudGV4dENvbnRlbnQgPSAnLSc7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c2lkZVRvZ2dsZVtzaWRlTmFtZV0gPSAnZmFsc2UnO1xuXHRcdFx0XHRcdGxvY2FsU3RvcmFnZS5zZXRJdGVtKHNpZGVOYW1lICsgJ1RvZ2dsZScsICdmYWxzZScpO1xuXHRcdFx0XHRcdGJ0bkVsZW1lbnQudGV4dENvbnRlbnQgPSAnKyc7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiDnj77lnKjjga7lgIvmlbBcblx0ICogQGNvbnN0YW50IHtFbGVtZW50fVxuXHQgKi9cblx0Y29uc3QgY250UmFuZG9tID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvdW50UmFuZG9tJyk7XG5cdGlmIChjbnRSYW5kb20gIT09IG51bGwpIHtcblx0XHRjbnRSYW5kb20udGV4dENvbnRlbnQgPSByYW5kb21Xb3JkTGlzdC5sZW5ndGg7XG5cdH1cblxuXHQvKipcblx0ICog44Op44Oz44OA44Og44Ov44O844OJ44Gu5Ye65Yqb5L2N572uXG5cdCAqIEBjb25zdGFudCB7RWxlbWVudH1cblx0ICovXG5cdGNvbnN0IHRleHRSYW5kb20gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmFuZG9tT3V0cHV0Jyk7XG5cdGlmICh0ZXh0UmFuZG9tICE9PSBudWxsKSB7XG5cdFx0cmFuZG9tT3V0cHV0KHJhbmRvbVdvcmRMaXN0KTtcblx0fVxuXG5cdHNldHJhbmRvbVdvcmQoKTtcblxuXHRzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG5cdFx0c2Vjb25kc0ludGVydmFsKDEwKTtcblx0fSwgNTApO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQWNBO0FBQ0E7QUFDQTs7Ozs7QUFJQTtBQUNBO0FBRUE7Ozs7Ozs7O0FBT0E7QUFDQTs7Ozs7O0FBTUE7QUFDQTtBQUVBOzs7Ozs7Ozs7Ozs7QUFXQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FBT0E7QUFDQTtBQUNBOzs7Ozs7OztBQU9BO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7Ozs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQXBGQTtBQXNGQTs7Ozs7Ozs7Ozs7O0FBVUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7Ozs7QUFRQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7Ozs7Ozs7QUFVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7Ozs7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7O0FBSUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7QUFJQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./HTML Manual/js/Main.js\\n\");\n    /***/\n  },\n\n  /***/\n  \"./HTML Manual/js/ajax-response.js\":\n  /*!*****************************************!*\\\n    !*** ./HTML Manual/js/ajax-response.js ***!\n    \\*****************************************/\n\n  /*! exports provided: SendAjax */\n\n  /***/\n  function (module, __webpack_exports__, __webpack_require__) {\n    \"use strict\";\n\n    eval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"SendAjax\\\", function() { return SendAjax; });\\n/**\\n * @fileoverview Ajaxレスポンス取得処理に使用するAjax\\n *\\n * @module  ajax-response\\n * @since   1.0.0\\n * @version 1.0.0\\n */\\n\\n/**\\n * HTTPステータスコードの確認\\n *\\n * @param   {Response}       response    レスポンスデータ\\n * @returns {Response|Error}             HTTPステータスコードが200番台ならレスポンスデータ、そうでなければエラー\\n * @since   1.0.0\\n * @version 1.0.0\\n */\\nfunction checkStatus(response) {\\n  // HTTPステータスコードが200番台ではない場合\\n  // 類似方法にresponse.okがあるが大部分のブラウザが非対応なので非推奨\\n  if (response.status >= 200 && response.status < 300) {\\n    return response;\\n  } else {\\n    let error = new Error(response.statusText);\\n    error.response = response;\\n    throw error;\\n  }\\n}\\n/**\\n * JSONデータの切り出し\\n *\\n * @param   {Response}   response    レスポンスデータ\\n * @returns {JSON}                   レスポンスに格納されているJSONデータ\\n * @since   1.0.0\\n * @version 1.0.0\\n */\\n\\n\\nfunction parseJSON(response) {\\n  // console.log(response);\\n  return response.json();\\n}\\n/**\\n * Ajax転送処理\\n *\\n * @param   {string}                     sendURL 転送先URL\\n * @param   {FormData}                   form    転送するForm Data\\n * @returns {Promise.JSON|Promise.Error}         JSONデータもしくはエラー内容\\n * @since   1.0.0\\n * @version 1.0.0\\n */\\n\\n\\nfunction SendAjax(sendURL, form) {\\n  return new Promise(function (resolve, reject) {\\n    fetch(sendURL, {\\n      method: 'POST',\\n      body: form\\n    }).then(checkStatus).then(parseJSON).then(function (json) {\\n      resolve(json);\\n    }).catch(function (error) {\\n      reject(error);\\n    });\\n  });\\n}//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9IVE1MIE1hbnVhbC9qcy9hamF4LXJlc3BvbnNlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vSFRNTCBNYW51YWwvanMvYWpheC1yZXNwb25zZS5qcz83NGRhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBBamF444Os44K544Od44Oz44K55Y+W5b6X5Yem55CG44Gr5L2/55So44GZ44KLQWpheFxuICpcbiAqIEBtb2R1bGUgIGFqYXgtcmVzcG9uc2VcbiAqIEBzaW5jZSAgIDEuMC4wXG4gKiBAdmVyc2lvbiAxLjAuMFxuICovXG5cbi8qKlxuICogSFRUUOOCueODhuODvOOCv+OCueOCs+ODvOODieOBrueiuuiqjVxuICpcbiAqIEBwYXJhbSAgIHtSZXNwb25zZX0gICAgICAgcmVzcG9uc2UgICAg44Os44K544Od44Oz44K544OH44O844K/XG4gKiBAcmV0dXJucyB7UmVzcG9uc2V8RXJyb3J9ICAgICAgICAgICAgIEhUVFDjgrnjg4bjg7zjgr/jgrnjgrPjg7zjg4njgYwyMDDnlarlj7Djgarjgonjg6zjgrnjg53jg7Pjgrnjg4fjg7zjgr/jgIHjgZ3jgYbjgafjgarjgZHjgozjgbDjgqjjg6njg7xcbiAqIEBzaW5jZSAgIDEuMC4wXG4gKiBAdmVyc2lvbiAxLjAuMFxuICovXG5mdW5jdGlvbiBjaGVja1N0YXR1cyhyZXNwb25zZSkge1xuXHQvLyBIVFRQ44K544OG44O844K/44K544Kz44O844OJ44GMMjAw55Wq5Y+w44Gn44Gv44Gq44GE5aC05ZCIXG5cdC8vIOmhnuS8vOaWueazleOBq3Jlc3BvbnNlLm9r44GM44GC44KL44GM5aSn6YOo5YiG44Gu44OW44Op44Km44K244GM6Z2e5a++5b+c44Gq44Gu44Gn6Z2e5o6o5aWoXG5cdGlmIChyZXNwb25zZS5zdGF0dXMgPj0gMjAwICYmIHJlc3BvbnNlLnN0YXR1cyA8IDMwMCkge1xuXHRcdHJldHVybiByZXNwb25zZTtcblx0fSBlbHNlIHtcblx0XHRsZXQgZXJyb3IgPSBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG5cdFx0ZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcblx0XHR0aHJvdyBlcnJvcjtcblx0fVxufVxuXG4vKipcbiAqIEpTT07jg4fjg7zjgr/jga7liIfjgorlh7rjgZdcbiAqXG4gKiBAcGFyYW0gICB7UmVzcG9uc2V9ICAgcmVzcG9uc2UgICAg44Os44K544Od44Oz44K544OH44O844K/XG4gKiBAcmV0dXJucyB7SlNPTn0gICAgICAgICAgICAgICAgICAg44Os44K544Od44Oz44K544Gr5qC857SN44GV44KM44Gm44GE44KLSlNPTuODh+ODvOOCv1xuICogQHNpbmNlICAgMS4wLjBcbiAqIEB2ZXJzaW9uIDEuMC4wXG4gKi9cbmZ1bmN0aW9uIHBhcnNlSlNPTihyZXNwb25zZSkge1xuXHQvLyBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG5cdHJldHVybiByZXNwb25zZS5qc29uKCk7XG59XG5cbi8qKlxuICogQWpheOi7oumAgeWHpueQhlxuICpcbiAqIEBwYXJhbSAgIHtzdHJpbmd9ICAgICAgICAgICAgICAgICAgICAgc2VuZFVSTCDou6LpgIHlhYhVUkxcbiAqIEBwYXJhbSAgIHtGb3JtRGF0YX0gICAgICAgICAgICAgICAgICAgZm9ybSAgICDou6LpgIHjgZnjgotGb3JtIERhdGFcbiAqIEByZXR1cm5zIHtQcm9taXNlLkpTT058UHJvbWlzZS5FcnJvcn0gICAgICAgICBKU09O44OH44O844K/44KC44GX44GP44Gv44Ko44Op44O85YaF5a65XG4gKiBAc2luY2UgICAxLjAuMFxuICogQHZlcnNpb24gMS4wLjBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFNlbmRBamF4KHNlbmRVUkwsIGZvcm0pIHtcblx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0XHRmZXRjaChzZW5kVVJMLCB7XG5cdFx0XHRtZXRob2Q6ICdQT1NUJyxcblx0XHRcdGJvZHk6IGZvcm1cblx0XHR9KVxuXHRcdFx0LnRoZW4oY2hlY2tTdGF0dXMpXG5cdFx0XHQudGhlbihwYXJzZUpTT04pXG5cdFx0XHQudGhlbihmdW5jdGlvbiAoanNvbikge1xuXHRcdFx0XHRyZXNvbHZlKGpzb24pO1xuXHRcdFx0fSlcblx0XHRcdC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcblx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdH0pO1xuXHR9KTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBOzs7Ozs7OztBQVFBOzs7Ozs7OztBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7Ozs7OztBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7Ozs7O0FBU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBT0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./HTML Manual/js/ajax-response.js\\n\");\n    /***/\n  }\n  /******/\n\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./HTML Manual Repository/public/js/index.js\n");

/***/ }),

/***/ "./HTML Manual Repository/public/js/index.min.js":
/*!*******************************************************!*\
  !*** ./HTML Manual Repository/public/js/index.min.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("!function (n) {\n  var e = {};\n\n  function t(d) {\n    if (e[d]) return e[d].exports;\n    var c = e[d] = {\n      i: d,\n      l: !1,\n      exports: {}\n    };\n    return n[d].call(c.exports, c, c.exports, t), c.l = !0, c.exports;\n  }\n\n  t.m = n, t.c = e, t.d = function (n, e, d) {\n    t.o(n, e) || Object.defineProperty(n, e, {\n      enumerable: !0,\n      get: d\n    });\n  }, t.r = function (n) {\n    \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(n, Symbol.toStringTag, {\n      value: \"Module\"\n    }), Object.defineProperty(n, \"__esModule\", {\n      value: !0\n    });\n  }, t.t = function (n, e) {\n    if (1 & e && (n = t(n)), 8 & e) return n;\n    if (4 & e && \"object\" == typeof n && n && n.__esModule) return n;\n    var d = Object.create(null);\n    if (t.r(d), Object.defineProperty(d, \"default\", {\n      enumerable: !0,\n      value: n\n    }), 2 & e && \"string\" != typeof n) for (var c in n) t.d(d, c, function (e) {\n      return n[e];\n    }.bind(null, c));\n    return d;\n  }, t.n = function (n) {\n    var e = n && n.__esModule ? function () {\n      return n.default;\n    } : function () {\n      return n;\n    };\n    return t.d(e, \"a\", e), e;\n  }, t.o = function (n, e) {\n    return Object.prototype.hasOwnProperty.call(n, e);\n  }, t.p = \"\", t(t.s = \"./HTML Manual/js/Main.js\");\n}({\n  \"./HTML Manual/js/Main.js\": function (module, __webpack_exports__, __webpack_require__) {\n    \"use strict\";\n\n    eval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony import */ var _ajax_response_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ajax-response.js */ \\\"./HTML Manual/js/ajax-response.js\\\");\\n/**\\n * @file マニュアル用JavaScript\\n *\\n * @since   1.0.0\\n * @version 1.3.5\\n */\\n// Init\\n// SendAjax関数の呼び出し\\n // const imdWidth = 992;\\n\\nconst sideList = ['Main', 'CSS', 'HTML', 'JavaScript', 'Language', 'Node', 'PHP', 'SCSS', 'SQL', 'Wordpress', 'Other'];\\nlet bWordDecide = false;\\nlet sideToggle = [];\\n/**\\n * ランダムワードマニア\\n * @constant {string[][]}\\n */\\n\\nlet randomWordList;\\nlet xorRand;\\n/**\\n * Xor Shift乱数\\n *\\n * @type    {class}\\n * @since   1.1.0\\n * @version 1.3.5\\n */\\n\\nclass xorShift {\\n  /**\\n   * コンストラクタメソッド\\n   *\\n   * @constructs\\n   * @param {number} [w=Math.floor(Date.now() / 1000)] Seed Number\\n   */\\n  constructor(w = Math.floor(Date.now() / 1000)) {\\n    let dateTemp = new Date();\\n    /**\\n     * 乱数 X\\n     *\\n     * 値は以下の何れかから大きい値を選択\\n     * <ul>\\n     * <li>Day ^ Month / 2</li>\\n     * <li>Month * Day * max(Seconds, 5) * max(Minites, 3)</li>\\n     * </ul>\\n     *\\n     * @type {number}\\n     */\\n\\n    this.x = Math.max(Math.floor(dateTemp.getDay() ** (dateTemp.getMonth() / 2)), dateTemp.getMonth() * dateTemp.getDay() * Math.max(dateTemp.getSeconds(), 5) * Math.max(dateTemp.getMinutes(), 3)); // 123456789\\n\\n    /**\\n     * 乱数 Y\\n     *\\n     * max(Seconds, 5) ^ floor(max(Minites, 10) / 10) + max(Seconds, 1) * max(Minites, 1) * floor(Year / 10)\\n     *\\n     * @type {number}\\n     */\\n\\n    this.y = Math.max(Math.max(dateTemp.getSeconds(), 5) ** Math.floor(Math.max(dateTemp.getMinutes(), 10) / 10) + Math.max(dateTemp.getSeconds(), 1) * Math.max(dateTemp.getMinutes(), 1) * Math.floor(dateTemp.getFullYear() / 10)); // 362436069\\n\\n    /**\\n     * 乱数 Z\\n     *\\n     * randomWordList.length + (配列randomWordListの2, 3, 5, 7 の文字列の文字数の和) * (配列randomWordListの11, 13, 17, 19 の文字列の文字数の和) * (配列randomWordListの23, 29 の文字列の文字数の和) * (配列randomWordListの31, 37 の文字列の文字数の和)\\n     *\\n     * @type {number}\\n     */\\n\\n    this.z = randomWordList.length + (randomWordList[2].summary.length + randomWordList[3].summary.length + randomWordList[5].summary.length + randomWordList[7].summary.length) * (randomWordList[11].summary.length + randomWordList[13].summary.length + randomWordList[17].summary.length + randomWordList[19].summary.length) * (randomWordList[23].summary.length + randomWordList[29].summary.length) * (randomWordList[31].summary.length + randomWordList[37].summary.length); // 521288629;\\n\\n    /**\\n     * 乱数 W\\n     *\\n     * デフォルト初期値は現在の時間の1970/01/01 00:00:00からの秒数\\n     *\\n     * @type {number}\\n     */\\n\\n    this.w = w;\\n    console.log('Seed Info:');\\n    console.log('X: ' + this.x);\\n    console.log('Y: ' + this.y);\\n    console.log('Z: ' + this.z);\\n    console.log('W: ' + this.w);\\n  }\\n  /**\\n   * 乱数の生成\\n   *\\n   * @returns {number} 乱数の結果\\n   */\\n\\n\\n  randomInt32() {\\n    let t = this.x ^ this.x << 11;\\n    this.x = this.y;\\n    this.y = this.z;\\n    this.z = this.w;\\n    this.w = this.w ^ this.w >>> 19 ^ (t ^ t >>> 8); // console.log('Number: ' + this.w);\\n\\n    return this.w;\\n  }\\n  /**\\n   * 浮動少数の乱数の生成\\n   *\\n   * @returns {number} 乱数の結果\\n   */\\n\\n\\n  randomFloat() {\\n    let randNumber = this.randomInt32();\\n\\n    if (randNumber < 0) {\\n      randNumber = ~randNumber;\\n    }\\n\\n    return randNumber / (2 ** 31 - 1);\\n  }\\n\\n}\\n/**\\n * ローカルストレージの環境が利用可能か調べる関数\\n *\\n * {@link https://developer.mozilla.org/ja/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API MDN}より参照\\n *\\n * @param   {String}    type    調べる項目\\n * @returns {boolean}           利用可能かのbool\\n * @since   1.3.0\\n * @version 1.3.5\\n */\\n\\n\\nfunction storageAvailable(type) {\\n  let storage = window[type];\\n\\n  try {\\n    let x = '__storage_test__';\\n    storage.setItem(x, x);\\n    storage.removeItem(x);\\n    return true;\\n  } catch (e) {\\n    return e instanceof DOMException && ( // everything except Firefox\\n    e.code === 22 || // Firefox\\n    e.code === 1014 || // test name field too, because code might not be present\\n    // everything except Firefox\\n    e.name === 'QuotaExceededError' || // Firefox\\n    e.name === 'NS_ERROR_DOM_QUOTA_REACHED') && // acknowledge QuotaExceededError only if there's something already stored\\n    storage.length !== 0;\\n  }\\n}\\n/**\\n * ランダムワード取得\\n *\\n * @returns {Promise}   終了コード\\n * @since   1.2.0\\n * @version 1.3.5\\n */\\n\\n\\nfunction getrandomWord() {\\n  return new Promise(function (resolve, reject) {\\n    let fd = new FormData();\\n    Object(_ajax_response_js__WEBPACK_IMPORTED_MODULE_0__[\\\"SendAjax\\\"])('json/randomWord.json', fd).then(function (json) {\\n      // console.log(json);\\n      resolve(json);\\n    }).catch(function (error) {\\n      console.error('request failed', error); // document.getElementById('errors').appendChild(document.createTextNode(event.toString));\\n\\n      reject(error);\\n    });\\n  });\\n}\\n/**\\n * 指定時間毎に実行する\\n *\\n * @param   {number}    [seconds=5]  更新間隔(秒)\\n * @returns {void}\\n * @since   1.0.0\\n * @version 1.3.5\\n */\\n\\n\\nfunction secondsInterval(seconds = 5) {\\n  let bdate = new Date();\\n\\n  if (bdate.getSeconds() % seconds === 0 && bWordDecide === false) {\\n    bWordDecide = true;\\n    setrandomWord();\\n  } else if (bdate.getSeconds() % seconds === 1 && bWordDecide === true) {\\n    bWordDecide = false;\\n  }\\n}\\n/**\\n * ランダムワードの解説を出力\\n *\\n * @async\\n * @interface\\n * @param   {JSON}  jsonData    JSON Data\\n * @returns {void}\\n * @since   1.0.0\\n * @version 1.3.5\\n */\\n\\n\\nasync function randomOutput(jsonData) {\\n  // Init\\n  const textRandom = document.getElementById('randomOutput');\\n  const dl = document.createElement('dl');\\n  let listCount = 0; // リストを置く場所を予め作る\\n\\n  dl.setAttribute('id', 'RandomList');\\n  textRandom.innerHTML = '';\\n  textRandom.appendChild(dl);\\n  const randomList = document.getElementById('RandomList'); // Workerの使用可否の確認\\n\\n  if (window.Worker) {\\n    // Workerの読み込み\\n    // 相対パスで読み込む場合HTMLからの相対パスなので要注意\\n    // const worker = new Worker('js/WorkerTask.js', { type: 'module' });\\n    let worker = new Worker('js/WorkerTask.js');\\n    worker.addEventListener('message', function (event) {\\n      randomList.innerHTML += event.data;\\n    });\\n    worker.addEventListener('messageerror', function (event) {\\n      console.error('Task failed', event.data);\\n    }); // JSONデータを丸投げ\\n\\n    worker.postMessage({\\n      'mode': 'createRandList'\\n    });\\n  } else {\\n    for (let dataTemp of jsonData) {\\n      const dt = document.createElement('dt');\\n      const dd = document.createElement('dd');\\n      dt.setAttribute('id', 'wordID' + ++listCount);\\n      dt.innerHTML = '<h3>' + dataTemp.title + '</h3><h4>出典: ' + dataTemp.original + '</h4>';\\n      dd.innerHTML = dataTemp.summary;\\n      randomList.appendChild(dt);\\n      randomList.appendChild(dd);\\n    }\\n  }\\n}\\n/**\\n * ランダムワードの出力\\n *\\n * @interface\\n * @returns {void}\\n * @since   1.0.0\\n * @version 1.3.5\\n */\\n\\n\\nfunction setrandomWord() {\\n  let wordNum = Math.floor(xorRand.randomFloat() * randomWordList.length);\\n  document.getElementById('randomWord').setAttribute('href', 'scp-randomWord.html#wordID' + (wordNum + 1));\\n  document.getElementById('randomWord').innerHTML = randomWordList[wordNum].title;\\n}\\n/**\\n * HTMLの読み込み終了時に行われれる処理\\n */\\n\\n\\ndocument.addEventListener('DOMContentLoaded', async function () {\\n  const isEnableStorage = storageAvailable('localStorage');\\n  randomWordList = await getrandomWord();\\n  xorRand = new xorShift();\\n  document.getElementById('expandAll').addEventListener('click', function () {\\n    for (let sideName of sideList) {\\n      let btnElement = document.getElementById('btn' + sideName);\\n      let linkElement = document.getElementById('link' + sideName); // trueに変更\\n\\n      linkElement.checked = true;\\n      sideToggle[sideName] = 'true';\\n      btnElement.textContent = '-'; // ローカルストレージサポートの確認\\n\\n      if (isEnableStorage) {\\n        localStorage.setItem(sideName + 'Toggle', 'true');\\n      }\\n    }\\n  });\\n  document.getElementById('collapseAll').addEventListener('click', function () {\\n    for (let sideName of sideList) {\\n      const btnElement = document.getElementById('btn' + sideName);\\n      const linkElement = document.getElementById('link' + sideName); // falseに変更\\n\\n      linkElement.checked = false;\\n      sideToggle[sideName] = 'false';\\n      btnElement.textContent = '+'; // ローカルストレージサポートの確認\\n\\n      if (isEnableStorage) {\\n        localStorage.setItem(sideName + 'Toggle', 'false');\\n      }\\n    }\\n  }); // サイドバーの処理\\n  // ローカルストレージサポートの確認\\n\\n  if (storageAvailable('localStorage')) {\\n    for (let sideName of sideList) {\\n      const btnElement = document.getElementById('btn' + sideName);\\n      const linkElement = document.getElementById('link' + sideName); // ローカルストレージから情報を取得\\n\\n      sideToggle[sideName] = localStorage.getItem(sideName + 'Toggle'); // フラグを基に隠すかの指定\\n\\n      if (sideToggle[sideName] === null || sideToggle[sideName] === 'false') {// Null\\n      } else {\\n        btnElement.textContent = '-';\\n        linkElement.checked = true;\\n      } // イベントの登録\\n\\n\\n      linkElement.addEventListener('change', function () {\\n        if (sideToggle[sideName] === null || sideToggle[sideName] === 'false') {\\n          sideToggle[sideName] = 'true';\\n          localStorage.setItem(sideName + 'Toggle', 'true');\\n          btnElement.textContent = '-';\\n        } else {\\n          sideToggle[sideName] = 'false';\\n          localStorage.setItem(sideName + 'Toggle', 'false');\\n          btnElement.textContent = '+';\\n        }\\n      });\\n    }\\n  }\\n  /**\\n   * 現在の個数\\n   * @constant {Element}\\n   */\\n\\n\\n  const cntRandom = document.getElementById('countRandom');\\n\\n  if (cntRandom !== null) {\\n    cntRandom.textContent = randomWordList.length;\\n  }\\n  /**\\n   * ランダムワードの出力位置\\n   * @constant {Element}\\n   */\\n\\n\\n  const textRandom = document.getElementById('randomOutput');\\n\\n  if (textRandom !== null) {\\n    randomOutput(randomWordList);\\n  }\\n\\n  setrandomWord();\\n  setInterval(function () {\\n    secondsInterval(10);\\n  }, 50);\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./HTML Manual/js/Main.js\\n\");\n  },\n  \"./HTML Manual/js/ajax-response.js\": function (module, __webpack_exports__, __webpack_require__) {\n    \"use strict\";\n\n    eval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"SendAjax\\\", function() { return SendAjax; });\\n/**\\n * @fileoverview Ajaxレスポンス取得処理に使用するAjax\\n *\\n * @module  ajax-response\\n * @since   1.0.0\\n * @version 1.0.0\\n */\\n\\n/**\\n * HTTPステータスコードの確認\\n *\\n * @param   {Response}       response    レスポンスデータ\\n * @returns {Response|Error}             HTTPステータスコードが200番台ならレスポンスデータ、そうでなければエラー\\n * @since   1.0.0\\n * @version 1.0.0\\n */\\nfunction checkStatus(response) {\\n  // HTTPステータスコードが200番台ではない場合\\n  // 類似方法にresponse.okがあるが大部分のブラウザが非対応なので非推奨\\n  if (response.status >= 200 && response.status < 300) {\\n    return response;\\n  } else {\\n    let error = new Error(response.statusText);\\n    error.response = response;\\n    throw error;\\n  }\\n}\\n/**\\n * JSONデータの切り出し\\n *\\n * @param   {Response}   response    レスポンスデータ\\n * @returns {JSON}                   レスポンスに格納されているJSONデータ\\n * @since   1.0.0\\n * @version 1.0.0\\n */\\n\\n\\nfunction parseJSON(response) {\\n  // console.log(response);\\n  return response.json();\\n}\\n/**\\n * Ajax転送処理\\n *\\n * @param   {string}                     sendURL 転送先URL\\n * @param   {FormData}                   form    転送するForm Data\\n * @returns {Promise.JSON|Promise.Error}         JSONデータもしくはエラー内容\\n * @since   1.0.0\\n * @version 1.0.0\\n */\\n\\n\\nfunction SendAjax(sendURL, form) {\\n  return new Promise(function (resolve, reject) {\\n    fetch(sendURL, {\\n      method: 'POST',\\n      body: form\\n    }).then(checkStatus).then(parseJSON).then(function (json) {\\n      resolve(json);\\n    }).catch(function (error) {\\n      reject(error);\\n    });\\n  });\\n}//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9IVE1MIE1hbnVhbC9qcy9hamF4LXJlc3BvbnNlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vSFRNTCBNYW51YWwvanMvYWpheC1yZXNwb25zZS5qcz83NGRhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBBamF444Os44K544Od44Oz44K55Y+W5b6X5Yem55CG44Gr5L2/55So44GZ44KLQWpheFxuICpcbiAqIEBtb2R1bGUgIGFqYXgtcmVzcG9uc2VcbiAqIEBzaW5jZSAgIDEuMC4wXG4gKiBAdmVyc2lvbiAxLjAuMFxuICovXG5cbi8qKlxuICogSFRUUOOCueODhuODvOOCv+OCueOCs+ODvOODieOBrueiuuiqjVxuICpcbiAqIEBwYXJhbSAgIHtSZXNwb25zZX0gICAgICAgcmVzcG9uc2UgICAg44Os44K544Od44Oz44K544OH44O844K/XG4gKiBAcmV0dXJucyB7UmVzcG9uc2V8RXJyb3J9ICAgICAgICAgICAgIEhUVFDjgrnjg4bjg7zjgr/jgrnjgrPjg7zjg4njgYwyMDDnlarlj7Djgarjgonjg6zjgrnjg53jg7Pjgrnjg4fjg7zjgr/jgIHjgZ3jgYbjgafjgarjgZHjgozjgbDjgqjjg6njg7xcbiAqIEBzaW5jZSAgIDEuMC4wXG4gKiBAdmVyc2lvbiAxLjAuMFxuICovXG5mdW5jdGlvbiBjaGVja1N0YXR1cyhyZXNwb25zZSkge1xuXHQvLyBIVFRQ44K544OG44O844K/44K544Kz44O844OJ44GMMjAw55Wq5Y+w44Gn44Gv44Gq44GE5aC05ZCIXG5cdC8vIOmhnuS8vOaWueazleOBq3Jlc3BvbnNlLm9r44GM44GC44KL44GM5aSn6YOo5YiG44Gu44OW44Op44Km44K244GM6Z2e5a++5b+c44Gq44Gu44Gn6Z2e5o6o5aWoXG5cdGlmIChyZXNwb25zZS5zdGF0dXMgPj0gMjAwICYmIHJlc3BvbnNlLnN0YXR1cyA8IDMwMCkge1xuXHRcdHJldHVybiByZXNwb25zZTtcblx0fSBlbHNlIHtcblx0XHRsZXQgZXJyb3IgPSBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG5cdFx0ZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcblx0XHR0aHJvdyBlcnJvcjtcblx0fVxufVxuXG4vKipcbiAqIEpTT07jg4fjg7zjgr/jga7liIfjgorlh7rjgZdcbiAqXG4gKiBAcGFyYW0gICB7UmVzcG9uc2V9ICAgcmVzcG9uc2UgICAg44Os44K544Od44Oz44K544OH44O844K/XG4gKiBAcmV0dXJucyB7SlNPTn0gICAgICAgICAgICAgICAgICAg44Os44K544Od44Oz44K544Gr5qC857SN44GV44KM44Gm44GE44KLSlNPTuODh+ODvOOCv1xuICogQHNpbmNlICAgMS4wLjBcbiAqIEB2ZXJzaW9uIDEuMC4wXG4gKi9cbmZ1bmN0aW9uIHBhcnNlSlNPTihyZXNwb25zZSkge1xuXHQvLyBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG5cdHJldHVybiByZXNwb25zZS5qc29uKCk7XG59XG5cbi8qKlxuICogQWpheOi7oumAgeWHpueQhlxuICpcbiAqIEBwYXJhbSAgIHtzdHJpbmd9ICAgICAgICAgICAgICAgICAgICAgc2VuZFVSTCDou6LpgIHlhYhVUkxcbiAqIEBwYXJhbSAgIHtGb3JtRGF0YX0gICAgICAgICAgICAgICAgICAgZm9ybSAgICDou6LpgIHjgZnjgotGb3JtIERhdGFcbiAqIEByZXR1cm5zIHtQcm9taXNlLkpTT058UHJvbWlzZS5FcnJvcn0gICAgICAgICBKU09O44OH44O844K/44KC44GX44GP44Gv44Ko44Op44O85YaF5a65XG4gKiBAc2luY2UgICAxLjAuMFxuICogQHZlcnNpb24gMS4wLjBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFNlbmRBamF4KHNlbmRVUkwsIGZvcm0pIHtcblx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0XHRmZXRjaChzZW5kVVJMLCB7XG5cdFx0XHRtZXRob2Q6ICdQT1NUJyxcblx0XHRcdGJvZHk6IGZvcm1cblx0XHR9KVxuXHRcdFx0LnRoZW4oY2hlY2tTdGF0dXMpXG5cdFx0XHQudGhlbihwYXJzZUpTT04pXG5cdFx0XHQudGhlbihmdW5jdGlvbiAoanNvbikge1xuXHRcdFx0XHRyZXNvbHZlKGpzb24pO1xuXHRcdFx0fSlcblx0XHRcdC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcblx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdH0pO1xuXHR9KTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBOzs7Ozs7OztBQVFBOzs7Ozs7OztBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7Ozs7OztBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7Ozs7O0FBU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBT0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./HTML Manual/js/ajax-response.js\\n\");\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./HTML Manual Repository/public/js/index.min.js\n");

/***/ }),

/***/ "./HTML Manual Repository/public/js/lazysizes.min.js":
/*!***********************************************************!*\
  !*** ./HTML Manual Repository/public/js/lazysizes.min.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*! lazysizes - v5.0.0 */\n!function (a, b) {\n  var c = b(a, a.document);\n  a.lazySizes = c,  true && module.exports && (module.exports = c);\n}(window, function (a, b) {\n  \"use strict\";\n\n  if (b.getElementsByClassName) {\n    var c,\n        d,\n        e = b.documentElement,\n        f = a.Date,\n        g = a.HTMLPictureElement,\n        h = \"addEventListener\",\n        i = \"getAttribute\",\n        j = a[h],\n        k = a.setTimeout,\n        l = a.requestAnimationFrame || k,\n        m = a.requestIdleCallback,\n        n = /^picture$/i,\n        o = [\"load\", \"error\", \"lazyincluded\", \"_lazyloaded\"],\n        p = {},\n        q = Array.prototype.forEach,\n        r = function (a, b) {\n      return p[b] || (p[b] = new RegExp(\"(\\\\s|^)\" + b + \"(\\\\s|$)\")), p[b].test(a[i](\"class\") || \"\") && p[b];\n    },\n        s = function (a, b) {\n      r(a, b) || a.setAttribute(\"class\", (a[i](\"class\") || \"\").trim() + \" \" + b);\n    },\n        t = function (a, b) {\n      var c;\n      (c = r(a, b)) && a.setAttribute(\"class\", (a[i](\"class\") || \"\").replace(c, \" \"));\n    },\n        u = function (a, b, c) {\n      var d = c ? h : \"removeEventListener\";\n      c && u(a, b), o.forEach(function (c) {\n        a[d](c, b);\n      });\n    },\n        v = function (a, d, e, f, g) {\n      var h = b.createEvent(\"Event\");\n      return e || (e = {}), e.instance = c, h.initEvent(d, !f, !g), h.detail = e, a.dispatchEvent(h), h;\n    },\n        w = function (b, c) {\n      var e;\n      !g && (e = a.picturefill || d.pf) ? (c && c.src && !b[i](\"srcset\") && b.setAttribute(\"srcset\", c.src), e({\n        reevaluate: !0,\n        elements: [b]\n      })) : c && c.src && (b.src = c.src);\n    },\n        x = function (a, b) {\n      return (getComputedStyle(a, null) || {})[b];\n    },\n        y = function (a, b, c) {\n      for (c = c || a.offsetWidth; c < d.minSize && b && !a._lazysizesWidth;) c = b.offsetWidth, b = b.parentNode;\n\n      return c;\n    },\n        z = function () {\n      var a,\n          c,\n          d = [],\n          e = [],\n          f = d,\n          g = function () {\n        var b = f;\n\n        for (f = d.length ? e : d, a = !0, c = !1; b.length;) b.shift()();\n\n        a = !1;\n      },\n          h = function (d, e) {\n        a && !e ? d.apply(this, arguments) : (f.push(d), c || (c = !0, (b.hidden ? k : l)(g)));\n      };\n\n      return h._lsFlush = g, h;\n    }(),\n        A = function (a, b) {\n      return b ? function () {\n        z(a);\n      } : function () {\n        var b = this,\n            c = arguments;\n        z(function () {\n          a.apply(b, c);\n        });\n      };\n    },\n        B = function (a) {\n      var b,\n          c = 0,\n          e = d.throttleDelay,\n          g = d.ricTimeout,\n          h = function () {\n        b = !1, c = f.now(), a();\n      },\n          i = m && g > 49 ? function () {\n        m(h, {\n          timeout: g\n        }), g !== d.ricTimeout && (g = d.ricTimeout);\n      } : A(function () {\n        k(h);\n      }, !0);\n\n      return function (a) {\n        var d;\n        (a = !0 === a) && (g = 33), b || (b = !0, d = e - (f.now() - c), d < 0 && (d = 0), a || d < 9 ? i() : k(i, d));\n      };\n    },\n        C = function (a) {\n      var b,\n          c,\n          d = 99,\n          e = function () {\n        b = null, a();\n      },\n          g = function () {\n        var a = f.now() - c;\n        a < d ? k(g, d - a) : (m || e)(e);\n      };\n\n      return function () {\n        c = f.now(), b || (b = k(g, d));\n      };\n    };\n\n    !function () {\n      var b,\n          c = {\n        lazyClass: \"lazyload\",\n        loadedClass: \"lazyloaded\",\n        loadingClass: \"lazyloading\",\n        preloadClass: \"lazypreload\",\n        errorClass: \"lazyerror\",\n        autosizesClass: \"lazyautosizes\",\n        srcAttr: \"data-src\",\n        srcsetAttr: \"data-srcset\",\n        sizesAttr: \"data-sizes\",\n        minSize: 40,\n        customMedia: {},\n        init: !0,\n        expFactor: 1.5,\n        hFac: .8,\n        loadMode: 2,\n        loadHidden: !0,\n        ricTimeout: 0,\n        throttleDelay: 125\n      };\n      d = a.lazySizesConfig || a.lazysizesConfig || {};\n\n      for (b in c) b in d || (d[b] = c[b]);\n\n      k(function () {\n        d.init && F();\n      });\n    }();\n\n    var D = function () {\n      var g,\n          l,\n          m,\n          o,\n          p,\n          y,\n          D,\n          F,\n          G,\n          H,\n          I,\n          J,\n          K = /^img$/i,\n          L = /^iframe$/i,\n          M = \"onscroll\" in a && !/(gle|ing)bot/.test(navigator.userAgent),\n          N = 0,\n          O = 0,\n          P = 0,\n          Q = -1,\n          R = function (a) {\n        P--, (!a || P < 0 || !a.target) && (P = 0);\n      },\n          S = function (a) {\n        return null == J && (J = \"hidden\" == x(b.body, \"visibility\")), J || \"hidden\" != x(a.parentNode, \"visibility\") && \"hidden\" != x(a, \"visibility\");\n      },\n          T = function (a, c) {\n        var d,\n            f = a,\n            g = S(a);\n\n        for (F -= c, I += c, G -= c, H += c; g && (f = f.offsetParent) && f != b.body && f != e;) (g = (x(f, \"opacity\") || 1) > 0) && \"visible\" != x(f, \"overflow\") && (d = f.getBoundingClientRect(), g = H > d.left && G < d.right && I > d.top - 1 && F < d.bottom + 1);\n\n        return g;\n      },\n          U = function () {\n        var a,\n            f,\n            h,\n            j,\n            k,\n            m,\n            n,\n            p,\n            q,\n            r,\n            s,\n            t,\n            u = c.elements;\n\n        if ((o = d.loadMode) && P < 8 && (a = u.length)) {\n          for (f = 0, Q++; f < a; f++) if (u[f] && !u[f]._lazyRace) if (!M || c.prematureUnveil && c.prematureUnveil(u[f])) aa(u[f]);else if ((p = u[f][i](\"data-expand\")) && (m = 1 * p) || (m = O), r || (r = !d.expand || d.expand < 1 ? e.clientHeight > 500 && e.clientWidth > 500 ? 500 : 370 : d.expand, c._defEx = r, s = r * d.expFactor, t = d.hFac, J = null, O < s && P < 1 && Q > 2 && o > 2 && !b.hidden ? (O = s, Q = 0) : O = o > 1 && Q > 1 && P < 6 ? r : N), q !== m && (y = innerWidth + m * t, D = innerHeight + m, n = -1 * m, q = m), h = u[f].getBoundingClientRect(), (I = h.bottom) >= n && (F = h.top) <= D && (H = h.right) >= n * t && (G = h.left) <= y && (I || H || G || F) && (d.loadHidden || S(u[f])) && (l && P < 3 && !p && (o < 3 || Q < 4) || T(u[f], m))) {\n            if (aa(u[f]), k = !0, P > 9) break;\n          } else !k && l && !j && P < 4 && Q < 4 && o > 2 && (g[0] || d.preloadAfterLoad) && (g[0] || !p && (I || H || G || F || \"auto\" != u[f][i](d.sizesAttr))) && (j = g[0] || u[f]);\n\n          j && !k && aa(j);\n        }\n      },\n          V = B(U),\n          W = function (a) {\n        var b = a.target;\n        if (b._lazyCache) return void delete b._lazyCache;\n        R(a), s(b, d.loadedClass), t(b, d.loadingClass), u(b, Y), v(b, \"lazyloaded\");\n      },\n          X = A(W),\n          Y = function (a) {\n        X({\n          target: a.target\n        });\n      },\n          Z = function (a, b) {\n        try {\n          a.contentWindow.location.replace(b);\n        } catch (c) {\n          a.src = b;\n        }\n      },\n          $ = function (a) {\n        var b,\n            c = a[i](d.srcsetAttr);\n        (b = d.customMedia[a[i](\"data-media\") || a[i](\"media\")]) && a.setAttribute(\"media\", b), c && a.setAttribute(\"srcset\", c);\n      },\n          _ = A(function (a, b, c, e, f) {\n        var g, h, j, l, o, p;\n        (o = v(a, \"lazybeforeunveil\", b)).defaultPrevented || (e && (c ? s(a, d.autosizesClass) : a.setAttribute(\"sizes\", e)), h = a[i](d.srcsetAttr), g = a[i](d.srcAttr), f && (j = a.parentNode, l = j && n.test(j.nodeName || \"\")), p = b.firesLoad || \"src\" in a && (h || g || l), o = {\n          target: a\n        }, s(a, d.loadingClass), p && (clearTimeout(m), m = k(R, 2500), u(a, Y, !0)), l && q.call(j.getElementsByTagName(\"source\"), $), h ? a.setAttribute(\"srcset\", h) : g && !l && (L.test(a.nodeName) ? Z(a, g) : a.src = g), f && (h || l) && w(a, {\n          src: g\n        })), a._lazyRace && delete a._lazyRace, t(a, d.lazyClass), z(function () {\n          var b = a.complete && a.naturalWidth > 1;\n          p && !b || (b && s(a, \"ls-is-cached\"), W(o), a._lazyCache = !0, k(function () {\n            \"_lazyCache\" in a && delete a._lazyCache;\n          }, 9)), \"lazy\" == a.loading && P--;\n        }, !0);\n      }),\n          aa = function (a) {\n        if (!a._lazyRace) {\n          var b,\n              c = K.test(a.nodeName),\n              e = c && (a[i](d.sizesAttr) || a[i](\"sizes\")),\n              f = \"auto\" == e;\n          (!f && l || !c || !a[i](\"src\") && !a.srcset || a.complete || r(a, d.errorClass) || !r(a, d.lazyClass)) && (b = v(a, \"lazyunveilread\").detail, f && E.updateElem(a, !0, a.offsetWidth), a._lazyRace = !0, P++, _(a, b, f, e, c));\n        }\n      },\n          ba = C(function () {\n        d.loadMode = 3, V();\n      }),\n          ca = function () {\n        3 == d.loadMode && (d.loadMode = 2), ba();\n      },\n          da = function () {\n        if (!l) {\n          if (f.now() - p < 999) return void k(da, 999);\n          l = !0, d.loadMode = 3, V(), j(\"scroll\", ca, !0);\n        }\n      };\n\n      return {\n        _: function () {\n          p = f.now(), c.elements = b.getElementsByClassName(d.lazyClass), g = b.getElementsByClassName(d.lazyClass + \" \" + d.preloadClass), j(\"scroll\", V, !0), j(\"resize\", V, !0), a.MutationObserver ? new MutationObserver(V).observe(e, {\n            childList: !0,\n            subtree: !0,\n            attributes: !0\n          }) : (e[h](\"DOMNodeInserted\", V, !0), e[h](\"DOMAttrModified\", V, !0), setInterval(V, 999)), j(\"hashchange\", V, !0), [\"focus\", \"mouseover\", \"click\", \"load\", \"transitionend\", \"animationend\"].forEach(function (a) {\n            b[h](a, V, !0);\n          }), /d$|^c/.test(b.readyState) ? da() : (j(\"load\", da), b[h](\"DOMContentLoaded\", V), k(da, 2e4)), c.elements.length ? (U(), z._lsFlush()) : V();\n        },\n        checkElems: V,\n        unveil: aa,\n        _aLSL: ca\n      };\n    }(),\n        E = function () {\n      var a,\n          c = A(function (a, b, c, d) {\n        var e, f, g;\n        if (a._lazysizesWidth = d, d += \"px\", a.setAttribute(\"sizes\", d), n.test(b.nodeName || \"\")) for (e = b.getElementsByTagName(\"source\"), f = 0, g = e.length; f < g; f++) e[f].setAttribute(\"sizes\", d);\n        c.detail.dataAttr || w(a, c.detail);\n      }),\n          e = function (a, b, d) {\n        var e,\n            f = a.parentNode;\n        f && (d = y(a, f, d), e = v(a, \"lazybeforesizes\", {\n          width: d,\n          dataAttr: !!b\n        }), e.defaultPrevented || (d = e.detail.width) && d !== a._lazysizesWidth && c(a, f, e, d));\n      },\n          f = function () {\n        var b,\n            c = a.length;\n        if (c) for (b = 0; b < c; b++) e(a[b]);\n      },\n          g = C(f);\n\n      return {\n        _: function () {\n          a = b.getElementsByClassName(d.autosizesClass), j(\"resize\", g);\n        },\n        checkElems: g,\n        updateElem: e\n      };\n    }(),\n        F = function () {\n      F.i || (F.i = !0, E._(), D._());\n    };\n\n    return c = {\n      cfg: d,\n      autoSizer: E,\n      loader: D,\n      init: F,\n      uP: w,\n      aC: s,\n      rC: t,\n      hC: r,\n      fire: v,\n      gW: y,\n      rAF: z\n    };\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./HTML Manual Repository/public/js/lazysizes.min.js\n");

/***/ }),

/***/ "./HTML Manual Repository/public/js/nomodule/ajax-response.js":
/*!********************************************************************!*\
  !*** ./HTML Manual Repository/public/js/nomodule/ajax-response.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * @fileoverview Ajaxレスポンス取得処理に使用するAjax\n *\n * @module  nomodule/ajax-response\n * @since   1.0.0\n * @version 1.0.0\n */\n\n/**\n * HTTPステータスコードの確認\n *\n * @param   {Response}          response    レスポンスデータ\n * @returns {Response|Error}                HTTPステータスコードが200番台ならレスポンスデータ、そうでなければエラー\n * @since   1.0.0\n * @version 1.0.0\n */\nfunction checkStatus(response) {\n  // HTTPステータスコードが200番台ではない場合\n  // 類似方法にresponse.okがあるが大部分のブラウザが非対応なので非推奨\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  } else {\n    let error = new Error(response.statusText);\n    error.response = response;\n    throw error;\n  }\n}\n/**\n * JSONデータの切り出し\n *\n * @param   {Response}  response    レスポンスデータ\n * @returns {JSON}                  レスポンスに格納されているJSONデータ\n * @since   1.0.0\n * @version 1.0.0\n */\n\n\nfunction parseJSON(response) {\n  // console.log(response);\n  return response.json();\n}\n/**\n * Ajax転送処理\n *\n * @param   {string}                        sendURL 転送先URL\n * @param   {FormData}                      [form]  転送するForm Data(無くても問題ない)\n * @returns {Promise.JSON|Promise.Error}            JSONデータもしくはエラー内容\n * @since   1.0.0\n * @version 1.0.0\n */\n\n\nfunction SendAjax(sendURL, form) {\n  return new Promise(function (resolve, reject) {\n    if (self.fetch) {\n      fetch(sendURL, {\n        method: 'POST',\n        body: form\n      }).then(checkStatus).then(parseJSON).then(function (json) {\n        resolve(json);\n      }).catch(function (error) {\n        reject(error);\n      });\n    } else {\n      // Fetch API未対応時の処理\n      let xhr = new XMLHttpRequest();\n      xhr.open('POST', sendURL, true);\n      xhr.addEventListener('load', function () {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n          resolve(xhr.response);\n        }\n      });\n      xhr.addEventListener('error', function (error) {\n        reject(error);\n      });\n      xhr.addEventListener('timeout', function () {\n        reject('connection timeout');\n      });\n      xhr.timeout = 30000;\n      xhr.send(form);\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9IVE1MIE1hbnVhbCBSZXBvc2l0b3J5L3B1YmxpYy9qcy9ub21vZHVsZS9hamF4LXJlc3BvbnNlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vSFRNTCBNYW51YWwgUmVwb3NpdG9yeS9wdWJsaWMvanMvbm9tb2R1bGUvYWpheC1yZXNwb25zZS5qcz9mNzExIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBBamF444Os44K544Od44Oz44K55Y+W5b6X5Yem55CG44Gr5L2/55So44GZ44KLQWpheFxuICpcbiAqIEBtb2R1bGUgIG5vbW9kdWxlL2FqYXgtcmVzcG9uc2VcbiAqIEBzaW5jZSAgIDEuMC4wXG4gKiBAdmVyc2lvbiAxLjAuMFxuICovXG5cbi8qKlxuICogSFRUUOOCueODhuODvOOCv+OCueOCs+ODvOODieOBrueiuuiqjVxuICpcbiAqIEBwYXJhbSAgIHtSZXNwb25zZX0gICAgICAgICAgcmVzcG9uc2UgICAg44Os44K544Od44Oz44K544OH44O844K/XG4gKiBAcmV0dXJucyB7UmVzcG9uc2V8RXJyb3J9ICAgICAgICAgICAgICAgIEhUVFDjgrnjg4bjg7zjgr/jgrnjgrPjg7zjg4njgYwyMDDnlarlj7Djgarjgonjg6zjgrnjg53jg7Pjgrnjg4fjg7zjgr/jgIHjgZ3jgYbjgafjgarjgZHjgozjgbDjgqjjg6njg7xcbiAqIEBzaW5jZSAgIDEuMC4wXG4gKiBAdmVyc2lvbiAxLjAuMFxuICovXG5mdW5jdGlvbiBjaGVja1N0YXR1cyhyZXNwb25zZSkge1xuXHQvLyBIVFRQ44K544OG44O844K/44K544Kz44O844OJ44GMMjAw55Wq5Y+w44Gn44Gv44Gq44GE5aC05ZCIXG5cdC8vIOmhnuS8vOaWueazleOBq3Jlc3BvbnNlLm9r44GM44GC44KL44GM5aSn6YOo5YiG44Gu44OW44Op44Km44K244GM6Z2e5a++5b+c44Gq44Gu44Gn6Z2e5o6o5aWoXG5cdGlmIChyZXNwb25zZS5zdGF0dXMgPj0gMjAwICYmIHJlc3BvbnNlLnN0YXR1cyA8IDMwMCkge1xuXHRcdHJldHVybiByZXNwb25zZTtcblx0fSBlbHNlIHtcblx0XHRsZXQgZXJyb3IgPSBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG5cdFx0ZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcblx0XHR0aHJvdyBlcnJvcjtcblx0fVxufVxuXG4vKipcbiAqIEpTT07jg4fjg7zjgr/jga7liIfjgorlh7rjgZdcbiAqXG4gKiBAcGFyYW0gICB7UmVzcG9uc2V9ICByZXNwb25zZSAgICDjg6zjgrnjg53jg7Pjgrnjg4fjg7zjgr9cbiAqIEByZXR1cm5zIHtKU09OfSAgICAgICAgICAgICAgICAgIOODrOOCueODneODs+OCueOBq+agvOe0jeOBleOCjOOBpuOBhOOCi0pTT07jg4fjg7zjgr9cbiAqIEBzaW5jZSAgIDEuMC4wXG4gKiBAdmVyc2lvbiAxLjAuMFxuICovXG5mdW5jdGlvbiBwYXJzZUpTT04ocmVzcG9uc2UpIHtcblx0Ly8gY29uc29sZS5sb2cocmVzcG9uc2UpO1xuXHRyZXR1cm4gcmVzcG9uc2UuanNvbigpO1xufVxuXG4vKipcbiAqIEFqYXjou6LpgIHlh6bnkIZcbiAqXG4gKiBAcGFyYW0gICB7c3RyaW5nfSAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRVUkwg6Lui6YCB5YWIVVJMXG4gKiBAcGFyYW0gICB7Rm9ybURhdGF9ICAgICAgICAgICAgICAgICAgICAgIFtmb3JtXSAg6Lui6YCB44GZ44KLRm9ybSBEYXRhKOeEoeOBj+OBpuOCguWVj+mhjOOBquOBhClcbiAqIEByZXR1cm5zIHtQcm9taXNlLkpTT058UHJvbWlzZS5FcnJvcn0gICAgICAgICAgICBKU09O44OH44O844K/44KC44GX44GP44Gv44Ko44Op44O85YaF5a65XG4gKiBAc2luY2UgICAxLjAuMFxuICogQHZlcnNpb24gMS4wLjBcbiAqL1xuZnVuY3Rpb24gU2VuZEFqYXgoc2VuZFVSTCwgZm9ybSkge1xuXHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdGlmIChzZWxmLmZldGNoKSB7XG5cdFx0XHRmZXRjaChzZW5kVVJMLCB7XG5cdFx0XHRcdG1ldGhvZDogJ1BPU1QnLFxuXHRcdFx0XHRib2R5OiBmb3JtXG5cdFx0XHR9KVxuXHRcdFx0XHQudGhlbihjaGVja1N0YXR1cylcblx0XHRcdFx0LnRoZW4ocGFyc2VKU09OKVxuXHRcdFx0XHQudGhlbihmdW5jdGlvbiAoanNvbikge1xuXHRcdFx0XHRcdHJlc29sdmUoanNvbik7XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcblx0XHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gRmV0Y2ggQVBJ5pyq5a++5b+c5pmC44Gu5Yem55CGXG5cdFx0XHRsZXQgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cdFx0XHR4aHIub3BlbignUE9TVCcsIHNlbmRVUkwsIHRydWUpO1xuXHRcdFx0eGhyLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCAmJiB4aHIuc3RhdHVzID09PSAyMDApIHtcblx0XHRcdFx0XHRyZXNvbHZlKHhoci5yZXNwb25zZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHR4aHIuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBmdW5jdGlvbiAoZXJyb3IpIHtcblx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdH0pO1xuXG5cdFx0XHR4aHIuYWRkRXZlbnRMaXN0ZW5lcigndGltZW91dCcsIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0cmVqZWN0KCdjb25uZWN0aW9uIHRpbWVvdXQnKTtcblx0XHRcdH0pO1xuXG5cdFx0XHR4aHIudGltZW91dCA9IDMwMDAwO1xuXHRcdFx0eGhyLnNlbmQoZm9ybSk7XG5cdFx0fVxuXHR9KTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0FBUUE7Ozs7Ozs7O0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7Ozs7O0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7Ozs7Ozs7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQU9BO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./HTML Manual Repository/public/js/nomodule/ajax-response.js\n");

/***/ }),

/***/ "./HTML Manual Repository/public/js/nomodule/ajax-response.min.js":
/*!************************************************************************!*\
  !*** ./HTML Manual Repository/public/js/nomodule/ajax-response.min.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function checkStatus(t) {\n  if (t.status >= 200 && t.status < 300) return t;\n  {\n    let e = new Error(t.statusText);\n    throw e.response = t, e;\n  }\n}\n\nfunction parseJSON(t) {\n  return t.json();\n}\n\nfunction SendAjax(t, e) {\n  return new Promise(function (n, o) {\n    if (self.fetch) fetch(t, {\n      method: \"POST\",\n      body: e\n    }).then(checkStatus).then(parseJSON).then(function (t) {\n      n(t);\n    }).catch(function (t) {\n      o(t);\n    });else {\n      let s = new XMLHttpRequest();\n      s.open(\"POST\", t, !0), s.addEventListener(\"load\", function () {\n        4 === s.readyState && 200 === s.status && n(s.response);\n      }), s.addEventListener(\"error\", function (t) {\n        o(t);\n      }), s.addEventListener(\"timeout\", function () {\n        o(\"connection timeout\");\n      }), s.timeout = 3e4, s.send(e);\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9IVE1MIE1hbnVhbCBSZXBvc2l0b3J5L3B1YmxpYy9qcy9ub21vZHVsZS9hamF4LXJlc3BvbnNlLm1pbi5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9ub21vZHVsZS9hamF4LXJlc3BvbnNlLmpzPzkzNTYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEFqYXjjg6zjgrnjg53jg7Pjgrnlj5blvpflh6bnkIbjgavkvb/nlKjjgZnjgotBamF4XG4gKlxuICogQG1vZHVsZSAgbm9tb2R1bGUvYWpheC1yZXNwb25zZVxuICogQHNpbmNlICAgMS4wLjBcbiAqIEB2ZXJzaW9uIDEuMC4wXG4gKi9cblxuLyoqXG4gKiBIVFRQ44K544OG44O844K/44K544Kz44O844OJ44Gu56K66KqNXG4gKlxuICogQHBhcmFtICAge1Jlc3BvbnNlfSAgICAgICAgICByZXNwb25zZSAgICDjg6zjgrnjg53jg7Pjgrnjg4fjg7zjgr9cbiAqIEByZXR1cm5zIHtSZXNwb25zZXxFcnJvcn0gICAgICAgICAgICAgICAgSFRUUOOCueODhuODvOOCv+OCueOCs+ODvOODieOBjDIwMOeVquWPsOOBquOCieODrOOCueODneODs+OCueODh+ODvOOCv+OAgeOBneOBhuOBp+OBquOBkeOCjOOBsOOCqOODqeODvFxuICogQHNpbmNlICAgMS4wLjBcbiAqIEB2ZXJzaW9uIDEuMC4wXG4gKi9cbmZ1bmN0aW9uIGNoZWNrU3RhdHVzKHJlc3BvbnNlKSB7XG5cdC8vIEhUVFDjgrnjg4bjg7zjgr/jgrnjgrPjg7zjg4njgYwyMDDnlarlj7Djgafjga/jgarjgYTloLTlkIhcblx0Ly8g6aGe5Ly85pa55rOV44GrcmVzcG9uc2Uub2vjgYzjgYLjgovjgYzlpKfpg6jliIbjga7jg5bjg6njgqbjgrbjgYzpnZ7lr77lv5zjgarjga7jgafpnZ7mjqjlpahcblx0aWYgKHJlc3BvbnNlLnN0YXR1cyA+PSAyMDAgJiYgcmVzcG9uc2Uuc3RhdHVzIDwgMzAwKSB7XG5cdFx0cmV0dXJuIHJlc3BvbnNlO1xuXHR9IGVsc2Uge1xuXHRcdGxldCBlcnJvciA9IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXNUZXh0KTtcblx0XHRlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuXHRcdHRocm93IGVycm9yO1xuXHR9XG59XG5cbi8qKlxuICogSlNPTuODh+ODvOOCv+OBruWIh+OCiuWHuuOBl1xuICpcbiAqIEBwYXJhbSAgIHtSZXNwb25zZX0gIHJlc3BvbnNlICAgIOODrOOCueODneODs+OCueODh+ODvOOCv1xuICogQHJldHVybnMge0pTT059ICAgICAgICAgICAgICAgICAg44Os44K544Od44Oz44K544Gr5qC857SN44GV44KM44Gm44GE44KLSlNPTuODh+ODvOOCv1xuICogQHNpbmNlICAgMS4wLjBcbiAqIEB2ZXJzaW9uIDEuMC4wXG4gKi9cbmZ1bmN0aW9uIHBhcnNlSlNPTihyZXNwb25zZSkge1xuXHQvLyBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG5cdHJldHVybiByZXNwb25zZS5qc29uKCk7XG59XG5cbi8qKlxuICogQWpheOi7oumAgeWHpueQhlxuICpcbiAqIEBwYXJhbSAgIHtzdHJpbmd9ICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFVSTCDou6LpgIHlhYhVUkxcbiAqIEBwYXJhbSAgIHtGb3JtRGF0YX0gICAgICAgICAgICAgICAgICAgICAgW2Zvcm1dICDou6LpgIHjgZnjgotGb3JtIERhdGEo54Sh44GP44Gm44KC5ZWP6aGM44Gq44GEKVxuICogQHJldHVybnMge1Byb21pc2UuSlNPTnxQcm9taXNlLkVycm9yfSAgICAgICAgICAgIEpTT07jg4fjg7zjgr/jgoLjgZfjgY/jga/jgqjjg6njg7zlhoXlrrlcbiAqIEBzaW5jZSAgIDEuMC4wXG4gKiBAdmVyc2lvbiAxLjAuMFxuICovXG5mdW5jdGlvbiBTZW5kQWpheChzZW5kVVJMLCBmb3JtKSB7XG5cdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0aWYgKHNlbGYuZmV0Y2gpIHtcblx0XHRcdGZldGNoKHNlbmRVUkwsIHtcblx0XHRcdFx0bWV0aG9kOiAnUE9TVCcsXG5cdFx0XHRcdGJvZHk6IGZvcm1cblx0XHRcdH0pXG5cdFx0XHRcdC50aGVuKGNoZWNrU3RhdHVzKVxuXHRcdFx0XHQudGhlbihwYXJzZUpTT04pXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uIChqc29uKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZShqc29uKTtcblx0XHRcdFx0fSlcblx0XHRcdFx0LmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuXHRcdFx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBGZXRjaCBBUEnmnKrlr77lv5zmmYLjga7lh6bnkIZcblx0XHRcdGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblx0XHRcdHhoci5vcGVuKCdQT1NUJywgc2VuZFVSTCwgdHJ1ZSk7XG5cdFx0XHR4aHIuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0aWYgKHhoci5yZWFkeVN0YXRlID09PSA0ICYmIHhoci5zdGF0dXMgPT09IDIwMCkge1xuXHRcdFx0XHRcdHJlc29sdmUoeGhyLnJlc3BvbnNlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHhoci5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGZ1bmN0aW9uIChlcnJvcikge1xuXHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0fSk7XG5cblx0XHRcdHhoci5hZGRFdmVudExpc3RlbmVyKCd0aW1lb3V0JywgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRyZWplY3QoJ2Nvbm5lY3Rpb24gdGltZW91dCcpO1xuXHRcdFx0fSk7XG5cblx0XHRcdHhoci50aW1lb3V0ID0gMzAwMDA7XG5cdFx0XHR4aHIuc2VuZChmb3JtKTtcblx0XHR9XG5cdH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFnQkE7QUFHQTtBQUVBO0FBQ0E7QUFFQTtBQUFBO0FBWUE7QUFDQTtBQURBO0FBRUE7QUFZQTtBQUNBO0FBREE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUZBO0FBT0E7QUFBQTtBQUdBO0FBQUE7QUFJQTtBQUNBO0FBRUE7QUFDQTtBQUtBO0FBQUE7QUFJQTtBQUFBO0FBSUE7QUFBQTtBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./HTML Manual Repository/public/js/nomodule/ajax-response.min.js\n");

/***/ }),

/***/ "./HTML Manual Repository/public/js/nomodule/ajax-response.min.min.js":
/*!****************************************************************************!*\
  !*** ./HTML Manual Repository/public/js/nomodule/ajax-response.min.min.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function checkStatus(t) {\n  if (t.status >= 200 && t.status < 300) return t;\n  {\n    let e = new Error(t.statusText);\n    throw e.response = t, e;\n  }\n}\n\nfunction parseJSON(t) {\n  return t.json();\n}\n\nfunction SendAjax(t, e) {\n  return new Promise(function (n, o) {\n    if (self.fetch) fetch(t, {\n      method: \"POST\",\n      body: e\n    }).then(checkStatus).then(parseJSON).then(function (t) {\n      n(t);\n    }).catch(function (t) {\n      o(t);\n    });else {\n      let s = new XMLHttpRequest();\n      s.open(\"POST\", t, !0), s.addEventListener(\"load\", function () {\n        4 === s.readyState && 200 === s.status && n(s.response);\n      }), s.addEventListener(\"error\", function (t) {\n        o(t);\n      }), s.addEventListener(\"timeout\", function () {\n        o(\"connection timeout\");\n      }), s.timeout = 3e4, s.send(e);\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9IVE1MIE1hbnVhbCBSZXBvc2l0b3J5L3B1YmxpYy9qcy9ub21vZHVsZS9hamF4LXJlc3BvbnNlLm1pbi5taW4uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9IVE1MIE1hbnVhbCBSZXBvc2l0b3J5L3B1YmxpYy9qcy9ub21vZHVsZS9hamF4LXJlc3BvbnNlLm1pbi5taW4uanM/NzA1NiJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBjaGVja1N0YXR1cyh0KXtpZih0LnN0YXR1cz49MjAwJiZ0LnN0YXR1czwzMDApcmV0dXJuIHQ7e2xldCBlPW5ldyBFcnJvcih0LnN0YXR1c1RleHQpO3Rocm93IGUucmVzcG9uc2U9dCxlfX1mdW5jdGlvbiBwYXJzZUpTT04odCl7cmV0dXJuIHQuanNvbigpfWZ1bmN0aW9uIFNlbmRBamF4KHQsZSl7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKG4sbyl7aWYoc2VsZi5mZXRjaClmZXRjaCh0LHttZXRob2Q6XCJQT1NUXCIsYm9keTplfSkudGhlbihjaGVja1N0YXR1cykudGhlbihwYXJzZUpTT04pLnRoZW4oZnVuY3Rpb24odCl7bih0KX0pLmNhdGNoKGZ1bmN0aW9uKHQpe28odCl9KTtlbHNle2xldCBzPW5ldyBYTUxIdHRwUmVxdWVzdDtzLm9wZW4oXCJQT1NUXCIsdCwhMCkscy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLGZ1bmN0aW9uKCl7ND09PXMucmVhZHlTdGF0ZSYmMjAwPT09cy5zdGF0dXMmJm4ocy5yZXNwb25zZSl9KSxzLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLGZ1bmN0aW9uKHQpe28odCl9KSxzLmFkZEV2ZW50TGlzdGVuZXIoXCJ0aW1lb3V0XCIsZnVuY3Rpb24oKXtvKFwiY29ubmVjdGlvbiB0aW1lb3V0XCIpfSkscy50aW1lb3V0PTNlNCxzLnNlbmQoZSl9fSl9Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./HTML Manual Repository/public/js/nomodule/ajax-response.min.min.js\n");

/***/ }),

/***/ "./HTML Manual Repository/public/js/prism.js":
/*!***************************************************!*\
  !*** ./HTML Manual Repository/public/js/prism.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {/*! PrismJS 1.16.0\nhttps://prismjs.com/download.html#themes=prism-tomorrow&languages=markup+css+clike+javascript+abap+abnf+actionscript+ada+apacheconf+apl+applescript+c+arff+asciidoc+asm6502+csharp+autohotkey+autoit+bash+basic+batch+bison+bnf+brainfuck+bro+cpp+aspnet+arduino+cil+coffeescript+cmake+clojure+ruby+csp+css-extras+d+dart+diff+markup-templating+docker+ebnf+eiffel+ejs+elixir+elm+erb+erlang+fsharp+flow+fortran+gcode+gedcom+gherkin+git+glsl+gml+go+graphql+groovy+less+handlebars+haskell+haxe+hcl+http+hpkp+hsts+ichigojam+icon+inform7+ini+io+j+java+scala+php+javastacktrace+jolie+javadoclike+n4js+json+jsonp+json5+julia+keyman+kotlin+latex+markdown+liquid+lisp+livescript+lolcode+lua+makefile+crystal+django+matlab+mel+mizar+monkey+n1ql+typescript+nand2tetris-hdl+nasm+nginx+nim+nix+nsis+objectivec+ocaml+opencl+oz+parigp+parser+pascal+perl+jsdoc+phpdoc+php-extras+sql+powershell+processing+prolog+properties+protobuf+scss+puppet+pure+python+q+qore+r+js-extras+jsx+renpy+reason+vala+rest+rip+roboconf+textile+rust+sas+sass+stylus+javadoc+scheme+smalltalk+smarty+plsql+soy+twig+swift+yaml+tcl+haml+toml+tt2+pug+tsx+t4-templating+visual-basic+t4-cs+regex+vbnet+velocity+verilog+vhdl+vim+t4-vb+wasm+wiki+xeora+xojo+xquery+tap&plugins=line-highlight+line-numbers+autolinker+data-uri-highlight+wpd+custom-class+file-highlight+toolbar+jsonp-highlight+highlight-keywords+previewers+autoloader+unescaped-markup+command-line+normalize-whitespace+keep-markup+show-language+copy-to-clipboard */\nvar _self = typeof window !== 'undefined' ? window // if in browser\n: typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope ? self // if in worker\n: {} // if in node js\n;\n/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n * MIT license http://www.opensource.org/licenses/mit-license.php/\n * @author Lea Verou http://lea.verou.me\n */\n\n\nvar Prism = function (_self) {\n  // Private helper vars\n  var lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;\n  var uniqueId = 0;\n  var _ = {\n    manual: _self.Prism && _self.Prism.manual,\n    disableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,\n    util: {\n      encode: function (tokens) {\n        if (tokens instanceof Token) {\n          return new Token(tokens.type, _.util.encode(tokens.content), tokens.alias);\n        } else if (Array.isArray(tokens)) {\n          return tokens.map(_.util.encode);\n        } else {\n          return tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n        }\n      },\n      type: function (o) {\n        return Object.prototype.toString.call(o).slice(8, -1);\n      },\n      objId: function (obj) {\n        if (!obj['__id']) {\n          Object.defineProperty(obj, '__id', {\n            value: ++uniqueId\n          });\n        }\n\n        return obj['__id'];\n      },\n      // Deep clone a language definition (e.g. to extend it)\n      clone: function deepClone(o, visited) {\n        var clone,\n            id,\n            type = _.util.type(o);\n\n        visited = visited || {};\n\n        switch (type) {\n          case 'Object':\n            id = _.util.objId(o);\n\n            if (visited[id]) {\n              return visited[id];\n            }\n\n            clone = {};\n            visited[id] = clone;\n\n            for (var key in o) {\n              if (o.hasOwnProperty(key)) {\n                clone[key] = deepClone(o[key], visited);\n              }\n            }\n\n            return clone;\n\n          case 'Array':\n            id = _.util.objId(o);\n\n            if (visited[id]) {\n              return visited[id];\n            }\n\n            clone = [];\n            visited[id] = clone;\n            o.forEach(function (v, i) {\n              clone[i] = deepClone(v, visited);\n            });\n            return clone;\n\n          default:\n            return o;\n        }\n      }\n    },\n    languages: {\n      extend: function (id, redef) {\n        var lang = _.util.clone(_.languages[id]);\n\n        for (var key in redef) {\n          lang[key] = redef[key];\n        }\n\n        return lang;\n      },\n\n      /**\n       * Insert a token before another token in a language literal\n       * As this needs to recreate the object (we cannot actually insert before keys in object literals),\n       * we cannot just provide an object, we need an object and a key.\n       * @param inside The key (or language id) of the parent\n       * @param before The key to insert before.\n       * @param insert Object with the key/value pairs to insert\n       * @param root The object that contains `inside`. If equal to Prism.languages, it can be omitted.\n       */\n      insertBefore: function (inside, before, insert, root) {\n        root = root || _.languages;\n        var grammar = root[inside];\n        var ret = {};\n\n        for (var token in grammar) {\n          if (grammar.hasOwnProperty(token)) {\n            if (token == before) {\n              for (var newToken in insert) {\n                if (insert.hasOwnProperty(newToken)) {\n                  ret[newToken] = insert[newToken];\n                }\n              }\n            } // Do not insert token which also occur in insert. See #1525\n\n\n            if (!insert.hasOwnProperty(token)) {\n              ret[token] = grammar[token];\n            }\n          }\n        }\n\n        var old = root[inside];\n        root[inside] = ret; // Update references in other language definitions\n\n        _.languages.DFS(_.languages, function (key, value) {\n          if (value === old && key != inside) {\n            this[key] = ret;\n          }\n        });\n\n        return ret;\n      },\n      // Traverse a language definition with Depth First Search\n      DFS: function DFS(o, callback, type, visited) {\n        visited = visited || {};\n        var objId = _.util.objId;\n\n        for (var i in o) {\n          if (o.hasOwnProperty(i)) {\n            callback.call(o, i, o[i], type || i);\n\n            var property = o[i],\n                propertyType = _.util.type(property);\n\n            if (propertyType === 'Object' && !visited[objId(property)]) {\n              visited[objId(property)] = true;\n              DFS(property, callback, null, visited);\n            } else if (propertyType === 'Array' && !visited[objId(property)]) {\n              visited[objId(property)] = true;\n              DFS(property, callback, i, visited);\n            }\n          }\n        }\n      }\n    },\n    plugins: {},\n    highlightAll: function (async, callback) {\n      _.highlightAllUnder(document, async, callback);\n    },\n    highlightAllUnder: function (container, async, callback) {\n      var env = {\n        callback: callback,\n        selector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n      };\n\n      _.hooks.run(\"before-highlightall\", env);\n\n      var elements = env.elements || container.querySelectorAll(env.selector);\n\n      for (var i = 0, element; element = elements[i++];) {\n        _.highlightElement(element, async === true, env.callback);\n      }\n    },\n    highlightElement: function (element, async, callback) {\n      // Find language\n      var language,\n          grammar,\n          parent = element;\n\n      while (parent && !lang.test(parent.className)) {\n        parent = parent.parentNode;\n      }\n\n      if (parent) {\n        language = (parent.className.match(lang) || [, ''])[1].toLowerCase();\n        grammar = _.languages[language];\n      } // Set language on the element, if not present\n\n\n      element.className = element.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\n\n      if (element.parentNode) {\n        // Set language on the parent, for styling\n        parent = element.parentNode;\n\n        if (/pre/i.test(parent.nodeName)) {\n          parent.className = parent.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\n        }\n      }\n\n      var code = element.textContent;\n      var env = {\n        element: element,\n        language: language,\n        grammar: grammar,\n        code: code\n      };\n\n      var insertHighlightedCode = function (highlightedCode) {\n        env.highlightedCode = highlightedCode;\n\n        _.hooks.run('before-insert', env);\n\n        env.element.innerHTML = env.highlightedCode;\n\n        _.hooks.run('after-highlight', env);\n\n        _.hooks.run('complete', env);\n\n        callback && callback.call(env.element);\n      };\n\n      _.hooks.run('before-sanity-check', env);\n\n      if (!env.code) {\n        _.hooks.run('complete', env);\n\n        return;\n      }\n\n      _.hooks.run('before-highlight', env);\n\n      if (!env.grammar) {\n        insertHighlightedCode(_.util.encode(env.code));\n        return;\n      }\n\n      if (async && _self.Worker) {\n        var worker = new Worker(_.filename);\n\n        worker.onmessage = function (evt) {\n          insertHighlightedCode(evt.data);\n        };\n\n        worker.postMessage(JSON.stringify({\n          language: env.language,\n          code: env.code,\n          immediateClose: true\n        }));\n      } else {\n        insertHighlightedCode(_.highlight(env.code, env.grammar, env.language));\n      }\n    },\n    highlight: function (text, grammar, language) {\n      var env = {\n        code: text,\n        grammar: grammar,\n        language: language\n      };\n\n      _.hooks.run('before-tokenize', env);\n\n      env.tokens = _.tokenize(env.code, env.grammar);\n\n      _.hooks.run('after-tokenize', env);\n\n      return Token.stringify(_.util.encode(env.tokens), env.language);\n    },\n    matchGrammar: function (text, strarr, grammar, index, startPos, oneshot, target) {\n      for (var token in grammar) {\n        if (!grammar.hasOwnProperty(token) || !grammar[token]) {\n          continue;\n        }\n\n        if (token == target) {\n          return;\n        }\n\n        var patterns = grammar[token];\n        patterns = _.util.type(patterns) === \"Array\" ? patterns : [patterns];\n\n        for (var j = 0; j < patterns.length; ++j) {\n          var pattern = patterns[j],\n              inside = pattern.inside,\n              lookbehind = !!pattern.lookbehind,\n              greedy = !!pattern.greedy,\n              lookbehindLength = 0,\n              alias = pattern.alias;\n\n          if (greedy && !pattern.pattern.global) {\n            // Without the global flag, lastIndex won't work\n            var flags = pattern.pattern.toString().match(/[imuy]*$/)[0];\n            pattern.pattern = RegExp(pattern.pattern.source, flags + \"g\");\n          }\n\n          pattern = pattern.pattern || pattern; // Don’t cache length as it changes during the loop\n\n          for (var i = index, pos = startPos; i < strarr.length; pos += strarr[i].length, ++i) {\n            var str = strarr[i];\n\n            if (strarr.length > text.length) {\n              // Something went terribly wrong, ABORT, ABORT!\n              return;\n            }\n\n            if (str instanceof Token) {\n              continue;\n            }\n\n            if (greedy && i != strarr.length - 1) {\n              pattern.lastIndex = pos;\n              var match = pattern.exec(text);\n\n              if (!match) {\n                break;\n              }\n\n              var from = match.index + (lookbehind ? match[1].length : 0),\n                  to = match.index + match[0].length,\n                  k = i,\n                  p = pos;\n\n              for (var len = strarr.length; k < len && (p < to || !strarr[k].type && !strarr[k - 1].greedy); ++k) {\n                p += strarr[k].length; // Move the index i to the element in strarr that is closest to from\n\n                if (from >= p) {\n                  ++i;\n                  pos = p;\n                }\n              } // If strarr[i] is a Token, then the match starts inside another Token, which is invalid\n\n\n              if (strarr[i] instanceof Token) {\n                continue;\n              } // Number of tokens to delete and replace with the new match\n\n\n              delNum = k - i;\n              str = text.slice(pos, p);\n              match.index -= pos;\n            } else {\n              pattern.lastIndex = 0;\n              var match = pattern.exec(str),\n                  delNum = 1;\n            }\n\n            if (!match) {\n              if (oneshot) {\n                break;\n              }\n\n              continue;\n            }\n\n            if (lookbehind) {\n              lookbehindLength = match[1] ? match[1].length : 0;\n            }\n\n            var from = match.index + lookbehindLength,\n                match = match[0].slice(lookbehindLength),\n                to = from + match.length,\n                before = str.slice(0, from),\n                after = str.slice(to);\n            var args = [i, delNum];\n\n            if (before) {\n              ++i;\n              pos += before.length;\n              args.push(before);\n            }\n\n            var wrapped = new Token(token, inside ? _.tokenize(match, inside) : match, alias, match, greedy);\n            args.push(wrapped);\n\n            if (after) {\n              args.push(after);\n            }\n\n            Array.prototype.splice.apply(strarr, args);\n            if (delNum != 1) _.matchGrammar(text, strarr, grammar, i, pos, true, token);\n            if (oneshot) break;\n          }\n        }\n      }\n    },\n    tokenize: function (text, grammar) {\n      var strarr = [text];\n      var rest = grammar.rest;\n\n      if (rest) {\n        for (var token in rest) {\n          grammar[token] = rest[token];\n        }\n\n        delete grammar.rest;\n      }\n\n      _.matchGrammar(text, strarr, grammar, 0, 0, false);\n\n      return strarr;\n    },\n    hooks: {\n      all: {},\n      add: function (name, callback) {\n        var hooks = _.hooks.all;\n        hooks[name] = hooks[name] || [];\n        hooks[name].push(callback);\n      },\n      run: function (name, env) {\n        var callbacks = _.hooks.all[name];\n\n        if (!callbacks || !callbacks.length) {\n          return;\n        }\n\n        for (var i = 0, callback; callback = callbacks[i++];) {\n          callback(env);\n        }\n      }\n    },\n    Token: Token\n  };\n  _self.Prism = _;\n\n  function Token(type, content, alias, matchedStr, greedy) {\n    this.type = type;\n    this.content = content;\n    this.alias = alias; // Copy of the full string this token was created from\n\n    this.length = (matchedStr || \"\").length | 0;\n    this.greedy = !!greedy;\n  }\n\n  Token.stringify = function (o, language) {\n    if (typeof o == 'string') {\n      return o;\n    }\n\n    if (Array.isArray(o)) {\n      return o.map(function (element) {\n        return Token.stringify(element, language);\n      }).join('');\n    }\n\n    var env = {\n      type: o.type,\n      content: Token.stringify(o.content, language),\n      tag: 'span',\n      classes: ['token', o.type],\n      attributes: {},\n      language: language\n    };\n\n    if (o.alias) {\n      var aliases = Array.isArray(o.alias) ? o.alias : [o.alias];\n      Array.prototype.push.apply(env.classes, aliases);\n    }\n\n    _.hooks.run('wrap', env);\n\n    var attributes = Object.keys(env.attributes).map(function (name) {\n      return name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\n    }).join(' ');\n    return '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + (attributes ? ' ' + attributes : '') + '>' + env.content + '</' + env.tag + '>';\n  };\n\n  if (!_self.document) {\n    if (!_self.addEventListener) {\n      // in Node.js\n      return _;\n    }\n\n    if (!_.disableWorkerMessageHandler) {\n      // In worker\n      _self.addEventListener('message', function (evt) {\n        var message = JSON.parse(evt.data),\n            lang = message.language,\n            code = message.code,\n            immediateClose = message.immediateClose;\n\n        _self.postMessage(_.highlight(code, _.languages[lang], lang));\n\n        if (immediateClose) {\n          _self.close();\n        }\n      }, false);\n    }\n\n    return _;\n  } //Get current script and highlight\n\n\n  var script = document.currentScript || [].slice.call(document.getElementsByTagName(\"script\")).pop();\n\n  if (script) {\n    _.filename = script.src;\n\n    if (!_.manual && !script.hasAttribute('data-manual')) {\n      if (document.readyState !== \"loading\") {\n        if (window.requestAnimationFrame) {\n          window.requestAnimationFrame(_.highlightAll);\n        } else {\n          window.setTimeout(_.highlightAll, 16);\n        }\n      } else {\n        document.addEventListener('DOMContentLoaded', _.highlightAll);\n      }\n    }\n  }\n\n  return _;\n}(_self);\n\nif ( true && module.exports) {\n  module.exports = Prism;\n} // hack for components to work correctly in node.js\n\n\nif (typeof global !== 'undefined') {\n  global.Prism = Prism;\n}\n\n;\nPrism.languages.markup = {\n  'comment': /<!--[\\s\\S]*?-->/,\n  'prolog': /<\\?[\\s\\S]+?\\?>/,\n  'doctype': /<!DOCTYPE[\\s\\S]+?>/i,\n  'cdata': /<!\\[CDATA\\[[\\s\\S]*?]]>/i,\n  'tag': {\n    pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/i,\n    greedy: true,\n    inside: {\n      'tag': {\n        pattern: /^<\\/?[^\\s>\\/]+/i,\n        inside: {\n          'punctuation': /^<\\/?/,\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      },\n      'attr-value': {\n        pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/i,\n        inside: {\n          'punctuation': [/^=/, {\n            pattern: /^(\\s*)[\"']|[\"']$/,\n            lookbehind: true\n          }]\n        }\n      },\n      'punctuation': /\\/?>/,\n      'attr-name': {\n        pattern: /[^\\s>\\/]+/,\n        inside: {\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      }\n    }\n  },\n  'entity': /&#?[\\da-z]{1,8};/i\n};\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] = Prism.languages.markup['entity']; // Plugin to make entity title show the real entity, idea by Roman Komarov\n\nPrism.hooks.add('wrap', function (env) {\n  if (env.type === 'entity') {\n    env.attributes['title'] = env.content.replace(/&amp;/, '&');\n  }\n});\nObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n  /**\n   * Adds an inlined language to markup.\n   *\n   * An example of an inlined language is CSS with `<style>` tags.\n   *\n   * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addInlined('style', 'css');\n   */\n  value: function addInlined(tagName, lang) {\n    var includedCdataInside = {};\n    includedCdataInside['language-' + lang] = {\n      pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n      lookbehind: true,\n      inside: Prism.languages[lang]\n    };\n    includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n    var inside = {\n      'included-cdata': {\n        pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n        inside: includedCdataInside\n      }\n    };\n    inside['language-' + lang] = {\n      pattern: /[\\s\\S]+/,\n      inside: Prism.languages[lang]\n    };\n    var def = {};\n    def[tagName] = {\n      pattern: RegExp(/(<__[\\s\\S]*?>)(?:<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\s*|[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, tagName), 'i'),\n      lookbehind: true,\n      greedy: true,\n      inside: inside\n    };\n    Prism.languages.insertBefore('markup', 'cdata', def);\n  }\n});\nPrism.languages.xml = Prism.languages.extend('markup', {});\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\n\n(function (Prism) {\n  var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n  Prism.languages.css = {\n    'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n    'atrule': {\n      pattern: /@[\\w-]+?[\\s\\S]*?(?:;|(?=\\s*\\{))/i,\n      inside: {\n        'rule': /@[\\w-]+/ // See rest below\n\n      }\n    },\n    'url': RegExp('url\\\\((?:' + string.source + '|.*?)\\\\)', 'i'),\n    'selector': RegExp('[^{}\\\\s](?:[^{};\"\\']|' + string.source + ')*?(?=\\\\s*\\\\{)'),\n    'string': {\n      pattern: string,\n      greedy: true\n    },\n    'property': /[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*(?=\\s*:)/i,\n    'important': /!important\\b/i,\n    'function': /[-a-z0-9]+(?=\\()/i,\n    'punctuation': /[(){};:,]/\n  };\n  Prism.languages.css['atrule'].inside.rest = Prism.languages.css;\n  var markup = Prism.languages.markup;\n\n  if (markup) {\n    markup.tag.addInlined('style', 'css');\n    Prism.languages.insertBefore('inside', 'attr-value', {\n      'style-attr': {\n        pattern: /\\s*style=(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/i,\n        inside: {\n          'attr-name': {\n            pattern: /^\\s*style/i,\n            inside: markup.tag.inside\n          },\n          'punctuation': /^\\s*=\\s*['\"]|['\"]\\s*$/,\n          'attr-value': {\n            pattern: /.+/i,\n            inside: Prism.languages.css\n          }\n        },\n        alias: 'language-css'\n      }\n    }, markup.tag);\n  }\n})(Prism);\n\nPrism.languages.clike = {\n  'comment': [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: true,\n    greedy: true\n  }],\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,\n    lookbehind: true,\n    inside: {\n      punctuation: /[.\\\\]/\n    }\n  },\n  'keyword': /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'function': /\\w+(?=\\()/,\n  'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n  'operator': /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,\n  'punctuation': /[{}[\\];(),.:]/\n};\nPrism.languages.javascript = Prism.languages.extend('clike', {\n  'class-name': [Prism.languages.clike['class-name'], {\n    pattern: /(^|[^$\\w\\xA0-\\uFFFF])[_$A-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\.(?:prototype|constructor))/,\n    lookbehind: true\n  }],\n  'keyword': [{\n    pattern: /((?:^|})\\s*)(?:catch|finally)\\b/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^.])\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n    lookbehind: true\n  }],\n  'number': /\\b(?:(?:0[xX][\\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+)n?|\\d+n|NaN|Infinity)\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n  // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n  'function': /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n  'operator': /-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/\n});\nPrism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;\nPrism.languages.insertBefore('javascript', 'keyword', {\n  'regex': {\n    pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyu]{0,5}(?=\\s*($|[\\r\\n,.;})\\]]))/,\n    lookbehind: true,\n    greedy: true\n  },\n  // This must be declared before keyword because we use \"function\" inside the look-forward\n  'function-variable': {\n    pattern: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/,\n    alias: 'function'\n  },\n  'parameter': [{\n    pattern: /(function(?:\\s+[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)?\\s*\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\))/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=>)/i,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /(\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*=>)/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\s*)\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*\\{)/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }],\n  'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nPrism.languages.insertBefore('javascript', 'string', {\n  'template-string': {\n    pattern: /`(?:\\\\[\\s\\S]|\\${[^}]+}|[^\\\\`])*`/,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        pattern: /\\${[^}]+}/,\n        inside: {\n          'interpolation-punctuation': {\n            pattern: /^\\${|}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.javascript\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  }\n});\n\nif (Prism.languages.markup) {\n  Prism.languages.markup.tag.addInlined('script', 'javascript');\n}\n\nPrism.languages.js = Prism.languages.javascript;\nPrism.languages.abap = {\n  'comment': /^\\*.*/m,\n  'string': /(`|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/m,\n  'string-template': {\n    pattern: /([|}])(?:\\\\.|[^\\\\|{\\r\\n])*(?=[|{])/,\n    lookbehind: true,\n    alias: 'string'\n  },\n\n  /* End Of Line comments should not interfere with strings when the\n  quote character occurs within them. We assume a string being highlighted\n  inside an EOL comment is more acceptable than the opposite.\n  */\n  'eol-comment': {\n    pattern: /(^|\\s)\".*/m,\n    lookbehind: true,\n    alias: 'comment'\n  },\n  'keyword': {\n    pattern: /(\\s|\\.|^)(?:SCIENTIFIC_WITH_LEADING_ZERO|SCALE_PRESERVING_SCIENTIFIC|RMC_COMMUNICATION_FAILURE|END-ENHANCEMENT-SECTION|MULTIPLY-CORRESPONDING|SUBTRACT-CORRESPONDING|VERIFICATION-MESSAGE|DIVIDE-CORRESPONDING|ENHANCEMENT-SECTION|CURRENCY_CONVERSION|RMC_SYSTEM_FAILURE|START-OF-SELECTION|MOVE-CORRESPONDING|RMC_INVALID_STATUS|CUSTOMER-FUNCTION|END-OF-DEFINITION|ENHANCEMENT-POINT|SYSTEM-EXCEPTIONS|ADD-CORRESPONDING|SCALE_PRESERVING|SELECTION-SCREEN|CURSOR-SELECTION|END-OF-SELECTION|LOAD-OF-PROGRAM|SCROLL-BOUNDARY|SELECTION-TABLE|EXCEPTION-TABLE|IMPLEMENTATIONS|PARAMETER-TABLE|RIGHT-JUSTIFIED|UNIT_CONVERSION|AUTHORITY-CHECK|LIST-PROCESSING|SIGN_AS_POSTFIX|COL_BACKGROUND|IMPLEMENTATION|INTERFACE-POOL|TRANSFORMATION|IDENTIFICATION|ENDENHANCEMENT|LINE-SELECTION|INITIALIZATION|LEFT-JUSTIFIED|SELECT-OPTIONS|SELECTION-SETS|COMMUNICATION|CORRESPONDING|DECIMAL_SHIFT|PRINT-CONTROL|VALUE-REQUEST|CHAIN-REQUEST|FUNCTION-POOL|FIELD-SYMBOLS|FUNCTIONALITY|INVERTED-DATE|SELECTION-SET|CLASS-METHODS|OUTPUT-LENGTH|CLASS-CODING|COL_NEGATIVE|ERRORMESSAGE|FIELD-GROUPS|HELP-REQUEST|NO-EXTENSION|NO-TOPOFPAGE|REDEFINITION|DISPLAY-MODE|ENDINTERFACE|EXIT-COMMAND|FIELD-SYMBOL|NO-SCROLLING|SHORTDUMP-ID|ACCESSPOLICY|CLASS-EVENTS|COL_POSITIVE|DECLARATIONS|ENHANCEMENTS|FILTER-TABLE|SWITCHSTATES|SYNTAX-CHECK|TRANSPORTING|ASYNCHRONOUS|SYNTAX-TRACE|TOKENIZATION|USER-COMMAND|WITH-HEADING|ABAP-SOURCE|BREAK-POINT|CHAIN-INPUT|COMPRESSION|FIXED-POINT|NEW-SECTION|NON-UNICODE|OCCURRENCES|RESPONSIBLE|SYSTEM-CALL|TRACE-TABLE|ABBREVIATED|CHAR-TO-HEX|END-OF-FILE|ENDFUNCTION|ENVIRONMENT|ASSOCIATION|COL_HEADING|EDITOR-CALL|END-OF-PAGE|ENGINEERING|IMPLEMENTED|INTENSIFIED|RADIOBUTTON|SYSTEM-EXIT|TOP-OF-PAGE|TRANSACTION|APPLICATION|CONCATENATE|DESTINATION|ENHANCEMENT|IMMEDIATELY|NO-GROUPING|PRECOMPILED|REPLACEMENT|TITLE-LINES|ACTIVATION|BYTE-ORDER|CLASS-POOL|CONNECTION|CONVERSION|DEFINITION|DEPARTMENT|EXPIRATION|INHERITING|MESSAGE-ID|NO-HEADING|PERFORMING|QUEUE-ONLY|RIGHTSPACE|SCIENTIFIC|STATUSINFO|STRUCTURES|SYNCPOINTS|WITH-TITLE|ATTRIBUTES|BOUNDARIES|CLASS-DATA|COL_NORMAL|DD\\/MM\\/YYYY|DESCENDING|INTERFACES|LINE-COUNT|MM\\/DD\\/YYYY|NON-UNIQUE|PRESERVING|SELECTIONS|STATEMENTS|SUBROUTINE|TRUNCATION|TYPE-POOLS|ARITHMETIC|BACKGROUND|ENDPROVIDE|EXCEPTIONS|IDENTIFIER|INDEX-LINE|OBLIGATORY|PARAMETERS|PERCENTAGE|PUSHBUTTON|RESOLUTION|COMPONENTS|DEALLOCATE|DISCONNECT|DUPLICATES|FIRST-LINE|HEAD-LINES|NO-DISPLAY|OCCURRENCE|RESPECTING|RETURNCODE|SUBMATCHES|TRACE-FILE|ASCENDING|BYPASSING|ENDMODULE|EXCEPTION|EXCLUDING|EXPORTING|INCREMENT|MATCHCODE|PARAMETER|PARTIALLY|PREFERRED|REFERENCE|REPLACING|RETURNING|SELECTION|SEPARATED|SPECIFIED|STATEMENT|TIMESTAMP|TYPE-POOL|ACCEPTING|APPENDAGE|ASSIGNING|COL_GROUP|COMPARING|CONSTANTS|DANGEROUS|IMPORTING|INSTANCES|LEFTSPACE|LOG-POINT|QUICKINFO|READ-ONLY|SCROLLING|SQLSCRIPT|STEP-LOOP|TOP-LINES|TRANSLATE|APPENDING|AUTHORITY|CHARACTER|COMPONENT|CONDITION|DIRECTORY|DUPLICATE|MESSAGING|RECEIVING|SUBSCREEN|ACCORDING|COL_TOTAL|END-LINES|ENDMETHOD|ENDSELECT|EXPANDING|EXTENSION|INCLUDING|INFOTYPES|INTERFACE|INTERVALS|LINE-SIZE|PF-STATUS|PROCEDURE|PROTECTED|REQUESTED|RESUMABLE|RIGHTPLUS|SAP-SPOOL|SECONDARY|STRUCTURE|SUBSTRING|TABLEVIEW|NUMOFCHAR|ADJACENT|ANALYSIS|ASSIGNED|BACKWARD|CHANNELS|CHECKBOX|CONTINUE|CRITICAL|DATAINFO|DD\\/MM\\/YY|DURATION|ENCODING|ENDCLASS|FUNCTION|LEFTPLUS|LINEFEED|MM\\/DD\\/YY|OVERFLOW|RECEIVED|SKIPPING|SORTABLE|STANDARD|SUBTRACT|SUPPRESS|TABSTRIP|TITLEBAR|TRUNCATE|UNASSIGN|WHENEVER|ANALYZER|COALESCE|COMMENTS|CONDENSE|DECIMALS|DEFERRED|ENDWHILE|EXPLICIT|KEYWORDS|MESSAGES|POSITION|PRIORITY|RECEIVER|RENAMING|TIMEZONE|TRAILING|ALLOCATE|CENTERED|CIRCULAR|CONTROLS|CURRENCY|DELETING|DESCRIBE|DISTANCE|ENDCATCH|EXPONENT|EXTENDED|GENERATE|IGNORING|INCLUDES|INTERNAL|MAJOR-ID|MODIFIER|NEW-LINE|OPTIONAL|PROPERTY|ROLLBACK|STARTING|SUPPLIED|ABSTRACT|CHANGING|CONTEXTS|CREATING|CUSTOMER|DATABASE|DAYLIGHT|DEFINING|DISTINCT|DIVISION|ENABLING|ENDCHAIN|ESCAPING|HARMLESS|IMPLICIT|INACTIVE|LANGUAGE|MINOR-ID|MULTIPLY|NEW-PAGE|NO-TITLE|POS_HIGH|SEPARATE|TEXTPOOL|TRANSFER|SELECTOR|DBMAXLEN|ITERATOR|SELECTOR|ARCHIVE|BIT-XOR|BYTE-CO|COLLECT|COMMENT|CURRENT|DEFAULT|DISPLAY|ENDFORM|EXTRACT|LEADING|LISTBOX|LOCATOR|MEMBERS|METHODS|NESTING|POS_LOW|PROCESS|PROVIDE|RAISING|RESERVE|SECONDS|SUMMARY|VISIBLE|BETWEEN|BIT-AND|BYTE-CS|CLEANUP|COMPUTE|CONTROL|CONVERT|DATASET|ENDCASE|FORWARD|HEADERS|HOTSPOT|INCLUDE|INVERSE|KEEPING|NO-ZERO|OBJECTS|OVERLAY|PADDING|PATTERN|PROGRAM|REFRESH|SECTION|SUMMING|TESTING|VERSION|WINDOWS|WITHOUT|BIT-NOT|BYTE-CA|BYTE-NA|CASTING|CONTEXT|COUNTRY|DYNAMIC|ENABLED|ENDLOOP|EXECUTE|FRIENDS|HANDLER|HEADING|INITIAL|\\*-INPUT|LOGFILE|MAXIMUM|MINIMUM|NO-GAPS|NO-SIGN|PRAGMAS|PRIMARY|PRIVATE|REDUCED|REPLACE|REQUEST|RESULTS|UNICODE|WARNING|ALIASES|BYTE-CN|BYTE-NS|CALLING|COL_KEY|COLUMNS|CONNECT|ENDEXEC|ENTRIES|EXCLUDE|FILTERS|FURTHER|HELP-ID|LOGICAL|MAPPING|MESSAGE|NAMETAB|OPTIONS|PACKAGE|PERFORM|RECEIVE|STATICS|VARYING|BINDING|CHARLEN|GREATER|XSTRLEN|ACCEPT|APPEND|DETAIL|ELSEIF|ENDING|ENDTRY|FORMAT|FRAMES|GIVING|HASHED|HEADER|IMPORT|INSERT|MARGIN|MODULE|NATIVE|OBJECT|OFFSET|REMOTE|RESUME|SAVING|SIMPLE|SUBMIT|TABBED|TOKENS|UNIQUE|UNPACK|UPDATE|WINDOW|YELLOW|ACTUAL|ASPECT|CENTER|CURSOR|DELETE|DIALOG|DIVIDE|DURING|ERRORS|EVENTS|EXTEND|FILTER|HANDLE|HAVING|IGNORE|LITTLE|MEMORY|NO-GAP|OCCURS|OPTION|PERSON|PLACES|PUBLIC|REDUCE|REPORT|RESULT|SINGLE|SORTED|SWITCH|SYNTAX|TARGET|VALUES|WRITER|ASSERT|BLOCKS|BOUNDS|BUFFER|CHANGE|COLUMN|COMMIT|CONCAT|COPIES|CREATE|DDMMYY|DEFINE|ENDIAN|ESCAPE|EXPAND|KERNEL|LAYOUT|LEGACY|LEVELS|MMDDYY|NUMBER|OUTPUT|RANGES|READER|RETURN|SCREEN|SEARCH|SELECT|SHARED|SOURCE|STABLE|STATIC|SUBKEY|SUFFIX|TABLES|UNWIND|YYMMDD|ASSIGN|BACKUP|BEFORE|BINARY|BIT-OR|BLANKS|CLIENT|CODING|COMMON|DEMAND|DYNPRO|EXCEPT|EXISTS|EXPORT|FIELDS|GLOBAL|GROUPS|LENGTH|LOCALE|MEDIUM|METHOD|MODIFY|NESTED|OTHERS|REJECT|SCROLL|SUPPLY|SYMBOL|ENDFOR|STRLEN|ALIGN|BEGIN|BOUND|ENDAT|ENTRY|EVENT|FINAL|FLUSH|GRANT|INNER|SHORT|USING|WRITE|AFTER|BLACK|BLOCK|CLOCK|COLOR|COUNT|DUMMY|EMPTY|ENDDO|ENDON|GREEN|INDEX|INOUT|LEAVE|LEVEL|LINES|MODIF|ORDER|OUTER|RANGE|RESET|RETRY|RIGHT|SMART|SPLIT|STYLE|TABLE|THROW|UNDER|UNTIL|UPPER|UTF-8|WHERE|ALIAS|BLANK|CLEAR|CLOSE|EXACT|FETCH|FIRST|FOUND|GROUP|LLANG|LOCAL|OTHER|REGEX|SPOOL|TITLE|TYPES|VALID|WHILE|ALPHA|BOXED|CATCH|CHAIN|CHECK|CLASS|COVER|ENDIF|EQUIV|FIELD|FLOOR|FRAME|INPUT|LOWER|MATCH|NODES|PAGES|PRINT|RAISE|ROUND|SHIFT|SPACE|SPOTS|STAMP|STATE|TASKS|TIMES|TRMAC|ULINE|UNION|VALUE|WIDTH|EQUAL|LOG10|TRUNC|BLOB|CASE|CEIL|CLOB|COND|EXIT|FILE|GAPS|HOLD|INCL|INTO|KEEP|KEYS|LAST|LINE|LONG|LPAD|MAIL|MODE|OPEN|PINK|READ|ROWS|TEST|THEN|ZERO|AREA|BACK|BADI|BYTE|CAST|EDIT|EXEC|FAIL|FIND|FKEQ|FONT|FREE|GKEQ|HIDE|INIT|ITNO|LATE|LOOP|MAIN|MARK|MOVE|NEXT|NULL|RISK|ROLE|UNIT|WAIT|ZONE|BASE|CALL|CODE|DATA|DATE|FKGE|GKGE|HIGH|KIND|LEFT|LIST|MASK|MESH|NAME|NODE|PACK|PAGE|POOL|SEND|SIGN|SIZE|SOME|STOP|TASK|TEXT|TIME|USER|VARY|WITH|WORD|BLUE|CONV|COPY|DEEP|ELSE|FORM|FROM|HINT|ICON|JOIN|LIKE|LOAD|ONLY|PART|SCAN|SKIP|SORT|TYPE|UNIX|VIEW|WHEN|WORK|ACOS|ASIN|ATAN|COSH|EACH|FRAC|LESS|RTTI|SINH|SQRT|TANH|AVG|BIT|DIV|ISO|LET|OUT|PAD|SQL|ALL|CI_|CPI|END|LOB|LPI|MAX|MIN|NEW|OLE|RUN|SET|\\?TO|YES|ABS|ADD|AND|BIG|FOR|HDB|JOB|LOW|NOT|SAP|TRY|VIA|XML|ANY|GET|IDS|KEY|MOD|OFF|PUT|RAW|RED|REF|SUM|TAB|XSD|CNT|COS|EXP|LOG|SIN|TAN|XOR|AT|CO|CP|DO|GT|ID|IF|NS|OR|BT|CA|CS|GE|NA|NB|EQ|IN|LT|NE|NO|OF|ON|PF|TO|AS|BY|CN|IS|LE|NP|UP|E|I|M|O|Z|C|X)\\b/i,\n    lookbehind: true\n  },\n\n  /* Numbers can be only integers. Decimal or Hex appear only as strings */\n  'number': /\\b\\d+\\b/,\n\n  /* Operators must always be surrounded by whitespace, they cannot be put\n  adjacent to operands.\n  */\n  'operator': {\n    pattern: /(\\s)(?:\\*\\*?|<[=>]?|>=?|\\?=|[-+\\/=])(?=\\s)/,\n    lookbehind: true\n  },\n  'string-operator': {\n    pattern: /(\\s)&&?(?=\\s)/,\n    lookbehind: true,\n\n    /* The official editor highlights */\n    alias: \"keyword\"\n  },\n  'token-operator': [{\n    /* Special operators used to access structure components, class methods/attributes, etc. */\n    pattern: /(\\w)(?:->?|=>|[~|{}])(?=\\w)/,\n    lookbehind: true,\n    alias: \"punctuation\"\n  }, {\n    /* Special tokens used do delimit string templates */\n    pattern: /[|{}]/,\n    alias: \"punctuation\"\n  }],\n  'punctuation': /[,.:()]/\n};\n\n(function (Prism) {\n  var coreRules = '(?:ALPHA|BIT|CHAR|CR|CRLF|CTL|DIGIT|DQUOTE|HEXDIG|HTAB|LF|LWSP|OCTET|SP|VCHAR|WSP)';\n  Prism.languages.abnf = {\n    'comment': /;.*/,\n    'string': {\n      pattern: /(?:%[is])?\"[^\"\\n\\r]*\"/,\n      greedy: true,\n      inside: {\n        'punctuation': /^%[is]/\n      }\n    },\n    'range': {\n      pattern: /%(?:b[01]+-[01]+|d\\d+-\\d+|x[A-F\\d]+-[A-F\\d]+)/i,\n      alias: 'number'\n    },\n    'terminal': {\n      pattern: /%(?:b[01]+(?:\\.[01]+)*|d\\d+(?:\\.\\d+)*|x[A-F\\d]+(?:\\.[A-F\\d]+)*)/i,\n      alias: 'number'\n    },\n    'repetition': {\n      pattern: /(^|[^\\w-])(?:\\d*\\*\\d*|\\d+)/,\n      lookbehind: true,\n      alias: 'operator'\n    },\n    'definition': {\n      pattern: /(^[ \\t]*)(?:[a-z][\\w-]*|<[^>\\r\\n]*>)(?=\\s*=)/m,\n      lookbehind: true,\n      alias: 'keyword',\n      inside: {\n        'punctuation': /<|>/\n      }\n    },\n    'core-rule': {\n      pattern: RegExp('(?:(^|[^<\\\\w-])' + coreRules + '|<' + coreRules + '>)(?![\\\\w-])', 'i'),\n      lookbehind: true,\n      alias: ['rule', 'constant'],\n      inside: {\n        'punctuation': /<|>/\n      }\n    },\n    'rule': {\n      pattern: /(^|[^<\\w-])[a-z][\\w-]*|<[^>\\r\\n]*>/i,\n      lookbehind: true,\n      inside: {\n        'punctuation': /<|>/\n      }\n    },\n    'operator': /=\\/?|\\//,\n    'punctuation': /[()\\[\\]]/\n  };\n})(Prism);\n\nPrism.languages.actionscript = Prism.languages.extend('javascript', {\n  'keyword': /\\b(?:as|break|case|catch|class|const|default|delete|do|else|extends|finally|for|function|if|implements|import|in|instanceof|interface|internal|is|native|new|null|package|private|protected|public|return|super|switch|this|throw|try|typeof|use|var|void|while|with|dynamic|each|final|get|include|namespace|native|override|set|static)\\b/,\n  'operator': /\\+\\+|--|(?:[+\\-*\\/%^]|&&?|\\|\\|?|<<?|>>?>?|[!=]=?)=?|[~?@]/\n});\nPrism.languages.actionscript['class-name'].alias = 'function';\n\nif (Prism.languages.markup) {\n  Prism.languages.insertBefore('actionscript', 'string', {\n    'xml': {\n      pattern: /(^|[^.])<\\/?\\w+(?:\\s+[^\\s>\\/=]+=(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2)*\\s*\\/?>/,\n      lookbehind: true,\n      inside: {\n        rest: Prism.languages.markup\n      }\n    }\n  });\n}\n\n;\nPrism.languages.ada = {\n  'comment': /--.*/,\n  'string': /\"(?:\"\"|[^\"\\r\\f\\n])*\"/i,\n  'number': [{\n    pattern: /\\b\\d(?:_?\\d)*#[\\dA-F](?:_?[\\dA-F])*(?:\\.[\\dA-F](?:_?[\\dA-F])*)?#(?:E[+-]?\\d(?:_?\\d)*)?/i\n  }, {\n    pattern: /\\b\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:E[+-]?\\d(?:_?\\d)*)?\\b/i\n  }],\n  'attr-name': /\\b'\\w+/i,\n  'keyword': /\\b(?:abort|abs|abstract|accept|access|aliased|all|and|array|at|begin|body|case|constant|declare|delay|delta|digits|do|else|new|return|elsif|end|entry|exception|exit|for|function|generic|goto|if|in|interface|is|limited|loop|mod|not|null|of|others|out|overriding|package|pragma|private|procedure|protected|raise|range|record|rem|renames|requeue|reverse|select|separate|some|subtype|synchronized|tagged|task|terminate|then|type|until|use|when|while|with|xor)\\b/i,\n  'boolean': /\\b(?:true|false)\\b/i,\n  'operator': /<[=>]?|>=?|=>?|:=|\\/=?|\\*\\*?|[&+-]/,\n  'punctuation': /\\.\\.?|[,;():]/,\n  'char': /'.'/,\n  'variable': /\\b[a-z](?:[_a-z\\d])*\\b/i\n};\nPrism.languages.apacheconf = {\n  'comment': /#.*/,\n  'directive-inline': {\n    pattern: /(^\\s*)\\b(?:AcceptFilter|AcceptPathInfo|AccessFileName|Action|Add(?:Alt|AltByEncoding|AltByType|Charset|DefaultCharset|Description|Encoding|Handler|Icon|IconByEncoding|IconByType|InputFilter|Language|ModuleInfo|OutputFilter|OutputFilterByType|Type)|Alias|AliasMatch|Allow(?:CONNECT|EncodedSlashes|Methods|Override|OverrideList)?|Anonymous(?:_LogEmail|_MustGiveEmail|_NoUserID|_VerifyEmail)?|AsyncRequestWorkerFactor|Auth(?:BasicAuthoritative|BasicFake|BasicProvider|BasicUseDigestAlgorithm|DBDUserPWQuery|DBDUserRealmQuery|DBMGroupFile|DBMType|DBMUserFile|Digest(?:Algorithm|Domain|NonceLifetime|Provider|Qop|ShmemSize)|Form(?:Authoritative|Body|DisableNoStore|FakeBasicAuth|Location|LoginRequiredLocation|LoginSuccessLocation|LogoutLocation|Method|Mimetype|Password|Provider|SitePassphrase|Size|Username)|GroupFile|LDAP(?:AuthorizePrefix|BindAuthoritative|BindDN|BindPassword|CharsetConfig|CompareAsUser|CompareDNOnServer|DereferenceAliases|GroupAttribute|GroupAttributeIsDN|InitialBindAsUser|InitialBindPattern|MaxSubGroupDepth|RemoteUserAttribute|RemoteUserIsDN|SearchAsUser|SubGroupAttribute|SubGroupClass|Url)|Merging|Name|Type|UserFile|nCache(?:Context|Enable|ProvideFor|SOCache|Timeout)|nzFcgiCheckAuthnProvider|nzFcgiDefineProvider|zDBDLoginToReferer|zDBDQuery|zDBDRedirectQuery|zDBMType|zSendForbiddenOnFailure)|BalancerGrowth|BalancerInherit|BalancerMember|BalancerPersist|BrowserMatch|BrowserMatchNoCase|BufferSize|BufferedLogs|CGIDScriptTimeout|CGIMapExtension|Cache(?:DefaultExpire|DetailHeader|DirLength|DirLevels|Disable|Enable|File|Header|IgnoreCacheControl|IgnoreHeaders|IgnoreNoLastMod|IgnoreQueryString|IgnoreURLSessionIdentifiers|KeyBaseURL|LastModifiedFactor|Lock|LockMaxAge|LockPath|MaxExpire|MaxFileSize|MinExpire|MinFileSize|NegotiatedDocs|QuickHandler|ReadSize|ReadTime|Root|Socache(?:MaxSize|MaxTime|MinTime|ReadSize|ReadTime)?|StaleOnError|StoreExpired|StoreNoStore|StorePrivate)|CharsetDefault|CharsetOptions|CharsetSourceEnc|CheckCaseOnly|CheckSpelling|ChrootDir|ContentDigest|CookieDomain|CookieExpires|CookieName|CookieStyle|CookieTracking|CoreDumpDirectory|CustomLog|DBDExptime|DBDInitSQL|DBDKeep|DBDMax|DBDMin|DBDParams|DBDPersist|DBDPrepareSQL|DBDriver|DTracePrivileges|Dav|DavDepthInfinity|DavGenericLockDB|DavLockDB|DavMinTimeout|DefaultIcon|DefaultLanguage|DefaultRuntimeDir|DefaultType|Define|Deflate(?:BufferSize|CompressionLevel|FilterNote|InflateLimitRequestBody|InflateRatio(?:Burst|Limit)|MemLevel|WindowSize)|Deny|DirectoryCheckHandler|DirectoryIndex|DirectoryIndexRedirect|DirectorySlash|DocumentRoot|DumpIOInput|DumpIOOutput|EnableExceptionHook|EnableMMAP|EnableSendfile|Error|ErrorDocument|ErrorLog|ErrorLogFormat|Example|ExpiresActive|ExpiresByType|ExpiresDefault|ExtFilterDefine|ExtFilterOptions|ExtendedStatus|FallbackResource|FileETag|FilterChain|FilterDeclare|FilterProtocol|FilterProvider|FilterTrace|ForceLanguagePriority|ForceType|ForensicLog|GprofDir|GracefulShutdownTimeout|Group|Header|HeaderName|Heartbeat(?:Address|Listen|MaxServers|Storage)|HostnameLookups|ISAPI(?:AppendLogToErrors|AppendLogToQuery|CacheFile|FakeAsync|LogNotSupported|ReadAheadBuffer)|IdentityCheck|IdentityCheckTimeout|ImapBase|ImapDefault|ImapMenu|Include|IncludeOptional|Index(?:HeadInsert|Ignore|IgnoreReset|Options|OrderDefault|StyleSheet)|InputSed|KeepAlive|KeepAliveTimeout|KeptBodySize|LDAP(?:CacheEntries|CacheTTL|ConnectionPoolTTL|ConnectionTimeout|LibraryDebug|OpCacheEntries|OpCacheTTL|ReferralHopLimit|Referrals|Retries|RetryDelay|SharedCacheFile|SharedCacheSize|Timeout|TrustedClientCert|TrustedGlobalCert|TrustedMode|VerifyServerCert)|LanguagePriority|Limit(?:InternalRecursion|Request(?:Body|FieldSize|Fields|Line)|XMLRequestBody)|Listen|ListenBackLog|LoadFile|LoadModule|LogFormat|LogLevel|LogMessage|LuaAuthzProvider|LuaCodeCache|Lua(?:Hook(?:AccessChecker|AuthChecker|CheckUserID|Fixups|InsertFilter|Log|MapToStorage|TranslateName|TypeChecker)|Inherit|InputFilter|MapHandler|OutputFilter|PackageCPath|PackagePath|QuickHandler|Root|Scope)|MMapFile|Max(?:ConnectionsPerChild|KeepAliveRequests|MemFree|RangeOverlaps|RangeReversals|Ranges|RequestWorkers|SpareServers|SpareThreads|Threads)|MergeTrailers|MetaDir|MetaFiles|MetaSuffix|MimeMagicFile|MinSpareServers|MinSpareThreads|ModMimeUsePathInfo|ModemStandard|MultiviewsMatch|Mutex|NWSSLTrustedCerts|NWSSLUpgradeable|NameVirtualHost|NoProxy|Options|Order|OutputSed|PassEnv|PidFile|PrivilegesMode|Protocol|ProtocolEcho|Proxy(?:AddHeaders|BadHeader|Block|Domain|ErrorOverride|ExpressDBMFile|ExpressDBMType|ExpressEnable|FtpDirCharset|FtpEscapeWildcards|FtpListOnWildcard|HTML(?:BufSize|CharsetOut|DocType|Enable|Events|Extended|Fixups|Interp|Links|Meta|StripComments|URLMap)|IOBufferSize|MaxForwards|Pass(?:Inherit|InterpolateEnv|Match|Reverse|ReverseCookieDomain|ReverseCookiePath)?|PreserveHost|ReceiveBufferSize|Remote|RemoteMatch|Requests|SCGIInternalRedirect|SCGISendfile|Set|SourceAddress|Status|Timeout|Via)|RLimitCPU|RLimitMEM|RLimitNPROC|ReadmeName|ReceiveBufferSize|Redirect|RedirectMatch|RedirectPermanent|RedirectTemp|ReflectorHeader|RemoteIP(?:Header|InternalProxy|InternalProxyList|ProxiesHeader|TrustedProxy|TrustedProxyList)|RemoveCharset|RemoveEncoding|RemoveHandler|RemoveInputFilter|RemoveLanguage|RemoveOutputFilter|RemoveType|RequestHeader|RequestReadTimeout|Require|Rewrite(?:Base|Cond|Engine|Map|Options|Rule)|SSIETag|SSIEndTag|SSIErrorMsg|SSILastModified|SSILegacyExprParser|SSIStartTag|SSITimeFormat|SSIUndefinedEcho|SSL(?:CACertificateFile|CACertificatePath|CADNRequestFile|CADNRequestPath|CARevocationCheck|CARevocationFile|CARevocationPath|CertificateChainFile|CertificateFile|CertificateKeyFile|CipherSuite|Compression|CryptoDevice|Engine|FIPS|HonorCipherOrder|InsecureRenegotiation|OCSP(?:DefaultResponder|Enable|OverrideResponder|ResponderTimeout|ResponseMaxAge|ResponseTimeSkew|UseRequestNonce)|OpenSSLConfCmd|Options|PassPhraseDialog|Protocol|Proxy(?:CACertificateFile|CACertificatePath|CARevocation(?:Check|File|Path)|CheckPeer(?:CN|Expire|Name)|CipherSuite|Engine|MachineCertificate(?:ChainFile|File|Path)|Protocol|Verify|VerifyDepth)|RandomSeed|RenegBufferSize|Require|RequireSSL|SRPUnknownUserSeed|SRPVerifierFile|Session(?:Cache|CacheTimeout|TicketKeyFile|Tickets)|Stapling(?:Cache|ErrorCacheTimeout|FakeTryLater|ForceURL|ResponderTimeout|ResponseMaxAge|ResponseTimeSkew|ReturnResponderErrors|StandardCacheTimeout)|StrictSNIVHostCheck|UseStapling|UserName|VerifyClient|VerifyDepth)|Satisfy|ScoreBoardFile|Script(?:Alias|AliasMatch|InterpreterSource|Log|LogBuffer|LogLength|Sock)?|SecureListen|SeeRequestTail|SendBufferSize|Server(?:Admin|Alias|Limit|Name|Path|Root|Signature|Tokens)|Session(?:Cookie(?:Name|Name2|Remove)|Crypto(?:Cipher|Driver|Passphrase|PassphraseFile)|DBD(?:CookieName|CookieName2|CookieRemove|DeleteLabel|InsertLabel|PerUser|SelectLabel|UpdateLabel)|Env|Exclude|Header|Include|MaxAge)?|SetEnv|SetEnvIf|SetEnvIfExpr|SetEnvIfNoCase|SetHandler|SetInputFilter|SetOutputFilter|StartServers|StartThreads|Substitute|Suexec|SuexecUserGroup|ThreadLimit|ThreadStackSize|ThreadsPerChild|TimeOut|TraceEnable|TransferLog|TypesConfig|UnDefine|UndefMacro|UnsetEnv|Use|UseCanonicalName|UseCanonicalPhysicalPort|User|UserDir|VHostCGIMode|VHostCGIPrivs|VHostGroup|VHostPrivs|VHostSecure|VHostUser|Virtual(?:DocumentRoot|ScriptAlias)(?:IP)?|WatchdogInterval|XBitHack|xml2EncAlias|xml2EncDefault|xml2StartParse)\\b/im,\n    lookbehind: true,\n    alias: 'property'\n  },\n  'directive-block': {\n    pattern: /<\\/?\\b(?:Auth[nz]ProviderAlias|Directory|DirectoryMatch|Else|ElseIf|Files|FilesMatch|If|IfDefine|IfModule|IfVersion|Limit|LimitExcept|Location|LocationMatch|Macro|Proxy|Require(?:All|Any|None)|VirtualHost)\\b *.*>/i,\n    inside: {\n      'directive-block': {\n        pattern: /^<\\/?\\w+/,\n        inside: {\n          'punctuation': /^<\\/?/\n        },\n        alias: 'tag'\n      },\n      'directive-block-parameter': {\n        pattern: /.*[^>]/,\n        inside: {\n          'punctuation': /:/,\n          'string': {\n            pattern: /(\"|').*\\1/,\n            inside: {\n              'variable': /[$%]\\{?(?:\\w\\.?[-+:]?)+\\}?/\n            }\n          }\n        },\n        alias: 'attr-value'\n      },\n      'punctuation': />/\n    },\n    alias: 'tag'\n  },\n  'directive-flags': {\n    pattern: /\\[(?:\\w,?)+\\]/,\n    alias: 'keyword'\n  },\n  'string': {\n    pattern: /(\"|').*\\1/,\n    inside: {\n      'variable': /[$%]\\{?(?:\\w\\.?[-+:]?)+\\}?/\n    }\n  },\n  'variable': /[$%]\\{?(?:\\w\\.?[-+:]?)+\\}?/,\n  'regex': /\\^?.*\\$|\\^.*\\$?/\n};\nPrism.languages.apl = {\n  'comment': /(?:⍝|#[! ]).*$/m,\n  'string': {\n    pattern: /'(?:[^'\\r\\n]|'')*'/,\n    greedy: true\n  },\n  'number': /¯?(?:\\d*\\.?\\d+(?:e[+¯]?\\d+)?|¯|∞)(?:j¯?(?:\\d*\\.?\\d+(?:e[+¯]?\\d+)?|¯|∞))?/i,\n  'statement': /:[A-Z][a-z][A-Za-z]*\\b/,\n  'system-function': {\n    pattern: /⎕[A-Z]+/i,\n    alias: 'function'\n  },\n  'constant': /[⍬⌾#⎕⍞]/,\n  'function': /[-+×÷⌈⌊∣|⍳⍸?*⍟○!⌹<≤=>≥≠≡≢∊⍷∪∩~∨∧⍱⍲⍴,⍪⌽⊖⍉↑↓⊂⊃⊆⊇⌷⍋⍒⊤⊥⍕⍎⊣⊢⍁⍂≈⍯↗¤→]/,\n  'monadic-operator': {\n    pattern: /[\\\\\\/⌿⍀¨⍨⌶&∥]/,\n    alias: 'operator'\n  },\n  'dyadic-operator': {\n    pattern: /[.⍣⍠⍤∘⌸@⌺]/,\n    alias: 'operator'\n  },\n  'assignment': {\n    pattern: /←/,\n    alias: 'keyword'\n  },\n  'punctuation': /[\\[;\\]()◇⋄]/,\n  'dfn': {\n    pattern: /[{}⍺⍵⍶⍹∇⍫:]/,\n    alias: 'builtin'\n  }\n};\nPrism.languages.applescript = {\n  'comment': [// Allow one level of nesting\n  /\\(\\*(?:\\(\\*[\\s\\S]*?\\*\\)|[\\s\\S])*?\\*\\)/, /--.+/, /#.+/],\n  'string': /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n  'number': /(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e-?\\d+)?\\b/i,\n  'operator': [/[&=≠≤≥*+\\-\\/÷^]|[<>]=?/, /\\b(?:(?:start|begin|end)s? with|(?:(?:does not|doesn't) contain|contains?)|(?:is|isn't|is not) (?:in|contained by)|(?:(?:is|isn't|is not) )?(?:greater|less) than(?: or equal)?(?: to)?|(?:(?:does not|doesn't) come|comes) (?:before|after)|(?:is|isn't|is not) equal(?: to)?|(?:(?:does not|doesn't) equal|equals|equal to|isn't|is not)|(?:a )?(?:ref(?: to)?|reference to)|(?:and|or|div|mod|as|not))\\b/],\n  'keyword': /\\b(?:about|above|after|against|apart from|around|aside from|at|back|before|beginning|behind|below|beneath|beside|between|but|by|considering|continue|copy|does|eighth|else|end|equal|error|every|exit|false|fifth|first|for|fourth|from|front|get|given|global|if|ignoring|in|instead of|into|is|it|its|last|local|me|middle|my|ninth|of|on|onto|out of|over|prop|property|put|repeat|return|returning|second|set|seventh|since|sixth|some|tell|tenth|that|the|then|third|through|thru|timeout|times|to|transaction|true|try|until|where|while|whose|with|without)\\b/,\n  'class': {\n    pattern: /\\b(?:alias|application|boolean|class|constant|date|file|integer|list|number|POSIX file|real|record|reference|RGB color|script|text|centimetres|centimeters|feet|inches|kilometres|kilometers|metres|meters|miles|yards|square feet|square kilometres|square kilometers|square metres|square meters|square miles|square yards|cubic centimetres|cubic centimeters|cubic feet|cubic inches|cubic metres|cubic meters|cubic yards|gallons|litres|liters|quarts|grams|kilograms|ounces|pounds|degrees Celsius|degrees Fahrenheit|degrees Kelvin)\\b/,\n    alias: 'builtin'\n  },\n  'punctuation': /[{}():,¬«»《》]/\n};\nPrism.languages.c = Prism.languages.extend('clike', {\n  'class-name': {\n    pattern: /(\\b(?:enum|struct)\\s+)\\w+/,\n    lookbehind: true\n  },\n  'keyword': /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\b/,\n  'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/,\n  'number': /(?:\\b0x(?:[\\da-f]+\\.?[\\da-f]*|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]*/i\n});\nPrism.languages.insertBefore('c', 'string', {\n  'macro': {\n    // allow for multiline macro definitions\n    // spaces after the # character compile fine with gcc\n    pattern: /(^\\s*)#\\s*[a-z]+(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n    lookbehind: true,\n    alias: 'property',\n    inside: {\n      // highlight the path of the include statement as a string\n      'string': {\n        pattern: /(#\\s*include\\s*)(?:<.+?>|(\"|')(?:\\\\?.)+?\\2)/,\n        lookbehind: true\n      },\n      // highlight macro directives as keywords\n      'directive': {\n        pattern: /(#\\s*)\\b(?:define|defined|elif|else|endif|error|ifdef|ifndef|if|import|include|line|pragma|undef|using)\\b/,\n        lookbehind: true,\n        alias: 'keyword'\n      }\n    }\n  },\n  // highlight predefined macros as constants\n  'constant': /\\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\\b/\n});\ndelete Prism.languages.c['boolean'];\nPrism.languages.arff = {\n  'comment': /%.*/,\n  'string': {\n    pattern: /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'keyword': /@(?:attribute|data|end|relation)\\b/i,\n  'number': /\\b\\d+(?:\\.\\d+)?\\b/,\n  'punctuation': /[{},]/\n};\n\n(function (Prism) {\n  var attributes = {\n    pattern: /(^[ \\t]*)\\[(?!\\[)(?:([\"'$`])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\[(?:[^\\]\\\\]|\\\\.)*\\]|[^\\]\\\\]|\\\\.)*\\]/m,\n    lookbehind: true,\n    inside: {\n      'quoted': {\n        pattern: /([$`])(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,\n        inside: {\n          'punctuation': /^[$`]|[$`]$/\n        }\n      },\n      'interpreted': {\n        pattern: /'(?:[^'\\\\]|\\\\.)*'/,\n        inside: {\n          'punctuation': /^'|'$/ // See rest below\n\n        }\n      },\n      'string': /\"(?:[^\"\\\\]|\\\\.)*\"/,\n      'variable': /\\w+(?==)/,\n      'punctuation': /^\\[|\\]$|,/,\n      'operator': /=/,\n      // The negative look-ahead prevents blank matches\n      'attr-value': /(?!^\\s+$).+/\n    }\n  };\n  var asciidoc = Prism.languages.asciidoc = {\n    'comment-block': {\n      pattern: /^(\\/{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1/m,\n      alias: 'comment'\n    },\n    'table': {\n      pattern: /^\\|={3,}(?:(?:\\r?\\n|\\r).*)*?(?:\\r?\\n|\\r)\\|={3,}$/m,\n      inside: {\n        'specifiers': {\n          pattern: /(?!\\|)(?:(?:(?:\\d+(?:\\.\\d+)?|\\.\\d+)[+*])?(?:[<^>](?:\\.[<^>])?|\\.[<^>])?[a-z]*)(?=\\|)/,\n          alias: 'attr-value'\n        },\n        'punctuation': {\n          pattern: /(^|[^\\\\])[|!]=*/,\n          lookbehind: true // See rest below\n\n        }\n      }\n    },\n    'passthrough-block': {\n      pattern: /^(\\+{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n      inside: {\n        'punctuation': /^\\++|\\++$/ // See rest below\n\n      }\n    },\n    // Literal blocks and listing blocks\n    'literal-block': {\n      pattern: /^(-{4,}|\\.{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n      inside: {\n        'punctuation': /^(?:-+|\\.+)|(?:-+|\\.+)$/ // See rest below\n\n      }\n    },\n    // Sidebar blocks, quote blocks, example blocks and open blocks\n    'other-block': {\n      pattern: /^(--|\\*{4,}|_{4,}|={4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n      inside: {\n        'punctuation': /^(?:-+|\\*+|_+|=+)|(?:-+|\\*+|_+|=+)$/ // See rest below\n\n      }\n    },\n    // list-punctuation and list-label must appear before indented-block\n    'list-punctuation': {\n      pattern: /(^[ \\t]*)(?:-|\\*{1,5}|\\.{1,5}|(?:[a-z]|\\d+)\\.|[xvi]+\\))(?= )/im,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'list-label': {\n      pattern: /(^[ \\t]*)[a-z\\d].+(?::{2,4}|;;)(?=\\s)/im,\n      lookbehind: true,\n      alias: 'symbol'\n    },\n    'indented-block': {\n      pattern: /((\\r?\\n|\\r)\\2)([ \\t]+)\\S.*(?:(?:\\r?\\n|\\r)\\3.+)*(?=\\2{2}|$)/,\n      lookbehind: true\n    },\n    'comment': /^\\/\\/.*/m,\n    'title': {\n      pattern: /^.+(?:\\r?\\n|\\r)(?:={3,}|-{3,}|~{3,}|\\^{3,}|\\+{3,})$|^={1,5} +.+|^\\.(?![\\s.]).*/m,\n      alias: 'important',\n      inside: {\n        'punctuation': /^(?:\\.|=+)|(?:=+|-+|~+|\\^+|\\++)$/ // See rest below\n\n      }\n    },\n    'attribute-entry': {\n      pattern: /^:[^:\\r\\n]+:(?: .*?(?: \\+(?:\\r?\\n|\\r).*?)*)?$/m,\n      alias: 'tag'\n    },\n    'attributes': attributes,\n    'hr': {\n      pattern: /^'{3,}$/m,\n      alias: 'punctuation'\n    },\n    'page-break': {\n      pattern: /^<{3,}$/m,\n      alias: 'punctuation'\n    },\n    'admonition': {\n      pattern: /^(?:TIP|NOTE|IMPORTANT|WARNING|CAUTION):/m,\n      alias: 'keyword'\n    },\n    'callout': [{\n      pattern: /(^[ \\t]*)<?\\d*>/m,\n      lookbehind: true,\n      alias: 'symbol'\n    }, {\n      pattern: /<\\d+>/,\n      alias: 'symbol'\n    }],\n    'macro': {\n      pattern: /\\b[a-z\\d][a-z\\d-]*::?(?:(?:\\S+)??\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,\n      inside: {\n        'function': /^[a-z\\d-]+(?=:)/,\n        'punctuation': /^::?/,\n        'attributes': {\n          pattern: /(?:\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,\n          inside: attributes.inside\n        }\n      }\n    },\n    'inline': {\n      /*\n      The initial look-behind prevents the highlighting of escaped quoted text.\n      \tQuoted text can be multi-line but cannot span an empty line.\n      All quoted text can have attributes before [foobar, 'foobar', baz=\"bar\"].\n      \tFirst, we handle the constrained quotes.\n      Those must be bounded by non-word chars and cannot have spaces between the delimiter and the first char.\n      They are, in order: _emphasis_, ``double quotes'', `single quotes', `monospace`, 'emphasis', *strong*, +monospace+ and #unquoted#\n      \tThen we handle the unconstrained quotes.\n      Those do not have the restrictions of the constrained quotes.\n      They are, in order: __emphasis__, **strong**, ++monospace++, +++passthrough+++, ##unquoted##, $$passthrough$$, ~subscript~, ^superscript^, {attribute-reference}, [[anchor]], [[[bibliography anchor]]], <<xref>>, (((indexes))) and ((indexes))\n       */\n      pattern: /(^|[^\\\\])(?:(?:\\B\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\\\.)*\\])?(?:\\b_(?!\\s)(?: _|[^_\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: _|[^_\\\\\\r\\n]|\\\\.)+)*_\\b|\\B``(?!\\s).+?(?:(?:\\r?\\n|\\r).+?)*''\\B|\\B`(?!\\s)(?: ['`]|.)+?(?:(?:\\r?\\n|\\r)(?: ['`]|.)+?)*['`]\\B|\\B(['*+#])(?!\\s)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+)*\\3\\B)|(?:\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\4)[^\\\\]|\\\\.)*\\4|\\\\.)*\\])?(?:(__|\\*\\*|\\+\\+\\+?|##|\\$\\$|[~^]).+?(?:(?:\\r?\\n|\\r).+?)*\\5|\\{[^}\\r\\n]+\\}|\\[\\[\\[?.+?(?:(?:\\r?\\n|\\r).+?)*\\]?\\]\\]|<<.+?(?:(?:\\r?\\n|\\r).+?)*>>|\\(\\(\\(?.+?(?:(?:\\r?\\n|\\r).+?)*\\)?\\)\\)))/m,\n      lookbehind: true,\n      inside: {\n        'attributes': attributes,\n        'url': {\n          pattern: /^(?:\\[\\[\\[?.+?\\]?\\]\\]|<<.+?>>)$/,\n          inside: {\n            'punctuation': /^(?:\\[\\[\\[?|<<)|(?:\\]\\]\\]?|>>)$/\n          }\n        },\n        'attribute-ref': {\n          pattern: /^\\{.+\\}$/,\n          inside: {\n            'variable': {\n              pattern: /(^\\{)[a-z\\d,+_-]+/,\n              lookbehind: true\n            },\n            'operator': /^[=?!#%@$]|!(?=[:}])/,\n            'punctuation': /^\\{|\\}$|::?/\n          }\n        },\n        'italic': {\n          pattern: /^(['_])[\\s\\S]+\\1$/,\n          inside: {\n            'punctuation': /^(?:''?|__?)|(?:''?|__?)$/\n          }\n        },\n        'bold': {\n          pattern: /^\\*[\\s\\S]+\\*$/,\n          inside: {\n            punctuation: /^\\*\\*?|\\*\\*?$/\n          }\n        },\n        'punctuation': /^(?:``?|\\+{1,3}|##?|\\$\\$|[~^]|\\(\\(\\(?)|(?:''?|\\+{1,3}|##?|\\$\\$|[~^`]|\\)?\\)\\))$/\n      }\n    },\n    'replacement': {\n      pattern: /\\((?:C|TM|R)\\)/,\n      alias: 'builtin'\n    },\n    'entity': /&#?[\\da-z]{1,8};/i,\n    'line-continuation': {\n      pattern: /(^| )\\+$/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    }\n  }; // Allow some nesting. There is no recursion though, so cloning should not be needed.\n\n  function copyFromAsciiDoc(keys) {\n    keys = keys.split(' ');\n    var o = {};\n\n    for (var i = 0, l = keys.length; i < l; i++) {\n      o[keys[i]] = asciidoc[keys[i]];\n    }\n\n    return o;\n  }\n\n  attributes.inside['interpreted'].inside.rest = copyFromAsciiDoc('macro inline replacement entity');\n  asciidoc['passthrough-block'].inside.rest = copyFromAsciiDoc('macro');\n  asciidoc['literal-block'].inside.rest = copyFromAsciiDoc('callout');\n  asciidoc['table'].inside.rest = copyFromAsciiDoc('comment-block passthrough-block literal-block other-block list-punctuation indented-block comment title attribute-entry attributes hr page-break admonition list-label callout macro inline replacement entity line-continuation');\n  asciidoc['other-block'].inside.rest = copyFromAsciiDoc('table list-punctuation indented-block comment attribute-entry attributes hr page-break admonition list-label macro inline replacement entity line-continuation');\n  asciidoc['title'].inside.rest = copyFromAsciiDoc('macro inline replacement entity'); // Plugin to make entity title show the real entity, idea by Roman Komarov\n\n  Prism.hooks.add('wrap', function (env) {\n    if (env.type === 'entity') {\n      env.attributes['title'] = env.content.replace(/&amp;/, '&');\n    }\n  });\n  Prism.languages.adoc = Prism.languages.asciidoc;\n})(Prism);\n\nPrism.languages.asm6502 = {\n  'comment': /;.*/,\n  'directive': {\n    pattern: /\\.\\w+(?= )/,\n    alias: 'keyword'\n  },\n  'string': /([\"'`])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n  'opcode': {\n    pattern: /\\b(?:adc|and|asl|bcc|bcs|beq|bit|bmi|bne|bpl|brk|bvc|bvs|clc|cld|cli|clv|cmp|cpx|cpy|dec|dex|dey|eor|inc|inx|iny|jmp|jsr|lda|ldx|ldy|lsr|nop|ora|pha|php|pla|plp|rol|ror|rti|rts|sbc|sec|sed|sei|sta|stx|sty|tax|tay|tsx|txa|txs|tya|ADC|AND|ASL|BCC|BCS|BEQ|BIT|BMI|BNE|BPL|BRK|BVC|BVS|CLC|CLD|CLI|CLV|CMP|CPX|CPY|DEC|DEX|DEY|EOR|INC|INX|INY|JMP|JSR|LDA|LDX|LDY|LSR|NOP|ORA|PHA|PHP|PLA|PLP|ROL|ROR|RTI|RTS|SBC|SEC|SED|SEI|STA|STX|STY|TAX|TAY|TSX|TXA|TXS|TYA)\\b/,\n    alias: 'property'\n  },\n  'hexnumber': {\n    pattern: /#?\\$[\\da-f]{2,4}/i,\n    alias: 'string'\n  },\n  'binarynumber': {\n    pattern: /#?%[01]+/,\n    alias: 'string'\n  },\n  'decimalnumber': {\n    pattern: /#?\\d+/,\n    alias: 'string'\n  },\n  'register': {\n    pattern: /\\b[xya]\\b/i,\n    alias: 'variable'\n  }\n};\nPrism.languages.csharp = Prism.languages.extend('clike', {\n  'keyword': /\\b(?:abstract|add|alias|as|ascending|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|descending|do|double|dynamic|else|enum|event|explicit|extern|false|finally|fixed|float|for|foreach|from|get|global|goto|group|if|implicit|in|int|interface|internal|into|is|join|let|lock|long|namespace|new|null|object|operator|orderby|out|override|params|partial|private|protected|public|readonly|ref|remove|return|sbyte|sealed|select|set|short|sizeof|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|value|var|virtual|void|volatile|where|while|yield)\\b/,\n  'string': [{\n    pattern: /@(\"|')(?:\\1\\1|\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n    greedy: true\n  }, {\n    pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*?\\1/,\n    greedy: true\n  }],\n  'class-name': [{\n    // (Foo bar, Bar baz)\n    pattern: /\\b[A-Z]\\w*(?:\\.\\w+)*\\b(?=\\s+\\w+)/,\n    inside: {\n      punctuation: /\\./\n    }\n  }, {\n    // [Foo]\n    pattern: /(\\[)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n    lookbehind: true,\n    inside: {\n      punctuation: /\\./\n    }\n  }, {\n    // class Foo : Bar\n    pattern: /(\\b(?:class|interface)\\s+[A-Z]\\w*(?:\\.\\w+)*\\s*:\\s*)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n    lookbehind: true,\n    inside: {\n      punctuation: /\\./\n    }\n  }, {\n    // class Foo\n    pattern: /((?:\\b(?:class|interface|new)\\s+)|(?:catch\\s+\\())[A-Z]\\w*(?:\\.\\w+)*\\b/,\n    lookbehind: true,\n    inside: {\n      punctuation: /\\./\n    }\n  }],\n  'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)f?/i,\n  'operator': />>=?|<<=?|[-=]>|([-+&|?])\\1|~|[-+*/%&|^!=<>]=?/,\n  'punctuation': /\\?\\.?|::|[{}[\\];(),.:]/\n});\nPrism.languages.insertBefore('csharp', 'class-name', {\n  'generic-method': {\n    pattern: /\\w+\\s*<[^>\\r\\n]+?>\\s*(?=\\()/,\n    inside: {\n      function: /^\\w+/,\n      'class-name': {\n        pattern: /\\b[A-Z]\\w*(?:\\.\\w+)*\\b/,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      keyword: Prism.languages.csharp.keyword,\n      punctuation: /[<>(),.:]/\n    }\n  },\n  'preprocessor': {\n    pattern: /(^\\s*)#.*/m,\n    lookbehind: true,\n    alias: 'property',\n    inside: {\n      // highlight preprocessor directives as keywords\n      'directive': {\n        pattern: /(\\s*#)\\b(?:define|elif|else|endif|endregion|error|if|line|pragma|region|undef|warning)\\b/,\n        lookbehind: true,\n        alias: 'keyword'\n      }\n    }\n  }\n});\nPrism.languages.dotnet = Prism.languages.csharp; // NOTES - follows first-first highlight method, block is locked after highlight, different from SyntaxHl\n\nPrism.languages.autohotkey = {\n  'comment': {\n    pattern: /(^[^\";\\n]*(\"[^\"\\n]*?\"[^\"\\n]*?)*)(?:;.*$|^\\s*\\/\\*[\\s\\S]*\\n\\*\\/)/m,\n    lookbehind: true\n  },\n  'string': /\"(?:[^\"\\n\\r]|\"\")*\"/m,\n  'function': /[^(); \\t,\\n+*\\-=?>:\\\\\\/<&%\\[\\]]+?(?=\\()/m,\n  //function - don't use .*\\) in the end bcoz string locks it\n  'tag': /^[ \\t]*[^\\s:]+?(?=:(?:[^:]|$))/m,\n  //labels\n  'variable': /%\\w+%/,\n  'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n  'operator': /\\?|\\/\\/?=?|:=|\\|[=|]?|&[=&]?|\\+[=+]?|-[=-]?|\\*[=*]?|<(?:<=?|>|=)?|>>?=?|[.^!=~]=?|\\b(?:AND|NOT|OR)\\b/,\n  'punctuation': /[{}[\\]():,]/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'selector': /\\b(?:AutoTrim|BlockInput|Break|Click|ClipWait|Continue|Control|ControlClick|ControlFocus|ControlGet|ControlGetFocus|ControlGetPos|ControlGetText|ControlMove|ControlSend|ControlSendRaw|ControlSetText|CoordMode|Critical|DetectHiddenText|DetectHiddenWindows|Drive|DriveGet|DriveSpaceFree|EnvAdd|EnvDiv|EnvGet|EnvMult|EnvSet|EnvSub|EnvUpdate|Exit|ExitApp|FileAppend|FileCopy|FileCopyDir|FileCreateDir|FileCreateShortcut|FileDelete|FileEncoding|FileGetAttrib|FileGetShortcut|FileGetSize|FileGetTime|FileGetVersion|FileInstall|FileMove|FileMoveDir|FileRead|FileReadLine|FileRecycle|FileRecycleEmpty|FileRemoveDir|FileSelectFile|FileSelectFolder|FileSetAttrib|FileSetTime|FormatTime|GetKeyState|Gosub|Goto|GroupActivate|GroupAdd|GroupClose|GroupDeactivate|Gui|GuiControl|GuiControlGet|Hotkey|ImageSearch|IniDelete|IniRead|IniWrite|Input|InputBox|KeyWait|ListHotkeys|ListLines|ListVars|Loop|Menu|MouseClick|MouseClickDrag|MouseGetPos|MouseMove|MsgBox|OnExit|OutputDebug|Pause|PixelGetColor|PixelSearch|PostMessage|Process|Progress|Random|RegDelete|RegRead|RegWrite|Reload|Repeat|Return|Run|RunAs|RunWait|Send|SendEvent|SendInput|SendMessage|SendMode|SendPlay|SendRaw|SetBatchLines|SetCapslockState|SetControlDelay|SetDefaultMouseSpeed|SetEnv|SetFormat|SetKeyDelay|SetMouseDelay|SetNumlockState|SetScrollLockState|SetStoreCapslockMode|SetTimer|SetTitleMatchMode|SetWinDelay|SetWorkingDir|Shutdown|Sleep|Sort|SoundBeep|SoundGet|SoundGetWaveVolume|SoundPlay|SoundSet|SoundSetWaveVolume|SplashImage|SplashTextOff|SplashTextOn|SplitPath|StatusBarGetText|StatusBarWait|StringCaseSense|StringGetPos|StringLeft|StringLen|StringLower|StringMid|StringReplace|StringRight|StringSplit|StringTrimLeft|StringTrimRight|StringUpper|Suspend|SysGet|Thread|ToolTip|Transform|TrayTip|URLDownloadToFile|WinActivate|WinActivateBottom|WinClose|WinGet|WinGetActiveStats|WinGetActiveTitle|WinGetClass|WinGetPos|WinGetText|WinGetTitle|WinHide|WinKill|WinMaximize|WinMenuSelectItem|WinMinimize|WinMinimizeAll|WinMinimizeAllUndo|WinMove|WinRestore|WinSet|WinSetTitle|WinShow|WinWait|WinWaitActive|WinWaitClose|WinWaitNotActive)\\b/i,\n  'constant': /\\b(?:a_ahkpath|a_ahkversion|a_appdata|a_appdatacommon|a_autotrim|a_batchlines|a_caretx|a_carety|a_computername|a_controldelay|a_cursor|a_dd|a_ddd|a_dddd|a_defaultmousespeed|a_desktop|a_desktopcommon|a_detecthiddentext|a_detecthiddenwindows|a_endchar|a_eventinfo|a_exitreason|a_formatfloat|a_formatinteger|a_gui|a_guievent|a_guicontrol|a_guicontrolevent|a_guiheight|a_guiwidth|a_guix|a_guiy|a_hour|a_iconfile|a_iconhidden|a_iconnumber|a_icontip|a_index|a_ipaddress1|a_ipaddress2|a_ipaddress3|a_ipaddress4|a_isadmin|a_iscompiled|a_iscritical|a_ispaused|a_issuspended|a_isunicode|a_keydelay|a_language|a_lasterror|a_linefile|a_linenumber|a_loopfield|a_loopfileattrib|a_loopfiledir|a_loopfileext|a_loopfilefullpath|a_loopfilelongpath|a_loopfilename|a_loopfileshortname|a_loopfileshortpath|a_loopfilesize|a_loopfilesizekb|a_loopfilesizemb|a_loopfiletimeaccessed|a_loopfiletimecreated|a_loopfiletimemodified|a_loopreadline|a_loopregkey|a_loopregname|a_loopregsubkey|a_loopregtimemodified|a_loopregtype|a_mday|a_min|a_mm|a_mmm|a_mmmm|a_mon|a_mousedelay|a_msec|a_mydocuments|a_now|a_nowutc|a_numbatchlines|a_ostype|a_osversion|a_priorhotkey|programfiles|a_programfiles|a_programs|a_programscommon|a_screenheight|a_screenwidth|a_scriptdir|a_scriptfullpath|a_scriptname|a_sec|a_space|a_startmenu|a_startmenucommon|a_startup|a_startupcommon|a_stringcasesense|a_tab|a_temp|a_thisfunc|a_thishotkey|a_thislabel|a_thismenu|a_thismenuitem|a_thismenuitempos|a_tickcount|a_timeidle|a_timeidlephysical|a_timesincepriorhotkey|a_timesincethishotkey|a_titlematchmode|a_titlematchmodespeed|a_username|a_wday|a_windelay|a_windir|a_workingdir|a_yday|a_year|a_yweek|a_yyyy|clipboard|clipboardall|comspec|errorlevel)\\b/i,\n  'builtin': /\\b(?:abs|acos|asc|asin|atan|ceil|chr|class|cos|dllcall|exp|fileexist|Fileopen|floor|il_add|il_create|il_destroy|instr|substr|isfunc|islabel|IsObject|ln|log|lv_add|lv_delete|lv_deletecol|lv_getcount|lv_getnext|lv_gettext|lv_insert|lv_insertcol|lv_modify|lv_modifycol|lv_setimagelist|mod|onmessage|numget|numput|registercallback|regexmatch|regexreplace|round|sin|tan|sqrt|strlen|sb_seticon|sb_setparts|sb_settext|strsplit|tv_add|tv_delete|tv_getchild|tv_getcount|tv_getnext|tv_get|tv_getparent|tv_getprev|tv_getselection|tv_gettext|tv_modify|varsetcapacity|winactive|winexist|__New|__Call|__Get|__Set)\\b/i,\n  'symbol': /\\b(?:alt|altdown|altup|appskey|backspace|browser_back|browser_favorites|browser_forward|browser_home|browser_refresh|browser_search|browser_stop|bs|capslock|ctrl|ctrlbreak|ctrldown|ctrlup|del|delete|down|end|enter|esc|escape|f1|f10|f11|f12|f13|f14|f15|f16|f17|f18|f19|f2|f20|f21|f22|f23|f24|f3|f4|f5|f6|f7|f8|f9|home|ins|insert|joy1|joy10|joy11|joy12|joy13|joy14|joy15|joy16|joy17|joy18|joy19|joy2|joy20|joy21|joy22|joy23|joy24|joy25|joy26|joy27|joy28|joy29|joy3|joy30|joy31|joy32|joy4|joy5|joy6|joy7|joy8|joy9|joyaxes|joybuttons|joyinfo|joyname|joypov|joyr|joyu|joyv|joyx|joyy|joyz|lalt|launch_app1|launch_app2|launch_mail|launch_media|lbutton|lcontrol|lctrl|left|lshift|lwin|lwindown|lwinup|mbutton|media_next|media_play_pause|media_prev|media_stop|numlock|numpad0|numpad1|numpad2|numpad3|numpad4|numpad5|numpad6|numpad7|numpad8|numpad9|numpadadd|numpadclear|numpaddel|numpaddiv|numpaddot|numpaddown|numpadend|numpadenter|numpadhome|numpadins|numpadleft|numpadmult|numpadpgdn|numpadpgup|numpadright|numpadsub|numpadup|pgdn|pgup|printscreen|ralt|rbutton|rcontrol|rctrl|right|rshift|rwin|rwindown|rwinup|scrolllock|shift|shiftdown|shiftup|space|tab|up|volume_down|volume_mute|volume_up|wheeldown|wheelleft|wheelright|wheelup|xbutton1|xbutton2)\\b/i,\n  'important': /#\\b(?:AllowSameLineComments|ClipboardTimeout|CommentFlag|ErrorStdOut|EscapeChar|HotkeyInterval|HotkeyModifierTimeout|Hotstring|IfWinActive|IfWinExist|IfWinNotActive|IfWinNotExist|Include|IncludeAgain|InstallKeybdHook|InstallMouseHook|KeyHistory|LTrim|MaxHotkeysPerInterval|MaxMem|MaxThreads|MaxThreadsBuffer|MaxThreadsPerHotkey|NoEnv|NoTrayIcon|Persistent|SingleInstance|UseHook|WinActivateForce)\\b/i,\n  'keyword': /\\b(?:Abort|AboveNormal|Add|ahk_class|ahk_group|ahk_id|ahk_pid|All|Alnum|Alpha|AltSubmit|AltTab|AltTabAndMenu|AltTabMenu|AltTabMenuDismiss|AlwaysOnTop|AutoSize|Background|BackgroundTrans|BelowNormal|between|BitAnd|BitNot|BitOr|BitShiftLeft|BitShiftRight|BitXOr|Bold|Border|Button|ByRef|Checkbox|Checked|CheckedGray|Choose|ChooseString|Close|Color|ComboBox|Contains|ControlList|Count|Date|DateTime|Days|DDL|Default|DeleteAll|Delimiter|Deref|Destroy|Digit|Disable|Disabled|DropDownList|Edit|Eject|Else|Enable|Enabled|Error|Exist|Expand|ExStyle|FileSystem|First|Flash|Float|FloatFast|Focus|Font|for|global|Grid|Group|GroupBox|GuiClose|GuiContextMenu|GuiDropFiles|GuiEscape|GuiSize|Hdr|Hidden|Hide|High|HKCC|HKCR|HKCU|HKEY_CLASSES_ROOT|HKEY_CURRENT_CONFIG|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKLM|HKU|Hours|HScroll|Icon|IconSmall|ID|IDLast|If|IfEqual|IfExist|IfGreater|IfGreaterOrEqual|IfInString|IfLess|IfLessOrEqual|IfMsgBox|IfNotEqual|IfNotExist|IfNotInString|IfWinActive|IfWinExist|IfWinNotActive|IfWinNotExist|Ignore|ImageList|in|Integer|IntegerFast|Interrupt|is|italic|Join|Label|LastFound|LastFoundExist|Limit|Lines|List|ListBox|ListView|local|Lock|Logoff|Low|Lower|Lowercase|MainWindow|Margin|Maximize|MaximizeBox|MaxSize|Minimize|MinimizeBox|MinMax|MinSize|Minutes|MonthCal|Mouse|Move|Multi|NA|No|NoActivate|NoDefault|NoHide|NoIcon|NoMainWindow|norm|Normal|NoSort|NoSortHdr|NoStandard|Not|NoTab|NoTimers|Number|Off|Ok|On|OwnDialogs|Owner|Parse|Password|Picture|Pixel|Pos|Pow|Priority|ProcessName|Radio|Range|Read|ReadOnly|Realtime|Redraw|REG_BINARY|REG_DWORD|REG_EXPAND_SZ|REG_MULTI_SZ|REG_SZ|Region|Relative|Rename|Report|Resize|Restore|Retry|RGB|Screen|Seconds|Section|Serial|SetLabel|ShiftAltTab|Show|Single|Slider|SortDesc|Standard|static|Status|StatusBar|StatusCD|strike|Style|Submit|SysMenu|Tab2|TabStop|Text|Theme|Tile|ToggleCheck|ToggleEnable|ToolWindow|Top|Topmost|TransColor|Transparent|Tray|TreeView|TryAgain|Type|UnCheck|underline|Unicode|Unlock|UpDown|Upper|Uppercase|UseErrorLevel|Vis|VisFirst|Visible|VScroll|Wait|WaitClose|WantCtrlA|WantF2|WantReturn|While|Wrap|Xdigit|xm|xp|xs|Yes|ym|yp|ys)\\b/i\n};\nPrism.languages.autoit = {\n  \"comment\": [/;.*/, {\n    // The multi-line comments delimiters can actually be commented out with \";\"\n    pattern: /(^\\s*)#(?:comments-start|cs)[\\s\\S]*?^\\s*#(?:comments-end|ce)/m,\n    lookbehind: true\n  }],\n  \"url\": {\n    pattern: /(^\\s*#include\\s+)(?:<[^\\r\\n>]+>|\"[^\\r\\n\"]+\")/m,\n    lookbehind: true\n  },\n  \"string\": {\n    pattern: /([\"'])(?:\\1\\1|(?!\\1)[^\\r\\n])*\\1/,\n    greedy: true,\n    inside: {\n      \"variable\": /([%$@])\\w+\\1/\n    }\n  },\n  \"directive\": {\n    pattern: /(^\\s*)#\\w+/m,\n    lookbehind: true,\n    alias: 'keyword'\n  },\n  \"function\": /\\b\\w+(?=\\()/,\n  // Variables and macros\n  \"variable\": /[$@]\\w+/,\n  \"keyword\": /\\b(?:Case|Const|Continue(?:Case|Loop)|Default|Dim|Do|Else(?:If)?|End(?:Func|If|Select|Switch|With)|Enum|Exit(?:Loop)?|For|Func|Global|If|In|Local|Next|Null|ReDim|Select|Static|Step|Switch|Then|To|Until|Volatile|WEnd|While|With)\\b/i,\n  \"number\": /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i,\n  \"boolean\": /\\b(?:True|False)\\b/i,\n  \"operator\": /<[=>]?|[-+*\\/=&>]=?|[?^]|\\b(?:And|Or|Not)\\b/i,\n  \"punctuation\": /[\\[\\]().,:]/\n};\n\n(function (Prism) {\n  var insideString = {\n    variable: [// Arithmetic Environment\n    {\n      pattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n      inside: {\n        // If there is a $ sign at the beginning highlight $(( and )) as variable\n        variable: [{\n          pattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n          lookbehind: true\n        }, /^\\$\\(\\(/],\n        number: /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n        // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n        operator: /--?|-=|\\+\\+?|\\+=|!=?|~|\\*\\*?|\\*=|\\/=?|%=?|<<=?|>>=?|<=?|>=?|==?|&&?|&=|\\^=?|\\|\\|?|\\|=|\\?|:/,\n        // If there is no $ sign at the beginning highlight (( and )) as punctuation\n        punctuation: /\\(\\(?|\\)\\)?|,|;/\n      }\n    }, // Command Substitution\n    {\n      pattern: /\\$\\([^)]+\\)|`[^`]+`/,\n      greedy: true,\n      inside: {\n        variable: /^\\$\\(|^`|\\)$|`$/\n      }\n    }, /\\$(?:[\\w#?*!@]+|\\{[^}]+\\})/i]\n  };\n  Prism.languages.bash = {\n    'shebang': {\n      pattern: /^#!\\s*\\/bin\\/bash|^#!\\s*\\/bin\\/sh/,\n      alias: 'important'\n    },\n    'comment': {\n      pattern: /(^|[^\"{\\\\])#.*/,\n      lookbehind: true\n    },\n    'string': [//Support for Here-Documents https://en.wikipedia.org/wiki/Here_document\n    {\n      pattern: /((?:^|[^<])<<\\s*)[\"']?(\\w+?)[\"']?\\s*\\r?\\n(?:[\\s\\S])*?\\r?\\n\\2/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }, {\n      pattern: /([\"'])(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|`[^`]+`|(?!\\1)[^\\\\])*\\1/,\n      greedy: true,\n      inside: insideString\n    }],\n    'variable': insideString.variable,\n    // Originally based on http://ss64.com/bash/\n    'function': {\n      pattern: /(^|[\\s;|&])(?:add|alias|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|builtin|bzip2|cal|cat|cd|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|comm|command|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|enable|env|ethtool|eval|exec|expand|expect|export|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|getopts|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|hash|head|help|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logout|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|popd|pr|printcap|printenv|printf|ps|pushd|pv|pwd|quota|quotacheck|quotactl|ram|rar|rcp|read|readarray|readonly|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|shift|shopt|shutdown|sleep|slocate|sort|source|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tail|tar|tee|test|time|timeout|times|top|touch|tr|traceroute|trap|tsort|tty|type|ulimit|umask|umount|unalias|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zip|zypper)(?=$|[\\s;|&])/,\n      lookbehind: true\n    },\n    'keyword': {\n      pattern: /(^|[\\s;|&])(?:let|:|\\.|if|then|else|elif|fi|for|break|continue|while|in|case|function|select|do|done|until|echo|exit|return|set|declare)(?=$|[\\s;|&])/,\n      lookbehind: true\n    },\n    'boolean': {\n      pattern: /(^|[\\s;|&])(?:true|false)(?=$|[\\s;|&])/,\n      lookbehind: true\n    },\n    'operator': /&&?|\\|\\|?|==?|!=?|<<<?|>>|<=?|>=?|=~/,\n    'punctuation': /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];]/\n  };\n  var inside = insideString.variable[1].inside;\n  inside.string = Prism.languages.bash.string;\n  inside['function'] = Prism.languages.bash['function'];\n  inside.keyword = Prism.languages.bash.keyword;\n  inside['boolean'] = Prism.languages.bash['boolean'];\n  inside.operator = Prism.languages.bash.operator;\n  inside.punctuation = Prism.languages.bash.punctuation;\n  Prism.languages.shell = Prism.languages.bash;\n})(Prism);\n\nPrism.languages.basic = {\n  'comment': {\n    pattern: /(?:!|REM\\b).+/i,\n    inside: {\n      'keyword': /^REM/i\n    }\n  },\n  'string': {\n    pattern: /\"(?:\"\"|[!#$%&'()*,\\/:;<=>?^_ +\\-.A-Z\\d])*\"/i,\n    greedy: true\n  },\n  'number': /(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,\n  'keyword': /\\b(?:AS|BEEP|BLOAD|BSAVE|CALL(?: ABSOLUTE)?|CASE|CHAIN|CHDIR|CLEAR|CLOSE|CLS|COM|COMMON|CONST|DATA|DECLARE|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DIM|DO|DOUBLE|ELSE|ELSEIF|END|ENVIRON|ERASE|ERROR|EXIT|FIELD|FILES|FOR|FUNCTION|GET|GOSUB|GOTO|IF|INPUT|INTEGER|IOCTL|KEY|KILL|LINE INPUT|LOCATE|LOCK|LONG|LOOP|LSET|MKDIR|NAME|NEXT|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPEN|OPTION BASE|OUT|POKE|PUT|READ|REDIM|REM|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SHARED|SINGLE|SELECT CASE|SHELL|SLEEP|STATIC|STEP|STOP|STRING|SUB|SWAP|SYSTEM|THEN|TIMER|TO|TROFF|TRON|TYPE|UNLOCK|UNTIL|USING|VIEW PRINT|WAIT|WEND|WHILE|WRITE)(?:\\$|\\b)/i,\n  'function': /\\b(?:ABS|ACCESS|ACOS|ANGLE|AREA|ARITHMETIC|ARRAY|ASIN|ASK|AT|ATN|BASE|BEGIN|BREAK|CAUSE|CEIL|CHR|CLIP|COLLATE|COLOR|CON|COS|COSH|COT|CSC|DATE|DATUM|DEBUG|DECIMAL|DEF|DEG|DEGREES|DELETE|DET|DEVICE|DISPLAY|DOT|ELAPSED|EPS|ERASABLE|EXLINE|EXP|EXTERNAL|EXTYPE|FILETYPE|FIXED|FP|GO|GRAPH|HANDLER|IDN|IMAGE|IN|INT|INTERNAL|IP|IS|KEYED|LBOUND|LCASE|LEFT|LEN|LENGTH|LET|LINE|LINES|LOG|LOG10|LOG2|LTRIM|MARGIN|MAT|MAX|MAXNUM|MID|MIN|MISSING|MOD|NATIVE|NUL|NUMERIC|OF|OPTION|ORD|ORGANIZATION|OUTIN|OUTPUT|PI|POINT|POINTER|POINTS|POS|PRINT|PROGRAM|PROMPT|RAD|RADIANS|RANDOMIZE|RECORD|RECSIZE|RECTYPE|RELATIVE|REMAINDER|REPEAT|REST|RETRY|REWRITE|RIGHT|RND|ROUND|RTRIM|SAME|SEC|SELECT|SEQUENTIAL|SET|SETTER|SGN|SIN|SINH|SIZE|SKIP|SQR|STANDARD|STATUS|STR|STREAM|STYLE|TAB|TAN|TANH|TEMPLATE|TEXT|THERE|TIME|TIMEOUT|TRACE|TRANSFORM|TRUNCATE|UBOUND|UCASE|USE|VAL|VARIABLE|VIEWPORT|WHEN|WINDOW|WITH|ZER|ZONEWIDTH)(?:\\$|\\b)/i,\n  'operator': /<[=>]?|>=?|[+\\-*\\/^=&]|\\b(?:AND|EQV|IMP|NOT|OR|XOR)\\b/i,\n  'punctuation': /[,;:()]/\n};\n\n(function (Prism) {\n  var variable = /%%?[~:\\w]+%?|!\\S+!/;\n  var parameter = {\n    pattern: /\\/[a-z?]+(?=[ :]|$):?|-[a-z]\\b|--[a-z-]+\\b/im,\n    alias: 'attr-name',\n    inside: {\n      'punctuation': /:/\n    }\n  };\n  var string = /\"[^\"]*\"/;\n  var number = /(?:\\b|-)\\d+\\b/;\n  Prism.languages.batch = {\n    'comment': [/^::.*/m, {\n      pattern: /((?:^|[&(])[ \\t]*)rem\\b(?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n      lookbehind: true\n    }],\n    'label': {\n      pattern: /^:.*/m,\n      alias: 'property'\n    },\n    'command': [{\n      // FOR command\n      pattern: /((?:^|[&(])[ \\t]*)for(?: ?\\/[a-z?](?:[ :](?:\"[^\"]*\"|\\S+))?)* \\S+ in \\([^)]+\\) do/im,\n      lookbehind: true,\n      inside: {\n        'keyword': /^for\\b|\\b(?:in|do)\\b/i,\n        'string': string,\n        'parameter': parameter,\n        'variable': variable,\n        'number': number,\n        'punctuation': /[()',]/\n      }\n    }, {\n      // IF command\n      pattern: /((?:^|[&(])[ \\t]*)if(?: ?\\/[a-z?](?:[ :](?:\"[^\"]*\"|\\S+))?)* (?:not )?(?:cmdextversion \\d+|defined \\w+|errorlevel \\d+|exist \\S+|(?:\"[^\"]*\"|\\S+)?(?:==| (?:equ|neq|lss|leq|gtr|geq) )(?:\"[^\"]*\"|\\S+))/im,\n      lookbehind: true,\n      inside: {\n        'keyword': /^if\\b|\\b(?:not|cmdextversion|defined|errorlevel|exist)\\b/i,\n        'string': string,\n        'parameter': parameter,\n        'variable': variable,\n        'number': number,\n        'operator': /\\^|==|\\b(?:equ|neq|lss|leq|gtr|geq)\\b/i\n      }\n    }, {\n      // ELSE command\n      pattern: /((?:^|[&()])[ \\t]*)else\\b/im,\n      lookbehind: true,\n      inside: {\n        'keyword': /^else\\b/i\n      }\n    }, {\n      // SET command\n      pattern: /((?:^|[&(])[ \\t]*)set(?: ?\\/[a-z](?:[ :](?:\"[^\"]*\"|\\S+))?)* (?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n      lookbehind: true,\n      inside: {\n        'keyword': /^set\\b/i,\n        'string': string,\n        'parameter': parameter,\n        'variable': [variable, /\\w+(?=(?:[*\\/%+\\-&^|]|<<|>>)?=)/],\n        'number': number,\n        'operator': /[*\\/%+\\-&^|]=?|<<=?|>>=?|[!~_=]/,\n        'punctuation': /[()',]/\n      }\n    }, {\n      // Other commands\n      pattern: /((?:^|[&(])[ \\t]*@?)\\w+\\b(?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n      lookbehind: true,\n      inside: {\n        'keyword': /^\\w+\\b/i,\n        'string': string,\n        'parameter': parameter,\n        'label': {\n          pattern: /(^\\s*):\\S+/m,\n          lookbehind: true,\n          alias: 'property'\n        },\n        'variable': variable,\n        'number': number,\n        'operator': /\\^/\n      }\n    }],\n    'operator': /[&@]/,\n    'punctuation': /[()']/\n  };\n})(Prism);\n\nPrism.languages.bison = Prism.languages.extend('c', {});\nPrism.languages.insertBefore('bison', 'comment', {\n  'bison': {\n    // This should match all the beginning of the file\n    // including the prologue(s), the bison declarations and\n    // the grammar rules.\n    pattern: /^[\\s\\S]*?%%[\\s\\S]*?%%/,\n    inside: {\n      'c': {\n        // Allow for one level of nested braces\n        pattern: /%\\{[\\s\\S]*?%\\}|\\{(?:\\{[^}]*\\}|[^{}])*\\}/,\n        inside: {\n          'delimiter': {\n            pattern: /^%?\\{|%?\\}$/,\n            alias: 'punctuation'\n          },\n          'bison-variable': {\n            pattern: /[$@](?:<[^\\s>]+>)?[\\w$]+/,\n            alias: 'variable',\n            inside: {\n              'punctuation': /<|>/\n            }\n          },\n          rest: Prism.languages.c\n        }\n      },\n      'comment': Prism.languages.c.comment,\n      'string': Prism.languages.c.string,\n      'property': /\\S+(?=:)/,\n      'keyword': /%\\w+/,\n      'number': {\n        pattern: /(^|[^@])\\b(?:0x[\\da-f]+|\\d+)/i,\n        lookbehind: true\n      },\n      'punctuation': /%[%?]|[|:;\\[\\]<>]/\n    }\n  }\n});\nPrism.languages.bnf = {\n  'string': {\n    pattern: /\"[^\\r\\n\"]*\"|'[^\\r\\n']*'/\n  },\n  'definition': {\n    pattern: /<[^<>\\r\\n\\t]+>(?=\\s*::=)/,\n    alias: ['rule', 'keyword'],\n    inside: {\n      'punctuation': /^<|>$/\n    }\n  },\n  'rule': {\n    pattern: /<[^<>\\r\\n\\t]+>/,\n    inside: {\n      'punctuation': /^<|>$/\n    }\n  },\n  'operator': /::=|[|()[\\]{}*+?]|\\.{3}/\n};\nPrism.languages.rbnf = Prism.languages.bnf;\nPrism.languages.brainfuck = {\n  'pointer': {\n    pattern: /<|>/,\n    alias: 'keyword'\n  },\n  'increment': {\n    pattern: /\\+/,\n    alias: 'inserted'\n  },\n  'decrement': {\n    pattern: /-/,\n    alias: 'deleted'\n  },\n  'branching': {\n    pattern: /\\[|\\]/,\n    alias: 'important'\n  },\n  'operator': /[.,]/,\n  'comment': /\\S+/\n};\nPrism.languages.bro = {\n  'comment': {\n    pattern: /(^|[^\\\\$])#.*/,\n    lookbehind: true,\n    inside: {\n      'italic': /\\b(?:TODO|FIXME|XXX)\\b/\n    }\n  },\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'boolean': /\\b[TF]\\b/,\n  'function': {\n    pattern: /(?:function|hook|event) \\w+(?:::\\w+)?/,\n    inside: {\n      keyword: /^(?:function|hook|event)/\n    }\n  },\n  'variable': {\n    pattern: /(?:global|local) \\w+/i,\n    inside: {\n      keyword: /(?:global|local)/\n    }\n  },\n  'builtin': /(?:@(?:load(?:-(?:sigs|plugin))?|unload|prefixes|ifn?def|else|(?:end)?if|DIR|FILENAME))|(?:&?(?:redef|priority|log|optional|default|add_func|delete_func|expire_func|read_expire|write_expire|create_expire|synchronized|persistent|rotate_interval|rotate_size|encrypt|raw_output|mergeable|group|error_handler|type_column))/,\n  'constant': {\n    pattern: /const \\w+/i,\n    inside: {\n      keyword: /const/\n    }\n  },\n  'keyword': /\\b(?:break|next|continue|alarm|using|of|add|delete|export|print|return|schedule|when|timeout|addr|any|bool|count|double|enum|file|int|interval|pattern|opaque|port|record|set|string|subnet|table|time|vector|for|if|else|in|module|function)\\b/,\n  'operator': /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,\n  'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n  'punctuation': /[{}[\\];(),.:]/\n};\nPrism.languages.cpp = Prism.languages.extend('c', {\n  'class-name': {\n    pattern: /(\\b(?:class|enum|struct)\\s+)\\w+/,\n    lookbehind: true\n  },\n  'keyword': /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/\n});\nPrism.languages.insertBefore('cpp', 'string', {\n  'raw-string': {\n    pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n    alias: 'string',\n    greedy: true\n  }\n});\nPrism.languages.aspnet = Prism.languages.extend('markup', {\n  'page-directive tag': {\n    pattern: /<%\\s*@.*%>/i,\n    inside: {\n      'page-directive tag': /<%\\s*@\\s*(?:Assembly|Control|Implements|Import|Master(?:Type)?|OutputCache|Page|PreviousPageType|Reference|Register)?|%>/i,\n      rest: Prism.languages.markup.tag.inside\n    }\n  },\n  'directive tag': {\n    pattern: /<%.*%>/i,\n    inside: {\n      'directive tag': /<%\\s*?[$=%#:]{0,2}|%>/i,\n      rest: Prism.languages.csharp\n    }\n  }\n}); // Regexp copied from prism-markup, with a negative look-ahead added\n\nPrism.languages.aspnet.tag.pattern = /<(?!%)\\/?[^\\s>\\/]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i; // match directives of attribute value foo=\"<% Bar %>\"\n\nPrism.languages.insertBefore('inside', 'punctuation', {\n  'directive tag': Prism.languages.aspnet['directive tag']\n}, Prism.languages.aspnet.tag.inside[\"attr-value\"]);\nPrism.languages.insertBefore('aspnet', 'comment', {\n  'asp comment': /<%--[\\s\\S]*?--%>/\n}); // script runat=\"server\" contains csharp, not javascript\n\nPrism.languages.insertBefore('aspnet', Prism.languages.javascript ? 'script' : 'tag', {\n  'asp script': {\n    pattern: /(<script(?=.*runat=['\"]?server['\"]?)[\\s\\S]*?>)[\\s\\S]*?(?=<\\/script>)/i,\n    lookbehind: true,\n    inside: Prism.languages.csharp || {}\n  }\n});\nPrism.languages.arduino = Prism.languages.extend('cpp', {\n  'keyword': /\\b(?:setup|if|else|while|do|for|return|in|instanceof|default|function|loop|goto|switch|case|new|try|throw|catch|finally|null|break|continue|boolean|bool|void|byte|word|string|String|array|int|long|integer|double)\\b/,\n  'builtin': /\\b(?:KeyboardController|MouseController|SoftwareSerial|EthernetServer|EthernetClient|LiquidCrystal|LiquidCrystal_I2C|RobotControl|GSMVoiceCall|EthernetUDP|EsploraTFT|HttpClient|RobotMotor|WiFiClient|GSMScanner|FileSystem|Scheduler|GSMServer|YunClient|YunServer|IPAddress|GSMClient|GSMModem|Keyboard|Ethernet|Console|GSMBand|Esplora|Stepper|Process|WiFiUDP|GSM_SMS|Mailbox|USBHost|Firmata|PImage|Client|Server|GSMPIN|FileIO|Bridge|Serial|EEPROM|Stream|Mouse|Audio|Servo|File|Task|GPRS|WiFi|Wire|TFT|GSM|SPI|SD|runShellCommandAsynchronously|analogWriteResolution|retrieveCallingNumber|printFirmwareVersion|analogReadResolution|sendDigitalPortPair|noListenOnLocalhost|readJoystickButton|setFirmwareVersion|readJoystickSwitch|scrollDisplayRight|getVoiceCallStatus|scrollDisplayLeft|writeMicroseconds|delayMicroseconds|beginTransmission|getSignalStrength|runAsynchronously|getAsynchronously|listenOnLocalhost|getCurrentCarrier|readAccelerometer|messageAvailable|sendDigitalPorts|lineFollowConfig|countryNameWrite|runShellCommand|readStringUntil|rewindDirectory|readTemperature|setClockDivider|readLightSensor|endTransmission|analogReference|detachInterrupt|countryNameRead|attachInterrupt|encryptionType|readBytesUntil|robotNameWrite|readMicrophone|robotNameRead|cityNameWrite|userNameWrite|readJoystickY|readJoystickX|mouseReleased|openNextFile|scanNetworks|noInterrupts|digitalWrite|beginSpeaker|mousePressed|isActionDone|mouseDragged|displayLogos|noAutoscroll|addParameter|remoteNumber|getModifiers|keyboardRead|userNameRead|waitContinue|processInput|parseCommand|printVersion|readNetworks|writeMessage|blinkVersion|cityNameRead|readMessage|setDataMode|parsePacket|isListening|setBitOrder|beginPacket|isDirectory|motorsWrite|drawCompass|digitalRead|clearScreen|serialEvent|rightToLeft|setTextSize|leftToRight|requestFrom|keyReleased|compassRead|analogWrite|interrupts|WiFiServer|disconnect|playMelody|parseFloat|autoscroll|getPINUsed|setPINUsed|setTimeout|sendAnalog|readSlider|analogRead|beginWrite|createChar|motorsStop|keyPressed|tempoWrite|readButton|subnetMask|debugPrint|macAddress|writeGreen|randomSeed|attachGPRS|readString|sendString|remotePort|releaseAll|mouseMoved|background|getXChange|getYChange|answerCall|getResult|voiceCall|endPacket|constrain|getSocket|writeJSON|getButton|available|connected|findUntil|readBytes|exitValue|readGreen|writeBlue|startLoop|IPAddress|isPressed|sendSysex|pauseMode|gatewayIP|setCursor|getOemKey|tuneWrite|noDisplay|loadImage|switchPIN|onRequest|onReceive|changePIN|playFile|noBuffer|parseInt|overflow|checkPIN|knobRead|beginTFT|bitClear|updateIR|bitWrite|position|writeRGB|highByte|writeRed|setSpeed|readBlue|noStroke|remoteIP|transfer|shutdown|hangCall|beginSMS|endWrite|attached|maintain|noCursor|checkReg|checkPUK|shiftOut|isValid|shiftIn|pulseIn|connect|println|localIP|pinMode|getIMEI|display|noBlink|process|getBand|running|beginSD|drawBMP|lowByte|setBand|release|bitRead|prepare|pointTo|readRed|setMode|noFill|remove|listen|stroke|detach|attach|noTone|exists|buffer|height|bitSet|circle|config|cursor|random|IRread|setDNS|endSMS|getKey|micros|millis|begin|print|write|ready|flush|width|isPIN|blink|clear|press|mkdir|rmdir|close|point|yield|image|BSSID|click|delay|read|text|move|peek|beep|rect|line|open|seek|fill|size|turn|stop|home|find|step|tone|sqrt|RSSI|SSID|end|bit|tan|cos|sin|pow|map|abs|max|min|get|run|put)\\b/,\n  'constant': /\\b(?:DIGITAL_MESSAGE|FIRMATA_STRING|ANALOG_MESSAGE|REPORT_DIGITAL|REPORT_ANALOG|INPUT_PULLUP|SET_PIN_MODE|INTERNAL2V56|SYSTEM_RESET|LED_BUILTIN|INTERNAL1V1|SYSEX_START|INTERNAL|EXTERNAL|DEFAULT|OUTPUT|INPUT|HIGH|LOW)\\b/\n});\nPrism.languages.cil = {\n  'comment': /\\/\\/.*/,\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'directive': {\n    pattern: /(^|\\W)\\.[a-z]+(?=\\s)/,\n    lookbehind: true,\n    alias: 'class-name'\n  },\n  // Actually an assembly reference\n  'variable': /\\[[\\w\\.]+\\]/,\n  'keyword': /\\b(?:abstract|ansi|assembly|auto|autochar|beforefieldinit|bool|bstr|byvalstr|catch|char|cil|class|currency|date|decimal|default|enum|error|explicit|extends|extern|famandassem|family|famorassem|final(?:ly)?|float32|float64|hidebysig|iant|idispatch|implements|import|initonly|instance|u?int(?:8|16|32|64)?|interface|iunknown|literal|lpstr|lpstruct|lptstr|lpwstr|managed|method|native(?:Type)?|nested|newslot|object(?:ref)?|pinvokeimpl|private|privatescope|public|reqsecobj|rtspecialname|runtime|sealed|sequential|serializable|specialname|static|string|struct|syschar|tbstr|unicode|unmanagedexp|unsigned|value(?:type)?|variant|virtual|void)\\b/,\n  'function': /\\b(?:(?:constrained|unaligned|volatile|readonly|tail|no)\\.)?(?:conv\\.(?:[iu][1248]?|ovf\\.[iu][1248]?(?:\\.un)?|r\\.un|r4|r8)|ldc\\.(?:i4(?:\\.[0-9]+|\\.[mM]1|\\.s)?|i8|r4|r8)|ldelem(?:\\.[iu][1248]?|\\.r[48]|\\.ref|a)?|ldind\\.(?:[iu][1248]?|r[48]|ref)|stelem\\.?(?:i[1248]?|r[48]|ref)?|stind\\.(i[1248]?|r[48]|ref)?|end(?:fault|filter|finally)|ldarg(?:\\.[0-3s]|a(?:\\.s)?)?|ldloc(?:\\.[0-9]+|\\.s)?|sub(?:\\.ovf(?:\\.un)?)?|mul(?:\\.ovf(?:\\.un)?)?|add(?:\\.ovf(?:\\.un)?)?|stloc(?:\\.[0-3s])?|refany(?:type|val)|blt(?:\\.un)?(?:\\.s)?|ble(?:\\.un)?(?:\\.s)?|bgt(?:\\.un)?(?:\\.s)?|bge(?:\\.un)?(?:\\.s)?|unbox(?:\\.any)?|init(?:blk|obj)|call(?:i|virt)?|brfalse(?:\\.s)?|bne\\.un(?:\\.s)?|ldloca(?:\\.s)?|brzero(?:\\.s)?|brtrue(?:\\.s)?|brnull(?:\\.s)?|brinst(?:\\.s)?|starg(?:\\.s)?|leave(?:\\.s)?|shr(?:\\.un)?|rem(?:\\.un)?|div(?:\\.un)?|clt(?:\\.un)?|alignment|ldvirtftn|castclass|beq(?:\\.s)?|mkrefany|localloc|ckfinite|rethrow|ldtoken|ldsflda|cgt\\.un|arglist|switch|stsfld|sizeof|newobj|newarr|ldsfld|ldnull|ldflda|isinst|throw|stobj|stloc|stfld|ldstr|ldobj|ldlen|ldftn|ldfld|cpobj|cpblk|break|br\\.s|xor|shl|ret|pop|not|nop|neg|jmp|dup|clt|cgt|ceq|box|and|or|br)\\b/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'number': /\\b-?(?:0x[0-9a-fA-F]+|[0-9]+)(?:\\.[0-9a-fA-F]+)?\\b/i,\n  'punctuation': /[{}[\\];(),:=]|IL_[0-9A-Za-z]+/\n};\n\n(function (Prism) {\n  // Ignore comments starting with { to privilege string interpolation highlighting\n  var comment = /#(?!\\{).+/,\n      interpolation = {\n    pattern: /#\\{[^}]+\\}/,\n    alias: 'variable'\n  };\n  Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n    'comment': comment,\n    'string': [// Strings are multiline\n    {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true\n    }, {\n      // Strings are multiline\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }],\n    'keyword': /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n    'class-member': {\n      pattern: /@(?!\\d)\\w+/,\n      alias: 'variable'\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'comment', {\n    'multiline-comment': {\n      pattern: /###[\\s\\S]+?###/,\n      alias: 'comment'\n    },\n    // Block regexp can contain comments and interpolation\n    'block-regex': {\n      pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n      alias: 'regex',\n      inside: {\n        'comment': comment,\n        'interpolation': interpolation\n      }\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'string', {\n    'inline-javascript': {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n      inside: {\n        'delimiter': {\n          pattern: /^`|`$/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.javascript\n      }\n    },\n    // Block strings\n    'multiline-string': [{\n      pattern: /'''[\\s\\S]*?'''/,\n      greedy: true,\n      alias: 'string'\n    }, {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        interpolation: interpolation\n      }\n    }]\n  });\n  Prism.languages.insertBefore('coffeescript', 'keyword', {\n    // Object property\n    'property': /(?!\\d)\\w+(?=\\s*:(?!:))/\n  });\n  delete Prism.languages.coffeescript['template-string'];\n  Prism.languages.coffee = Prism.languages.coffeescript;\n})(Prism);\n\nPrism.languages.cmake = {\n  'comment': /#.*/,\n  'string': {\n    pattern: /\"(?:[^\\\\\"]|\\\\.)*\"/,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        pattern: /\\${(?:[^{}$]|\\${[^{}$]*})*}/,\n        inside: {\n          'punctuation': /\\${|}/,\n          'variable': /\\w+/\n        }\n      }\n    }\n  },\n  'variable': /\\b(?:CMAKE_\\w+|\\w+_(?:VERSION(?:_MAJOR|_MINOR|_PATCH|_TWEAK)?|(?:BINARY|SOURCE)_DIR|DESCRIPTION|HOMEPAGE_URL|ROOT)|(?:CTEST_CUSTOM_(?:MAXIMUM_(?:(?:FAIL|PASS)ED_TEST_OUTPUT_SIZE|NUMBER_OF_(?:ERROR|WARNING)S)|ERROR_(?:P(?:OST|RE)_CONTEXT|EXCEPTION|MATCH)|P(?:OST|RE)_MEMCHECK|WARNING_(?:EXCEPTION|MATCH)|(?:MEMCHECK|TESTS)_IGNORE|P(?:OST|RE)_TEST|COVERAGE_EXCLUDE)|ANDROID|APPLE|BORLAND|BUILD_SHARED_LIBS|CACHE|CPACK_(?:ABSOLUTE_DESTINATION_FILES|COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY|ERROR_ON_ABSOLUTE_INSTALL_DESTINATION|INCLUDE_TOPLEVEL_DIRECTORY|INSTALL_DEFAULT_DIRECTORY_PERMISSIONS|INSTALL_SCRIPT|PACKAGING_INSTALL_PREFIX|SET_DESTDIR|WARN_ON_ABSOLUTE_INSTALL_DESTINATION)|CTEST_(?:BINARY_DIRECTORY|BUILD_COMMAND|BUILD_NAME|BZR_COMMAND|BZR_UPDATE_OPTIONS|CHANGE_ID|CHECKOUT_COMMAND|CONFIGURATION_TYPE|CONFIGURE_COMMAND|COVERAGE_COMMAND|COVERAGE_EXTRA_FLAGS|CURL_OPTIONS|CUSTOM_(?:COVERAGE_EXCLUDE|ERROR_EXCEPTION|ERROR_MATCH|ERROR_POST_CONTEXT|ERROR_PRE_CONTEXT|MAXIMUM_FAILED_TEST_OUTPUT_SIZE|MAXIMUM_NUMBER_OF_(?:ERRORS|WARNINGS)|MAXIMUM_PASSED_TEST_OUTPUT_SIZE|MEMCHECK_IGNORE|POST_MEMCHECK|POST_TEST|PRE_MEMCHECK|PRE_TEST|TESTS_IGNORE|WARNING_EXCEPTION|WARNING_MATCH)|CVS_CHECKOUT|CVS_COMMAND|CVS_UPDATE_OPTIONS|DROP_LOCATION|DROP_METHOD|DROP_SITE|DROP_SITE_CDASH|DROP_SITE_PASSWORD|DROP_SITE_USER|EXTRA_COVERAGE_GLOB|GIT_COMMAND|GIT_INIT_SUBMODULES|GIT_UPDATE_CUSTOM|GIT_UPDATE_OPTIONS|HG_COMMAND|HG_UPDATE_OPTIONS|LABELS_FOR_SUBPROJECTS|MEMORYCHECK_(?:COMMAND|COMMAND_OPTIONS|SANITIZER_OPTIONS|SUPPRESSIONS_FILE|TYPE)|NIGHTLY_START_TIME|P4_CLIENT|P4_COMMAND|P4_OPTIONS|P4_UPDATE_OPTIONS|RUN_CURRENT_SCRIPT|SCP_COMMAND|SITE|SOURCE_DIRECTORY|SUBMIT_URL|SVN_COMMAND|SVN_OPTIONS|SVN_UPDATE_OPTIONS|TEST_LOAD|TEST_TIMEOUT|TRIGGER_SITE|UPDATE_COMMAND|UPDATE_OPTIONS|UPDATE_VERSION_ONLY|USE_LAUNCHERS)|CYGWIN|ENV|EXECUTABLE_OUTPUT_PATH|GHS-MULTI|IOS|LIBRARY_OUTPUT_PATH|MINGW|MSVC(?:10|11|12|14|60|70|71|80|90|_IDE|_TOOLSET_VERSION|_VERSION)?|MSYS|PROJECT_(?:BINARY_DIR|DESCRIPTION|HOMEPAGE_URL|NAME|SOURCE_DIR|VERSION|VERSION_(?:MAJOR|MINOR|PATCH|TWEAK))|UNIX|WIN32|WINCE|WINDOWS_PHONE|WINDOWS_STORE|XCODE|XCODE_VERSION))\\b/,\n  'property': /\\b(?:cxx_\\w+|(?:ARCHIVE_OUTPUT_(?:DIRECTORY|NAME)|COMPILE_DEFINITIONS|COMPILE_PDB_NAME|COMPILE_PDB_OUTPUT_DIRECTORY|EXCLUDE_FROM_DEFAULT_BUILD|IMPORTED_(?:IMPLIB|LIBNAME|LINK_DEPENDENT_LIBRARIES|LINK_INTERFACE_LANGUAGES|LINK_INTERFACE_LIBRARIES|LINK_INTERFACE_MULTIPLICITY|LOCATION|NO_SONAME|OBJECTS|SONAME)|INTERPROCEDURAL_OPTIMIZATION|LIBRARY_OUTPUT_DIRECTORY|LIBRARY_OUTPUT_NAME|LINK_FLAGS|LINK_INTERFACE_LIBRARIES|LINK_INTERFACE_MULTIPLICITY|LOCATION|MAP_IMPORTED_CONFIG|OSX_ARCHITECTURES|OUTPUT_NAME|PDB_NAME|PDB_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_NAME|STATIC_LIBRARY_FLAGS|VS_CSHARP|VS_DOTNET_REFERENCEPROP|VS_DOTNET_REFERENCE|VS_GLOBAL_SECTION_POST|VS_GLOBAL_SECTION_PRE|VS_GLOBAL|XCODE_ATTRIBUTE)_\\w+|\\w+_(?:CLANG_TIDY|COMPILER_LAUNCHER|CPPCHECK|CPPLINT|INCLUDE_WHAT_YOU_USE|OUTPUT_NAME|POSTFIX|VISIBILITY_PRESET)|ABSTRACT|ADDITIONAL_MAKE_CLEAN_FILES|ADVANCED|ALIASED_TARGET|ALLOW_DUPLICATE_CUSTOM_TARGETS|ANDROID_(?:ANT_ADDITIONAL_OPTIONS|API|API_MIN|ARCH|ASSETS_DIRECTORIES|GUI|JAR_DEPENDENCIES|NATIVE_LIB_DEPENDENCIES|NATIVE_LIB_DIRECTORIES|PROCESS_MAX|PROGUARD|PROGUARD_CONFIG_PATH|SECURE_PROPS_PATH|SKIP_ANT_STEP|STL_TYPE)|ARCHIVE_OUTPUT_DIRECTORY|ARCHIVE_OUTPUT_NAME|ATTACHED_FILES|ATTACHED_FILES_ON_FAIL|AUTOGEN_(?:BUILD_DIR|ORIGIN_DEPENDS|PARALLEL|SOURCE_GROUP|TARGETS_FOLDER|TARGET_DEPENDS)|AUTOMOC|AUTOMOC_(?:COMPILER_PREDEFINES|DEPEND_FILTERS|EXECUTABLE|MACRO_NAMES|MOC_OPTIONS|SOURCE_GROUP|TARGETS_FOLDER)|AUTORCC|AUTORCC_EXECUTABLE|AUTORCC_OPTIONS|AUTORCC_SOURCE_GROUP|AUTOUIC|AUTOUIC_EXECUTABLE|AUTOUIC_OPTIONS|AUTOUIC_SEARCH_PATHS|BINARY_DIR|BUILDSYSTEM_TARGETS|BUILD_RPATH|BUILD_RPATH_USE_ORIGIN|BUILD_WITH_INSTALL_NAME_DIR|BUILD_WITH_INSTALL_RPATH|BUNDLE|BUNDLE_EXTENSION|CACHE_VARIABLES|CLEAN_NO_CUSTOM|COMMON_LANGUAGE_RUNTIME|COMPATIBLE_INTERFACE_(?:BOOL|NUMBER_MAX|NUMBER_MIN|STRING)|COMPILE_(?:DEFINITIONS|FEATURES|FLAGS|OPTIONS|PDB_NAME|PDB_OUTPUT_DIRECTORY)|COST|CPACK_DESKTOP_SHORTCUTS|CPACK_NEVER_OVERWRITE|CPACK_PERMANENT|CPACK_STARTUP_SHORTCUTS|CPACK_START_MENU_SHORTCUTS|CPACK_WIX_ACL|CROSSCOMPILING_EMULATOR|CUDA_EXTENSIONS|CUDA_PTX_COMPILATION|CUDA_RESOLVE_DEVICE_SYMBOLS|CUDA_SEPARABLE_COMPILATION|CUDA_STANDARD|CUDA_STANDARD_REQUIRED|CXX_EXTENSIONS|CXX_STANDARD|CXX_STANDARD_REQUIRED|C_EXTENSIONS|C_STANDARD|C_STANDARD_REQUIRED|DEBUG_CONFIGURATIONS|DEBUG_POSTFIX|DEFINE_SYMBOL|DEFINITIONS|DEPENDS|DEPLOYMENT_ADDITIONAL_FILES|DEPLOYMENT_REMOTE_DIRECTORY|DISABLED|DISABLED_FEATURES|ECLIPSE_EXTRA_CPROJECT_CONTENTS|ECLIPSE_EXTRA_NATURES|ENABLED_FEATURES|ENABLED_LANGUAGES|ENABLE_EXPORTS|ENVIRONMENT|EXCLUDE_FROM_ALL|EXCLUDE_FROM_DEFAULT_BUILD|EXPORT_NAME|EXPORT_PROPERTIES|EXTERNAL_OBJECT|EchoString|FAIL_REGULAR_EXPRESSION|FIND_LIBRARY_USE_LIB32_PATHS|FIND_LIBRARY_USE_LIB64_PATHS|FIND_LIBRARY_USE_LIBX32_PATHS|FIND_LIBRARY_USE_OPENBSD_VERSIONING|FIXTURES_CLEANUP|FIXTURES_REQUIRED|FIXTURES_SETUP|FOLDER|FRAMEWORK|Fortran_FORMAT|Fortran_MODULE_DIRECTORY|GENERATED|GENERATOR_FILE_NAME|GENERATOR_IS_MULTI_CONFIG|GHS_INTEGRITY_APP|GHS_NO_SOURCE_GROUP_FILE|GLOBAL_DEPENDS_DEBUG_MODE|GLOBAL_DEPENDS_NO_CYCLES|GNUtoMS|HAS_CXX|HEADER_FILE_ONLY|HELPSTRING|IMPLICIT_DEPENDS_INCLUDE_TRANSFORM|IMPORTED|IMPORTED_(?:COMMON_LANGUAGE_RUNTIME|CONFIGURATIONS|GLOBAL|IMPLIB|LIBNAME|LINK_DEPENDENT_LIBRARIES|LINK_INTERFACE_(?:LANGUAGES|LIBRARIES|MULTIPLICITY)|LOCATION|NO_SONAME|OBJECTS|SONAME)|IMPORT_PREFIX|IMPORT_SUFFIX|INCLUDE_DIRECTORIES|INCLUDE_REGULAR_EXPRESSION|INSTALL_NAME_DIR|INSTALL_RPATH|INSTALL_RPATH_USE_LINK_PATH|INTERFACE_(?:AUTOUIC_OPTIONS|COMPILE_DEFINITIONS|COMPILE_FEATURES|COMPILE_OPTIONS|INCLUDE_DIRECTORIES|LINK_DEPENDS|LINK_DIRECTORIES|LINK_LIBRARIES|LINK_OPTIONS|POSITION_INDEPENDENT_CODE|SOURCES|SYSTEM_INCLUDE_DIRECTORIES)|INTERPROCEDURAL_OPTIMIZATION|IN_TRY_COMPILE|IOS_INSTALL_COMBINED|JOB_POOLS|JOB_POOL_COMPILE|JOB_POOL_LINK|KEEP_EXTENSION|LABELS|LANGUAGE|LIBRARY_OUTPUT_DIRECTORY|LIBRARY_OUTPUT_NAME|LINKER_LANGUAGE|LINK_(?:DEPENDS|DEPENDS_NO_SHARED|DIRECTORIES|FLAGS|INTERFACE_LIBRARIES|INTERFACE_MULTIPLICITY|LIBRARIES|OPTIONS|SEARCH_END_STATIC|SEARCH_START_STATIC|WHAT_YOU_USE)|LISTFILE_STACK|LOCATION|MACOSX_BUNDLE|MACOSX_BUNDLE_INFO_PLIST|MACOSX_FRAMEWORK_INFO_PLIST|MACOSX_PACKAGE_LOCATION|MACOSX_RPATH|MACROS|MANUALLY_ADDED_DEPENDENCIES|MEASUREMENT|MODIFIED|NAME|NO_SONAME|NO_SYSTEM_FROM_IMPORTED|OBJECT_DEPENDS|OBJECT_OUTPUTS|OSX_ARCHITECTURES|OUTPUT_NAME|PACKAGES_FOUND|PACKAGES_NOT_FOUND|PARENT_DIRECTORY|PASS_REGULAR_EXPRESSION|PDB_NAME|PDB_OUTPUT_DIRECTORY|POSITION_INDEPENDENT_CODE|POST_INSTALL_SCRIPT|PREDEFINED_TARGETS_FOLDER|PREFIX|PRE_INSTALL_SCRIPT|PRIVATE_HEADER|PROCESSORS|PROCESSOR_AFFINITY|PROJECT_LABEL|PUBLIC_HEADER|REPORT_UNDEFINED_PROPERTIES|REQUIRED_FILES|RESOURCE|RESOURCE_LOCK|RULE_LAUNCH_COMPILE|RULE_LAUNCH_CUSTOM|RULE_LAUNCH_LINK|RULE_MESSAGES|RUNTIME_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_NAME|RUN_SERIAL|SKIP_AUTOGEN|SKIP_AUTOMOC|SKIP_AUTORCC|SKIP_AUTOUIC|SKIP_BUILD_RPATH|SKIP_RETURN_CODE|SOURCES|SOURCE_DIR|SOVERSION|STATIC_LIBRARY_FLAGS|STATIC_LIBRARY_OPTIONS|STRINGS|SUBDIRECTORIES|SUFFIX|SYMBOLIC|TARGET_ARCHIVES_MAY_BE_SHARED_LIBS|TARGET_MESSAGES|TARGET_SUPPORTS_SHARED_LIBS|TESTS|TEST_INCLUDE_FILE|TEST_INCLUDE_FILES|TIMEOUT|TIMEOUT_AFTER_MATCH|TYPE|USE_FOLDERS|VALUE|VARIABLES|VERSION|VISIBILITY_INLINES_HIDDEN|VS_(?:CONFIGURATION_TYPE|COPY_TO_OUT_DIR|DEBUGGER_(?:COMMAND|COMMAND_ARGUMENTS|ENVIRONMENT|WORKING_DIRECTORY)|DEPLOYMENT_CONTENT|DEPLOYMENT_LOCATION|DOTNET_REFERENCES|DOTNET_REFERENCES_COPY_LOCAL|GLOBAL_KEYWORD|GLOBAL_PROJECT_TYPES|GLOBAL_ROOTNAMESPACE|INCLUDE_IN_VSIX|IOT_STARTUP_TASK|KEYWORD|RESOURCE_GENERATOR|SCC_AUXPATH|SCC_LOCALPATH|SCC_PROJECTNAME|SCC_PROVIDER|SDK_REFERENCES|SHADER_(?:DISABLE_OPTIMIZATIONS|ENABLE_DEBUG|ENTRYPOINT|FLAGS|MODEL|OBJECT_FILE_NAME|OUTPUT_HEADER_FILE|TYPE|VARIABLE_NAME)|STARTUP_PROJECT|TOOL_OVERRIDE|USER_PROPS|WINRT_COMPONENT|WINRT_EXTENSIONS|WINRT_REFERENCES|XAML_TYPE)|WILL_FAIL|WIN32_EXECUTABLE|WINDOWS_EXPORT_ALL_SYMBOLS|WORKING_DIRECTORY|WRAP_EXCLUDE|XCODE_(?:EMIT_EFFECTIVE_PLATFORM_NAME|EXPLICIT_FILE_TYPE|FILE_ATTRIBUTES|LAST_KNOWN_FILE_TYPE|PRODUCT_TYPE|SCHEME_(?:ADDRESS_SANITIZER|ADDRESS_SANITIZER_USE_AFTER_RETURN|ARGUMENTS|DISABLE_MAIN_THREAD_CHECKER|DYNAMIC_LIBRARY_LOADS|DYNAMIC_LINKER_API_USAGE|ENVIRONMENT|EXECUTABLE|GUARD_MALLOC|MAIN_THREAD_CHECKER_STOP|MALLOC_GUARD_EDGES|MALLOC_SCRIBBLE|MALLOC_STACK|THREAD_SANITIZER(?:_STOP)?|UNDEFINED_BEHAVIOUR_SANITIZER(?:_STOP)?|ZOMBIE_OBJECTS))|XCTEST)\\b/,\n  'keyword': /\\b(?:add_compile_definitions|add_compile_options|add_custom_command|add_custom_target|add_definitions|add_dependencies|add_executable|add_library|add_link_options|add_subdirectory|add_test|aux_source_directory|break|build_command|build_name|cmake_host_system_information|cmake_minimum_required|cmake_parse_arguments|cmake_policy|configure_file|continue|create_test_sourcelist|ctest_build|ctest_configure|ctest_coverage|ctest_empty_binary_directory|ctest_memcheck|ctest_read_custom_files|ctest_run_script|ctest_sleep|ctest_start|ctest_submit|ctest_test|ctest_update|ctest_upload|define_property|else|elseif|enable_language|enable_testing|endforeach|endfunction|endif|endmacro|endwhile|exec_program|execute_process|export|export_library_dependencies|file|find_file|find_library|find_package|find_path|find_program|fltk_wrap_ui|foreach|function|get_cmake_property|get_directory_property|get_filename_component|get_property|get_source_file_property|get_target_property|get_test_property|if|include|include_directories|include_external_msproject|include_guard|include_regular_expression|install|install_files|install_programs|install_targets|link_directories|link_libraries|list|load_cache|load_command|macro|make_directory|mark_as_advanced|math|message|option|output_required_files|project|qt_wrap_cpp|qt_wrap_ui|remove|remove_definitions|return|separate_arguments|set|set_directory_properties|set_property|set_source_files_properties|set_target_properties|set_tests_properties|site_name|source_group|string|subdir_depends|subdirs|target_compile_definitions|target_compile_features|target_compile_options|target_include_directories|target_link_directories|target_link_libraries|target_link_options|target_sources|try_compile|try_run|unset|use_mangled_mesa|utility_source|variable_requires|variable_watch|while|write_file)(?=\\s*\\()\\b/,\n  'boolean': /\\b(?:ON|OFF|TRUE|FALSE)\\b/,\n  'namespace': /\\b(?:PROPERTIES|SHARED|PRIVATE|STATIC|PUBLIC|INTERFACE|TARGET_OBJECTS)\\b/,\n  'operator': /\\b(?:NOT|AND|OR|MATCHES|LESS|GREATER|EQUAL|STRLESS|STRGREATER|STREQUAL|VERSION_LESS|VERSION_EQUAL|VERSION_GREATER|DEFINED)\\b/,\n  'inserted': {\n    pattern: /\\b\\w+::\\w+\\b/,\n    alias: 'class-name'\n  },\n  'number': /\\b\\d+(?:\\.\\d+)*\\b/,\n  'function': /\\b[a-z_]\\w*(?=\\s*\\()\\b/i,\n  'punctuation': /[()>}]|\\$[<{]/\n}; // Copied from https://github.com/jeluard/prism-clojure\n\nPrism.languages.clojure = {\n  comment: /;+.*/,\n  string: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n  operator: /(?:::|[:|'])\\b[a-z][\\w*+!?-]*\\b/i,\n  //used for symbols and keywords\n  keyword: {\n    pattern: /([^\\w+*'?-])(?:def|if|do|let|\\.\\.|quote|var|->>|->|fn|loop|recur|throw|try|monitor-enter|\\.|new|set!|def\\-|defn|defn\\-|defmacro|defmulti|defmethod|defstruct|defonce|declare|definline|definterface|defprotocol|==|defrecord|>=|deftype|<=|defproject|ns|\\*|\\+|\\-|\\/|<|=|>|accessor|agent|agent-errors|aget|alength|all-ns|alter|and|append-child|apply|array-map|aset|aset-boolean|aset-byte|aset-char|aset-double|aset-float|aset-int|aset-long|aset-short|assert|assoc|await|await-for|bean|binding|bit-and|bit-not|bit-or|bit-shift-left|bit-shift-right|bit-xor|boolean|branch\\?|butlast|byte|cast|char|children|class|clear-agent-errors|comment|commute|comp|comparator|complement|concat|conj|cons|constantly|cond|if-not|construct-proxy|contains\\?|count|create-ns|create-struct|cycle|dec|deref|difference|disj|dissoc|distinct|doall|doc|dorun|doseq|dosync|dotimes|doto|double|down|drop|drop-while|edit|end\\?|ensure|eval|every\\?|false\\?|ffirst|file-seq|filter|find|find-doc|find-ns|find-var|first|float|flush|for|fnseq|frest|gensym|get-proxy-class|get|hash-map|hash-set|identical\\?|identity|if-let|import|in-ns|inc|index|insert-child|insert-left|insert-right|inspect-table|inspect-tree|instance\\?|int|interleave|intersection|into|into-array|iterate|join|key|keys|keyword|keyword\\?|last|lazy-cat|lazy-cons|left|lefts|line-seq|list\\*|list|load|load-file|locking|long|loop|macroexpand|macroexpand-1|make-array|make-node|map|map-invert|map\\?|mapcat|max|max-key|memfn|merge|merge-with|meta|min|min-key|name|namespace|neg\\?|new|newline|next|nil\\?|node|not|not-any\\?|not-every\\?|not=|ns-imports|ns-interns|ns-map|ns-name|ns-publics|ns-refers|ns-resolve|ns-unmap|nth|nthrest|or|parse|partial|path|peek|pop|pos\\?|pr|pr-str|print|print-str|println|println-str|prn|prn-str|project|proxy|proxy-mappings|quot|rand|rand-int|range|re-find|re-groups|re-matcher|re-matches|re-pattern|re-seq|read|read-line|reduce|ref|ref-set|refer|rem|remove|remove-method|remove-ns|rename|rename-keys|repeat|replace|replicate|resolve|rest|resultset-seq|reverse|rfirst|right|rights|root|rrest|rseq|second|select|select-keys|send|send-off|seq|seq-zip|seq\\?|set|short|slurp|some|sort|sort-by|sorted-map|sorted-map-by|sorted-set|special-symbol\\?|split-at|split-with|str|string\\?|struct|struct-map|subs|subvec|symbol|symbol\\?|sync|take|take-nth|take-while|test|time|to-array|to-array-2d|tree-seq|true\\?|union|up|update-proxy|val|vals|var-get|var-set|var\\?|vector|vector-zip|vector\\?|when|when-first|when-let|when-not|with-local-vars|with-meta|with-open|with-out-str|xml-seq|xml-zip|zero\\?|zipmap|zipper)(?=[^\\w+*'?-])/,\n    lookbehind: true\n  },\n  boolean: /\\b(?:true|false|nil)\\b/,\n  number: /\\b[0-9A-Fa-f]+\\b/,\n  punctuation: /[{}\\[\\](),]/\n};\n/**\n * Original by Samuel Flores\n *\n * Adds the following new token classes:\n * \t\tconstant, builtin, variable, symbol, regex\n */\n\n(function (Prism) {\n  Prism.languages.ruby = Prism.languages.extend('clike', {\n    'comment': [/#.*/, {\n      pattern: /^=begin\\s[\\s\\S]*?^=end/m,\n      greedy: true\n    }],\n    'keyword': /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\\b/\n  });\n  var interpolation = {\n    pattern: /#\\{[^}]+\\}/,\n    inside: {\n      'delimiter': {\n        pattern: /^#\\{|\\}$/,\n        alias: 'tag'\n      },\n      rest: Prism.languages.ruby\n    }\n  };\n  delete Prism.languages.ruby.function;\n  Prism.languages.insertBefore('ruby', 'keyword', {\n    'regex': [{\n      pattern: /%r([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[gim]{0,3}/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }, {\n      pattern: /%r\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }, {\n      // Here we need to specifically allow interpolation\n      pattern: /%r\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }, {\n      pattern: /%r\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }, {\n      pattern: /%r<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }, {\n      pattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*($|[\\r\\n,.;})]))/,\n      lookbehind: true,\n      greedy: true\n    }],\n    'variable': /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n    'symbol': {\n      pattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n      lookbehind: true\n    },\n    'method-definition': {\n      pattern: /(\\bdef\\s+)[\\w.]+/,\n      lookbehind: true,\n      inside: {\n        'function': /\\w+$/,\n        rest: Prism.languages.ruby\n      }\n    }\n  });\n  Prism.languages.insertBefore('ruby', 'number', {\n    'builtin': /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n    'constant': /\\b[A-Z]\\w*(?:[?!]|\\b)/\n  });\n  Prism.languages.ruby.string = [{\n    pattern: /%[qQiIwWxs]?([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n    greedy: true,\n    inside: {\n      'interpolation': interpolation\n    }\n  }, {\n    pattern: /%[qQiIwWxs]?\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,\n    greedy: true,\n    inside: {\n      'interpolation': interpolation\n    }\n  }, {\n    // Here we need to specifically allow interpolation\n    pattern: /%[qQiIwWxs]?\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/,\n    greedy: true,\n    inside: {\n      'interpolation': interpolation\n    }\n  }, {\n    pattern: /%[qQiIwWxs]?\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/,\n    greedy: true,\n    inside: {\n      'interpolation': interpolation\n    }\n  }, {\n    pattern: /%[qQiIwWxs]?<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,\n    greedy: true,\n    inside: {\n      'interpolation': interpolation\n    }\n  }, {\n    pattern: /(\"|')(?:#\\{[^}]+\\}|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true,\n    inside: {\n      'interpolation': interpolation\n    }\n  }];\n  Prism.languages.rb = Prism.languages.ruby;\n})(Prism);\n/**\n * Original by Scott Helme.\n *\n * Reference: https://scotthelme.co.uk/csp-cheat-sheet/\n *\n * Supports the following:\n *  - CSP Level 1\n *  - CSP Level 2\n *  - CSP Level 3\n */\n\n\nPrism.languages.csp = {\n  'directive': {\n    pattern: /\\b(?:(?:base-uri|form-action|frame-ancestors|plugin-types|referrer|reflected-xss|report-to|report-uri|require-sri-for|sandbox) |(?:block-all-mixed-content|disown-opener|upgrade-insecure-requests)(?: |;)|(?:child|connect|default|font|frame|img|manifest|media|object|script|style|worker)-src )/i,\n    alias: 'keyword'\n  },\n  'safe': {\n    pattern: /'(?:self|none|strict-dynamic|(?:nonce-|sha(?:256|384|512)-)[a-zA-Z\\d+=/]+)'/,\n    alias: 'selector'\n  },\n  'unsafe': {\n    pattern: /(?:'unsafe-inline'|'unsafe-eval'|'unsafe-hashed-attributes'|\\*)/,\n    alias: 'function'\n  }\n};\nPrism.languages.css.selector = {\n  pattern: Prism.languages.css.selector,\n  inside: {\n    'pseudo-element': /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\n    'pseudo-class': /:[-\\w]+/,\n    'class': /\\.[-:.\\w]+/,\n    'id': /#[-:.\\w]+/,\n    'attribute': {\n      pattern: /\\[(?:[^[\\]\"']|(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1)*\\]/,\n      greedy: true,\n      inside: {\n        'punctuation': /^\\[|\\]$/,\n        'case-sensitivity': {\n          pattern: /(\\s)[si]$/i,\n          lookbehind: true,\n          alias: 'keyword'\n        },\n        'namespace': {\n          pattern: /^(\\s*)[-*\\w\\xA0-\\uFFFF]*\\|(?!=)/,\n          lookbehind: true,\n          inside: {\n            'punctuation': /\\|$/\n          }\n        },\n        'attribute': {\n          pattern: /^(\\s*)[-\\w\\xA0-\\uFFFF]+/,\n          lookbehind: true\n        },\n        'value': [/(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/, {\n          pattern: /(=\\s*)[-\\w\\xA0-\\uFFFF]+(?=\\s*$)/,\n          lookbehind: true\n        }],\n        'operator': /[|~*^$]?=/\n      }\n    },\n    'n-th': {\n      pattern: /(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,\n      lookbehind: true,\n      inside: {\n        'number': /[\\dn]+/,\n        'operator': /[+-]/\n      }\n    },\n    'punctuation': /[()]/\n  }\n};\nPrism.languages.insertBefore('css', 'property', {\n  'variable': {\n    pattern: /(^|[^-\\w\\xA0-\\uFFFF])--[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*/i,\n    lookbehind: true\n  }\n});\nPrism.languages.insertBefore('css', 'function', {\n  'operator': {\n    pattern: /(\\s)[+\\-*\\/](?=\\s)/,\n    lookbehind: true\n  },\n  'hexcode': /#[\\da-f]{3,8}/i,\n  'entity': /\\\\[\\da-f]{1,8}/i,\n  'unit': {\n    pattern: /(\\d)(?:%|[a-z]+)/,\n    lookbehind: true\n  },\n  'number': /-?[\\d.]+/\n});\nPrism.languages.d = Prism.languages.extend('clike', {\n  'string': [// r\"\", x\"\"\n  /\\b[rx]\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"[cwd]?/, // q\"[]\", q\"()\", q\"<>\", q\"{}\"\n  /\\bq\"(?:\\[[\\s\\S]*?\\]|\\([\\s\\S]*?\\)|<[\\s\\S]*?>|\\{[\\s\\S]*?\\})\"/, // q\"IDENT\n  // ...\n  // IDENT\"\n  /\\bq\"([_a-zA-Z][_a-zA-Z\\d]*)(?:\\r?\\n|\\r)[\\s\\S]*?(?:\\r?\\n|\\r)\\1\"/, // q\"//\", q\"||\", etc.\n  /\\bq\"(.)[\\s\\S]*?\\1\"/, // Characters\n  /'(?:\\\\'|\\\\?[^']+)'/, /([\"`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1[cwd]?/],\n  'number': [// The lookbehind and the negative look-ahead try to prevent bad highlighting of the .. operator\n  // Hexadecimal numbers must be handled separately to avoid problems with exponent \"e\"\n  /\\b0x\\.?[a-f\\d_]+(?:(?!\\.\\.)\\.[a-f\\d_]*)?(?:p[+-]?[a-f\\d_]+)?[ulfi]*/i, {\n    pattern: /((?:\\.\\.)?)(?:\\b0b\\.?|\\b|\\.)\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:e[+-]?\\d[\\d_]*)?[ulfi]*/i,\n    lookbehind: true\n  }],\n  // In order: $, keywords and special tokens, globally defined symbols\n  'keyword': /\\$|\\b(?:abstract|alias|align|asm|assert|auto|body|bool|break|byte|case|cast|catch|cdouble|cent|cfloat|char|class|const|continue|creal|dchar|debug|default|delegate|delete|deprecated|do|double|else|enum|export|extern|false|final|finally|float|for|foreach|foreach_reverse|function|goto|idouble|if|ifloat|immutable|import|inout|int|interface|invariant|ireal|lazy|long|macro|mixin|module|new|nothrow|null|out|override|package|pragma|private|protected|public|pure|real|ref|return|scope|shared|short|static|struct|super|switch|synchronized|template|this|throw|true|try|typedef|typeid|typeof|ubyte|ucent|uint|ulong|union|unittest|ushort|version|void|volatile|wchar|while|with|__(?:(?:FILE|MODULE|LINE|FUNCTION|PRETTY_FUNCTION|DATE|EOF|TIME|TIMESTAMP|VENDOR|VERSION)__|gshared|traits|vector|parameters)|string|wstring|dstring|size_t|ptrdiff_t)\\b/,\n  'operator': /\\|[|=]?|&[&=]?|\\+[+=]?|-[-=]?|\\.?\\.\\.|=[>=]?|!(?:i[ns]\\b|<>?=?|>=?|=)?|\\bi[ns]\\b|(?:<[<>]?|>>?>?|\\^\\^|[*\\/%^~])=?/\n});\nPrism.languages.d.comment = [// Shebang\n/^\\s*#!.+/, // /+ +/\n{\n  // Allow one level of nesting\n  pattern: /(^|[^\\\\])\\/\\+(?:\\/\\+[\\s\\S]*?\\+\\/|[\\s\\S])*?\\+\\//,\n  lookbehind: true\n}].concat(Prism.languages.d.comment);\nPrism.languages.insertBefore('d', 'comment', {\n  'token-string': {\n    // Allow one level of nesting\n    pattern: /\\bq\\{(?:\\{[^}]*\\}|[^}])*\\}/,\n    alias: 'string'\n  }\n});\nPrism.languages.insertBefore('d', 'keyword', {\n  'property': /\\B@\\w*/\n});\nPrism.languages.insertBefore('d', 'function', {\n  'register': {\n    // Iasm registers\n    pattern: /\\b(?:[ABCD][LHX]|E[ABCD]X|E?(?:BP|SP|DI|SI)|[ECSDGF]S|CR[0234]|DR[012367]|TR[3-7]|X?MM[0-7]|R[ABCD]X|[BS]PL|R[BS]P|[DS]IL|R[DS]I|R(?:[89]|1[0-5])[BWD]?|XMM(?:[89]|1[0-5])|YMM(?:1[0-5]|\\d))\\b|\\bST(?:\\([0-7]\\)|\\b)/,\n    alias: 'variable'\n  }\n});\nPrism.languages.dart = Prism.languages.extend('clike', {\n  'string': [{\n    pattern: /r?(\"\"\"|''')[\\s\\S]*?\\1/,\n    greedy: true\n  }, {\n    pattern: /r?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  }],\n  'keyword': [/\\b(?:async|sync|yield)\\*/, /\\b(?:abstract|assert|async|await|break|case|catch|class|const|continue|default|deferred|do|dynamic|else|enum|export|external|extends|factory|final|finally|for|get|if|implements|import|in|library|new|null|operator|part|rethrow|return|set|static|super|switch|this|throw|try|typedef|var|void|while|with|yield)\\b/],\n  'operator': /\\bis!|\\b(?:as|is)\\b|\\+\\+|--|&&|\\|\\||<<=?|>>=?|~(?:\\/=?)?|[+\\-*\\/%&^|=!<>]=?|\\?/\n});\nPrism.languages.insertBefore('dart', 'function', {\n  'metadata': {\n    pattern: /@\\w+/,\n    alias: 'symbol'\n  }\n});\nPrism.languages.diff = {\n  'coord': [// Match all kinds of coord lines (prefixed by \"+++\", \"---\" or \"***\").\n  /^(?:\\*{3}|-{3}|\\+{3}).*$/m, // Match \"@@ ... @@\" coord lines in unified diff.\n  /^@@.*@@$/m, // Match coord lines in normal diff (starts with a number).\n  /^\\d+.*$/m],\n  // Match inserted and deleted lines. Support both +/- and >/< styles.\n  'deleted': /^[-<].*$/m,\n  'inserted': /^[+>].*$/m,\n  // Match \"different\" lines (prefixed with \"!\") in context diff.\n  'diff': {\n    'pattern': /^!(?!!).+$/m,\n    'alias': 'important'\n  }\n};\n\n(function (Prism) {\n  /**\n   * Returns the placeholder for the given language id and index.\n   *\n   * @param {string} language\n   * @param {string|number} index\n   * @returns {string}\n   */\n  function getPlaceholder(language, index) {\n    return '___' + language.toUpperCase() + index + '___';\n  }\n\n  Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n    buildPlaceholders: {\n      /**\n       * Tokenize all inline templating expressions matching `placeholderPattern`.\n       *\n       * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n       * `true` will be replaced.\n       *\n       * @param {object} env The environment of the `before-tokenize` hook.\n       * @param {string} language The language id.\n       * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n       * @param {(match: string) => boolean} [replaceFilter]\n       */\n      value: function (env, language, placeholderPattern, replaceFilter) {\n        if (env.language !== language) {\n          return;\n        }\n\n        var tokenStack = env.tokenStack = [];\n        env.code = env.code.replace(placeholderPattern, function (match) {\n          if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n            return match;\n          }\n\n          var i = tokenStack.length;\n          var placeholder; // Check for existing strings\n\n          while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) ++i; // Create a sparse array\n\n\n          tokenStack[i] = match;\n          return placeholder;\n        }); // Switch the grammar to markup\n\n        env.grammar = Prism.languages.markup;\n      }\n    },\n    tokenizePlaceholders: {\n      /**\n       * Replace placeholders with proper tokens after tokenizing.\n       *\n       * @param {object} env The environment of the `after-tokenize` hook.\n       * @param {string} language The language id.\n       */\n      value: function (env, language) {\n        if (env.language !== language || !env.tokenStack) {\n          return;\n        } // Switch the grammar back\n\n\n        env.grammar = Prism.languages[language];\n        var j = 0;\n        var keys = Object.keys(env.tokenStack);\n\n        function walkTokens(tokens) {\n          for (var i = 0; i < tokens.length; i++) {\n            // all placeholders are replaced already\n            if (j >= keys.length) {\n              break;\n            }\n\n            var token = tokens[i];\n\n            if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n              var k = keys[j];\n              var t = env.tokenStack[k];\n              var s = typeof token === 'string' ? token : token.content;\n              var placeholder = getPlaceholder(language, k);\n              var index = s.indexOf(placeholder);\n\n              if (index > -1) {\n                ++j;\n                var before = s.substring(0, index);\n                var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                var after = s.substring(index + placeholder.length);\n                var replacement = [];\n\n                if (before) {\n                  replacement.push.apply(replacement, walkTokens([before]));\n                }\n\n                replacement.push(middle);\n\n                if (after) {\n                  replacement.push.apply(replacement, walkTokens([after]));\n                }\n\n                if (typeof token === 'string') {\n                  tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                } else {\n                  token.content = replacement;\n                }\n              }\n            } else if (token.content\n            /* && typeof token.content !== 'string' */\n            ) {\n                walkTokens(token.content);\n              }\n          }\n\n          return tokens;\n        }\n\n        walkTokens(env.tokens);\n      }\n    }\n  });\n})(Prism);\n\nPrism.languages.docker = {\n  'keyword': {\n    pattern: /(^\\s*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\\s)/mi,\n    lookbehind: true\n  },\n  'string': /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n  'comment': /#.*/,\n  'punctuation': /---|\\.\\.\\.|[:[\\]{}\\-,|>?]/\n};\nPrism.languages.dockerfile = Prism.languages.docker;\nPrism.languages.ebnf = {\n  'comment': /\\(\\*[\\s\\S]*?\\*\\)/,\n  'string': {\n    pattern: /\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/,\n    greedy: true\n  },\n  'special': {\n    pattern: /\\?[^?\\r\\n]*\\?/,\n    greedy: true,\n    alias: 'class-name'\n  },\n  'definition': {\n    pattern: /^(\\s*)[a-z]\\w*(?:[ \\t]+[a-z]\\w*)*(?=\\s*=)/im,\n    lookbehind: true,\n    alias: ['rule', 'keyword']\n  },\n  'rule': /[a-z]\\w*(?:[ \\t]+[a-z]\\w*)*/i,\n  'punctuation': /\\([:/]|[:/]\\)|[.,;()[\\]{}]/,\n  'operator': /[-=|*/!]/\n};\nPrism.languages.eiffel = {\n  'comment': /--.*/,\n  'string': [// Aligned-verbatim-strings\n  {\n    pattern: /\"([^[]*)\\[[\\s\\S]*?\\]\\1\"/,\n    greedy: true\n  }, // Non-aligned-verbatim-strings\n  {\n    pattern: /\"([^{]*)\\{[\\s\\S]*?\\}\\1\"/,\n    greedy: true\n  }, // Single-line string\n  {\n    pattern: /\"(?:%\\s+%|%.|[^%\"\\r\\n])*\"/,\n    greedy: true\n  }],\n  // normal char | special char | char code\n  'char': /'(?:%.|[^%'\\r\\n])+'/,\n  'keyword': /\\b(?:across|agent|alias|all|and|attached|as|assign|attribute|check|class|convert|create|Current|debug|deferred|detachable|do|else|elseif|end|ensure|expanded|export|external|feature|from|frozen|if|implies|inherit|inspect|invariant|like|local|loop|not|note|obsolete|old|once|or|Precursor|redefine|rename|require|rescue|Result|retry|select|separate|some|then|undefine|until|variant|Void|when|xor)\\b/i,\n  'boolean': /\\b(?:True|False)\\b/i,\n  // Convention: class-names are always all upper-case characters\n  'class-name': {\n    'pattern': /\\b[A-Z][\\dA-Z_]*\\b/,\n    'alias': 'builtin'\n  },\n  'number': [// hexa | octal | bin\n  /\\b0[xcb][\\da-f](?:_*[\\da-f])*\\b/i, // Decimal\n  /(?:\\d(?:_*\\d)*)?\\.(?:(?:\\d(?:_*\\d)*)?e[+-]?)?\\d(?:_*\\d)*|\\d(?:_*\\d)*\\.?/i],\n  'punctuation': /:=|<<|>>|\\(\\||\\|\\)|->|\\.(?=\\w)|[{}[\\];(),:?]/,\n  'operator': /\\\\\\\\|\\|\\.\\.\\||\\.\\.|\\/[~\\/=]?|[><]=?|[-+*^=~]/\n};\n\n(function (Prism) {\n  Prism.languages.ejs = {\n    'delimiter': {\n      pattern: /^<%[-_=]?|[-_]?%>$/,\n      alias: 'punctuation'\n    },\n    'comment': /^#[\\s\\S]*/,\n    'language-javascript': {\n      pattern: /[\\s\\S]+/,\n      inside: Prism.languages.javascript\n    }\n  };\n  Prism.hooks.add('before-tokenize', function (env) {\n    var ejsPattern = /<%(?!%)[\\s\\S]+?%>/g;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'ejs', ejsPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'ejs');\n  });\n})(Prism);\n\nPrism.languages.elixir = {\n  'comment': {\n    pattern: /#.*/m,\n    lookbehind: true\n  },\n  // ~r\"\"\"foo\"\"\" (multi-line), ~r'''foo''' (multi-line), ~r/foo/, ~r|foo|, ~r\"foo\", ~r'foo', ~r(foo), ~r[foo], ~r{foo}, ~r<foo>\n  'regex': {\n    pattern: /~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,\n    greedy: true\n  },\n  'string': [{\n    // ~s\"\"\"foo\"\"\" (multi-line), ~s'''foo''' (multi-line), ~s/foo/, ~s|foo|, ~s\"foo\", ~s'foo', ~s(foo), ~s[foo], ~s{foo} (with interpolation care), ~s<foo>\n    pattern: /~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,\n    greedy: true,\n    inside: {// See interpolation below\n    }\n  }, {\n    pattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\n    greedy: true,\n    inside: {// See interpolation below\n    }\n  }, {\n    // Multi-line strings are allowed\n    pattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true,\n    inside: {// See interpolation below\n    }\n  }],\n  'atom': {\n    // Look-behind prevents bad highlighting of the :: operator\n    pattern: /(^|[^:]):\\w+/,\n    lookbehind: true,\n    alias: 'symbol'\n  },\n  // Look-ahead prevents bad highlighting of the :: operator\n  'attr-name': /\\w+:(?!:)/,\n  'capture': {\n    // Look-behind prevents bad highlighting of the && operator\n    pattern: /(^|[^&])&(?:[^&\\s\\d()][^\\s()]*|(?=\\())/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'argument': {\n    // Look-behind prevents bad highlighting of the && operator\n    pattern: /(^|[^&])&\\d+/,\n    lookbehind: true,\n    alias: 'variable'\n  },\n  'attribute': {\n    pattern: /@\\w+/,\n    alias: 'variable'\n  },\n  'number': /\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,\n  'keyword': /\\b(?:after|alias|and|case|catch|cond|def(?:callback|exception|impl|module|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|require|rescue|try|unless|use|when)\\b/,\n  'boolean': /\\b(?:true|false|nil)\\b/,\n  'operator': [/\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/, {\n    // We don't want to match <<\n    pattern: /([^<])<(?!<)/,\n    lookbehind: true\n  }, {\n    // We don't want to match >>\n    pattern: /([^>])>(?!>)/,\n    lookbehind: true\n  }],\n  'punctuation': /<<|>>|[.,%\\[\\]{}()]/\n};\nPrism.languages.elixir.string.forEach(function (o) {\n  o.inside = {\n    'interpolation': {\n      pattern: /#\\{[^}]+\\}/,\n      inside: {\n        'delimiter': {\n          pattern: /^#\\{|\\}$/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.elixir\n      }\n    }\n  };\n});\nPrism.languages.elm = {\n  comment: /--.*|{-[\\s\\S]*?-}/,\n  char: {\n    pattern: /'(?:[^\\\\'\\r\\n]|\\\\(?:[abfnrtv\\\\']|\\d+|x[0-9a-fA-F]+))'/,\n    greedy: true\n  },\n  string: [{\n    // Multiline strings are wrapped in triple \". Quotes may appear unescaped.\n    pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n    greedy: true\n  }, {\n    pattern: /\"(?:[^\\\\\"\\r\\n]|\\\\(?:[abfnrtv\\\\\"]|\\d+|x[0-9a-fA-F]+))*\"/,\n    greedy: true\n  }],\n  import_statement: {\n    // The imported or hidden names are not included in this import\n    // statement. This is because we want to highlight those exactly like\n    // we do for the names in the program.\n    pattern: /^\\s*import\\s+[A-Z]\\w*(?:\\.[A-Z]\\w*)*(?:\\s+as\\s+([A-Z]\\w*)(?:\\.[A-Z]\\w*)*)?(?:\\s+exposing\\s+)?/m,\n    inside: {\n      keyword: /\\b(?:import|as|exposing)\\b/\n    }\n  },\n  keyword: /\\b(?:alias|as|case|else|exposing|if|in|infixl|infixr|let|module|of|then|type)\\b/,\n  // These are builtin variables only. Constructors are highlighted later as a constant.\n  builtin: /\\b(?:abs|acos|always|asin|atan|atan2|ceiling|clamp|compare|cos|curry|degrees|e|flip|floor|fromPolar|identity|isInfinite|isNaN|logBase|max|min|negate|never|not|pi|radians|rem|round|sin|sqrt|tan|toFloat|toPolar|toString|truncate|turns|uncurry|xor)\\b/,\n  // decimal integers and floating point numbers | hexadecimal integers\n  number: /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0x[0-9a-f]+)\\b/i,\n  // Most of this is needed because of the meaning of a single '.'.\n  // If it stands alone freely, it is the function composition.\n  // It may also be a separator between a module name and an identifier => no\n  // operator. If it comes together with other special characters it is an\n  // operator too.\n  // Valid operator characters in 0.18: +-/*=.$<>:&|^?%#@~!\n  // Ref: https://groups.google.com/forum/#!msg/elm-dev/0AHSnDdkSkQ/E0SVU70JEQAJ\n  operator: /\\s\\.\\s|[+\\-/*=.$<>:&|^?%#@~!]{2,}|[+\\-/*=$<>:&|^?%#@~!]/,\n  // In Elm, nearly everything is a variable, do not highlight these.\n  hvariable: /\\b(?:[A-Z]\\w*\\.)*[a-z]\\w*\\b/,\n  constant: /\\b(?:[A-Z]\\w*\\.)*[A-Z]\\w*\\b/,\n  punctuation: /[{}[\\]|(),.:]/\n};\n\n(function (Prism) {\n  Prism.languages.erb = Prism.languages.extend('ruby', {});\n  Prism.languages.insertBefore('erb', 'comment', {\n    'delimiter': {\n      pattern: /^<%=?|%>$/,\n      alias: 'punctuation'\n    }\n  });\n  Prism.hooks.add('before-tokenize', function (env) {\n    var erbPattern = /<%=?(?:[^\\r\\n]|[\\r\\n](?!=begin)|[\\r\\n]=begin\\s[\\s\\S]*?^=end)+?%>/gm;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'erb', erbPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'erb');\n  });\n})(Prism);\n\nPrism.languages.erlang = {\n  'comment': /%.+/,\n  'string': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n    greedy: true\n  },\n  'quoted-function': {\n    pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'(?=\\()/,\n    alias: 'function'\n  },\n  'quoted-atom': {\n    pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'/,\n    alias: 'atom'\n  },\n  'boolean': /\\b(?:true|false)\\b/,\n  'keyword': /\\b(?:fun|when|case|of|end|if|receive|after|try|catch)\\b/,\n  'number': [/\\$\\\\?./, /\\d+#[a-z0-9]+/i, /(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i],\n  'function': /\\b[a-z][\\w@]*(?=\\()/,\n  'variable': {\n    // Look-behind is used to prevent wrong highlighting of atoms containing \"@\"\n    pattern: /(^|[^@])(?:\\b|\\?)[A-Z_][\\w@]*/,\n    lookbehind: true\n  },\n  'operator': [/[=\\/<>:]=|=[:\\/]=|\\+\\+?|--?|[=*\\/!]|\\b(?:bnot|div|rem|band|bor|bxor|bsl|bsr|not|and|or|xor|orelse|andalso)\\b/, {\n    // We don't want to match <<\n    pattern: /(^|[^<])<(?!<)/,\n    lookbehind: true\n  }, {\n    // We don't want to match >>\n    pattern: /(^|[^>])>(?!>)/,\n    lookbehind: true\n  }],\n  'atom': /\\b[a-z][\\w@]*/,\n  'punctuation': /[()[\\]{}:;,.#|]|<<|>>/\n};\nPrism.languages.fsharp = Prism.languages.extend('clike', {\n  'comment': [{\n    pattern: /(^|[^\\\\])\\(\\*[\\s\\S]*?\\*\\)/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: true\n  }],\n  'string': {\n    pattern: /(?:\"\"\"[\\s\\S]*?\"\"\"|@\"(?:\"\"|[^\"])*\"|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")B?|'(?:[^\\\\']|\\\\.)'B?/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:exception|inherit|interface|new|of|type)\\s+|\\w\\s*:\\s*|\\s:\\??>\\s*)[.\\w]+\\b(?:\\s*(?:->|\\*)\\s*[.\\w]+\\b)*(?!\\s*[:.])/,\n    lookbehind: true,\n    inside: {\n      'operator': /->|\\*/,\n      'punctuation': /\\./\n    }\n  },\n  'keyword': /\\b(?:let|return|use|yield)(?:!\\B|\\b)|\\b(abstract|and|as|assert|base|begin|class|default|delegate|do|done|downcast|downto|elif|else|end|exception|extern|false|finally|for|fun|function|global|if|in|inherit|inline|interface|internal|lazy|match|member|module|mutable|namespace|new|not|null|of|open|or|override|private|public|rec|select|static|struct|then|to|true|try|type|upcast|val|void|when|while|with|asr|land|lor|lsl|lsr|lxor|mod|sig|atomic|break|checked|component|const|constraint|constructor|continue|eager|event|external|fixed|functor|include|method|mixin|object|parallel|process|protected|pure|sealed|tailcall|trait|virtual|volatile)\\b/,\n  'number': [/\\b0x[\\da-fA-F]+(?:un|lf|LF)?\\b/, /\\b0b[01]+(?:y|uy)?\\b/, /(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[fm]|e[+-]?\\d+)?\\b/i, /\\b\\d+(?:[IlLsy]|u[lsy]?|UL)?\\b/],\n  'operator': /([<>~&^])\\1\\1|([*.:<>&])\\2|<-|->|[!=:]=|<?\\|{1,3}>?|\\??(?:<=|>=|<>|[-+*/%=<>])\\??|[!?^&]|~[+~-]|:>|:\\?>?/\n});\nPrism.languages.insertBefore('fsharp', 'keyword', {\n  'preprocessor': {\n    pattern: /^[^\\r\\n\\S]*#.*/m,\n    alias: 'property',\n    inside: {\n      'directive': {\n        pattern: /(\\s*#)\\b(?:else|endif|if|light|line|nowarn)\\b/,\n        lookbehind: true,\n        alias: 'keyword'\n      }\n    }\n  }\n});\nPrism.languages.insertBefore('fsharp', 'punctuation', {\n  'computation-expression': {\n    pattern: /[_a-z]\\w*(?=\\s*\\{)/i,\n    alias: 'keyword'\n  }\n});\nPrism.languages.insertBefore('fsharp', 'string', {\n  'annotation': {\n    pattern: /\\[<.+?>\\]/,\n    inside: {\n      'punctuation': /^\\[<|>\\]$/,\n      'class-name': {\n        pattern: /^\\w+$|(^|;\\s*)[A-Z]\\w*(?=\\()/,\n        lookbehind: true\n      },\n      'annotation-content': {\n        pattern: /[\\s\\S]+/,\n        inside: Prism.languages.fsharp\n      }\n    }\n  }\n});\n\n(function (Prism) {\n  Prism.languages.flow = Prism.languages.extend('javascript', {});\n  Prism.languages.insertBefore('flow', 'keyword', {\n    'type': [{\n      pattern: /\\b(?:[Nn]umber|[Ss]tring|[Bb]oolean|Function|any|mixed|null|void)\\b/,\n      alias: 'tag'\n    }]\n  });\n  Prism.languages.flow['function-variable'].pattern = /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=\\s*(?:function\\b|(?:\\([^()]*\\)(?:\\s*:\\s*\\w+)?|[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/i;\n  delete Prism.languages.flow['parameter'];\n  Prism.languages.insertBefore('flow', 'operator', {\n    'flow-punctuation': {\n      pattern: /\\{\\||\\|\\}/,\n      alias: 'punctuation'\n    }\n  });\n\n  if (!Array.isArray(Prism.languages.flow.keyword)) {\n    Prism.languages.flow.keyword = [Prism.languages.flow.keyword];\n  }\n\n  Prism.languages.flow.keyword.unshift({\n    pattern: /(^|[^$]\\b)(?:type|opaque|declare|Class)\\b(?!\\$)/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^$]\\B)\\$(?:await|Diff|Exact|Keys|ObjMap|PropertyType|Shape|Record|Supertype|Subtype|Enum)\\b(?!\\$)/,\n    lookbehind: true\n  });\n})(Prism);\n\nPrism.languages.fortran = {\n  'quoted-number': {\n    pattern: /[BOZ](['\"])[A-F0-9]+\\1/i,\n    alias: 'number'\n  },\n  'string': {\n    pattern: /(?:\\w+_)?(['\"])(?:\\1\\1|&(?:\\r\\n?|\\n)(?:\\s*!.+(?:\\r\\n?|\\n))?|(?!\\1).)*(?:\\1|&)/,\n    inside: {\n      'comment': {\n        pattern: /(&(?:\\r\\n?|\\n)\\s*)!.*/,\n        lookbehind: true\n      }\n    }\n  },\n  'comment': {\n    pattern: /!.*/,\n    greedy: true\n  },\n  'boolean': /\\.(?:TRUE|FALSE)\\.(?:_\\w+)?/i,\n  'number': /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[ED][+-]?\\d+)?(?:_\\w+)?/i,\n  'keyword': [// Types\n  /\\b(?:INTEGER|REAL|DOUBLE ?PRECISION|COMPLEX|CHARACTER|LOGICAL)\\b/i, // END statements\n  /\\b(?:END ?)?(?:BLOCK ?DATA|DO|FILE|FORALL|FUNCTION|IF|INTERFACE|MODULE(?! PROCEDURE)|PROGRAM|SELECT|SUBROUTINE|TYPE|WHERE)\\b/i, // Statements\n  /\\b(?:ALLOCATABLE|ALLOCATE|BACKSPACE|CALL|CASE|CLOSE|COMMON|CONTAINS|CONTINUE|CYCLE|DATA|DEALLOCATE|DIMENSION|DO|END|EQUIVALENCE|EXIT|EXTERNAL|FORMAT|GO ?TO|IMPLICIT(?: NONE)?|INQUIRE|INTENT|INTRINSIC|MODULE PROCEDURE|NAMELIST|NULLIFY|OPEN|OPTIONAL|PARAMETER|POINTER|PRINT|PRIVATE|PUBLIC|READ|RETURN|REWIND|SAVE|SELECT|STOP|TARGET|WHILE|WRITE)\\b/i, // Others\n  /\\b(?:ASSIGNMENT|DEFAULT|ELEMENTAL|ELSE|ELSEWHERE|ELSEIF|ENTRY|IN|INCLUDE|INOUT|KIND|NULL|ONLY|OPERATOR|OUT|PURE|RECURSIVE|RESULT|SEQUENCE|STAT|THEN|USE)\\b/i],\n  'operator': [/\\*\\*|\\/\\/|=>|[=\\/]=|[<>]=?|::|[+\\-*=%]|\\.(?:EQ|NE|LT|LE|GT|GE|NOT|AND|OR|EQV|NEQV)\\.|\\.[A-Z]+\\./i, {\n    // Use lookbehind to prevent confusion with (/ /)\n    pattern: /(^|(?!\\().)\\/(?!\\))/,\n    lookbehind: true\n  }],\n  'punctuation': /\\(\\/|\\/\\)|[(),;:&]/\n};\nPrism.languages.gcode = {\n  'comment': /;.*|\\B\\(.*?\\)\\B/,\n  'string': {\n    pattern: /\"(?:\"\"|[^\"])*\"/,\n    greedy: true\n  },\n  'keyword': /\\b[GM]\\d+(?:\\.\\d+)?\\b/,\n  'property': /\\b[A-Z]/,\n  'checksum': {\n    pattern: /\\*\\d+/,\n    alias: 'punctuation'\n  },\n  // T0:0:0\n  'punctuation': /:/\n};\nPrism.languages.gedcom = {\n  'line-value': {\n    // Preceded by level, optional pointer, and tag\n    pattern: /(^\\s*\\d+ +(?:@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@ +)?\\w+ +).+/m,\n    lookbehind: true,\n    inside: {\n      'pointer': {\n        pattern: /^@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@$/,\n        alias: 'variable'\n      }\n    }\n  },\n  'tag': {\n    // Preceded by level and optional pointer\n    pattern: /(^\\s*\\d+ +(?:@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@ +)?)\\w+/m,\n    lookbehind: true,\n    alias: 'string'\n  },\n  'level': {\n    pattern: /(^\\s*)\\d+/m,\n    lookbehind: true,\n    alias: 'number'\n  },\n  'pointer': {\n    pattern: /@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@/,\n    alias: 'variable'\n  }\n};\nPrism.languages.gherkin = {\n  'pystring': {\n    pattern: /(\"\"\"|''')[\\s\\S]+?\\1/,\n    alias: 'string'\n  },\n  'comment': {\n    pattern: /((?:^|\\r?\\n|\\r)[ \\t]*)#.*/,\n    lookbehind: true\n  },\n  'tag': {\n    pattern: /((?:^|\\r?\\n|\\r)[ \\t]*)@\\S*/,\n    lookbehind: true\n  },\n  'feature': {\n    pattern: /((?:^|\\r?\\n|\\r)[ \\t]*)(?:Ability|Ahoy matey!|Arwedd|Aspekt|Besigheid Behoefte|Business Need|Caracteristica|Característica|Egenskab|Egenskap|Eiginleiki|Feature|Fīča|Fitur|Fonctionnalité|Fonksyonalite|Funcionalidade|Funcionalitat|Functionalitate|Funcţionalitate|Funcționalitate|Functionaliteit|Fungsi|Funkcia|Funkcija|Funkcionalitāte|Funkcionalnost|Funkcja|Funksie|Funktionalität|Funktionalitéit|Funzionalità|Hwaet|Hwæt|Jellemző|Karakteristik|laH|Lastnost|Mak|Mogucnost|Mogućnost|Moznosti|Možnosti|OH HAI|Omadus|Ominaisuus|Osobina|Özellik|perbogh|poQbogh malja'|Potrzeba biznesowa|Požadavek|Požiadavka|Pretty much|Qap|Qu'meH 'ut|Savybė|Tính năng|Trajto|Vermoë|Vlastnosť|Właściwość|Značilnost|Δυνατότητα|Λειτουργία|Могућност|Мөмкинлек|Особина|Свойство|Үзенчәлеклелек|Функционал|Функционалност|Функция|Функціонал|תכונה|خاصية|خصوصیت|صلاحیت|کاروبار کی ضرورت|وِیژگی|रूप लेख|ਖਾਸੀਅਤ|ਨਕਸ਼ ਨੁਹਾਰ|ਮੁਹਾਂਦਰਾ|గుణము|ಹೆಚ್ಚಳ|ความต้องการทางธุรกิจ|ความสามารถ|โครงหลัก|기능|フィーチャ|功能|機能):(?:[^:]+(?:\\r?\\n|\\r|$))*/,\n    lookbehind: true,\n    inside: {\n      'important': {\n        pattern: /(:)[^\\r\\n]+/,\n        lookbehind: true\n      },\n      keyword: /[^:\\r\\n]+:/\n    }\n  },\n  'scenario': {\n    pattern: /((?:^|\\r?\\n|\\r)[ \\t]*)(?:Abstract Scenario|Abstrakt Scenario|Achtergrond|Aer|Ær|Agtergrond|All y'all|Antecedentes|Antecedents|Atburðarás|Atburðarásir|Awww, look mate|B4|Background|Baggrund|Bakgrund|Bakgrunn|Bakgrunnur|Beispiele|Beispiller|Bối cảnh|Cefndir|Cenario|Cenário|Cenario de Fundo|Cenário de Fundo|Cenarios|Cenários|Contesto|Context|Contexte|Contexto|Conto|Contoh|Contone|Dæmi|Dasar|Dead men tell no tales|Delineacao do Cenario|Delineação do Cenário|Dis is what went down|Dữ liệu|Dyagram senaryo|Dyagram Senaryo|Egzanp|Ejemplos|Eksempler|Ekzemploj|Enghreifftiau|Esbozo do escenario|Escenari|Escenario|Esempi|Esquema de l'escenari|Esquema del escenario|Esquema do Cenario|Esquema do Cenário|Examples|EXAMPLZ|Exempel|Exemple|Exemples|Exemplos|First off|Fono|Forgatókönyv|Forgatókönyv vázlat|Fundo|Geçmiş|ghantoH|Grundlage|Hannergrond|Háttér|Heave to|Istorik|Juhtumid|Keadaan|Khung kịch bản|Khung tình huống|Kịch bản|Koncept|Konsep skenario|Kontèks|Kontekst|Kontekstas|Konteksts|Kontext|Konturo de la scenaro|Latar Belakang|lut|lut chovnatlh|lutmey|Lýsing Atburðarásar|Lýsing Dæma|Menggariskan Senario|MISHUN|MISHUN SRSLY|mo'|Náčrt Scenára|Náčrt Scénáře|Náčrt Scenáru|Oris scenarija|Örnekler|Osnova|Osnova Scenára|Osnova scénáře|Osnutek|Ozadje|Paraugs|Pavyzdžiai|Példák|Piemēri|Plan du scénario|Plan du Scénario|Plan senaryo|Plan Senaryo|Plang vum Szenario|Pozadí|Pozadie|Pozadina|Príklady|Příklady|Primer|Primeri|Primjeri|Przykłady|Raamstsenaarium|Reckon it's like|Rerefons|Scenár|Scénář|Scenarie|Scenarij|Scenarijai|Scenarijaus šablonas|Scenariji|Scenārijs|Scenārijs pēc parauga|Scenarijus|Scenario|Scénario|Scenario Amlinellol|Scenario Outline|Scenario Template|Scenariomal|Scenariomall|Scenarios|Scenariu|Scenariusz|Scenaro|Schema dello scenario|Se ðe|Se the|Se þe|Senario|Senaryo|Senaryo deskripsyon|Senaryo Deskripsyon|Senaryo taslağı|Shiver me timbers|Situācija|Situai|Situasie|Situasie Uiteensetting|Skenario|Skenario konsep|Skica|Structura scenariu|Structură scenariu|Struktura scenarija|Stsenaarium|Swa|Swa hwaer swa|Swa hwær swa|Szablon scenariusza|Szenario|Szenariogrundriss|Tapaukset|Tapaus|Tapausaihio|Taust|Tausta|Template Keadaan|Template Senario|Template Situai|The thing of it is|Tình huống|Variantai|Voorbeelde|Voorbeelden|Wharrimean is|Yo\\-ho\\-ho|You'll wanna|Założenia|Παραδείγματα|Περιγραφή Σεναρίου|Σενάρια|Σενάριο|Υπόβαθρο|Кереш|Контекст|Концепт|Мисаллар|Мисоллар|Основа|Передумова|Позадина|Предистория|Предыстория|Приклади|Пример|Примери|Примеры|Рамка на сценарий|Скица|Структура сценарија|Структура сценария|Структура сценарію|Сценарий|Сценарий структураси|Сценарийның төзелеше|Сценарији|Сценарио|Сценарій|Тарих|Үрнәкләр|דוגמאות|רקע|תבנית תרחיש|תרחיש|الخلفية|الگوی سناریو|امثلة|پس منظر|زمینه|سناریو|سيناريو|سيناريو مخطط|مثالیں|منظر نامے کا خاکہ|منظرنامہ|نمونه ها|उदाहरण|परिदृश्य|परिदृश्य रूपरेखा|पृष्ठभूमि|ਉਦਾਹਰਨਾਂ|ਪਟਕਥਾ|ਪਟਕਥਾ ਢਾਂਚਾ|ਪਟਕਥਾ ਰੂਪ ਰੇਖਾ|ਪਿਛੋਕੜ|ఉదాహరణలు|కథనం|నేపథ్యం|సన్నివేశం|ಉದಾಹರಣೆಗಳು|ಕಥಾಸಾರಾಂಶ|ವಿವರಣೆ|ಹಿನ್ನೆಲೆ|โครงสร้างของเหตุการณ์|ชุดของตัวอย่าง|ชุดของเหตุการณ์|แนวคิด|สรุปเหตุการณ์|เหตุการณ์|배경|시나리오|시나리오 개요|예|サンプル|シナリオ|シナリオアウトライン|シナリオテンプレ|シナリオテンプレート|テンプレ|例|例子|剧本|剧本大纲|劇本|劇本大綱|场景|场景大纲|場景|場景大綱|背景):[^:\\r\\n]*/,\n    lookbehind: true,\n    inside: {\n      'important': {\n        pattern: /(:)[^\\r\\n]*/,\n        lookbehind: true\n      },\n      keyword: /[^:\\r\\n]+:/\n    }\n  },\n  'table-body': {\n    // Look-behind is used to skip the table head, which has the same format as any table row\n    pattern: /((?:\\r?\\n|\\r)[ \\t]*\\|.+\\|[^\\r\\n]*)+/,\n    lookbehind: true,\n    inside: {\n      'outline': {\n        pattern: /<[^>]+?>/,\n        alias: 'variable'\n      },\n      'td': {\n        pattern: /\\s*[^\\s|][^|]*/,\n        alias: 'string'\n      },\n      'punctuation': /\\|/\n    }\n  },\n  'table-head': {\n    pattern: /(?:\\r?\\n|\\r)[ \\t]*\\|.+\\|[^\\r\\n]*/,\n    inside: {\n      'th': {\n        pattern: /\\s*[^\\s|][^|]*/,\n        alias: 'variable'\n      },\n      'punctuation': /\\|/\n    }\n  },\n  'atrule': {\n    pattern: /((?:\\r?\\n|\\r)[ \\t]+)(?:'ach|'a|'ej|7|a|A také|A taktiež|A tiež|A zároveň|Aber|Ac|Adott|Akkor|Ak|Aleshores|Ale|Ali|Allora|Alors|Als|Ama|Amennyiben|Amikor|Ampak|an|AN|Ananging|And y'all|And|Angenommen|Anrhegedig a|An|Apabila|Atès|Atesa|Atunci|Avast!|Aye|A|awer|Bagi|Banjur|Bet|Biết|Blimey!|Buh|But at the end of the day I reckon|But y'all|But|BUT|Cal|Când|Cando|Cand|Ce|Cuando|Če|Ða ðe|Ða|Dadas|Dada|Dados|Dado|DaH ghu' bejlu'|dann|Dann|Dano|Dan|Dar|Dat fiind|Data|Date fiind|Date|Dati fiind|Dati|Daţi fiind|Dați fiind|Dato|DEN|Den youse gotta|Dengan|De|Diberi|Diyelim ki|Donada|Donat|Donitaĵo|Do|Dun|Duota|Ðurh|Eeldades|Ef|Eğer ki|Entao|Então|Entón|Entonces|En|Epi|E|És|Etant donnée|Etant donné|Et|Étant données|Étant donnée|Étant donné|Etant données|Etant donnés|Étant donnés|Fakat|Gangway!|Gdy|Gegeben seien|Gegeben sei|Gegeven|Gegewe|ghu' noblu'|Gitt|Given y'all|Given|Givet|Givun|Ha|Cho|I CAN HAZ|In|Ir|It's just unbelievable|I|Ja|Jeśli|Jeżeli|Kadar|Kada|Kad|Kai|Kaj|Když|Keď|Kemudian|Ketika|Khi|Kiedy|Ko|Kuid|Kui|Kun|Lan|latlh|Le sa a|Let go and haul|Le|Lè sa a|Lè|Logo|Lorsqu'<|Lorsque|mä|Maar|Mais|Mając|Majd|Maka|Manawa|Mas|Ma|Menawa|Men|Mutta|Nalikaning|Nalika|Nanging|Når|När|Nato|Nhưng|Niin|Njuk|O zaman|Og|Och|Oletetaan|Onda|Ond|Oraz|Pak|Pero|Però|Podano|Pokiaľ|Pokud|Potem|Potom|Privzeto|Pryd|qaSDI'|Quando|Quand|Quan|Så|Sed|Se|Siis|Sipoze ke|Sipoze Ke|Sipoze|Si|Şi|Și|Soit|Stel|Tada|Tad|Takrat|Tak|Tapi|Ter|Tetapi|Tha the|Tha|Then y'all|Then|Thì|Thurh|Toda|Too right|ugeholl|Und|Un|Và|vaj|Vendar|Ve|wann|Wanneer|WEN|Wenn|When y'all|When|Wtedy|Wun|Y'know|Yeah nah|Yna|Youse know like when|Youse know when youse got|Y|Za predpokladu|Za předpokladu|Zadani|Zadano|Zadan|Zadate|Zadato|Zakładając|Zaradi|Zatati|Þa þe|Þa|Þá|Þegar|Þurh|Αλλά|Δεδομένου|Και|Όταν|Τότε|А також|Агар|Але|Али|Аммо|А|Әгәр|Әйтик|Әмма|Бирок|Ва|Вә|Дадено|Дано|Допустим|Если|Задате|Задати|Задато|И|І|К тому же|Када|Кад|Когато|Когда|Коли|Ләкин|Лекин|Нәтиҗәдә|Нехай|Но|Онда|Припустимо, що|Припустимо|Пусть|Также|Та|Тогда|Тоді|То|Унда|Һәм|Якщо|אבל|אזי|אז|בהינתן|וגם|כאשר|آنگاه|اذاً|اگر|اما|اور|با فرض|بالفرض|بفرض|پھر|تب|ثم|جب|عندما|فرض کیا|لكن|لیکن|متى|هنگامی|و|अगर|और|कदा|किन्तु|चूंकि|जब|तथा|तदा|तब|परन्तु|पर|यदि|ਅਤੇ|ਜਦੋਂ|ਜਿਵੇਂ ਕਿ|ਜੇਕਰ|ਤਦ|ਪਰ|అప్పుడు|ఈ పరిస్థితిలో|కాని|చెప్పబడినది|మరియు|ಆದರೆ|ನಂತರ|ನೀಡಿದ|ಮತ್ತು|ಸ್ಥಿತಿಯನ್ನು|กำหนดให้|ดังนั้น|แต่|เมื่อ|และ|그러면<|그리고<|단<|만약<|만일<|먼저<|조건<|하지만<|かつ<|しかし<|ただし<|ならば<|もし<|並且<|但し<|但是<|假如<|假定<|假設<|假设<|前提<|同时<|同時<|并且<|当<|當<|而且<|那么<|那麼<)(?=[ \\t]+)/,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|'(?:\\\\.|[^'\\\\\\r\\n])*'/,\n    inside: {\n      'outline': {\n        pattern: /<[^>]+?>/,\n        alias: 'variable'\n      }\n    }\n  },\n  'outline': {\n    pattern: /<[^>]+?>/,\n    alias: 'variable'\n  }\n};\nPrism.languages.git = {\n  /*\n   * A simple one line comment like in a git status command\n   * For instance:\n   * $ git status\n   * # On branch infinite-scroll\n   * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,\n   * # and have 1 and 2 different commits each, respectively.\n   * nothing to commit (working directory clean)\n   */\n  'comment': /^#.*/m,\n\n  /*\n   * Regexp to match the changed lines in a git diff output. Check the example below.\n   */\n  'deleted': /^[-–].*/m,\n  'inserted': /^\\+.*/m,\n\n  /*\n   * a string (double and simple quote)\n   */\n  'string': /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/m,\n\n  /*\n   * a git command. It starts with a random prompt finishing by a $, then \"git\" then some other parameters\n   * For instance:\n   * $ git add file.txt\n   */\n  'command': {\n    pattern: /^.*\\$ git .*$/m,\n    inside: {\n      /*\n       * A git command can contain a parameter starting by a single or a double dash followed by a string\n       * For instance:\n       * $ git diff --cached\n       * $ git log -p\n       */\n      'parameter': /\\s--?\\w+/m\n    }\n  },\n\n  /*\n   * Coordinates displayed in a git diff command\n   * For instance:\n   * $ git diff\n   * diff --git file.txt file.txt\n   * index 6214953..1d54a52 100644\n   * --- file.txt\n   * +++ file.txt\n   * @@ -1 +1,2 @@\n   * -Here's my tetx file\n   * +Here's my text file\n   * +And this is the second line\n   */\n  'coord': /^@@.*@@$/m,\n\n  /*\n   * Match a \"commit [SHA1]\" line in a git log output.\n   * For instance:\n   * $ git log\n   * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09\n   * Author: lgiraudel\n   * Date:   Mon Feb 17 11:18:34 2014 +0100\n   *\n   *     Add of a new line\n   */\n  'commit_sha1': /^commit \\w{40}$/m\n};\nPrism.languages.glsl = Prism.languages.extend('clike', {\n  'comment': [/\\/\\*[\\s\\S]*?\\*\\//, /\\/\\/(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/],\n  'number': /(?:\\b0x[\\da-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ulf]*/i,\n  'keyword': /\\b(?:attribute|const|uniform|varying|buffer|shared|coherent|volatile|restrict|readonly|writeonly|atomic_uint|layout|centroid|flat|smooth|noperspective|patch|sample|break|continue|do|for|while|switch|case|default|if|else|subroutine|in|out|inout|float|double|int|void|bool|true|false|invariant|precise|discard|return|d?mat[234](?:x[234])?|[ibdu]?vec[234]|uint|lowp|mediump|highp|precision|[iu]?sampler[123]D|[iu]?samplerCube|sampler[12]DShadow|samplerCubeShadow|[iu]?sampler[12]DArray|sampler[12]DArrayShadow|[iu]?sampler2DRect|sampler2DRectShadow|[iu]?samplerBuffer|[iu]?sampler2DMS(?:Array)?|[iu]?samplerCubeArray|samplerCubeArrayShadow|[iu]?image[123]D|[iu]?image2DRect|[iu]?imageCube|[iu]?imageBuffer|[iu]?image[12]DArray|[iu]?imageCubeArray|[iu]?image2DMS(?:Array)?|struct|common|partition|active|asm|class|union|enum|typedef|template|this|resource|goto|inline|noinline|public|static|extern|external|interface|long|short|half|fixed|unsigned|superp|input|output|hvec[234]|fvec[234]|sampler3DRect|filter|sizeof|cast|namespace|using)\\b/\n});\nPrism.languages.insertBefore('glsl', 'comment', {\n  'preprocessor': {\n    pattern: /(^[ \\t]*)#(?:(?:define|undef|if|ifdef|ifndef|else|elif|endif|error|pragma|extension|version|line)\\b)?/m,\n    lookbehind: true,\n    alias: 'builtin'\n  }\n});\nPrism.languages.gamemakerlanguage = Prism.languages.gml = Prism.languages.extend('clike', {\n  'number': /(?:\\b0x[\\da-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ulf]*/i,\n  'keyword': /\\b(?:if|else|switch|case|default|break|for|repeat|while|do|until|continue|exit|return|globalvar|var|enum)\\b/,\n  'operator': /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]|\\b(?:or|and|not|with|at|xor|not)\\b/,\n  'constant': /\\b(self|other|all|noone|global|local|undefined|pointer_(?:invalid|null)|action_(?:stop|restart|continue|reverse)|pi|GM_build_date|GM_version|timezone_(?:local|utc)|gamespeed_(?:fps|microseconds)|ev_(?:create|destroy|step|alarm|keyboard|mouse|collision|other|draw|draw_(?:begin|end|pre|post)|keypress|keyrelease|trigger|(?:left|right|middle|no)_button|(?:left|right|middle)_press|(?:left|right|middle)_release|mouse_(?:enter|leave|wheel_up|wheel_down)|global_(?:left|right|middle)_button|global_(?:left|right|middle)_press|global_(?:left|right|middle)_release|joystick(?:1|2)_(?:left|right|up|down|button1|button2|button3|button4|button5|button6|button7|button8)|outside|boundary|game_start|game_end|room_start|room_end|no_more_lives|animation_end|end_of_path|no_more_health|user\\d|step_(?:normal|begin|end)|gui|gui_begin|gui_end)|vk_(?:nokey|anykey|enter|return|shift|control|alt|escape|space|backspace|tab|pause|printscreen|left|right|up|down|home|end|delete|insert|pageup|pagedown|f\\d|numpad\\d|divide|multiply|subtract|add|decimal|lshift|lcontrol|lalt|rshift|rcontrol|ralt)|mb_(?:any|none|left|right|middle)|c_(?:aqua|black|blue|dkgray|fuchsia|gray|green|lime|ltgray|maroon|navy|olive|purple|red|silver|teal|white|yellow|orange)|fa_(?:left|center|right|top|middle|bottom|readonly|hidden|sysfile|volumeid|directory|archive)|pr_(?:pointlist|linelist|linestrip|trianglelist|trianglestrip|trianglefan)|bm_(?:complex|normal|add|max|subtract|zero|one|src_colour|inv_src_colour|src_color|inv_src_color|src_alpha|inv_src_alpha|dest_alpha|inv_dest_alpha|dest_colour|inv_dest_colour|dest_color|inv_dest_color|src_alpha_sat)|audio_(?:falloff_(?:none|inverse_distance|inverse_distance_clamped|linear_distance|linear_distance_clamped|exponent_distance|exponent_distance_clamped)|old_system|new_system|mono|stereo|3d)|cr_(?:default|none|arrow|cross|beam|size_nesw|size_ns|size_nwse|size_we|uparrow|hourglass|drag|appstart|handpoint|size_all)|spritespeed_framesper(?:second|gameframe)|asset_(?:object|unknown|sprite|sound|room|path|script|font|timeline|tiles|shader)|ds_type_(?:map|list|stack|queue|grid|priority)|ef_(?:explosion|ring|ellipse|firework|smoke|smokeup|star|spark|flare|cloud|rain|snow)|pt_shape_(?:pixel|disk|square|line|star|circle|ring|sphere|flare|spark|explosion|cloud|smoke|snow)|ps_(?:distr|shape)_(?:linear|gaussian|invgaussian|rectangle|ellipse|diamond|line)|ty_(?:real|string)|dll_(?:cdel|cdecl|stdcall)|matrix_(?:view|projection|world)|os_(?:win32|windows|macosx|ios|android|linux|unknown|winphone|win8native|psvita|ps4|xboxone|ps3|uwp)|browser_(?:not_a_browser|unknown|ie|firefox|chrome|safari|safari_mobile|opera|tizen|windows_store|ie_mobile)|device_ios_(?:unknown|iphone|iphone_retina|ipad|ipad_retina|iphone5|iphone6|iphone6plus)|device_(?:emulator|tablet)|display_(?:landscape|landscape_flipped|portrait|portrait_flipped)|of_challenge_(?:win|lose|tie)|leaderboard_type_(?:number|time_mins_secs)|cmpfunc_(?:never|less|equal|lessequal|greater|notequal|greaterequal|always)|cull_(?:noculling|clockwise|counterclockwise)|lighttype_(?:dir|point)|iap_(?:ev_storeload|ev_product|ev_purchase|ev_consume|ev_restore|storeload_ok|storeload_failed|status_uninitialised|status_unavailable|status_loading|status_available|status_processing|status_restoring|failed|unavailable|available|purchased|canceled|refunded)|fb_login_(?:default|fallback_to_webview|no_fallback_to_webview|forcing_webview|use_system_account|forcing_safari)|phy_joint_(?:anchor_1_x|anchor_1_y|anchor_2_x|anchor_2_y|reaction_force_x|reaction_force_y|reaction_torque|motor_speed|angle|motor_torque|max_motor_torque|translation|speed|motor_force|max_motor_force|length_1|length_2|damping_ratio|frequency|lower_angle_limit|upper_angle_limit|angle_limits|max_length|max_torque|max_force)|phy_debug_render_(?:aabb|collision_pairs|coms|core_shapes|joints|obb|shapes)|phy_particle_flag_(?:water|zombie|wall|spring|elastic|viscous|powder|tensile|colourmixing|colormixing)|phy_particle_group_flag_(?:solid|rigid)|phy_particle_data_flag_(?:typeflags|position|velocity|colour|color|category)|achievement_(?:our_info|friends_info|leaderboard_info|info|filter_(?:all_players|friends_only|favorites_only)|type_challenge|type_score_challenge|pic_loaded|show_(?:ui|profile|leaderboard|achievement|bank|friend_picker|purchase_prompt))|network_(?:socket_(?:tcp|udp|bluetooth)|type_(?:connect|disconnect|data|non_blocking_connect)|config_(?:connect_timeout|use_non_blocking_socket|enable_reliable_udp|disable_reliable_udp))|buffer_(?:fixed|grow|wrap|fast|vbuffer|network|u8|s8|u16|s16|u32|s32|u64|f16|f32|f64|bool|text|string|seek_start|seek_relative|seek_end|generalerror|outofspace|outofbounds|invalidtype)|gp_(?:face\\d|shoulderl|shoulderr|shoulderlb|shoulderrb|select|start|stickl|stickr|padu|padd|padl|padr|axislh|axislv|axisrh|axisrv)|ov_(?:friends|community|players|settings|gamegroup|achievements)|lb_sort_(?:none|ascending|descending)|lb_disp_(?:none|numeric|time_sec|time_ms)|ugc_(?:result_success|filetype_(?:community|microtrans)|visibility_(?:public|friends_only|private)|query_RankedBy(?:Vote|PublicationDate|Trend|NumTimesReported|TotalVotesAsc|VotesUp|TextSearch)|query_(?:AcceptedForGameRankedByAcceptanceDate|FavoritedByFriendsRankedByPublicationDate|CreatedByFriendsRankedByPublicationDate|NotYetRated)|sortorder_CreationOrder(?:Desc|Asc)|sortorder_(?:TitleAsc|LastUpdatedDesc|SubscriptionDateDesc|VoteScoreDesc|ForModeration)|list_(?:Published|VotedOn|VotedUp|VotedDown|WillVoteLater|Favorited|Subscribed|UsedOrPlayed|Followed)|match_(?:Items|Items_Mtx|Items_ReadyToUse|Collections|Artwork|Videos|Screenshots|AllGuides|WebGuides|IntegratedGuides|UsableInGame|ControllerBindings))|vertex_usage_(?:position|colour|color|normal|texcoord|textcoord|blendweight|blendindices|psize|tangent|binormal|fog|depth|sample)|vertex_type_(?:float\\d|colour|color|ubyte4)|layerelementtype_(?:undefined|background|instance|oldtilemap|sprite|tilemap|particlesystem|tile)|tile_(?:rotate|flip|mirror|index_mask)|input_type|se_(?:chorus|compressor|echo|equalizer|flanger|gargle|none|reverb)|text_type|(obj|scr|spr|rm)\\w+)\\b/,\n  'variable': /\\b(x|y|(?:x|y)(?:previous|start)|(?:h|v)speed|direction|speed|friction|gravity|gravity_direction|path_(?:index|position|positionprevious|speed|scale|orientation|endaction)|object_index|id|solid|persistent|mask_index|instance_(?:count|id)|alarm|timeline_(?:index|position|speed|running|loop)|visible|sprite_(?:index|width|height|xoffset|yoffset)|image_(?:number|index|speed|depth|xscale|yscale|angle|alpha|blend)|bbox_(?:left|right|top|bottom)|layer|phy_(?:rotation|(?:position|linear_velocity|speed|com|collision|col_normal)_(?:x|y)|angular_(?:velocity|damping)|position_(?:x|y)previous|speed|linear_damping|bullet|fixed_rotation|active|mass|inertia|dynamic|kinematic|sleeping|collision_points)|working_directory|webgl_enabled|view_(?:(?:y|x|w|h)view|(?:y|x|w|h)port|(?:v|h)(?:speed|border)|visible|surface_id|object|enabled|current|angle)|undefined|transition_(?:steps|kind|color)|temp_directory|show_(?:score|lives|health)|secure_mode|score|room_(?:width|speed|persistent|last|height|first|caption)|room|pointer_(?:null|invalid)|os_(?:version|type|device|browser)|mouse_(?:y|x|lastbutton|button)|lives|keyboard_(?:string|lastkey|lastchar|key)|iap_data|health|gamemaker_(?:version|registered|pro)|game_(?:save|project|display)_(?:id|name)|fps_real|fps|event_(?:type|object|number|action)|error_(?:occurred|last)|display_aa|delta_time|debug_mode|cursor_sprite|current_(?:year|weekday|time|second|month|minute|hour|day)|caption_(?:score|lives|health)|browser_(?:width|height)|background_(?:yscale|y|xscale|x|width|vtiled|vspeed|visible|showcolour|showcolor|index|htiled|hspeed|height|foreground|colour|color|blend|alpha)|async_load|application_surface|argument(?:_relitive|_count|\\d)|argument|global|local|self|other)\\b/\n});\nPrism.languages.go = Prism.languages.extend('clike', {\n  'keyword': /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,\n  'builtin': /\\b(?:bool|byte|complex(?:64|128)|error|float(?:32|64)|rune|string|u?int(?:8|16|32|64)?|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(?:ln)?|real|recover)\\b/,\n  'boolean': /\\b(?:_|iota|nil|true|false)\\b/,\n  'operator': /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,\n  'number': /(?:\\b0x[a-f\\d]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[-+]?\\d+)?)i?/i,\n  'string': {\n    pattern: /([\"'`])(\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n    greedy: true\n  }\n});\ndelete Prism.languages.go['class-name'];\nPrism.languages.graphql = {\n  'comment': /#.*/,\n  'string': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n    greedy: true\n  },\n  'number': /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'boolean': /\\b(?:true|false)\\b/,\n  'variable': /\\$[a-z_]\\w*/i,\n  'directive': {\n    pattern: /@[a-z_]\\w*/i,\n    alias: 'function'\n  },\n  'attr-name': {\n    pattern: /[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+)[a-zA-Z_]\\w*/,\n    lookbehind: true\n  },\n  'fragment': {\n    pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'keyword': /\\b(?:enum|fragment|implements|input|interface|mutation|on|query|scalar|schema|type|union)\\b/,\n  'operator': /[!=|]|\\.{3}/,\n  'punctuation': /[!(){}\\[\\]:=,]/,\n  'constant': /\\b(?!ID\\b)[A-Z][A-Z_\\d]*\\b/\n};\nPrism.languages.groovy = Prism.languages.extend('clike', {\n  'keyword': /\\b(?:as|def|in|abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\\b/,\n  'string': [{\n    pattern: /(\"\"\"|''')[\\s\\S]*?\\1|(?:\\$\\/)(?:\\$\\/\\$|[\\s\\S])*?\\/\\$/,\n    greedy: true\n  }, {\n    pattern: /([\"'\\/])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  }],\n  'number': /\\b(?:0b[01_]+|0x[\\da-f_]+(?:\\.[\\da-f_p\\-]+)?|[\\d_]+(?:\\.[\\d_]+)?(?:e[+-]?[\\d]+)?)[glidf]?\\b/i,\n  'operator': {\n    pattern: /(^|[^.])(?:~|==?~?|\\?[.:]?|\\*(?:[.=]|\\*=?)?|\\.[@&]|\\.\\.<|\\.{1,2}(?!\\.)|-[-=>]?|\\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\\|[|=]?|\\/=?|\\^=?|%=?)/,\n    lookbehind: true\n  },\n  'punctuation': /\\.+|[{}[\\];(),:$]/\n});\nPrism.languages.insertBefore('groovy', 'string', {\n  'shebang': {\n    pattern: /#!.+/,\n    alias: 'comment'\n  }\n});\nPrism.languages.insertBefore('groovy', 'punctuation', {\n  'spock-block': /\\b(?:setup|given|when|then|and|cleanup|expect|where):/\n});\nPrism.languages.insertBefore('groovy', 'function', {\n  'annotation': {\n    alias: 'punctuation',\n    pattern: /(^|[^.])@\\w+/,\n    lookbehind: true\n  }\n}); // Handle string interpolation\n\nPrism.hooks.add('wrap', function (env) {\n  if (env.language === 'groovy' && env.type === 'string') {\n    var delimiter = env.content[0];\n\n    if (delimiter != \"'\") {\n      var pattern = /([^\\\\])(?:\\$(?:\\{.*?\\}|[\\w.]+))/;\n\n      if (delimiter === '$') {\n        pattern = /([^\\$])(?:\\$(?:\\{.*?\\}|[\\w.]+))/;\n      } // To prevent double HTML-encoding we have to decode env.content first\n\n\n      env.content = env.content.replace(/&lt;/g, '<').replace(/&amp;/g, '&');\n      env.content = Prism.highlight(env.content, {\n        'expression': {\n          pattern: pattern,\n          lookbehind: true,\n          inside: Prism.languages.groovy\n        }\n      });\n      env.classes.push(delimiter === '/' ? 'regex' : 'gstring');\n    }\n  }\n});\n/* FIXME :\n :extend() is not handled specifically : its highlighting is buggy.\n Mixin usage must be inside a ruleset to be highlighted.\n At-rules (e.g. import) containing interpolations are buggy.\n Detached rulesets are highlighted as at-rules.\n A comment before a mixin usage prevents the latter to be properly highlighted.\n */\n\nPrism.languages.less = Prism.languages.extend('css', {\n  'comment': [/\\/\\*[\\s\\S]*?\\*\\//, {\n    pattern: /(^|[^\\\\])\\/\\/.*/,\n    lookbehind: true\n  }],\n  'atrule': {\n    pattern: /@[\\w-]+?(?:\\([^{}]+\\)|[^(){};])*?(?=\\s*\\{)/i,\n    inside: {\n      'punctuation': /[:()]/\n    }\n  },\n  // selectors and mixins are considered the same\n  'selector': {\n    pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\([^{}]*\\)|[^{};@])*?(?=\\s*\\{)/,\n    inside: {\n      // mixin parameters\n      'variable': /@+[\\w-]+/\n    }\n  },\n  'property': /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/i,\n  'operator': /[+\\-*\\/]/\n});\nPrism.languages.insertBefore('less', 'property', {\n  'variable': [// Variable declaration (the colon must be consumed!)\n  {\n    pattern: /@[\\w-]+\\s*:/,\n    inside: {\n      \"punctuation\": /:/\n    }\n  }, // Variable usage\n  /@@?[\\w-]+/],\n  'mixin-usage': {\n    pattern: /([{;]\\s*)[.#](?!\\d)[\\w-]+.*?(?=[(;])/,\n    lookbehind: true,\n    alias: 'function'\n  }\n});\n\n(function (Prism) {\n  Prism.languages.handlebars = {\n    'comment': /\\{\\{![\\s\\S]*?\\}\\}/,\n    'delimiter': {\n      pattern: /^\\{\\{\\{?|\\}\\}\\}?$/i,\n      alias: 'punctuation'\n    },\n    'string': /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n    'boolean': /\\b(?:true|false)\\b/,\n    'block': {\n      pattern: /^(\\s*~?\\s*)[#\\/]\\S+?(?=\\s*~?\\s*$|\\s)/i,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'brackets': {\n      pattern: /\\[[^\\]]+\\]/,\n      inside: {\n        punctuation: /\\[|\\]/,\n        variable: /[\\s\\S]+/\n      }\n    },\n    'punctuation': /[!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,\n    'variable': /[^!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/\n  };\n  Prism.hooks.add('before-tokenize', function (env) {\n    var handlebarsPattern = /\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'handlebars', handlebarsPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'handlebars');\n  });\n})(Prism);\n\nPrism.languages.haskell = {\n  'comment': {\n    pattern: /(^|[^-!#$%*+=?&@|~.:<>^\\\\\\/])(?:--[^-!#$%*+=?&@|~.:<>^\\\\\\/].*|{-[\\s\\S]*?-})/m,\n    lookbehind: true\n  },\n  'char': /'(?:[^\\\\']|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|\\d+|o[0-7]+|x[0-9a-fA-F]+))'/,\n  'string': {\n    pattern: /\"(?:[^\\\\\"]|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|\\d+|o[0-7]+|x[0-9a-fA-F]+)|\\\\\\s+\\\\)*\"/,\n    greedy: true\n  },\n  'keyword': /\\b(?:case|class|data|deriving|do|else|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\\b/,\n  'import_statement': {\n    // The imported or hidden names are not included in this import\n    // statement. This is because we want to highlight those exactly like\n    // we do for the names in the program.\n    pattern: /((?:\\r?\\n|\\r|^)\\s*)import\\s+(?:qualified\\s+)?(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*(?:\\s+as\\s+(?:[A-Z][_a-zA-Z0-9']*)(?:\\.[A-Z][\\w']*)*)?(?:\\s+hiding\\b)?/m,\n    lookbehind: true,\n    inside: {\n      'keyword': /\\b(?:import|qualified|as|hiding)\\b/\n    }\n  },\n  // These are builtin variables only. Constructors are highlighted later as a constant.\n  'builtin': /\\b(?:abs|acos|acosh|all|and|any|appendFile|approxRational|asTypeOf|asin|asinh|atan|atan2|atanh|basicIORun|break|catch|ceiling|chr|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|denominator|digitToInt|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromDouble|fromEnum|fromInt|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|group|head|id|inRange|index|init|intToDigit|interact|ioError|isAlpha|isAlphaNum|isAscii|isControl|isDenormalized|isDigit|isHexDigit|isIEEE|isInfinite|isLower|isNaN|isNegativeZero|isOctDigit|isPrint|isSpace|isUpper|iterate|last|lcm|length|lex|lexDigits|lexLitChar|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|numerator|odd|or|ord|otherwise|pack|pi|pred|primExitWith|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|range|rangeSize|read|readDec|readFile|readFloat|readHex|readIO|readInt|readList|readLitChar|readLn|readOct|readParen|readSigned|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showInt|showList|showLitChar|showParen|showSigned|showString|shows|showsPrec|significand|signum|sin|sinh|snd|sort|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|threadToIOResult|toEnum|toInt|toInteger|toLower|toRational|toUpper|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\\b/,\n  // decimal integers and floating point numbers | octal integers | hexadecimal integers\n  'number': /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0o[0-7]+|0x[0-9a-f]+)\\b/i,\n  // Most of this is needed because of the meaning of a single '.'.\n  // If it stands alone freely, it is the function composition.\n  // It may also be a separator between a module name and an identifier => no\n  // operator. If it comes together with other special characters it is an\n  // operator too.\n  'operator': /\\s\\.\\s|[-!#$%*+=?&@|~.:<>^\\\\\\/]*\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]+|[-!#$%*+=?&@|~.:<>^\\\\\\/]+\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]*|[-!#$%*+=?&@|~:<>^\\\\\\/]+|`([A-Z][\\w']*\\.)*[_a-z][\\w']*`/,\n  // In Haskell, nearly everything is a variable, do not highlight these.\n  'hvariable': /\\b(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*\\b/,\n  'constant': /\\b(?:[A-Z][\\w']*\\.)*[A-Z][\\w']*\\b/,\n  'punctuation': /[{}[\\];(),.:]/\n};\nPrism.languages.hs = Prism.languages.haskell;\nPrism.languages.haxe = Prism.languages.extend('clike', {\n  // Strings can be multi-line\n  'string': {\n    pattern: /([\"'])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        pattern: /(^|[^\\\\])\\$(?:\\w+|\\{[^}]+\\})/,\n        lookbehind: true,\n        inside: {\n          'interpolation': {\n            pattern: /^\\$\\w*/,\n            alias: 'variable' // See rest below\n\n          }\n        }\n      }\n    }\n  },\n  // The final look-ahead prevents highlighting of keywords if expressions such as \"haxe.macro.Expr\"\n  'keyword': /\\bthis\\b|\\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|from|for|function|if|implements|import|in|inline|interface|macro|new|null|override|public|private|return|static|super|switch|throw|to|try|typedef|using|var|while)(?!\\.)\\b/,\n  'operator': /\\.{3}|\\+\\+?|-[->]?|[=!]=?|&&?|\\|\\|?|<[<=]?|>[>=]?|[*\\/%~^]/\n});\nPrism.languages.insertBefore('haxe', 'class-name', {\n  'regex': {\n    pattern: /~\\/(?:[^\\/\\\\\\r\\n]|\\\\.)+\\/[igmsu]*/,\n    greedy: true\n  }\n});\nPrism.languages.insertBefore('haxe', 'keyword', {\n  'preprocessor': {\n    pattern: /#\\w+/,\n    alias: 'builtin'\n  },\n  'metadata': {\n    pattern: /@:?\\w+/,\n    alias: 'symbol'\n  },\n  'reification': {\n    pattern: /\\$(?:\\w+|(?=\\{))/,\n    alias: 'variable'\n  }\n});\nPrism.languages.haxe['string'].inside['interpolation'].inside.rest = Prism.languages.haxe;\ndelete Prism.languages.haxe['class-name'];\nPrism.languages.hcl = {\n  'comment': /(?:\\/\\/|#).*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n  'heredoc': {\n    pattern: /<<-?(\\w+)[\\s\\S]*?^\\s*\\1/m,\n    greedy: true,\n    alias: 'string'\n  },\n  'keyword': [{\n    pattern: /(?:resource|data)\\s+(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")(?=\\s+\"[\\w-]+\"\\s+{)/i,\n    inside: {\n      'type': {\n        pattern: /(resource|data|\\s+)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")/i,\n        lookbehind: true,\n        alias: 'variable'\n      }\n    }\n  }, {\n    pattern: /(?:provider|provisioner|variable|output|module|backend)\\s+(?:[\\w-]+|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")\\s+(?={)/i,\n    inside: {\n      'type': {\n        pattern: /(provider|provisioner|variable|output|module|backend)\\s+(?:[\\w-]+|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")\\s+/i,\n        lookbehind: true,\n        alias: 'variable'\n      }\n    }\n  }, {\n    pattern: /[\\w-]+(?=\\s+{)/\n  }],\n  'property': [/[\\w-\\.]+(?=\\s*=(?!=))/, /\"(?:\\\\[\\s\\S]|[^\\\\\"])+\"(?=\\s*[:=])/],\n  'string': {\n    pattern: /\"(?:[^\\\\$\"]|\\\\[\\s\\S]|\\$(?:(?=\")|\\$+|[^\"${])|\\$\\{(?:[^{}\"]|\"(?:[^\\\\\"]|\\\\[\\s\\S])*\")*\\})*\"/,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        pattern: /(^|[^$])\\$\\{(?:[^{}\"]|\"(?:[^\\\\\"]|\\\\[\\s\\S])*\")*\\}/,\n        lookbehind: true,\n        inside: {\n          'type': {\n            pattern: /(\\b(?:terraform|var|self|count|module|path|data|local)\\b\\.)[\\w\\*]+/i,\n            lookbehind: true,\n            alias: 'variable'\n          },\n          'keyword': /\\b(?:terraform|var|self|count|module|path|data|local)\\b/i,\n          'function': /\\w+(?=\\()/,\n          'string': {\n            pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n            greedy: true\n          },\n          'number': /\\b0x[\\da-f]+|\\d+\\.?\\d*(?:e[+-]?\\d+)?/i,\n          'punctuation': /[!\\$#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~?:]/\n        }\n      }\n    }\n  },\n  'number': /\\b0x[\\da-f]+|\\d+\\.?\\d*(?:e[+-]?\\d+)?/i,\n  'boolean': /\\b(?:true|false)\\b/i,\n  'punctuation': /[=\\[\\]{}]/\n};\n\n(function (Prism) {\n  Prism.languages.http = {\n    'request-line': {\n      pattern: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\s(?:https?:\\/\\/|\\/)\\S+\\sHTTP\\/[0-9.]+/m,\n      inside: {\n        // HTTP Verb\n        'property': /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\b/,\n        // Path or query argument\n        'attr-name': /:\\w+/\n      }\n    },\n    'response-status': {\n      pattern: /^HTTP\\/1.[01] \\d+.*/m,\n      inside: {\n        // Status, e.g. 200 OK\n        'property': {\n          pattern: /(^HTTP\\/1.[01] )\\d+.*/i,\n          lookbehind: true\n        }\n      }\n    },\n    // HTTP header name\n    'header-name': {\n      pattern: /^[\\w-]+:(?=.)/m,\n      alias: 'keyword'\n    }\n  }; // Create a mapping of Content-Type headers to language definitions\n\n  var langs = Prism.languages;\n  var httpLanguages = {\n    'application/javascript': langs.javascript,\n    'application/json': langs.json || langs.javascript,\n    'application/xml': langs.xml,\n    'text/xml': langs.xml,\n    'text/html': langs.html,\n    'text/css': langs.css\n  }; // Declare which types can also be suffixes\n\n  var suffixTypes = {\n    'application/json': true,\n    'application/xml': true\n  };\n  /**\n   * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n   *\n   * @param {string} contentType\n   * @returns {string}\n   */\n\n  function getSuffixPattern(contentType) {\n    var suffix = contentType.replace(/^[a-z]+\\//, '');\n    var suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])';\n    return '(?:' + contentType + '|' + suffixPattern + ')';\n  } // Insert each content type parser that has its associated language\n  // currently loaded.\n\n\n  var options;\n\n  for (var contentType in httpLanguages) {\n    if (httpLanguages[contentType]) {\n      options = options || {};\n      var pattern = suffixTypes[contentType] ? getSuffixPattern(contentType) : contentType;\n      options[contentType] = {\n        pattern: RegExp('(content-type:\\\\s*' + pattern + '[\\\\s\\\\S]*?)(?:\\\\r?\\\\n|\\\\r){2}[\\\\s\\\\S]*', 'i'),\n        lookbehind: true,\n        inside: {\n          rest: httpLanguages[contentType]\n        }\n      };\n    }\n  }\n\n  if (options) {\n    Prism.languages.insertBefore('http', 'header-name', options);\n  }\n})(Prism);\n/**\n * Original by Scott Helme.\n *\n * Reference: https://scotthelme.co.uk/hpkp-cheat-sheet/\n */\n\n\nPrism.languages.hpkp = {\n  'directive': {\n    pattern: /\\b(?:(?:includeSubDomains|preload|strict)(?: |;)|pin-sha256=\"[a-zA-Z\\d+=/]+\"|(?:max-age|report-uri)=|report-to )/,\n    alias: 'keyword'\n  },\n  'safe': {\n    pattern: /\\d{7,}/,\n    alias: 'selector'\n  },\n  'unsafe': {\n    pattern: /\\d{1,6}/,\n    alias: 'function'\n  }\n};\n/**\n * Original by Scott Helme.\n *\n * Reference: https://scotthelme.co.uk/hsts-cheat-sheet/\n */\n\nPrism.languages.hsts = {\n  'directive': {\n    pattern: /\\b(?:max-age=|includeSubDomains|preload)/,\n    alias: 'keyword'\n  },\n  'safe': {\n    pattern: /\\d{8,}/,\n    alias: 'selector'\n  },\n  'unsafe': {\n    pattern: /\\d{1,7}/,\n    alias: 'function'\n  }\n}; // according to the offical reference (EN)\n// https://ichigojam.net/IchigoJam-en.html\n\nPrism.languages.ichigojam = {\n  'comment': /(?:\\B'|REM)(?:[^\\n\\r]*)/i,\n  'string': {\n    pattern: /\"(?:\"\"|[!#$%&'()*,\\/:;<=>?^_ +\\-.A-Z\\d])*\"/i,\n    greedy: true\n  },\n  'number': /\\B#[0-9A-F]+|\\B`[01]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,\n  'keyword': /\\b(?:BEEP|BPS|CASE|CLEAR|CLK|CLO|CLP|CLS|CLT|CLV|CONT|COPY|ELSE|END|FILE|FILES|FOR|GOSUB|GSB|GOTO|IF|INPUT|KBD|LED|LET|LIST|LOAD|LOCATE|LRUN|NEW|NEXT|OUT|RIGHT|PLAY|POKE|PRINT|PWM|REM|RENUM|RESET|RETURN|RTN|RUN|SAVE|SCROLL|SLEEP|SRND|STEP|STOP|SUB|TEMPO|THEN|TO|UART|VIDEO|WAIT)(?:\\$|\\b)/i,\n  'function': /\\b(?:ABS|ANA|ASC|BIN|BTN|DEC|END|FREE|HELP|HEX|I2CR|I2CW|IN|INKEY|LEN|LINE|PEEK|RND|SCR|SOUND|STR|TICK|USR|VER|VPEEK|ZER)(?:\\$|\\b)/i,\n  'label': /(?:\\B@[^\\s]+)/i,\n  'operator': /<[=>]?|>=?|\\|\\||&&|[+\\-*\\/=|&^~!]|\\b(?:AND|NOT|OR)\\b/i,\n  'punctuation': /[\\[,;:()\\]]/\n};\nPrism.languages.icon = {\n  'comment': /#.*/,\n  'string': {\n    pattern: /([\"'])(?:(?!\\1)[^\\\\\\r\\n_]|\\\\.|_(?!\\1)(?:\\r\\n|[\\s\\S]))*\\1/,\n    greedy: true\n  },\n  'number': /\\b(?:\\d+r[a-z\\d]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b|\\.\\d+\\b/i,\n  'builtin-keyword': {\n    pattern: /&(?:allocated|ascii|clock|collections|cset|current|date|dateline|digits|dump|e|error(?:number|text|value)?|errout|fail|features|file|host|input|lcase|letters|level|line|main|null|output|phi|pi|pos|progname|random|regions|source|storage|subject|time|trace|ucase|version)\\b/,\n    alias: 'variable'\n  },\n  'directive': {\n    pattern: /\\$\\w+/,\n    alias: 'builtin'\n  },\n  'keyword': /\\b(?:break|by|case|create|default|do|else|end|every|fail|global|if|initial|invocable|link|local|next|not|of|procedure|record|repeat|return|static|suspend|then|to|until|while)\\b/,\n  'function': /(?!\\d)\\w+(?=\\s*[({]|\\s*!\\s*\\[)/,\n  'operator': /[+-]:(?!=)|(?:[\\/?@^%&]|\\+\\+?|--?|==?=?|~==?=?|\\*\\*?|\\|\\|\\|?|<(?:->?|<?=?)|>>?=?)(?::=)?|:(?:=:?)?|[!.\\\\|~]/,\n  'punctuation': /[\\[\\](){},;]/\n};\nPrism.languages.inform7 = {\n  'string': {\n    pattern: /\"[^\"]*\"/,\n    inside: {\n      'substitution': {\n        pattern: /\\[[^\\]]+\\]/,\n        inside: {\n          'delimiter': {\n            pattern: /\\[|\\]/,\n            alias: 'punctuation' // See rest below\n\n          }\n        }\n      }\n    }\n  },\n  'comment': {\n    pattern: /\\[[^\\]]+\\]/,\n    greedy: true\n  },\n  'title': {\n    pattern: /^[ \\t]*(?:volume|book|part(?! of)|chapter|section|table)\\b.+/im,\n    alias: 'important'\n  },\n  'number': {\n    pattern: /(^|[^-])(?:\\b\\d+(?:\\.\\d+)?(?:\\^\\d+)?\\w*|\\b(?:one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve))\\b(?!-)/i,\n    lookbehind: true\n  },\n  'verb': {\n    pattern: /(^|[^-])\\b(?:applying to|are|attacking|answering|asking|be(?:ing)?|burning|buying|called|carries|carry(?! out)|carrying|climbing|closing|conceal(?:s|ing)?|consulting|contain(?:s|ing)?|cutting|drinking|dropping|eating|enclos(?:es?|ing)|entering|examining|exiting|getting|giving|going|ha(?:ve|s|ving)|hold(?:s|ing)?|impl(?:y|ies)|incorporat(?:es?|ing)|inserting|is|jumping|kissing|listening|locking|looking|mean(?:s|ing)?|opening|provid(?:es?|ing)|pulling|pushing|putting|relat(?:es?|ing)|removing|searching|see(?:s|ing)?|setting|showing|singing|sleeping|smelling|squeezing|switching|support(?:s|ing)?|swearing|taking|tasting|telling|thinking|throwing|touching|turning|tying|unlock(?:s|ing)?|var(?:y|ies|ying)|waiting|waking|waving|wear(?:s|ing)?)\\b(?!-)/i,\n    lookbehind: true,\n    alias: 'operator'\n  },\n  'keyword': {\n    pattern: /(^|[^-])\\b(?:after|before|carry out|check|continue the action|definition(?= *:)|do nothing|else|end (?:if|unless|the story)|every turn|if|include|instead(?: of)?|let|move|no|now|otherwise|repeat|report|resume the story|rule for|running through|say(?:ing)?|stop the action|test|try(?:ing)?|understand|unless|use|when|while|yes)\\b(?!-)/i,\n    lookbehind: true\n  },\n  'property': {\n    pattern: /(^|[^-])\\b(?:adjacent(?! to)|carried|closed|concealed|contained|dark|described|edible|empty|enclosed|enterable|even|female|fixed in place|full|handled|held|improper-named|incorporated|inedible|invisible|lighted|lit|lock(?:able|ed)|male|marked for listing|mentioned|negative|neuter|non-(?:empty|full|recurring)|odd|opaque|open(?:able)?|plural-named|portable|positive|privately-named|proper-named|provided|publically-named|pushable between rooms|recurring|related|rubbing|scenery|seen|singular-named|supported|swinging|switch(?:able|ed(?: on| off)?)|touch(?:able|ed)|transparent|unconcealed|undescribed|unlit|unlocked|unmarked for listing|unmentioned|unopenable|untouchable|unvisited|variable|visible|visited|wearable|worn)\\b(?!-)/i,\n    lookbehind: true,\n    alias: 'symbol'\n  },\n  'position': {\n    pattern: /(^|[^-])\\b(?:above|adjacent to|back side of|below|between|down|east|everywhere|front side|here|in|inside(?: from)?|north(?:east|west)?|nowhere|on(?: top of)?|other side|outside(?: from)?|parts? of|regionally in|south(?:east|west)?|through|up|west|within)\\b(?!-)/i,\n    lookbehind: true,\n    alias: 'keyword'\n  },\n  'type': {\n    pattern: /(^|[^-])\\b(?:actions?|activit(?:y|ies)|actors?|animals?|backdrops?|containers?|devices?|directions?|doors?|holders?|kinds?|lists?|m[ae]n|nobody|nothing|nouns?|numbers?|objects?|people|persons?|player(?:'s holdall)?|regions?|relations?|rooms?|rule(?:book)?s?|scenes?|someone|something|supporters?|tables?|texts?|things?|time|vehicles?|wom[ae]n)\\b(?!-)/i,\n    lookbehind: true,\n    alias: 'variable'\n  },\n  'punctuation': /[.,:;(){}]/\n};\nPrism.languages.inform7['string'].inside['substitution'].inside.rest = Prism.languages.inform7; // We don't want the remaining text in the substitution to be highlighted as the string.\n\nPrism.languages.inform7['string'].inside['substitution'].inside.rest.text = {\n  pattern: /\\S(?:\\s*\\S)*/,\n  alias: 'comment'\n};\nPrism.languages.ini = {\n  'comment': /^[ \\t]*[;#].*$/m,\n  'selector': /^[ \\t]*\\[.*?\\]/m,\n  'constant': /^[ \\t]*[^\\s=]+?(?=[ \\t]*=)/m,\n  'attr-value': {\n    pattern: /=.*/,\n    inside: {\n      'punctuation': /^[=]/\n    }\n  }\n};\nPrism.languages.io = {\n  'comment': [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^\\\\])\\/\\/.*/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^\\\\])#.*/,\n    lookbehind: true\n  }],\n  'triple-quoted-string': {\n    pattern: /\"\"\"(?:\\\\[\\s\\S]|(?!\"\"\")[^\\\\])*\"\"\"/,\n    greedy: true,\n    alias: 'string'\n  },\n  'string': {\n    pattern: /\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  },\n  'keyword': /\\b(?:activate|activeCoroCount|asString|block|break|catch|clone|collectGarbage|compileString|continue|do|doFile|doMessage|doString|else|elseif|exit|for|foreach|forward|getSlot|getEnvironmentVariable|hasSlot|if|ifFalse|ifNil|ifNilEval|ifTrue|isActive|isNil|isResumable|list|message|method|parent|pass|pause|perform|performWithArgList|print|println|proto|raise|raiseResumable|removeSlot|resend|resume|schedulerSleepSeconds|self|sender|setSchedulerSleepSeconds|setSlot|shallowCopy|slotNames|super|system|then|thisBlock|thisContext|call|try|type|uniqueId|updateSlot|wait|while|write|yield)\\b/,\n  'builtin': /\\b(?:Array|AudioDevice|AudioMixer|Block|Box|Buffer|CFunction|CGI|Color|Curses|DBM|DNSResolver|DOConnection|DOProxy|DOServer|Date|Directory|Duration|DynLib|Error|Exception|FFT|File|Fnmatch|Font|Future|GL|GLE|GLScissor|GLU|GLUCylinder|GLUQuadric|GLUSphere|GLUT|Host|Image|Importer|LinkList|List|Lobby|Locals|MD5|MP3Decoder|MP3Encoder|Map|Message|Movie|Notification|Number|Object|OpenGL|Point|Protos|Regex|SGML|SGMLElement|SGMLParser|SQLite|Server|Sequence|ShowMessage|SleepyCat|SleepyCatCursor|Socket|SocketManager|Sound|Soup|Store|String|Tree|UDPSender|UPDReceiver|URL|User|Warning|WeakLink|Random|BigNum|Sequence)\\b/,\n  'boolean': /\\b(?:true|false|nil)\\b/,\n  'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e-?\\d+)?/i,\n  'operator': /[=!*/%+-^&|]=|>>?=?|<<?=?|:?:?=|\\+\\+?|--?|\\*\\*?|\\/\\/?|%|\\|\\|?|&&?|(\\b(?:return|and|or|not)\\b)|@@?|\\?\\??|\\.\\./,\n  'punctuation': /[{}[\\];(),.:]/\n};\nPrism.languages.j = {\n  'comment': /\\bNB\\..*/,\n  'string': {\n    pattern: /'(?:''|[^'\\r\\n])*'/,\n    greedy: true\n  },\n  'keyword': /\\b(?:(?:adverb|conjunction|CR|def|define|dyad|LF|monad|noun|verb)\\b|(?:assert|break|case|catch[dt]?|continue|do|else|elseif|end|fcase|for|for_\\w+|goto_\\w+|if|label_\\w+|return|select|throw|try|while|whilst)\\.)/,\n  'verb': {\n    // Negative look-ahead prevents bad highlighting\n    // of ^: ;. =. =: !. !:\n    pattern: /(?!\\^:|;\\.|[=!][.:])(?:\\{(?:\\.|::?)?|p(?:\\.\\.?|:)|[=!\\]]|[<>+*\\-%$|,#][.:]?|[?^]\\.?|[;\\[]:?|[~}\"i][.:]|[ACeEIjLor]\\.|(?:[_\\/\\\\qsux]|_?\\d):)/,\n    alias: 'keyword'\n  },\n  'number': /\\b_?(?:(?!\\d:)\\d+(?:\\.\\d+)?(?:(?:[ejpx]|ad|ar)_?\\d+(?:\\.\\d+)?)*(?:b_?[\\da-z]+(?:\\.[\\da-z]+)?)?|_(?!\\.))/,\n  'adverb': {\n    pattern: /[~}]|[\\/\\\\]\\.?|[bfM]\\.|t[.:]/,\n    alias: 'builtin'\n  },\n  'operator': /[=a][.:]|_\\./,\n  'conjunction': {\n    pattern: /&(?:\\.:?|:)?|[.:@][.:]?|[!D][.:]|[;dHT]\\.|`:?|[\\^LS]:|\"/,\n    alias: 'variable'\n  },\n  'punctuation': /[()]/\n};\n\n(function (Prism) {\n  var keywords = /\\b(?:abstract|continue|for|new|switch|assert|default|goto|package|synchronized|boolean|do|if|private|this|break|double|implements|protected|throw|byte|else|import|public|throws|case|enum|instanceof|return|transient|catch|extends|int|short|try|char|final|interface|static|void|class|finally|long|strictfp|volatile|const|float|native|super|while|var|null|exports|module|open|opens|provides|requires|to|transitive|uses|with)\\b/; // based on the java naming conventions\n\n  var className = /\\b[A-Z](?:\\w*[a-z]\\w*)?\\b/;\n  Prism.languages.java = Prism.languages.extend('clike', {\n    'class-name': [className, // variables and parameters\n    // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n    /\\b[A-Z]\\w*(?=\\s+\\w+\\s*[;,=())])/],\n    'keyword': keywords,\n    'function': [Prism.languages.clike.function, {\n      pattern: /(\\:\\:)[a-z_]\\w*/,\n      lookbehind: true\n    }],\n    'number': /\\b0b[01][01_]*L?\\b|\\b0x[\\da-f_]*\\.?[\\da-f_p+-]+\\b|(?:\\b\\d[\\d_]*\\.?[\\d_]*|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n    'operator': {\n      pattern: /(^|[^.])(?:<<=?|>>>?=?|->|([-+&|])\\2|[?:~]|[-+*/%&|^!=<>]=?)/m,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('java', 'class-name', {\n    'annotation': {\n      alias: 'punctuation',\n      pattern: /(^|[^.])@\\w+/,\n      lookbehind: true\n    },\n    'namespace': {\n      pattern: /(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)[a-z]\\w*(\\.[a-z]\\w*)+/,\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\./\n      }\n    },\n    'generics': {\n      pattern: /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,\n      inside: {\n        'class-name': className,\n        'keyword': keywords,\n        'punctuation': /[<>(),.:]/,\n        'operator': /[?&|]/\n      }\n    }\n  });\n})(Prism);\n\nPrism.languages.scala = Prism.languages.extend('java', {\n  'keyword': /<-|=>|\\b(?:abstract|case|catch|class|def|do|else|extends|final|finally|for|forSome|if|implicit|import|lazy|match|new|null|object|override|package|private|protected|return|sealed|self|super|this|throw|trait|try|type|val|var|while|with|yield)\\b/,\n  'string': [{\n    pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n    greedy: true\n  }, {\n    pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  }],\n  'builtin': /\\b(?:String|Int|Long|Short|Byte|Boolean|Double|Float|Char|Any|AnyRef|AnyVal|Unit|Nothing)\\b/,\n  'number': /\\b0x[\\da-f]*\\.?[\\da-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e\\d+)?[dfl]?/i,\n  'symbol': /'[^\\d\\s\\\\]\\w*/\n});\ndelete Prism.languages.scala['class-name'];\ndelete Prism.languages.scala['function'];\n/**\n * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n * Modified by Miles Johnson: http://milesj.me\n *\n * Supports the following:\n * \t\t- Extends clike syntax\n * \t\t- Support for PHP 5.3+ (namespaces, traits, generators, etc)\n * \t\t- Smarter constant and function matching\n *\n * Adds the following new token classes:\n * \t\tconstant, delimiter, variable, function, package\n */\n\n(function (Prism) {\n  Prism.languages.php = Prism.languages.extend('clike', {\n    'keyword': /\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,\n    'boolean': {\n      pattern: /\\b(?:false|true)\\b/i,\n      alias: 'constant'\n    },\n    'constant': [/\\b[A-Z_][A-Z0-9_]*\\b/, /\\b(?:null)\\b/i],\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('php', 'string', {\n    'shell-comment': {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: true,\n      alias: 'comment'\n    }\n  });\n  Prism.languages.insertBefore('php', 'comment', {\n    'delimiter': {\n      pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n      alias: 'important'\n    }\n  });\n  Prism.languages.insertBefore('php', 'keyword', {\n    'variable': /\\$+(?:\\w+\\b|(?={))/i,\n    'package': {\n      pattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\\\/\n      }\n    }\n  }); // Must be defined after the function pattern\n\n  Prism.languages.insertBefore('php', 'operator', {\n    'property': {\n      pattern: /(->)[\\w]+/,\n      lookbehind: true\n    }\n  });\n  var string_interpolation = {\n    pattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,\n    lookbehind: true,\n    inside: {\n      rest: Prism.languages.php\n    }\n  };\n  Prism.languages.insertBefore('php', 'string', {\n    'nowdoc-string': {\n      pattern: /<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'delimiter': {\n          pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            'punctuation': /^<<<'?|[';]$/\n          }\n        }\n      }\n    },\n    'heredoc-string': {\n      pattern: /<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'delimiter': {\n          pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            'punctuation': /^<<<\"?|[\";]$/\n          }\n        },\n        'interpolation': string_interpolation // See below\n\n      }\n    },\n    'single-quoted-string': {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true,\n      alias: 'string'\n    },\n    'double-quoted-string': {\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'interpolation': string_interpolation // See below\n\n      }\n    }\n  }); // The different types of PHP strings \"replace\" the C-like standard string\n\n  delete Prism.languages.php['string'];\n  Prism.hooks.add('before-tokenize', function (env) {\n    if (!/<\\?/.test(env.code)) {\n      return;\n    }\n\n    var phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#)(?:[^?\\n\\r]|\\?(?!>))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$))*?(?:\\?>|$)/ig;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php');\n  });\n})(Prism);\n\nPrism.languages.javastacktrace = {\n  // java.sql.SQLException: Violation of unique constraint MY_ENTITY_UK_1: duplicate value(s) for column(s) MY_COLUMN in statement [...]\n  // Caused by: java.sql.SQLException: Violation of unique constraint MY_ENTITY_UK_1: duplicate value(s) for column(s) MY_COLUMN in statement [...]\n  // Caused by: com.example.myproject.MyProjectServletException\n  // Caused by: MidLevelException: LowLevelException\n  // Suppressed: Resource$CloseFailException: Resource ID = 0\n  'summary': {\n    pattern: /^[\\t ]*(?:(?:Caused by:|Suppressed:|Exception in thread \"[^\"]*\")[\\t ]+)?[\\w$.]+(?:\\:.*)?$/m,\n    inside: {\n      'keyword': {\n        pattern: /^(\\s*)(?:(?:Caused by|Suppressed)(?=:)|Exception in thread)/m,\n        lookbehind: true\n      },\n      // the current thread if the summary starts with 'Exception in thread'\n      'string': {\n        pattern: /^(\\s*)\"[^\"]*\"/,\n        lookbehind: true\n      },\n      'exceptions': {\n        pattern: /^(:?\\s*)[\\w$.]+(?=:|$)/,\n        lookbehind: true,\n        inside: {\n          'class-name': /[\\w$]+(?=$|:)/,\n          'namespace': /[a-z]\\w*/,\n          'punctuation': /[.:]/\n        }\n      },\n      'message': {\n        pattern: /(:\\s*)\\S.*/,\n        lookbehind: true,\n        alias: 'string'\n      },\n      'punctuation': /[:]/\n    }\n  },\n  // at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1166)\n  // at org.hsqldb.jdbc.Util.throwError(Unknown Source) here could be some notes\n  // at Util.<init>(Unknown Source)\n  'stack-frame': {\n    pattern: /^[\\t ]*at [\\w$.]+(?:<init>)?\\([^()]*\\)/m,\n    inside: {\n      'keyword': {\n        pattern: /^(\\s*)at/,\n        lookbehind: true\n      },\n      'source': [// (Main.java:15)\n      // (Main.scala:15)\n      {\n        pattern: /(\\()\\w+.\\w+:\\d+(?=\\))/,\n        lookbehind: true,\n        inside: {\n          'file': /^\\w+\\.\\w+/,\n          'punctuation': /:/,\n          'line-number': {\n            pattern: /\\d+/,\n            alias: 'number'\n          }\n        }\n      }, // (Unknown Source)\n      // (Native Method)\n      // (...something...)\n      {\n        pattern: /(\\()[^()]*(?=\\))/,\n        lookbehind: true,\n        inside: {\n          'keyword': /^(?:Unknown Source|Native Method)$/\n        }\n      }],\n      'class-name': /[\\w$]+(?=\\.(?:<init>|[\\w$]+)\\()/,\n      'function': /(?:<init>|[\\w$]+)(?=\\()/,\n      'namespace': /[a-z]\\w*/,\n      'punctuation': /[.()]/\n    }\n  },\n  // ... 32 more\n  // ... 32 common frames omitted\n  'more': {\n    pattern: /^[\\t ]*\\.{3} \\d+ [a-z]+(?: [a-z]+)*/m,\n    inside: {\n      'punctuation': /\\.{3}/,\n      'number': /\\d+/,\n      'keyword': /\\b[a-z]+(?: [a-z]+)*\\b/\n    }\n  }\n};\nPrism.languages.jolie = Prism.languages.extend('clike', {\n  'keyword': /\\b(?:include|define|is_defined|undef|main|init|outputPort|inputPort|Location|Protocol|Interfaces|RequestResponse|OneWay|type|interface|extender|throws|cset|csets|forward|Aggregates|Redirects|embedded|courier|execution|sequential|concurrent|single|scope|install|throw|comp|cH|default|global|linkIn|linkOut|synchronized|this|new|for|if|else|while|in|Jolie|Java|Javascript|nullProcess|spawn|constants|with|provide|until|exit|foreach|instanceof|over|service)\\b/,\n  'builtin': /\\b(?:undefined|string|int|void|long|Byte|bool|double|float|char|any)\\b/,\n  'number': /(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?l?/i,\n  'operator': /-[-=>]?|\\+[+=]?|<[<=]?|[>=*!]=?|&&|\\|\\||[:?\\/%^]/,\n  'symbol': /[|;@]/,\n  'punctuation': /[,.]/,\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  }\n});\ndelete Prism.languages.jolie['class-name'];\nPrism.languages.insertBefore('jolie', 'keyword', {\n  'function': {\n    pattern: /((?:\\b(?:outputPort|inputPort|in|service|courier)\\b|@)\\s*)\\w+/,\n    lookbehind: true\n  },\n  'aggregates': {\n    pattern: /(\\bAggregates\\s*:\\s*)(?:\\w+(?:\\s+with\\s+\\w+)?\\s*,\\s*)*\\w+(?:\\s+with\\s+\\w+)?/,\n    lookbehind: true,\n    inside: {\n      'withExtension': {\n        pattern: /\\bwith\\s+\\w+/,\n        inside: {\n          'keyword': /\\bwith\\b/\n        }\n      },\n      'function': {\n        pattern: /\\w+/\n      },\n      'punctuation': {\n        pattern: /,/\n      }\n    }\n  },\n  'redirects': {\n    pattern: /(\\bRedirects\\s*:\\s*)(?:\\w+\\s*=>\\s*\\w+\\s*,\\s*)*(?:\\w+\\s*=>\\s*\\w+)/,\n    lookbehind: true,\n    inside: {\n      'punctuation': {\n        pattern: /,/\n      },\n      'function': {\n        pattern: /\\w+/\n      },\n      'symbol': {\n        pattern: /=>/\n      }\n    }\n  }\n});\n\n(function (Prism) {\n  var javaDocLike = Prism.languages.javadoclike = {\n    'parameter': {\n      pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,\n      lookbehind: true\n    },\n    'keyword': {\n      // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n      // @word, {@word}\n      pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n      lookbehind: true\n    },\n    'punctuation': /[{}]/\n  };\n  /**\n   * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n   *\n   * @param {string} lang the language add doc comment support to.\n   * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n   */\n\n  function docCommentSupport(lang, callback) {\n    var tokenName = 'doc-comment';\n    var grammar = Prism.languages[lang];\n\n    if (!grammar) {\n      return;\n    }\n\n    var token = grammar[tokenName];\n\n    if (!token) {\n      // add doc comment: /** */\n      var definition = {};\n      definition[tokenName] = {\n        pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n        alias: 'comment'\n      };\n      grammar = Prism.languages.insertBefore(lang, 'comment', definition);\n      token = grammar[tokenName];\n    }\n\n    if (token instanceof RegExp) {\n      // convert regex to object\n      token = grammar[tokenName] = {\n        pattern: token\n      };\n    }\n\n    if (Array.isArray(token)) {\n      for (var i = 0, l = token.length; i < l; i++) {\n        if (token[i] instanceof RegExp) {\n          token[i] = {\n            pattern: token[i]\n          };\n        }\n\n        callback(token[i]);\n      }\n    } else {\n      callback(token);\n    }\n  }\n  /**\n   * Adds doc-comment support to the given languages for the given documentation language.\n   *\n   * @param {string[]|string} languages\n   * @param {Object} docLanguage\n   */\n\n\n  function addSupport(languages, docLanguage) {\n    if (typeof languages === 'string') {\n      languages = [languages];\n    }\n\n    languages.forEach(function (lang) {\n      docCommentSupport(lang, function (pattern) {\n        if (!pattern.inside) {\n          pattern.inside = {};\n        }\n\n        pattern.inside.rest = docLanguage;\n      });\n    });\n  }\n\n  Object.defineProperty(javaDocLike, 'addSupport', {\n    value: addSupport\n  });\n  javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike);\n})(Prism);\n\nPrism.languages.n4js = Prism.languages.extend('javascript', {\n  // Keywords from N4JS language spec: https://numberfour.github.io/n4js/spec/N4JSSpec.html\n  'keyword': /\\b(?:any|Array|boolean|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|false|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|module|new|null|number|package|private|protected|public|return|set|static|string|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)\\b/\n});\nPrism.languages.insertBefore('n4js', 'constant', {\n  // Annotations in N4JS spec: https://numberfour.github.io/n4js/spec/N4JSSpec.html#_annotations\n  'annotation': {\n    pattern: /@+\\w+/,\n    alias: 'operator'\n  }\n});\nPrism.languages.n4jsd = Prism.languages.n4js;\nPrism.languages.json = {\n  'comment': /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n  'property': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n    greedy: true\n  },\n  'string': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n    greedy: true\n  },\n  'number': /-?\\d+\\.?\\d*(e[+-]?\\d+)?/i,\n  'punctuation': /[{}[\\],]/,\n  'operator': /:/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  }\n};\nPrism.languages.jsonp = Prism.languages.extend('json', {\n  'punctuation': /[{}[\\]();,.]/\n});\nPrism.languages.insertBefore('jsonp', 'punctuation', {\n  'function': /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*\\()/\n});\n\n(function (Prism) {\n  var string = /(\"|')(?:\\\\(?:\\r\\n?|\\n|.)|(?!\\1)[^\\\\\\r\\n])*\\1/;\n  Prism.languages.json5 = Prism.languages.extend('json', {\n    'property': [{\n      pattern: RegExp(string.source + '(?=\\\\s*:)'),\n      greedy: true\n    }, {\n      pattern: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*:)/,\n      alias: 'unquoted'\n    }],\n    'string': {\n      pattern: string,\n      greedy: true\n    },\n    'number': /[+-]?(?:NaN|Infinity|0x[a-fA-F\\d]+|(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?)/\n  });\n})(Prism);\n\nPrism.languages.julia = {\n  'comment': {\n    pattern: /(^|[^\\\\])#.*/,\n    lookbehind: true\n  },\n  'string': /(\"\"\"|''')[\\s\\S]+?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2/,\n  'keyword': /\\b(?:abstract|baremodule|begin|bitstype|break|catch|ccall|const|continue|do|else|elseif|end|export|finally|for|function|global|if|immutable|import|importall|let|local|macro|module|print|println|quote|return|try|type|typealias|using|while)\\b/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'number': /(?:\\b(?=\\d)|\\B(?=\\.))(?:0[box])?(?:[\\da-f]+\\.?\\d*|\\.\\d+)(?:[efp][+-]?\\d+)?j?/i,\n  'operator': /[-+*^%÷&$\\\\]=?|\\/[\\/=]?|!=?=?|\\|[=>]?|<(?:<=?|[=:])?|>(?:=|>>?=?)?|==?=?|[~≠≤≥]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\nPrism.languages.keyman = {\n  'comment': /\\bc\\s.*/i,\n  'function': /\\[\\s*(?:(?:CTRL|SHIFT|ALT|LCTRL|RCTRL|LALT|RALT|CAPS|NCAPS)\\s+)*(?:[TKU]_[\\w?]+|\".+?\"|'.+?')\\s*\\]/i,\n  // virtual key\n  'string': /(\"|').*?\\1/,\n  'bold': [// header statements, system stores and variable system stores\n  /&(?:baselayout|bitmap|capsononly|capsalwaysoff|shiftfreescaps|copyright|ethnologuecode|hotkey|includecodes|keyboardversion|kmw_embedcss|kmw_embedjs|kmw_helpfile|kmw_helptext|kmw_rtl|language|layer|layoutfile|message|mnemoniclayout|name|oldcharposmatching|platform|targets|version|visualkeyboard|windowslanguages)\\b/i, /\\b(?:bitmap|bitmaps|caps on only|caps always off|shift frees caps|copyright|hotkey|language|layout|message|name|version)\\b/i],\n  'keyword': /\\b(?:any|baselayout|beep|call|context|deadkey|dk|if|index|layer|notany|nul|outs|platform|return|reset|save|set|store|use)\\b/i,\n  // rule keywords\n  'atrule': /\\b(?:ansi|begin|unicode|group|using keys|match|nomatch)\\b/i,\n  // structural keywords\n  'number': /\\b(?:U\\+[\\dA-F]+|d\\d+|x[\\da-f]+|\\d+)\\b/i,\n  // U+####, x###, d### characters and numbers\n  'operator': /[+>\\\\,()]/,\n  'tag': /\\$(?:keyman|kmfl|weaver|keymanweb|keymanonly):/i // prefixes\n\n};\n\n(function (Prism) {\n  Prism.languages.kotlin = Prism.languages.extend('clike', {\n    'keyword': {\n      // The lookbehind prevents wrong highlighting of e.g. kotlin.properties.get\n      pattern: /(^|[^.])\\b(?:abstract|actual|annotation|as|break|by|catch|class|companion|const|constructor|continue|crossinline|data|do|dynamic|else|enum|expect|external|final|finally|for|fun|get|if|import|in|infix|init|inline|inner|interface|internal|is|lateinit|noinline|null|object|open|operator|out|override|package|private|protected|public|reified|return|sealed|set|super|suspend|tailrec|this|throw|to|try|typealias|val|var|vararg|when|where|while)\\b/,\n      lookbehind: true\n    },\n    'function': [/\\w+(?=\\s*\\()/, {\n      pattern: /(\\.)\\w+(?=\\s*\\{)/,\n      lookbehind: true\n    }],\n    'number': /\\b(?:0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*|0[bB][01]+(?:_[01]+)*|\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?[fFL]?)\\b/,\n    'operator': /\\+[+=]?|-[-=>]?|==?=?|!(?:!|==?)?|[\\/*%<>]=?|[?:]:?|\\.\\.|&&|\\|\\||\\b(?:and|inv|or|shl|shr|ushr|xor)\\b/\n  });\n  delete Prism.languages.kotlin[\"class-name\"];\n  Prism.languages.insertBefore('kotlin', 'string', {\n    'raw-string': {\n      pattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\n      alias: 'string' // See interpolation below\n\n    }\n  });\n  Prism.languages.insertBefore('kotlin', 'keyword', {\n    'annotation': {\n      pattern: /\\B@(?:\\w+:)?(?:[A-Z]\\w*|\\[[^\\]]+\\])/,\n      alias: 'builtin'\n    }\n  });\n  Prism.languages.insertBefore('kotlin', 'function', {\n    'label': {\n      pattern: /\\w+@|@\\w+/,\n      alias: 'symbol'\n    }\n  });\n  var interpolation = [{\n    pattern: /\\$\\{[^}]+\\}/,\n    inside: {\n      delimiter: {\n        pattern: /^\\$\\{|\\}$/,\n        alias: 'variable'\n      },\n      rest: Prism.languages.kotlin\n    }\n  }, {\n    pattern: /\\$\\w+/,\n    alias: 'variable'\n  }];\n  Prism.languages.kotlin['string'].inside = Prism.languages.kotlin['raw-string'].inside = {\n    interpolation: interpolation\n  };\n})(Prism);\n\n(function (Prism) {\n  var funcPattern = /\\\\(?:[^a-z()[\\]]|[a-z*]+)/i,\n      insideEqu = {\n    'equation-command': {\n      pattern: funcPattern,\n      alias: 'regex'\n    }\n  };\n  Prism.languages.latex = {\n    'comment': /%.*/m,\n    // the verbatim environment prints whitespace to the document\n    'cdata': {\n      pattern: /(\\\\begin\\{((?:verbatim|lstlisting)\\*?)\\})[\\s\\S]*?(?=\\\\end\\{\\2\\})/,\n      lookbehind: true\n    },\n\n    /*\n     * equations can be between $ $ or \\( \\) or \\[ \\]\n     * (all are multiline)\n     */\n    'equation': [{\n      pattern: /\\$(?:\\\\[\\s\\S]|[^\\\\$])*\\$|\\\\\\([\\s\\S]*?\\\\\\)|\\\\\\[[\\s\\S]*?\\\\\\]/,\n      inside: insideEqu,\n      alias: 'string'\n    }, {\n      pattern: /(\\\\begin\\{((?:equation|math|eqnarray|align|multline|gather)\\*?)\\})[\\s\\S]*?(?=\\\\end\\{\\2\\})/,\n      lookbehind: true,\n      inside: insideEqu,\n      alias: 'string'\n    }],\n\n    /*\n     * arguments which are keywords or references are highlighted\n     * as keywords\n     */\n    'keyword': {\n      pattern: /(\\\\(?:begin|end|ref|cite|label|usepackage|documentclass)(?:\\[[^\\]]+\\])?\\{)[^}]+(?=\\})/,\n      lookbehind: true\n    },\n    'url': {\n      pattern: /(\\\\url\\{)[^}]+(?=\\})/,\n      lookbehind: true\n    },\n\n    /*\n     * section or chapter headlines are highlighted as bold so that\n     * they stand out more\n     */\n    'headline': {\n      pattern: /(\\\\(?:part|chapter|section|subsection|frametitle|subsubsection|paragraph|subparagraph|subsubparagraph|subsubsubparagraph)\\*?(?:\\[[^\\]]+\\])?\\{)[^}]+(?=\\}(?:\\[[^\\]]+\\])?)/,\n      lookbehind: true,\n      alias: 'class-name'\n    },\n    'function': {\n      pattern: funcPattern,\n      alias: 'selector'\n    },\n    'punctuation': /[[\\]{}&]/\n  };\n})(Prism);\n\nPrism.languages.markdown = Prism.languages.extend('markup', {});\nPrism.languages.insertBefore('markdown', 'prolog', {\n  'blockquote': {\n    // > ...\n    pattern: /^>(?:[\\t ]*>)*/m,\n    alias: 'punctuation'\n  },\n  'code': [{\n    // Prefixed by 4 spaces or 1 tab\n    pattern: /^(?: {4}|\\t).+/m,\n    alias: 'keyword'\n  }, {\n    // `code`\n    // ``code``\n    pattern: /``.+?``|`[^`\\n]+`/,\n    alias: 'keyword'\n  }, {\n    // ```optional language\n    // code block\n    // ```\n    pattern: /^```[\\s\\S]*?^```$/m,\n    greedy: true,\n    inside: {\n      'code-block': {\n        pattern: /^(```.*(?:\\r?\\n|\\r))[\\s\\S]+?(?=(?:\\r?\\n|\\r)^```$)/m,\n        lookbehind: true\n      },\n      'code-language': {\n        pattern: /^(```).+/,\n        lookbehind: true\n      },\n      'punctuation': /```/\n    }\n  }],\n  'title': [{\n    // title 1\n    // =======\n    // title 2\n    // -------\n    pattern: /\\S.*(?:\\r?\\n|\\r)(?:==+|--+)/,\n    alias: 'important',\n    inside: {\n      punctuation: /==+$|--+$/\n    }\n  }, {\n    // # title 1\n    // ###### title 6\n    pattern: /(^\\s*)#+.+/m,\n    lookbehind: true,\n    alias: 'important',\n    inside: {\n      punctuation: /^#+|#+$/\n    }\n  }],\n  'hr': {\n    // ***\n    // ---\n    // * * *\n    // -----------\n    pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n    lookbehind: true,\n    alias: 'punctuation'\n  },\n  'list': {\n    // * item\n    // + item\n    // - item\n    // 1. item\n    pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n    lookbehind: true,\n    alias: 'punctuation'\n  },\n  'url-reference': {\n    // [id]: http://example.com \"Optional title\"\n    // [id]: http://example.com 'Optional title'\n    // [id]: http://example.com (Optional title)\n    // [id]: <http://example.com> \"Optional title\"\n    pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n    inside: {\n      'variable': {\n        pattern: /^(!?\\[)[^\\]]+/,\n        lookbehind: true\n      },\n      'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n      'punctuation': /^[\\[\\]!:]|[<>]/\n    },\n    alias: 'url'\n  },\n  'bold': {\n    // **strong**\n    // __strong__\n    // Allow only one line break\n    pattern: /(^|[^\\\\])(\\*\\*|__)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      'punctuation': /^\\*\\*|^__|\\*\\*$|__$/\n    }\n  },\n  'italic': {\n    // *em*\n    // _em_\n    // Allow only one line break\n    pattern: /(^|[^\\\\])([*_])(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      'punctuation': /^[*_]|[*_]$/\n    }\n  },\n  'strike': {\n    // ~~strike through~~\n    // ~strike~\n    // Allow only one line break\n    pattern: /(^|[^\\\\])(~~?)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      'punctuation': /^~~?|~~?$/\n    }\n  },\n  'url': {\n    // [example](http://example.com \"Optional title\")\n    // [example] [id]\n    pattern: /!?\\[[^\\]]+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[[^\\]\\n]*\\])/,\n    inside: {\n      'variable': {\n        pattern: /(!?\\[)[^\\]]+(?=\\]$)/,\n        lookbehind: true\n      },\n      'string': {\n        pattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\n      }\n    }\n  }\n});\n['bold', 'italic', 'strike'].forEach(function (token) {\n  ['url', 'bold', 'italic', 'strike'].forEach(function (inside) {\n    if (token !== inside) {\n      Prism.languages.markdown[token].inside[inside] = Prism.languages.markdown[inside];\n    }\n  });\n});\nPrism.hooks.add('after-tokenize', function (env) {\n  if (env.language !== 'markdown' && env.language !== 'md') {\n    return;\n  }\n\n  function walkTokens(tokens) {\n    if (!tokens || typeof tokens === 'string') {\n      return;\n    }\n\n    for (var i = 0, l = tokens.length; i < l; i++) {\n      var token = tokens[i];\n\n      if (token.type !== 'code') {\n        walkTokens(token.content);\n        continue;\n      }\n\n      var codeLang = token.content[1];\n      var codeBlock = token.content[3];\n\n      if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {\n        // this might be a language that Prism does not support\n        var alias = 'language-' + codeLang.content.trim().split(/\\s+/)[0].toLowerCase(); // add alias\n\n        if (!codeBlock.alias) {\n          codeBlock.alias = [alias];\n        } else if (typeof codeBlock.alias === 'string') {\n          codeBlock.alias = [codeBlock.alias, alias];\n        } else {\n          codeBlock.alias.push(alias);\n        }\n      }\n    }\n  }\n\n  walkTokens(env.tokens);\n});\nPrism.hooks.add('wrap', function (env) {\n  if (env.type !== 'code-block') {\n    return;\n  }\n\n  var codeLang = '';\n\n  for (var i = 0, l = env.classes.length; i < l; i++) {\n    var cls = env.classes[i];\n    var match = /language-(.+)/.exec(cls);\n\n    if (match) {\n      codeLang = match[1];\n      break;\n    }\n  }\n\n  var grammar = Prism.languages[codeLang];\n\n  if (!grammar) {\n    return;\n  } // reverse Prism.util.encode\n\n\n  var code = env.content.replace(/&lt;/g, '<').replace(/&amp;/g, '&');\n  env.content = Prism.highlight(code, grammar, codeLang);\n});\nPrism.languages.md = Prism.languages.markdown;\nPrism.languages.liquid = {\n  'keyword': /\\b(?:comment|endcomment|if|elsif|else|endif|unless|endunless|for|endfor|case|endcase|when|in|break|assign|continue|limit|offset|range|reversed|raw|endraw|capture|endcapture|tablerow|endtablerow)\\b/,\n  'number': /\\b0b[01]+\\b|\\b0x[\\da-f]*\\.?[\\da-fp-]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?[df]?/i,\n  'operator': {\n    pattern: /(^|[^.])(?:\\+[+=]?|-[-=]?|!=?|<<?=?|>>?>?=?|==?|&[&=]?|\\|[|=]?|\\*=?|\\/=?|%=?|\\^=?|[?:~])/m,\n    lookbehind: true\n  },\n  'function': {\n    pattern: /(^|[\\s;|&])(?:append|prepend|capitalize|cycle|cols|increment|decrement|abs|at_least|at_most|ceil|compact|concat|date|default|divided_by|downcase|escape|escape_once|first|floor|join|last|lstrip|map|minus|modulo|newline_to_br|plus|remove|remove_first|replace|replace_first|reverse|round|rstrip|size|slice|sort|sort_natural|split|strip|strip_html|strip_newlines|times|truncate|truncatewords|uniq|upcase|url_decode|url_encode|include|paginate)(?=$|[\\s;|&])/,\n    lookbehind: true\n  }\n};\n\n(function (Prism) {\n  // Functions to construct regular expressions\n  // simple form\n  // e.g. (interactive ... or (interactive)\n  function simple_form(name) {\n    return RegExp('(\\\\()' + name + '(?=[\\\\s\\\\)])');\n  } // booleans and numbers\n\n\n  function primitive(pattern) {\n    return RegExp('([\\\\s([])' + pattern + '(?=[\\\\s)])');\n  } // Patterns in regular expressions\n  // Symbol name. See https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Type.html\n  // & and : are excluded as they are usually used for special purposes\n\n\n  var symbol = '[-+*/_~!@$%^=<>{}\\\\w]+'; // symbol starting with & used in function arguments\n\n  var marker = '&' + symbol; // Open parenthesis for look-behind\n\n  var par = '(\\\\()';\n  var endpar = '(?=\\\\))'; // End the pattern with look-ahead space\n\n  var space = '(?=\\\\s)';\n  var language = {\n    // Three or four semicolons are considered a heading.\n    // See https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html\n    heading: {\n      pattern: /;;;.*/,\n      alias: ['comment', 'title']\n    },\n    comment: /;.*/,\n    string: {\n      pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n      greedy: true,\n      inside: {\n        argument: /[-A-Z]+(?=[.,\\s])/,\n        symbol: RegExp('`' + symbol + \"'\")\n      }\n    },\n    'quoted-symbol': {\n      pattern: RegExp(\"#?'\" + symbol),\n      alias: ['variable', 'symbol']\n    },\n    'lisp-property': {\n      pattern: RegExp(':' + symbol),\n      alias: 'property'\n    },\n    splice: {\n      pattern: RegExp(',@?' + symbol),\n      alias: ['symbol', 'variable']\n    },\n    keyword: [{\n      pattern: RegExp(par + '(?:(?:lexical-)?let\\\\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)' + space),\n      lookbehind: true\n    }, {\n      pattern: RegExp(par + '(?:for|do|collect|return|finally|append|concat|in|by)' + space),\n      lookbehind: true\n    }],\n    declare: {\n      pattern: simple_form('declare'),\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    interactive: {\n      pattern: simple_form('interactive'),\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    boolean: {\n      pattern: primitive('(?:t|nil)'),\n      lookbehind: true\n    },\n    number: {\n      pattern: primitive('[-+]?\\\\d+(?:\\\\.\\\\d*)?'),\n      lookbehind: true\n    },\n    defvar: {\n      pattern: RegExp(par + 'def(?:var|const|custom|group)\\\\s+' + symbol),\n      lookbehind: true,\n      inside: {\n        keyword: /^def[a-z]+/,\n        variable: RegExp(symbol)\n      }\n    },\n    defun: {\n      pattern: RegExp(par + '(?:cl-)?(?:defun\\\\*?|defmacro)\\\\s+' + symbol + '\\\\s+\\\\([\\\\s\\\\S]*?\\\\)'),\n      lookbehind: true,\n      inside: {\n        keyword: /^(?:cl-)?def\\S+/,\n        // See below, this property needs to be defined later so that it can\n        // reference the language object.\n        arguments: null,\n        function: {\n          pattern: RegExp('(^\\\\s)' + symbol),\n          lookbehind: true\n        },\n        punctuation: /[()]/\n      }\n    },\n    lambda: {\n      pattern: RegExp(par + 'lambda\\\\s+\\\\((?:&?' + symbol + '\\\\s*)*\\\\)'),\n      lookbehind: true,\n      inside: {\n        keyword: /^lambda/,\n        // See below, this property needs to be defined later so that it can\n        // reference the language object.\n        arguments: null,\n        punctuation: /[()]/\n      }\n    },\n    car: {\n      pattern: RegExp(par + symbol),\n      lookbehind: true\n    },\n    punctuation: [// open paren, brackets, and close paren\n    /(['`,]?\\(|[)\\[\\]])/, // cons\n    {\n      pattern: /(\\s)\\.(?=\\s)/,\n      lookbehind: true\n    }]\n  };\n  var arg = {\n    'lisp-marker': RegExp(marker),\n    rest: {\n      argument: {\n        pattern: RegExp(symbol),\n        alias: 'variable'\n      },\n      varform: {\n        pattern: RegExp(par + symbol + '\\\\s+\\\\S[\\\\s\\\\S]*' + endpar),\n        lookbehind: true,\n        inside: {\n          string: language.string,\n          boolean: language.boolean,\n          number: language.number,\n          symbol: language.symbol,\n          punctuation: /[()]/\n        }\n      }\n    }\n  };\n  var forms = '\\\\S+(?:\\\\s+\\\\S+)*';\n  var arglist = {\n    pattern: RegExp(par + '[\\\\s\\\\S]*' + endpar),\n    lookbehind: true,\n    inside: {\n      'rest-vars': {\n        pattern: RegExp('&(?:rest|body)\\\\s+' + forms),\n        inside: arg\n      },\n      'other-marker-vars': {\n        pattern: RegExp('&(?:optional|aux)\\\\s+' + forms),\n        inside: arg\n      },\n      keys: {\n        pattern: RegExp('&key\\\\s+' + forms + '(?:\\\\s+&allow-other-keys)?'),\n        inside: arg\n      },\n      argument: {\n        pattern: RegExp(symbol),\n        alias: 'variable'\n      },\n      punctuation: /[()]/\n    }\n  };\n  language['lambda'].inside.arguments = arglist;\n  language['defun'].inside.arguments = Prism.util.clone(arglist);\n  language['defun'].inside.arguments.inside.sublist = arglist;\n  Prism.languages.lisp = language;\n  Prism.languages.elisp = language;\n  Prism.languages.emacs = language;\n  Prism.languages['emacs-lisp'] = language;\n})(Prism);\n\nPrism.languages.livescript = {\n  'comment': [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^\\\\])#.*/,\n    lookbehind: true\n  }],\n  'interpolated-string': {\n    /* Look-behind and look-ahead prevents wrong behavior of the greedy pattern\n    * forcing it to match \"\"\"-quoted string when it would otherwise match \"-quoted first. */\n    pattern: /(^|[^\"])(\"\"\"|\")(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2(?!\")/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      'variable': {\n        pattern: /(^|[^\\\\])#[a-z_](?:-?[a-z]|[\\d_])*/m,\n        lookbehind: true\n      },\n      'interpolation': {\n        pattern: /(^|[^\\\\])#\\{[^}]+\\}/m,\n        lookbehind: true,\n        inside: {\n          'interpolation-punctuation': {\n            pattern: /^#\\{|\\}$/,\n            alias: 'variable' // See rest below\n\n          }\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  },\n  'string': [{\n    pattern: /('''|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n    greedy: true\n  }, {\n    pattern: /<\\[[\\s\\S]*?\\]>/,\n    greedy: true\n  }, /\\\\[^\\s,;\\])}]+/],\n  'regex': [{\n    pattern: /\\/\\/(\\[.+?]|\\\\.|(?!\\/\\/)[^\\\\])+\\/\\/[gimyu]{0,5}/,\n    greedy: true,\n    inside: {\n      'comment': {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: true\n      }\n    }\n  }, {\n    pattern: /\\/(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gimyu]{0,5}/,\n    greedy: true\n  }],\n  'keyword': {\n    pattern: /(^|(?!-).)\\b(?:break|case|catch|class|const|continue|default|do|else|extends|fallthrough|finally|for(?: ever)?|function|if|implements|it|let|loop|new|null|otherwise|own|return|super|switch|that|then|this|throw|try|unless|until|var|void|when|while|yield)(?!-)\\b/m,\n    lookbehind: true\n  },\n  'keyword-operator': {\n    pattern: /(^|[^-])\\b(?:(?:delete|require|typeof)!|(?:and|by|delete|export|from|import(?: all)?|in|instanceof|is(?:nt| not)?|not|of|or|til|to|typeof|with|xor)(?!-)\\b)/m,\n    lookbehind: true,\n    alias: 'operator'\n  },\n  'boolean': {\n    pattern: /(^|[^-])\\b(?:false|no|off|on|true|yes)(?!-)\\b/m,\n    lookbehind: true\n  },\n  'argument': {\n    // Don't match .&. nor &&\n    pattern: /(^|(?!\\.&\\.)[^&])&(?!&)\\d*/m,\n    lookbehind: true,\n    alias: 'variable'\n  },\n  'number': /\\b(?:\\d+~[\\da-z]+|\\d[\\d_]*(?:\\.\\d[\\d_]*)?(?:[a-z]\\w*)?)/i,\n  'identifier': /[a-z_](?:-?[a-z]|[\\d_])*/i,\n  'operator': [// Spaced .\n  {\n    pattern: /( )\\.(?= )/,\n    lookbehind: true\n  }, // Full list, in order:\n  // .= .~ .. ...\n  // .&. .^. .<<. .>>. .>>>.\n  // := :: ::=\n  // &&\n  // || |>\n  // < << <<< <<<<\n  // <- <-- <-! <--!\n  // <~ <~~ <~! <~~!\n  // <| <= <?\n  // > >> >= >?\n  // - -- -> -->\n  // + ++\n  // @ @@\n  // % %%\n  // * **\n  // ! != !~=\n  // !~> !~~>\n  // !-> !-->\n  // ~ ~> ~~> ~=\n  // = ==\n  // ^ ^^\n  // / ?\n  /\\.(?:[=~]|\\.\\.?)|\\.(?:[&|^]|<<|>>>?)\\.|:(?:=|:=?)|&&|\\|[|>]|<(?:<<?<?|--?!?|~~?!?|[|=?])?|>[>=?]?|-(?:->?|>)?|\\+\\+?|@@?|%%?|\\*\\*?|!(?:~?=|--?>|~?~>)?|~(?:~?>|=)?|==?|\\^\\^?|[\\/?]/],\n  'punctuation': /[(){}\\[\\]|.,:;`]/\n};\nPrism.languages.livescript['interpolated-string'].inside['interpolation'].inside.rest = Prism.languages.livescript;\nPrism.languages.lolcode = {\n  'comment': [/\\bOBTW\\s+[\\s\\S]*?\\s+TLDR\\b/, /\\bBTW.+/],\n  'string': {\n    pattern: /\"(?::.|[^\"])*\"/,\n    inside: {\n      'variable': /:\\{[^}]+\\}/,\n      'symbol': [/:\\([a-f\\d]+\\)/i, /:\\[[^\\]]+\\]/, /:[)>o\":]/]\n    },\n    greedy: true\n  },\n  'number': /(?:\\B-)?(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)/,\n  'symbol': {\n    pattern: /(^|\\s)(?:A )?(?:YARN|NUMBR|NUMBAR|TROOF|BUKKIT|NOOB)(?=\\s|,|$)/,\n    lookbehind: true,\n    inside: {\n      'keyword': /A(?=\\s)/\n    }\n  },\n  'label': {\n    pattern: /((?:^|\\s)(?:IM IN YR|IM OUTTA YR) )[a-zA-Z]\\w*/,\n    lookbehind: true,\n    alias: 'string'\n  },\n  'function': {\n    pattern: /((?:^|\\s)(?:I IZ|HOW IZ I|IZ) )[a-zA-Z]\\w*/,\n    lookbehind: true\n  },\n  'keyword': [{\n    pattern: /(^|\\s)(?:O HAI IM|KTHX|HAI|KTHXBYE|I HAS A|ITZ(?: A)?|R|AN|MKAY|SMOOSH|MAEK|IS NOW(?: A)?|VISIBLE|GIMMEH|O RLY\\?|YA RLY|NO WAI|OIC|MEBBE|WTF\\?|OMG|OMGWTF|GTFO|IM IN YR|IM OUTTA YR|FOUND YR|YR|TIL|WILE|UPPIN|NERFIN|I IZ|HOW IZ I|IF U SAY SO|SRS|HAS A|LIEK(?: A)?|IZ)(?=\\s|,|$)/,\n    lookbehind: true\n  }, /'Z(?=\\s|,|$)/],\n  'boolean': {\n    pattern: /(^|\\s)(?:WIN|FAIL)(?=\\s|,|$)/,\n    lookbehind: true\n  },\n  'variable': {\n    pattern: /(^|\\s)IT(?=\\s|,|$)/,\n    lookbehind: true\n  },\n  'operator': {\n    pattern: /(^|\\s)(?:NOT|BOTH SAEM|DIFFRINT|(?:SUM|DIFF|PRODUKT|QUOSHUNT|MOD|BIGGR|SMALLR|BOTH|EITHER|WON|ALL|ANY) OF)(?=\\s|,|$)/,\n    lookbehind: true\n  },\n  'punctuation': /\\.{3}|…|,|!/\n};\nPrism.languages.lua = {\n  'comment': /^#!.+|--(?:\\[(=*)\\[[\\s\\S]*?\\]\\1\\]|.*)/m,\n  // \\z may be used to skip the following space\n  'string': {\n    pattern: /([\"'])(?:(?!\\1)[^\\\\\\r\\n]|\\\\z(?:\\r\\n|\\s)|\\\\(?:\\r\\n|[\\s\\S]))*\\1|\\[(=*)\\[[\\s\\S]*?\\]\\2\\]/,\n    greedy: true\n  },\n  'number': /\\b0x[a-f\\d]+\\.?[a-f\\d]*(?:p[+-]?\\d+)?\\b|\\b\\d+(?:\\.\\B|\\.?\\d*(?:e[+-]?\\d+)?\\b)|\\B\\.\\d+(?:e[+-]?\\d+)?\\b/i,\n  'keyword': /\\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\\b/,\n  'function': /(?!\\d)\\w+(?=\\s*(?:[({]))/,\n  'operator': [/[-+*%^&|#]|\\/\\/?|<[<=]?|>[>=]?|[=~]=?/, {\n    // Match \"..\" but don't break \"...\"\n    pattern: /(^|[^.])\\.\\.(?!\\.)/,\n    lookbehind: true\n  }],\n  'punctuation': /[\\[\\](){},;]|\\.+|:+/\n};\nPrism.languages.makefile = {\n  'comment': {\n    pattern: /(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  // Built-in target names\n  'builtin': /\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,\n  // Targets\n  'symbol': {\n    pattern: /^[^:=\\r\\n]+(?=\\s*:(?!=))/m,\n    inside: {\n      'variable': /\\$+(?:[^(){}:#=\\s]+|(?=[({]))/\n    }\n  },\n  'variable': /\\$+(?:[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,\n  'keyword': [// Directives\n  /-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/, // Functions\n  {\n    pattern: /(\\()(?:addsuffix|abspath|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:s|list)?)(?=[ \\t])/,\n    lookbehind: true\n  }],\n  'operator': /(?:::|[?:+!])?=|[|@]/,\n  'punctuation': /[:;(){}]/\n};\n\n(function (Prism) {\n  Prism.languages.crystal = Prism.languages.extend('ruby', {\n    keyword: [/\\b(?:abstract|alias|as|asm|begin|break|case|class|def|do|else|elsif|end|ensure|enum|extend|for|fun|if|include|instance_sizeof|lib|macro|module|next|of|out|pointerof|private|protected|rescue|return|require|select|self|sizeof|struct|super|then|type|typeof|uninitialized|union|unless|until|when|while|with|yield|__DIR__|__END_LINE__|__FILE__|__LINE__)\\b/, {\n      pattern: /(\\.\\s*)(?:is_a|responds_to)\\?/,\n      lookbehind: true\n    }],\n    number: /\\b(?:0b[01_]*[01]|0o[0-7_]*[0-7]|0x[\\da-fA-F_]*[\\da-fA-F]|(?:\\d(?:[\\d_]*\\d)?)(?:\\.[\\d_]*\\d)?(?:[eE][+-]?[\\d_]*\\d)?)(?:_(?:[uif](?:8|16|32|64))?)?\\b/\n  });\n  Prism.languages.insertBefore('crystal', 'string', {\n    attribute: {\n      pattern: /@\\[.+?\\]/,\n      alias: 'attr-name',\n      inside: {\n        delimiter: {\n          pattern: /^@\\[|\\]$/,\n          alias: 'tag'\n        },\n        rest: Prism.languages.crystal\n      }\n    },\n    expansion: [{\n      pattern: /\\{\\{.+?\\}\\}/,\n      inside: {\n        delimiter: {\n          pattern: /^\\{\\{|\\}\\}$/,\n          alias: 'tag'\n        },\n        rest: Prism.languages.crystal\n      }\n    }, {\n      pattern: /\\{%.+?%\\}/,\n      inside: {\n        delimiter: {\n          pattern: /^\\{%|%\\}$/,\n          alias: 'tag'\n        },\n        rest: Prism.languages.crystal\n      }\n    }]\n  });\n})(Prism); // Django/Jinja2 syntax definition for Prism.js <http://prismjs.com> syntax highlighter.\n// Mostly it works OK but can paint code incorrectly on complex html/template tag combinations.\n\n\n(function (Prism) {\n  Prism.languages.django = {\n    'comment': /^{#[\\s\\S]*?#}$/,\n    'tag': {\n      pattern: /(^{%[+-]?\\s*)\\w+/,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'delimiter': {\n      pattern: /^{[{%][+-]?|[+-]?[}%]}$/,\n      alias: 'punctuation'\n    },\n    'string': {\n      pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    'filter': {\n      pattern: /(\\|)\\w+/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    'test': {\n      pattern: /(\\bis\\s+(?:not\\s+)?)(?!not\\b)\\w+/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    'function': /\\b[a-z_]\\w+(?=\\s*\\()/i,\n    'keyword': /\\b(?:and|as|by|else|for|if|import|in|is|loop|not|or|recursive|with|without)\\b/,\n    'operator': /[-+*/%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n    'number': /\\b\\d+(?:\\.\\d+)?\\b/,\n    'boolean': /[Tt]rue|[Ff]alse|[Nn]one/,\n    'variable': /\\b\\w+?\\b/,\n    'punctuation': /[{}[\\](),.:;]/\n  };\n  var pattern = /{{[\\s\\S]*?}}|{%[\\s\\S]*?%}|{#[\\s\\S]*?#}/g;\n  var markupTemplating = Prism.languages['markup-templating'];\n  Prism.hooks.add('before-tokenize', function (env) {\n    markupTemplating.buildPlaceholders(env, 'django', pattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    markupTemplating.tokenizePlaceholders(env, 'django');\n  }); // Add an Jinja2 alias\n\n  Prism.languages.jinja2 = Prism.languages.django;\n  Prism.hooks.add('before-tokenize', function (env) {\n    markupTemplating.buildPlaceholders(env, 'jinja2', pattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    markupTemplating.tokenizePlaceholders(env, 'jinja2');\n  });\n})(Prism);\n\nPrism.languages.matlab = {\n  'comment': [/%\\{[\\s\\S]*?\\}%/, /%.+/],\n  'string': {\n    pattern: /\\B'(?:''|[^'\\r\\n])*'/,\n    greedy: true\n  },\n  // FIXME We could handle imaginary numbers as a whole\n  'number': /(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[eE][+-]?\\d+)?(?:[ij])?|\\b[ij]\\b/,\n  'keyword': /\\b(?:break|case|catch|continue|else|elseif|end|for|function|if|inf|NaN|otherwise|parfor|pause|pi|return|switch|try|while)\\b/,\n  'function': /(?!\\d)\\w+(?=\\s*\\()/,\n  'operator': /\\.?[*^\\/\\\\']|[+\\-:@]|[<>=~]=?|&&?|\\|\\|?/,\n  'punctuation': /\\.{3}|[.,;\\[\\](){}!]/\n};\nPrism.languages.mel = {\n  'comment': /\\/\\/.*/,\n  'code': {\n    pattern: /`(?:\\\\.|[^\\\\`\\r\\n])*`/,\n    greedy: true,\n    alias: 'italic',\n    inside: {\n      'delimiter': {\n        pattern: /^`|`$/,\n        alias: 'punctuation' // See rest below\n\n      }\n    }\n  },\n  'string': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n    greedy: true\n  },\n  'variable': /\\$\\w+/,\n  'number': /\\b0x[\\da-fA-F]+\\b|\\b\\d+\\.?\\d*|\\B\\.\\d+/,\n  'flag': {\n    pattern: /-[^\\d\\W]\\w*/,\n    alias: 'operator'\n  },\n  'keyword': /\\b(?:break|case|continue|default|do|else|float|for|global|if|in|int|matrix|proc|return|string|switch|vector|while)\\b/,\n  'function': /\\w+(?=\\()|\\b(?:about|abs|addAttr|addAttributeEditorNodeHelp|addDynamic|addNewShelfTab|addPP|addPanelCategory|addPrefixToName|advanceToNextDrivenKey|affectedNet|affects|aimConstraint|air|alias|aliasAttr|align|alignCtx|alignCurve|alignSurface|allViewFit|ambientLight|angle|angleBetween|animCone|animCurveEditor|animDisplay|animView|annotate|appendStringArray|applicationName|applyAttrPreset|applyTake|arcLenDimContext|arcLengthDimension|arclen|arrayMapper|art3dPaintCtx|artAttrCtx|artAttrPaintVertexCtx|artAttrSkinPaintCtx|artAttrTool|artBuildPaintMenu|artFluidAttrCtx|artPuttyCtx|artSelectCtx|artSetPaintCtx|artUserPaintCtx|assignCommand|assignInputDevice|assignViewportFactories|attachCurve|attachDeviceAttr|attachSurface|attrColorSliderGrp|attrCompatibility|attrControlGrp|attrEnumOptionMenu|attrEnumOptionMenuGrp|attrFieldGrp|attrFieldSliderGrp|attrNavigationControlGrp|attrPresetEditWin|attributeExists|attributeInfo|attributeMenu|attributeQuery|autoKeyframe|autoPlace|bakeClip|bakeFluidShading|bakePartialHistory|bakeResults|bakeSimulation|basename|basenameEx|batchRender|bessel|bevel|bevelPlus|binMembership|bindSkin|blend2|blendShape|blendShapeEditor|blendShapePanel|blendTwoAttr|blindDataType|boneLattice|boundary|boxDollyCtx|boxZoomCtx|bufferCurve|buildBookmarkMenu|buildKeyframeMenu|button|buttonManip|CBG|cacheFile|cacheFileCombine|cacheFileMerge|cacheFileTrack|camera|cameraView|canCreateManip|canvas|capitalizeString|catch|catchQuiet|ceil|changeSubdivComponentDisplayLevel|changeSubdivRegion|channelBox|character|characterMap|characterOutlineEditor|characterize|chdir|checkBox|checkBoxGrp|checkDefaultRenderGlobals|choice|circle|circularFillet|clamp|clear|clearCache|clip|clipEditor|clipEditorCurrentTimeCtx|clipSchedule|clipSchedulerOutliner|clipTrimBefore|closeCurve|closeSurface|cluster|cmdFileOutput|cmdScrollFieldExecuter|cmdScrollFieldReporter|cmdShell|coarsenSubdivSelectionList|collision|color|colorAtPoint|colorEditor|colorIndex|colorIndexSliderGrp|colorSliderButtonGrp|colorSliderGrp|columnLayout|commandEcho|commandLine|commandPort|compactHairSystem|componentEditor|compositingInterop|computePolysetVolume|condition|cone|confirmDialog|connectAttr|connectControl|connectDynamic|connectJoint|connectionInfo|constrain|constrainValue|constructionHistory|container|containsMultibyte|contextInfo|control|convertFromOldLayers|convertIffToPsd|convertLightmap|convertSolidTx|convertTessellation|convertUnit|copyArray|copyFlexor|copyKey|copySkinWeights|cos|cpButton|cpCache|cpClothSet|cpCollision|cpConstraint|cpConvClothToMesh|cpForces|cpGetSolverAttr|cpPanel|cpProperty|cpRigidCollisionFilter|cpSeam|cpSetEdit|cpSetSolverAttr|cpSolver|cpSolverTypes|cpTool|cpUpdateClothUVs|createDisplayLayer|createDrawCtx|createEditor|createLayeredPsdFile|createMotionField|createNewShelf|createNode|createRenderLayer|createSubdivRegion|cross|crossProduct|ctxAbort|ctxCompletion|ctxEditMode|ctxTraverse|currentCtx|currentTime|currentTimeCtx|currentUnit|curve|curveAddPtCtx|curveCVCtx|curveEPCtx|curveEditorCtx|curveIntersect|curveMoveEPCtx|curveOnSurface|curveSketchCtx|cutKey|cycleCheck|cylinder|dagPose|date|defaultLightListCheckBox|defaultNavigation|defineDataServer|defineVirtualDevice|deformer|deg_to_rad|delete|deleteAttr|deleteShadingGroupsAndMaterials|deleteShelfTab|deleteUI|deleteUnusedBrushes|delrandstr|detachCurve|detachDeviceAttr|detachSurface|deviceEditor|devicePanel|dgInfo|dgdirty|dgeval|dgtimer|dimWhen|directKeyCtx|directionalLight|dirmap|dirname|disable|disconnectAttr|disconnectJoint|diskCache|displacementToPoly|displayAffected|displayColor|displayCull|displayLevelOfDetail|displayPref|displayRGBColor|displaySmoothness|displayStats|displayString|displaySurface|distanceDimContext|distanceDimension|doBlur|dolly|dollyCtx|dopeSheetEditor|dot|dotProduct|doubleProfileBirailSurface|drag|dragAttrContext|draggerContext|dropoffLocator|duplicate|duplicateCurve|duplicateSurface|dynCache|dynControl|dynExport|dynExpression|dynGlobals|dynPaintEditor|dynParticleCtx|dynPref|dynRelEdPanel|dynRelEditor|dynamicLoad|editAttrLimits|editDisplayLayerGlobals|editDisplayLayerMembers|editRenderLayerAdjustment|editRenderLayerGlobals|editRenderLayerMembers|editor|editorTemplate|effector|emit|emitter|enableDevice|encodeString|endString|endsWith|env|equivalent|equivalentTol|erf|error|eval|evalDeferred|evalEcho|event|exactWorldBoundingBox|exclusiveLightCheckBox|exec|executeForEachObject|exists|exp|expression|expressionEditorListen|extendCurve|extendSurface|extrude|fcheck|fclose|feof|fflush|fgetline|fgetword|file|fileBrowserDialog|fileDialog|fileExtension|fileInfo|filetest|filletCurve|filter|filterCurve|filterExpand|filterStudioImport|findAllIntersections|findAnimCurves|findKeyframe|findMenuItem|findRelatedSkinCluster|finder|firstParentOf|fitBspline|flexor|floatEq|floatField|floatFieldGrp|floatScrollBar|floatSlider|floatSlider2|floatSliderButtonGrp|floatSliderGrp|floor|flow|fluidCacheInfo|fluidEmitter|fluidVoxelInfo|flushUndo|fmod|fontDialog|fopen|formLayout|format|fprint|frameLayout|fread|freeFormFillet|frewind|fromNativePath|fwrite|gamma|gauss|geometryConstraint|getApplicationVersionAsFloat|getAttr|getClassification|getDefaultBrush|getFileList|getFluidAttr|getInputDeviceRange|getMayaPanelTypes|getModifiers|getPanel|getParticleAttr|getPluginResource|getenv|getpid|glRender|glRenderEditor|globalStitch|gmatch|goal|gotoBindPose|grabColor|gradientControl|gradientControlNoAttr|graphDollyCtx|graphSelectContext|graphTrackCtx|gravity|grid|gridLayout|group|groupObjectsByName|HfAddAttractorToAS|HfAssignAS|HfBuildEqualMap|HfBuildFurFiles|HfBuildFurImages|HfCancelAFR|HfConnectASToHF|HfCreateAttractor|HfDeleteAS|HfEditAS|HfPerformCreateAS|HfRemoveAttractorFromAS|HfSelectAttached|HfSelectAttractors|HfUnAssignAS|hardenPointCurve|hardware|hardwareRenderPanel|headsUpDisplay|headsUpMessage|help|helpLine|hermite|hide|hilite|hitTest|hotBox|hotkey|hotkeyCheck|hsv_to_rgb|hudButton|hudSlider|hudSliderButton|hwReflectionMap|hwRender|hwRenderLoad|hyperGraph|hyperPanel|hyperShade|hypot|iconTextButton|iconTextCheckBox|iconTextRadioButton|iconTextRadioCollection|iconTextScrollList|iconTextStaticLabel|ikHandle|ikHandleCtx|ikHandleDisplayScale|ikSolver|ikSplineHandleCtx|ikSystem|ikSystemInfo|ikfkDisplayMethod|illustratorCurves|image|imfPlugins|inheritTransform|insertJoint|insertJointCtx|insertKeyCtx|insertKnotCurve|insertKnotSurface|instance|instanceable|instancer|intField|intFieldGrp|intScrollBar|intSlider|intSliderGrp|interToUI|internalVar|intersect|iprEngine|isAnimCurve|isConnected|isDirty|isParentOf|isSameObject|isTrue|isValidObjectName|isValidString|isValidUiName|isolateSelect|itemFilter|itemFilterAttr|itemFilterRender|itemFilterType|joint|jointCluster|jointCtx|jointDisplayScale|jointLattice|keyTangent|keyframe|keyframeOutliner|keyframeRegionCurrentTimeCtx|keyframeRegionDirectKeyCtx|keyframeRegionDollyCtx|keyframeRegionInsertKeyCtx|keyframeRegionMoveKeyCtx|keyframeRegionScaleKeyCtx|keyframeRegionSelectKeyCtx|keyframeRegionSetKeyCtx|keyframeRegionTrackCtx|keyframeStats|lassoContext|lattice|latticeDeformKeyCtx|launch|launchImageEditor|layerButton|layeredShaderPort|layeredTexturePort|layout|layoutDialog|lightList|lightListEditor|lightListPanel|lightlink|lineIntersection|linearPrecision|linstep|listAnimatable|listAttr|listCameras|listConnections|listDeviceAttachments|listHistory|listInputDeviceAxes|listInputDeviceButtons|listInputDevices|listMenuAnnotation|listNodeTypes|listPanelCategories|listRelatives|listSets|listTransforms|listUnselected|listerEditor|loadFluid|loadNewShelf|loadPlugin|loadPluginLanguageResources|loadPrefObjects|localizedPanelLabel|lockNode|loft|log|longNameOf|lookThru|ls|lsThroughFilter|lsType|lsUI|Mayatomr|mag|makeIdentity|makeLive|makePaintable|makeRoll|makeSingleSurface|makeTubeOn|makebot|manipMoveContext|manipMoveLimitsCtx|manipOptions|manipRotateContext|manipRotateLimitsCtx|manipScaleContext|manipScaleLimitsCtx|marker|match|max|memory|menu|menuBarLayout|menuEditor|menuItem|menuItemToShelf|menuSet|menuSetPref|messageLine|min|minimizeApp|mirrorJoint|modelCurrentTimeCtx|modelEditor|modelPanel|mouse|movIn|movOut|move|moveIKtoFK|moveKeyCtx|moveVertexAlongDirection|multiProfileBirailSurface|mute|nParticle|nameCommand|nameField|namespace|namespaceInfo|newPanelItems|newton|nodeCast|nodeIconButton|nodeOutliner|nodePreset|nodeType|noise|nonLinear|normalConstraint|normalize|nurbsBoolean|nurbsCopyUVSet|nurbsCube|nurbsEditUV|nurbsPlane|nurbsSelect|nurbsSquare|nurbsToPoly|nurbsToPolygonsPref|nurbsToSubdiv|nurbsToSubdivPref|nurbsUVSet|nurbsViewDirectionVector|objExists|objectCenter|objectLayer|objectType|objectTypeUI|obsoleteProc|oceanNurbsPreviewPlane|offsetCurve|offsetCurveOnSurface|offsetSurface|openGLExtension|openMayaPref|optionMenu|optionMenuGrp|optionVar|orbit|orbitCtx|orientConstraint|outlinerEditor|outlinerPanel|overrideModifier|paintEffectsDisplay|pairBlend|palettePort|paneLayout|panel|panelConfiguration|panelHistory|paramDimContext|paramDimension|paramLocator|parent|parentConstraint|particle|particleExists|particleInstancer|particleRenderInfo|partition|pasteKey|pathAnimation|pause|pclose|percent|performanceOptions|pfxstrokes|pickWalk|picture|pixelMove|planarSrf|plane|play|playbackOptions|playblast|plugAttr|plugNode|pluginInfo|pluginResourceUtil|pointConstraint|pointCurveConstraint|pointLight|pointMatrixMult|pointOnCurve|pointOnSurface|pointPosition|poleVectorConstraint|polyAppend|polyAppendFacetCtx|polyAppendVertex|polyAutoProjection|polyAverageNormal|polyAverageVertex|polyBevel|polyBlendColor|polyBlindData|polyBoolOp|polyBridgeEdge|polyCacheMonitor|polyCheck|polyChipOff|polyClipboard|polyCloseBorder|polyCollapseEdge|polyCollapseFacet|polyColorBlindData|polyColorDel|polyColorPerVertex|polyColorSet|polyCompare|polyCone|polyCopyUV|polyCrease|polyCreaseCtx|polyCreateFacet|polyCreateFacetCtx|polyCube|polyCut|polyCutCtx|polyCylinder|polyCylindricalProjection|polyDelEdge|polyDelFacet|polyDelVertex|polyDuplicateAndConnect|polyDuplicateEdge|polyEditUV|polyEditUVShell|polyEvaluate|polyExtrudeEdge|polyExtrudeFacet|polyExtrudeVertex|polyFlipEdge|polyFlipUV|polyForceUV|polyGeoSampler|polyHelix|polyInfo|polyInstallAction|polyLayoutUV|polyListComponentConversion|polyMapCut|polyMapDel|polyMapSew|polyMapSewMove|polyMergeEdge|polyMergeEdgeCtx|polyMergeFacet|polyMergeFacetCtx|polyMergeUV|polyMergeVertex|polyMirrorFace|polyMoveEdge|polyMoveFacet|polyMoveFacetUV|polyMoveUV|polyMoveVertex|polyNormal|polyNormalPerVertex|polyNormalizeUV|polyOptUvs|polyOptions|polyOutput|polyPipe|polyPlanarProjection|polyPlane|polyPlatonicSolid|polyPoke|polyPrimitive|polyPrism|polyProjection|polyPyramid|polyQuad|polyQueryBlindData|polyReduce|polySelect|polySelectConstraint|polySelectConstraintMonitor|polySelectCtx|polySelectEditCtx|polySeparate|polySetToFaceNormal|polySewEdge|polyShortestPathCtx|polySmooth|polySoftEdge|polySphere|polySphericalProjection|polySplit|polySplitCtx|polySplitEdge|polySplitRing|polySplitVertex|polyStraightenUVBorder|polySubdivideEdge|polySubdivideFacet|polyToSubdiv|polyTorus|polyTransfer|polyTriangulate|polyUVSet|polyUnite|polyWedgeFace|popen|popupMenu|pose|pow|preloadRefEd|print|progressBar|progressWindow|projFileViewer|projectCurve|projectTangent|projectionContext|projectionManip|promptDialog|propModCtx|propMove|psdChannelOutliner|psdEditTextureFile|psdExport|psdTextureFile|putenv|pwd|python|querySubdiv|quit|rad_to_deg|radial|radioButton|radioButtonGrp|radioCollection|radioMenuItemCollection|rampColorPort|rand|randomizeFollicles|randstate|rangeControl|readTake|rebuildCurve|rebuildSurface|recordAttr|recordDevice|redo|reference|referenceEdit|referenceQuery|refineSubdivSelectionList|refresh|refreshAE|registerPluginResource|rehash|reloadImage|removeJoint|removeMultiInstance|removePanelCategory|rename|renameAttr|renameSelectionList|renameUI|render|renderGlobalsNode|renderInfo|renderLayerButton|renderLayerParent|renderLayerPostProcess|renderLayerUnparent|renderManip|renderPartition|renderQualityNode|renderSettings|renderThumbnailUpdate|renderWindowEditor|renderWindowSelectContext|renderer|reorder|reorderDeformers|requires|reroot|resampleFluid|resetAE|resetPfxToPolyCamera|resetTool|resolutionNode|retarget|reverseCurve|reverseSurface|revolve|rgb_to_hsv|rigidBody|rigidSolver|roll|rollCtx|rootOf|rot|rotate|rotationInterpolation|roundConstantRadius|rowColumnLayout|rowLayout|runTimeCommand|runup|sampleImage|saveAllShelves|saveAttrPreset|saveFluid|saveImage|saveInitialState|saveMenu|savePrefObjects|savePrefs|saveShelf|saveToolSettings|scale|scaleBrushBrightness|scaleComponents|scaleConstraint|scaleKey|scaleKeyCtx|sceneEditor|sceneUIReplacement|scmh|scriptCtx|scriptEditorInfo|scriptJob|scriptNode|scriptTable|scriptToShelf|scriptedPanel|scriptedPanelType|scrollField|scrollLayout|sculpt|searchPathArray|seed|selLoadSettings|select|selectContext|selectCurveCV|selectKey|selectKeyCtx|selectKeyframeRegionCtx|selectMode|selectPref|selectPriority|selectType|selectedNodes|selectionConnection|separator|setAttr|setAttrEnumResource|setAttrMapping|setAttrNiceNameResource|setConstraintRestPosition|setDefaultShadingGroup|setDrivenKeyframe|setDynamic|setEditCtx|setEditor|setFluidAttr|setFocus|setInfinity|setInputDeviceMapping|setKeyCtx|setKeyPath|setKeyframe|setKeyframeBlendshapeTargetWts|setMenuMode|setNodeNiceNameResource|setNodeTypeFlag|setParent|setParticleAttr|setPfxToPolyCamera|setPluginResource|setProject|setStampDensity|setStartupMessage|setState|setToolTo|setUITemplate|setXformManip|sets|shadingConnection|shadingGeometryRelCtx|shadingLightRelCtx|shadingNetworkCompare|shadingNode|shapeCompare|shelfButton|shelfLayout|shelfTabLayout|shellField|shortNameOf|showHelp|showHidden|showManipCtx|showSelectionInTitle|showShadingGroupAttrEditor|showWindow|sign|simplify|sin|singleProfileBirailSurface|size|sizeBytes|skinCluster|skinPercent|smoothCurve|smoothTangentSurface|smoothstep|snap2to2|snapKey|snapMode|snapTogetherCtx|snapshot|soft|softMod|softModCtx|sort|sound|soundControl|source|spaceLocator|sphere|sphrand|spotLight|spotLightPreviewPort|spreadSheetEditor|spring|sqrt|squareSurface|srtContext|stackTrace|startString|startsWith|stitchAndExplodeShell|stitchSurface|stitchSurfacePoints|strcmp|stringArrayCatenate|stringArrayContains|stringArrayCount|stringArrayInsertAtIndex|stringArrayIntersector|stringArrayRemove|stringArrayRemoveAtIndex|stringArrayRemoveDuplicates|stringArrayRemoveExact|stringArrayToString|stringToStringArray|strip|stripPrefixFromName|stroke|subdAutoProjection|subdCleanTopology|subdCollapse|subdDuplicateAndConnect|subdEditUV|subdListComponentConversion|subdMapCut|subdMapSewMove|subdMatchTopology|subdMirror|subdToBlind|subdToPoly|subdTransferUVsToCache|subdiv|subdivCrease|subdivDisplaySmoothness|substitute|substituteAllString|substituteGeometry|substring|surface|surfaceSampler|surfaceShaderList|swatchDisplayPort|switchTable|symbolButton|symbolCheckBox|sysFile|system|tabLayout|tan|tangentConstraint|texLatticeDeformContext|texManipContext|texMoveContext|texMoveUVShellContext|texRotateContext|texScaleContext|texSelectContext|texSelectShortestPathCtx|texSmudgeUVContext|texWinToolCtx|text|textCurves|textField|textFieldButtonGrp|textFieldGrp|textManip|textScrollList|textToShelf|textureDisplacePlane|textureHairColor|texturePlacementContext|textureWindow|threadCount|threePointArcCtx|timeControl|timePort|timerX|toNativePath|toggle|toggleAxis|toggleWindowVisibility|tokenize|tokenizeList|tolerance|tolower|toolButton|toolCollection|toolDropped|toolHasOptions|toolPropertyWindow|torus|toupper|trace|track|trackCtx|transferAttributes|transformCompare|transformLimits|translator|trim|trunc|truncateFluidCache|truncateHairCache|tumble|tumbleCtx|turbulence|twoPointArcCtx|uiRes|uiTemplate|unassignInputDevice|undo|undoInfo|ungroup|uniform|unit|unloadPlugin|untangleUV|untitledFileName|untrim|upAxis|updateAE|userCtx|uvLink|uvSnapshot|validateShelfName|vectorize|view2dToolCtx|viewCamera|viewClipPlane|viewFit|viewHeadOn|viewLookAt|viewManip|viewPlace|viewSet|visor|volumeAxis|vortex|waitCursor|warning|webBrowser|webBrowserPrefs|whatIs|window|windowPref|wire|wireContext|workspace|wrinkle|wrinkleContext|writeTake|xbmLangPathList|xform)\\b/,\n  'operator': [/\\+[+=]?|-[-=]?|&&|\\|\\||[<>]=|[*\\/!=]=?|[%^]/, {\n    // We don't want to match <<\n    pattern: /(^|[^<])<(?!<)/,\n    lookbehind: true\n  }, {\n    // We don't want to match >>\n    pattern: /(^|[^>])>(?!>)/,\n    lookbehind: true\n  }],\n  'punctuation': /<<|>>|[.,:;?\\[\\](){}]/\n};\nPrism.languages.mel['code'].inside.rest = Prism.languages.mel;\nPrism.languages.mizar = {\n  'comment': /::.+/,\n  'keyword': /@proof\\b|\\b(?:according|aggregate|all|and|antonym|are|as|associativity|assume|asymmetry|attr|be|begin|being|by|canceled|case|cases|clusters?|coherence|commutativity|compatibility|connectedness|consider|consistency|constructors|contradiction|correctness|def|deffunc|define|definitions?|defpred|do|does|equals|end|environ|ex|exactly|existence|for|from|func|given|hence|hereby|holds|idempotence|identity|iff?|implies|involutiveness|irreflexivity|is|it|let|means|mode|non|not|notations?|now|of|or|otherwise|over|per|pred|prefix|projectivity|proof|provided|qua|reconsider|redefine|reduce|reducibility|reflexivity|registrations?|requirements|reserve|sch|schemes?|section|selector|set|sethood|st|struct|such|suppose|symmetry|synonym|take|that|the|then|theorems?|thesis|thus|to|transitivity|uniqueness|vocabular(?:y|ies)|when|where|with|wrt)\\b/,\n  'parameter': {\n    pattern: /\\$(?:10|\\d)/,\n    alias: 'variable'\n  },\n  'variable': /\\w+(?=:)/,\n  'number': /(?:\\b|-)\\d+\\b/,\n  'operator': /\\.\\.\\.|->|&|\\.?=/,\n  'punctuation': /\\(#|#\\)|[,:;\\[\\](){}]/\n};\nPrism.languages.monkey = {\n  'string': /\"[^\"\\r\\n]*\"/,\n  'comment': [{\n    pattern: /^#Rem\\s+[\\s\\S]*?^#End/im,\n    greedy: true\n  }, {\n    pattern: /'.+/,\n    greedy: true\n  }],\n  'preprocessor': {\n    pattern: /(^[ \\t]*)#.+/m,\n    lookbehind: true,\n    alias: 'comment'\n  },\n  'function': /\\w+(?=\\()/,\n  'type-char': {\n    pattern: /(\\w)[?%#$]/,\n    lookbehind: true,\n    alias: 'variable'\n  },\n  'number': {\n    pattern: /((?:\\.\\.)?)(?:(?:\\b|\\B-\\.?|\\B\\.)\\d+(?:(?!\\.\\.)\\.\\d*)?|\\$[\\da-f]+)/i,\n    lookbehind: true\n  },\n  'keyword': /\\b(?:Void|Strict|Public|Private|Property|Bool|Int|Float|String|Array|Object|Continue|Exit|Import|Extern|New|Self|Super|Try|Catch|Eachin|True|False|Extends|Abstract|Final|Select|Case|Default|Const|Local|Global|Field|Method|Function|Class|End|If|Then|Else|ElseIf|EndIf|While|Wend|Repeat|Until|Forever|For|To|Step|Next|Return|Module|Interface|Implements|Inline|Throw|Null)\\b/i,\n  'operator': /\\.\\.|<[=>]?|>=?|:?=|(?:[+\\-*\\/&~|]|\\b(?:Mod|Shl|Shr)\\b)=?|\\b(?:And|Not|Or)\\b/i,\n  'punctuation': /[.,:;()\\[\\]]/\n};\nPrism.languages.n1ql = {\n  'comment': /\\/\\*[\\s\\S]*?(?:$|\\*\\/)/,\n  'parameter': /\\$[\\w.]+/,\n  'string': {\n    pattern: /([\"'])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\]|\\1\\1)*\\1/,\n    greedy: true\n  },\n  'identifier': {\n    pattern: /`(?:\\\\[\\s\\S]|[^\\\\`]|``)*`/,\n    greedy: true\n  },\n  'function': /\\b(?:ABS|ACOS|ARRAY_AGG|ARRAY_APPEND|ARRAY_AVG|ARRAY_CONCAT|ARRAY_CONTAINS|ARRAY_COUNT|ARRAY_DISTINCT|ARRAY_FLATTEN|ARRAY_IFNULL|ARRAY_INSERT|ARRAY_INTERSECT|ARRAY_LENGTH|ARRAY_MAX|ARRAY_MIN|ARRAY_POSITION|ARRAY_PREPEND|ARRAY_PUT|ARRAY_RANGE|ARRAY_REMOVE|ARRAY_REPEAT|ARRAY_REPLACE|ARRAY_REVERSE|ARRAY_SORT|ARRAY_STAR|ARRAY_SUM|ARRAY_SYMDIFF|ARRAY_SYMDIFFN|ARRAY_UNION|ASIN|ATAN|ATAN2|AVG|BASE64|BASE64_DECODE|BASE64_ENCODE|BITAND|BITCLEAR|BITNOT|BITOR|BITSET|BITSHIFT|BITTEST|BITXOR|CEIL|CLOCK_LOCAL|CLOCK_MILLIS|CLOCK_STR|CLOCK_TZ|CLOCK_UTC|CONTAINS|CONTAINS_TOKEN|CONTAINS_TOKEN_LIKE|CONTAINS_TOKEN_REGEXP|COS|COUNT|CURL|DATE_ADD_MILLIS|DATE_ADD_STR|DATE_DIFF_MILLIS|DATE_DIFF_STR|DATE_FORMAT_STR|DATE_PART_MILLIS|DATE_PART_STR|DATE_RANGE_MILLIS|DATE_RANGE_STR|DATE_TRUNC_MILLIS|DATE_TRUNC_STR|DECODE_JSON|DEGREES|DURATION_TO_STR|E|ENCODED_SIZE|ENCODE_JSON|EXP|FLOOR|GREATEST|HAS_TOKEN|IFINF|IFMISSING|IFMISSINGORNULL|IFNAN|IFNANORINF|IFNULL|INITCAP|ISARRAY|ISATOM|ISBOOLEAN|ISNUMBER|ISOBJECT|ISSTRING|IsBitSET|LEAST|LENGTH|LN|LOG|LOWER|LTRIM|MAX|META|MILLIS|MILLIS_TO_LOCAL|MILLIS_TO_STR|MILLIS_TO_TZ|MILLIS_TO_UTC|MILLIS_TO_ZONE_NAME|MIN|MISSINGIF|NANIF|NEGINFIF|NOW_LOCAL|NOW_MILLIS|NOW_STR|NOW_TZ|NOW_UTC|NULLIF|OBJECT_ADD|OBJECT_CONCAT|OBJECT_INNER_PAIRS|OBJECT_INNER_VALUES|OBJECT_LENGTH|OBJECT_NAMES|OBJECT_PAIRS|OBJECT_PUT|OBJECT_REMOVE|OBJECT_RENAME|OBJECT_REPLACE|OBJECT_UNWRAP|OBJECT_VALUES|PAIRS|PI|POLY_LENGTH|POSINFIF|POSITION|POWER|RADIANS|RANDOM|REGEXP_CONTAINS|REGEXP_LIKE|REGEXP_POSITION|REGEXP_REPLACE|REPEAT|REPLACE|REVERSE|ROUND|RTRIM|SIGN|SIN|SPLIT|SQRT|STR_TO_DURATION|STR_TO_MILLIS|STR_TO_TZ|STR_TO_UTC|STR_TO_ZONE_NAME|SUBSTR|SUFFIXES|SUM|TAN|TITLE|TOARRAY|TOATOM|TOBOOLEAN|TOKENS|TOKENS|TONUMBER|TOOBJECT|TOSTRING|TRIM|TRUNC|TYPE|UPPER|WEEKDAY_MILLIS|WEEKDAY_STR)(?=\\s*\\()/i,\n  'keyword': /\\b(?:ALL|ALTER|ANALYZE|AS|ASC|BEGIN|BINARY|BOOLEAN|BREAK|BUCKET|BUILD|BY|CALL|CAST|CLUSTER|COLLATE|COLLECTION|COMMIT|CONNECT|CONTINUE|CORRELATE|COVER|CREATE|DATABASE|DATASET|DATASTORE|DECLARE|DECREMENT|DELETE|DERIVED|DESC|DESCRIBE|DISTINCT|DO|DROP|EACH|ELEMENT|EXCEPT|EXCLUDE|EXECUTE|EXPLAIN|FETCH|FLATTEN|FOR|FORCE|FROM|FUNCTION|GRANT|GROUP|GSI|HAVING|IF|IGNORE|ILIKE|INCLUDE|INCREMENT|INDEX|INFER|INLINE|INNER|INSERT|INTERSECT|INTO|IS|JOIN|KEY|KEYS|KEYSPACE|KNOWN|LAST|LEFT|LET|LETTING|LIMIT|LSM|MAP|MAPPING|MATCHED|MATERIALIZED|MERGE|MINUS|MISSING|NAMESPACE|NEST|NULL|NUMBER|OBJECT|OFFSET|ON|OPTION|ORDER|OUTER|OVER|PARSE|PARTITION|PASSWORD|PATH|POOL|PREPARE|PRIMARY|PRIVATE|PRIVILEGE|PROCEDURE|PUBLIC|RAW|REALM|REDUCE|RENAME|RETURN|RETURNING|REVOKE|RIGHT|ROLE|ROLLBACK|SATISFIES|SCHEMA|SELECT|SELF|SEMI|SET|SHOW|SOME|START|STATISTICS|STRING|SYSTEM|TO|TRANSACTION|TRIGGER|TRUNCATE|UNDER|UNION|UNIQUE|UNKNOWN|UNNEST|UNSET|UPDATE|UPSERT|USE|USER|USING|VALIDATE|VALUE|VALUES|VIA|VIEW|WHERE|WHILE|WITH|WORK|XOR)\\b/i,\n  'boolean': /\\b(?:TRUE|FALSE)\\b/i,\n  'number': /(?:\\b\\d+\\.|\\B\\.)\\d+e[+\\-]?\\d+\\b|\\b\\d+\\.?\\d*|\\B\\.\\d+\\b/i,\n  'operator': /[-+*\\/=%]|!=|==?|\\|\\||<[>=]?|>=?|\\b(?:AND|ANY|ARRAY|BETWEEN|CASE|ELSE|END|EVERY|EXISTS|FIRST|IN|LIKE|NOT|OR|THEN|VALUED|WHEN|WITHIN)\\b/i,\n  'punctuation': /[;[\\](),.{}:]/\n};\nPrism.languages.typescript = Prism.languages.extend('javascript', {\n  // From JavaScript Prism keyword list and TypeScript language spec: https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#221-reserved-words\n  'keyword': /\\b(?:abstract|as|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|var|void|while|with|yield)\\b/,\n  'builtin': /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n});\nPrism.languages.ts = Prism.languages.typescript;\nPrism.languages['nand2tetris-hdl'] = {\n  'comment': /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n  'keyword': /\\b(?:CHIP|IN|OUT|PARTS|BUILTIN|CLOCKED)\\b/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'function': /[A-Za-z][A-Za-z0-9]*(?=\\()/,\n  'number': /\\b\\d+\\b/,\n  'operator': /=|\\.\\./,\n  'punctuation': /[{}[\\];(),:]/\n};\nPrism.languages.nasm = {\n  'comment': /;.*$/m,\n  'string': /([\"'`])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n  'label': {\n    pattern: /(^\\s*)[A-Za-z._?$][\\w.?$@~#]*:/m,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'keyword': [/\\[?BITS (?:16|32|64)\\]?/, {\n    pattern: /(^\\s*)section\\s*[a-zA-Z.]+:?/im,\n    lookbehind: true\n  }, /(?:extern|global)[^;\\r\\n]*/i, /(?:CPU|FLOAT|DEFAULT).*$/m],\n  'register': {\n    pattern: /\\b(?:st\\d|[xyz]mm\\d\\d?|[cdt]r\\d|r\\d\\d?[bwd]?|[er]?[abcd]x|[abcd][hl]|[er]?(?:bp|sp|si|di)|[cdefgs]s)\\b/i,\n    alias: 'variable'\n  },\n  'number': /(?:\\b|(?=\\$))(?:0[hx][\\da-f]*\\.?[\\da-f]+(?:p[+-]?\\d+)?|\\d[\\da-f]+[hx]|\\$\\d[\\da-f]*|0[oq][0-7]+|[0-7]+[oq]|0[by][01]+|[01]+[by]|0[dt]\\d+|\\d*\\.?\\d+(?:\\.?e[+-]?\\d+)?[dt]?)\\b/i,\n  'operator': /[\\[\\]*+\\-\\/%<>=&|$!]/\n};\nPrism.languages.nginx = Prism.languages.extend('clike', {\n  'comment': {\n    pattern: /(^|[^\"{\\\\])#.*/,\n    lookbehind: true\n  },\n  'keyword': /\\b(?:CONTENT_|DOCUMENT_|GATEWAY_|HTTP_|HTTPS|if_not_empty|PATH_|QUERY_|REDIRECT_|REMOTE_|REQUEST_|SCGI|SCRIPT_|SERVER_|http|events|accept_mutex|accept_mutex_delay|access_log|add_after_body|add_before_body|add_header|addition_types|aio|alias|allow|ancient_browser|ancient_browser_value|auth|auth_basic|auth_basic_user_file|auth_http|auth_http_header|auth_http_timeout|autoindex|autoindex_exact_size|autoindex_localtime|break|charset|charset_map|charset_types|chunked_transfer_encoding|client_body_buffer_size|client_body_in_file_only|client_body_in_single_buffer|client_body_temp_path|client_body_timeout|client_header_buffer_size|client_header_timeout|client_max_body_size|connection_pool_size|create_full_put_path|daemon|dav_access|dav_methods|debug_connection|debug_points|default_type|deny|devpoll_changes|devpoll_events|directio|directio_alignment|disable_symlinks|empty_gif|env|epoll_events|error_log|error_page|expires|fastcgi_buffer_size|fastcgi_buffers|fastcgi_busy_buffers_size|fastcgi_cache|fastcgi_cache_bypass|fastcgi_cache_key|fastcgi_cache_lock|fastcgi_cache_lock_timeout|fastcgi_cache_methods|fastcgi_cache_min_uses|fastcgi_cache_path|fastcgi_cache_purge|fastcgi_cache_use_stale|fastcgi_cache_valid|fastcgi_connect_timeout|fastcgi_hide_header|fastcgi_ignore_client_abort|fastcgi_ignore_headers|fastcgi_index|fastcgi_intercept_errors|fastcgi_keep_conn|fastcgi_max_temp_file_size|fastcgi_next_upstream|fastcgi_no_cache|fastcgi_param|fastcgi_pass|fastcgi_pass_header|fastcgi_read_timeout|fastcgi_redirect_errors|fastcgi_send_timeout|fastcgi_split_path_info|fastcgi_store|fastcgi_store_access|fastcgi_temp_file_write_size|fastcgi_temp_path|flv|geo|geoip_city|geoip_country|google_perftools_profiles|gzip|gzip_buffers|gzip_comp_level|gzip_disable|gzip_http_version|gzip_min_length|gzip_proxied|gzip_static|gzip_types|gzip_vary|if|if_modified_since|ignore_invalid_headers|image_filter|image_filter_buffer|image_filter_jpeg_quality|image_filter_sharpen|image_filter_transparency|imap_capabilities|imap_client_buffer|include|index|internal|ip_hash|keepalive|keepalive_disable|keepalive_requests|keepalive_timeout|kqueue_changes|kqueue_events|large_client_header_buffers|limit_conn|limit_conn_log_level|limit_conn_zone|limit_except|limit_rate|limit_rate_after|limit_req|limit_req_log_level|limit_req_zone|limit_zone|lingering_close|lingering_time|lingering_timeout|listen|location|lock_file|log_format|log_format_combined|log_not_found|log_subrequest|map|map_hash_bucket_size|map_hash_max_size|master_process|max_ranges|memcached_buffer_size|memcached_connect_timeout|memcached_next_upstream|memcached_pass|memcached_read_timeout|memcached_send_timeout|merge_slashes|min_delete_depth|modern_browser|modern_browser_value|mp4|mp4_buffer_size|mp4_max_buffer_size|msie_padding|msie_refresh|multi_accept|open_file_cache|open_file_cache_errors|open_file_cache_min_uses|open_file_cache_valid|open_log_file_cache|optimize_server_names|override_charset|pcre_jit|perl|perl_modules|perl_require|perl_set|pid|pop3_auth|pop3_capabilities|port_in_redirect|post_action|postpone_output|protocol|proxy|proxy_buffer|proxy_buffer_size|proxy_buffering|proxy_buffers|proxy_busy_buffers_size|proxy_cache|proxy_cache_bypass|proxy_cache_key|proxy_cache_lock|proxy_cache_lock_timeout|proxy_cache_methods|proxy_cache_min_uses|proxy_cache_path|proxy_cache_use_stale|proxy_cache_valid|proxy_connect_timeout|proxy_cookie_domain|proxy_cookie_path|proxy_headers_hash_bucket_size|proxy_headers_hash_max_size|proxy_hide_header|proxy_http_version|proxy_ignore_client_abort|proxy_ignore_headers|proxy_intercept_errors|proxy_max_temp_file_size|proxy_method|proxy_next_upstream|proxy_no_cache|proxy_pass|proxy_pass_error_message|proxy_pass_header|proxy_pass_request_body|proxy_pass_request_headers|proxy_read_timeout|proxy_redirect|proxy_redirect_errors|proxy_send_lowat|proxy_send_timeout|proxy_set_body|proxy_set_header|proxy_ssl_session_reuse|proxy_store|proxy_store_access|proxy_temp_file_write_size|proxy_temp_path|proxy_timeout|proxy_upstream_fail_timeout|proxy_upstream_max_fails|random_index|read_ahead|real_ip_header|recursive_error_pages|request_pool_size|reset_timedout_connection|resolver|resolver_timeout|return|rewrite|root|rtsig_overflow_events|rtsig_overflow_test|rtsig_overflow_threshold|rtsig_signo|satisfy|satisfy_any|secure_link_secret|send_lowat|send_timeout|sendfile|sendfile_max_chunk|server|server_name|server_name_in_redirect|server_names_hash_bucket_size|server_names_hash_max_size|server_tokens|set|set_real_ip_from|smtp_auth|smtp_capabilities|so_keepalive|source_charset|split_clients|ssi|ssi_silent_errors|ssi_types|ssi_value_length|ssl|ssl_certificate|ssl_certificate_key|ssl_ciphers|ssl_client_certificate|ssl_crl|ssl_dhparam|ssl_engine|ssl_prefer_server_ciphers|ssl_protocols|ssl_session_cache|ssl_session_timeout|ssl_verify_client|ssl_verify_depth|starttls|stub_status|sub_filter|sub_filter_once|sub_filter_types|tcp_nodelay|tcp_nopush|timeout|timer_resolution|try_files|types|types_hash_bucket_size|types_hash_max_size|underscores_in_headers|uninitialized_variable_warn|upstream|use|user|userid|userid_domain|userid_expires|userid_name|userid_p3p|userid_path|userid_service|valid_referers|variables_hash_bucket_size|variables_hash_max_size|worker_connections|worker_cpu_affinity|worker_priority|worker_processes|worker_rlimit_core|worker_rlimit_nofile|worker_rlimit_sigpending|working_directory|xclient|xml_entities|xslt_entities|xslt_stylesheet|xslt_types|ssl_session_tickets|ssl_stapling|ssl_stapling_verify|ssl_ecdh_curve|ssl_trusted_certificate|more_set_headers|ssl_early_data)\\b/i\n});\nPrism.languages.insertBefore('nginx', 'keyword', {\n  'variable': /\\$[a-z_]+/i\n});\nPrism.languages.nim = {\n  'comment': /#.*/,\n  // Double-quoted strings can be prefixed by an identifier (Generalized raw string literals)\n  // Character literals are handled specifically to prevent issues with numeric type suffixes\n  'string': {\n    pattern: /(?:(?:\\b(?!\\d)(?:\\w|\\\\x[8-9a-fA-F][0-9a-fA-F])+)?(?:\"\"\"[\\s\\S]*?\"\"\"(?!\")|\"(?:\\\\[\\s\\S]|\"\"|[^\"\\\\])*\")|'(?:\\\\(?:\\d+|x[\\da-fA-F]{2}|.)|[^'])')/,\n    greedy: true\n  },\n  // The negative look ahead prevents wrong highlighting of the .. operator\n  'number': /\\b(?:0[xXoObB][\\da-fA-F_]+|\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:[eE][+-]?\\d[\\d_]*)?)(?:'?[iuf]\\d*)?/,\n  'keyword': /\\b(?:addr|as|asm|atomic|bind|block|break|case|cast|concept|const|continue|converter|defer|discard|distinct|do|elif|else|end|enum|except|export|finally|for|from|func|generic|if|import|include|interface|iterator|let|macro|method|mixin|nil|object|out|proc|ptr|raise|ref|return|static|template|try|tuple|type|using|var|when|while|with|without|yield)\\b/,\n  'function': {\n    pattern: /(?:(?!\\d)(?:\\w|\\\\x[8-9a-fA-F][0-9a-fA-F])+|`[^`\\r\\n]+`)\\*?(?:\\[[^\\]]+\\])?(?=\\s*\\()/,\n    inside: {\n      'operator': /\\*$/\n    }\n  },\n  // We don't want to highlight operators inside backticks\n  'ignore': {\n    pattern: /`[^`\\r\\n]+`/,\n    inside: {\n      'punctuation': /`/\n    }\n  },\n  'operator': {\n    // Look behind and look ahead prevent wrong highlighting of punctuations [. .] {. .} (. .)\n    // but allow the slice operator .. to take precedence over them\n    // One can define his own operators in Nim so all combination of operators might be an operator.\n    pattern: /(^|[({\\[](?=\\.\\.)|(?![({\\[]\\.).)(?:(?:[=+\\-*\\/<>@$~&%|!?^:\\\\]|\\.\\.|\\.(?![)}\\]]))+|\\b(?:and|div|of|or|in|is|isnot|mod|not|notin|shl|shr|xor)\\b)/m,\n    lookbehind: true\n  },\n  'punctuation': /[({\\[]\\.|\\.[)}\\]]|[`(){}\\[\\],:]/\n};\nPrism.languages.nix = {\n  'comment': /\\/\\*[\\s\\S]*?\\*\\/|#.*/,\n  'string': {\n    pattern: /\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"|''(?:(?!'')[\\s\\S]|''(?:'|\\\\|\\$\\{))*''/,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        // The lookbehind ensures the ${} is not preceded by \\ or ''\n        pattern: /(^|(?:^|(?!'').)[^\\\\])\\$\\{(?:[^}]|\\{[^}]*\\})*}/,\n        lookbehind: true,\n        inside: {\n          'antiquotation': {\n            pattern: /^\\$(?=\\{)/,\n            alias: 'variable' // See rest below\n\n          }\n        }\n      }\n    }\n  },\n  'url': [/\\b(?:[a-z]{3,7}:\\/\\/)[\\w\\-+%~\\/.:#=?&]+/, {\n    pattern: /([^\\/])(?:[\\w\\-+%~.:#=?&]*(?!\\/\\/)[\\w\\-+%~\\/.:#=?&])?(?!\\/\\/)\\/[\\w\\-+%~\\/.:#=?&]*/,\n    lookbehind: true\n  }],\n  'antiquotation': {\n    pattern: /\\$(?=\\{)/,\n    alias: 'variable'\n  },\n  'number': /\\b\\d+\\b/,\n  'keyword': /\\b(?:assert|builtins|else|if|in|inherit|let|null|or|then|with)\\b/,\n  'function': /\\b(?:abort|add|all|any|attrNames|attrValues|baseNameOf|compareVersions|concatLists|currentSystem|deepSeq|derivation|dirOf|div|elem(?:At)?|fetch(?:url|Tarball)|filter(?:Source)?|fromJSON|genList|getAttr|getEnv|hasAttr|hashString|head|import|intersectAttrs|is(?:Attrs|Bool|Function|Int|List|Null|String)|length|lessThan|listToAttrs|map|mul|parseDrvName|pathExists|read(?:Dir|File)|removeAttrs|replaceStrings|seq|sort|stringLength|sub(?:string)?|tail|throw|to(?:File|JSON|Path|String|XML)|trace|typeOf)\\b|\\bfoldl'\\B/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'operator': /[=!<>]=?|\\+\\+?|\\|\\||&&|\\/\\/|->?|[?@]/,\n  'punctuation': /[{}()[\\].,:;]/\n};\nPrism.languages.nix.string.inside.interpolation.inside.rest = Prism.languages.nix;\n/**\n * Original by Jan T. Sott (http://github.com/idleberg)\n *\n * Includes all commands and plug-ins shipped with NSIS 3.02\n */\n\nPrism.languages.nsis = {\n  'comment': {\n    pattern: /(^|[^\\\\])(\\/\\*[\\s\\S]*?\\*\\/|[#;].*)/,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'keyword': {\n    pattern: /(^\\s*)(?:Abort|Add(?:BrandingImage|Size)|AdvSplash|Allow(?:RootDirInstall|SkipFiles)|AutoCloseWindow|Banner|BG(?:Font|Gradient|Image)|BrandingText|BringToFront|Call(?:InstDLL)?|Caption|ChangeUI|CheckBitmap|ClearErrors|CompletedText|ComponentText|CopyFiles|CRCCheck|Create(?:Directory|Font|ShortCut)|Delete(?:INISec|INIStr|RegKey|RegValue)?|Detail(?:Print|sButtonText)|Dialer|Dir(?:Text|Var|Verify)|EnableWindow|Enum(?:RegKey|RegValue)|Exch|Exec(?:Shell(?:Wait)?|Wait)?|ExpandEnvStrings|File(?:BufSize|Close|ErrorText|Open|Read|ReadByte|ReadUTF16LE|ReadWord|WriteUTF16LE|Seek|Write|WriteByte|WriteWord)?|Find(?:Close|First|Next|Window)|FlushINI|Get(?:CurInstType|CurrentAddress|DlgItem|DLLVersion(?:Local)?|ErrorLevel|FileTime(?:Local)?|FullPathName|Function(?:Address|End)?|InstDirError|LabelAddress|TempFileName)|Goto|HideWindow|Icon|If(?:Abort|Errors|FileExists|RebootFlag|Silent)|InitPluginsDir|Install(?:ButtonText|Colors|Dir(?:RegKey)?)|InstProgressFlags|Inst(?:Type(?:GetText|SetText)?)|Int(?:64|Ptr)?CmpU?|Int(?:64)?Fmt|Int(?:Ptr)?Op|IsWindow|Lang(?:DLL|String)|License(?:BkColor|Data|ForceSelection|LangString|Text)|LoadLanguageFile|LockWindow|Log(?:Set|Text)|Manifest(?:DPIAware|SupportedOS)|Math|MessageBox|MiscButtonText|Name|Nop|ns(?:Dialogs|Exec)|NSISdl|OutFile|Page(?:Callbacks)?|PE(?:DllCharacteristics|SubsysVer)|Pop|Push|Quit|Read(?:EnvStr|INIStr|RegDWORD|RegStr)|Reboot|RegDLL|Rename|RequestExecutionLevel|ReserveFile|Return|RMDir|SearchPath|Section(?:End|GetFlags|GetInstTypes|GetSize|GetText|Group|In|SetFlags|SetInstTypes|SetSize|SetText)?|SendMessage|Set(?:AutoClose|BrandingImage|Compress|Compressor(?:DictSize)?|CtlColors|CurInstType|DatablockOptimize|DateSave|Details(?:Print|View)|ErrorLevel|Errors|FileAttributes|Font|OutPath|Overwrite|PluginUnload|RebootFlag|RegView|ShellVarContext|Silent)|Show(?:InstDetails|UninstDetails|Window)|Silent(?:Install|UnInstall)|Sleep|SpaceTexts|Splash|StartMenu|Str(?:CmpS?|Cpy|Len)|SubCaption|System|Unicode|Uninstall(?:ButtonText|Caption|Icon|SubCaption|Text)|UninstPage|UnRegDLL|UserInfo|Var|VI(?:AddVersionKey|FileVersion|ProductVersion)|VPatch|WindowIcon|Write(?:INIStr|Reg(?:Bin|DWORD|ExpandStr|MultiStr|None|Str)|Uninstaller)|XPStyle)\\b/m,\n    lookbehind: true\n  },\n  'property': /\\b(?:admin|all|auto|both|colored|false|force|hide|highest|lastused|leave|listonly|none|normal|notset|off|on|open|print|show|silent|silentlog|smooth|textonly|true|user|ARCHIVE|FILE_(ATTRIBUTE_ARCHIVE|ATTRIBUTE_NORMAL|ATTRIBUTE_OFFLINE|ATTRIBUTE_READONLY|ATTRIBUTE_SYSTEM|ATTRIBUTE_TEMPORARY)|HK((CR|CU|LM)(32|64)?|DD|PD|U)|HKEY_(CLASSES_ROOT|CURRENT_CONFIG|CURRENT_USER|DYN_DATA|LOCAL_MACHINE|PERFORMANCE_DATA|USERS)|ID(ABORT|CANCEL|IGNORE|NO|OK|RETRY|YES)|MB_(ABORTRETRYIGNORE|DEFBUTTON1|DEFBUTTON2|DEFBUTTON3|DEFBUTTON4|ICONEXCLAMATION|ICONINFORMATION|ICONQUESTION|ICONSTOP|OK|OKCANCEL|RETRYCANCEL|RIGHT|RTLREADING|SETFOREGROUND|TOPMOST|USERICON|YESNO)|NORMAL|OFFLINE|READONLY|SHCTX|SHELL_CONTEXT|SYSTEM|TEMPORARY)\\b/,\n  'constant': /\\${[\\w\\.:\\^-]+}|\\$\\([\\w\\.:\\^-]+\\)/i,\n  'variable': /\\$\\w+/i,\n  'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n  'operator': /--?|\\+\\+?|<=?|>=?|==?=?|&&?|\\|\\|?|[?*\\/~^%]/,\n  'punctuation': /[{}[\\];(),.:]/,\n  'important': {\n    pattern: /(^\\s*)!(?:addincludedir|addplugindir|appendfile|cd|define|delfile|echo|else|endif|error|execute|finalize|getdllversion|gettlbversion|ifdef|ifmacrodef|ifmacrondef|ifndef|if|include|insertmacro|macroend|macro|makensis|packhdr|pragma|searchparse|searchreplace|system|tempfile|undef|verbose|warning)\\b/mi,\n    lookbehind: true\n  }\n};\nPrism.languages.objectivec = Prism.languages.extend('c', {\n  'keyword': /\\b(?:asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while|in|self|super)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,\n  'string': /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|@\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n  'operator': /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/\n});\ndelete Prism.languages.objectivec['class-name'];\nPrism.languages.ocaml = {\n  'comment': /\\(\\*[\\s\\S]*?\\*\\)/,\n  'string': [{\n    pattern: /\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  }, {\n    pattern: /(['`])(?:\\\\(?:\\d+|x[\\da-f]+|.)|(?!\\1)[^\\\\\\r\\n])\\1/i,\n    greedy: true\n  }],\n  'number': /\\b(?:0x[\\da-f][\\da-f_]+|(?:0[bo])?\\d[\\d_]*\\.?[\\d_]*(?:e[+-]?[\\d_]+)?)/i,\n  'type': {\n    pattern: /\\B['`]\\w*/,\n    alias: 'variable'\n  },\n  'directive': {\n    pattern: /\\B#\\w+/,\n    alias: 'function'\n  },\n  'keyword': /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|object|of|open|prefix|private|rec|then|sig|struct|to|try|type|val|value|virtual|where|while|with)\\b/,\n  'boolean': /\\b(?:false|true)\\b/,\n  // Custom operators are allowed\n  'operator': /:=|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lxor|lsl|lsr|mod|nor|or)\\b/,\n  'punctuation': /[(){}\\[\\]|_.,:;]/\n};\n\n(function (Prism) {\n  /* OpenCL kernel language */\n  Prism.languages.opencl = Prism.languages.extend('c', {\n    // Extracted from the official specs (2.0) and http://streamcomputing.eu/downloads/?opencl.lang (opencl-keywords, opencl-types) and http://sourceforge.net/tracker/?func=detail&aid=2957794&group_id=95717&atid=612384 (Words2, partly Words3)\n    'keyword': /\\b(?:__attribute__|(?:__)?(?:constant|global|kernel|local|private|read_only|read_write|write_only)|_cl_(?:command_queue|context|device_id|event|kernel|mem|platform_id|program|sampler)|auto|break|case|cl_(?:image_format|mem_fence_flags)|clk_event_t|complex|const|continue|default|do|(?:float|double)(?:16(?:x(?:1|16|2|4|8))?|1x(?:1|16|2|4|8)|2(?:x(?:1|16|2|4|8))?|3|4(?:x(?:1|16|2|4|8))?|8(?:x(?:1|16|2|4|8))?)?|else|enum|event_t|extern|for|goto|(?:u?(?:char|short|int|long)|half|quad|bool)(?:2|3|4|8|16)?|if|image(?:1d_(?:array_|buffer_)?t|2d_(?:array_(?:depth_|msaa_depth_|msaa_)?|depth_|msaa_depth_|msaa_)?t|3d_t)|imaginary|inline|intptr_t|ndrange_t|packed|pipe|ptrdiff_t|queue_t|register|reserve_id_t|restrict|return|sampler_t|signed|size_t|sizeof|static|struct|switch|typedef|uintptr_t|uniform|union|unsigned|void|volatile|while)\\b/,\n    // Extracted from http://streamcomputing.eu/downloads/?opencl.lang (global-vars, opencl-dev)\n    'function-opencl-kernel': {\n      pattern: /\\b(?:abs(?:_diff)?|a?(?:cos|sin)(?:h|pi)?|add_sat|aligned|all|and|any|async(?:_work_group_copy|_work_group_strided_copy)?|atan(?:2?(?:pi)?|h)?|atom_(?:add|and|cmpxchg|dec|inc|max|min|or|sub|xchg|xor)|barrier|bitselect|cbrt|ceil|clamp|clz|copies|copysign|cross|degrees|distance|dot|endian|erf|erfc|exp(?:2|10)?|expm1|fabs|fast_(?:distance|length|normalize)|fdim|floor|fma|fmax|fmin|fract|frexp|fro|from|get_(?:global_(?:id|offset|size)|group_id|image_(?:channel_data_type|channel_order|depth|dim|height|width)|local(?:_id|_size)|num_groups|work_dim)|hadd|(?:half|native)_(?:cos|divide|exp(?:2|10)?|log(?:2|10)?|powr|recip|r?sqrt|sin|tan)|hypot|ilogb|is(?:equal|finite|greater(?:equal)?|inf|less(?:equal|greater)?|nan|normal|notequal|(?:un)?ordered)|ldexp|length|lgamma|lgamma_r|log(?:b|1p|2|10)?|mad(?:24|_hi|_sat)?|max|mem(?:_fence)?|min|mix|modf|mul24|mul_hi|nan|nextafter|normalize|pow[nr]?|prefetch|radians|read_(?:image)(?:f|h|u?i)|read_mem_fence|remainder|remquo|reqd_work_group_size|rhadd|rint|rootn|rotate|round|rsqrt|select|shuffle2?|sign|signbit|sincos|smoothstep|sqrt|step|sub_sat|tan|tanh|tanpi|tgamma|to|trunc|upsample|vec_(?:step|type_hint)|v(?:load|store)(?:_half)?(?:2|3|4|8|16)?|v(?:loada_half|storea?(?:_half)?)(?:2|3|4|8|16)?(?:_(?:rte|rtn|rtp|rtz))?|wait_group_events|work_group_size_hint|write_image(?:f|h|u?i)|write_mem_fence)\\b/,\n      alias: 'function'\n    },\n    // Extracted from http://streamcomputing.eu/downloads/?opencl.lang (opencl-const)\n    'constant-opencl-kernel': {\n      pattern: /\\b(?:CHAR_(?:BIT|MAX|MIN)|CLK_(?:ADDRESS_(?:CLAMP(?:_TO_EDGE)?|NONE|REPEAT)|FILTER_(?:LINEAR|NEAREST)|(?:LOCAL|GLOBAL)_MEM_FENCE|NORMALIZED_COORDS_(?:FALSE|TRUE))|CL_(?:BGRA|(?:HALF_)?FLOAT|INTENSITY|LUMINANCE|A?R?G?B?[Ax]?|(?:(?:UN)?SIGNED|[US]NORM)_(?:INT(?:8|16|32))|UNORM_(?:INT_101010|SHORT_(?:555|565)))|(?:DBL|FLT)_(?:DIG|EPSILON|MANT_DIG|(?:MIN|MAX)(?:(?:_10)?_EXP)?)|FLT_RADIX|HUGE_VALF|INFINITY|(?:INT|LONG|SCHAR|SHRT|UCHAR|UINT|ULONG)_(?:MAX|MIN)|MAXFLOAT|M_(?:[12]_PI|2_SQRTPI|E|LN(?:2|10)|LOG(?:10|2)E?|PI[24]?|SQRT(?:1_2|2))|NAN)\\b/,\n      alias: 'constant'\n    }\n  });\n  var attributes = {\n    // Extracted from http://streamcomputing.eu/downloads/?opencl_host.lang (opencl-types and opencl-host)\n    'type-opencl-host': {\n      pattern: /\\b(?:cl_(?:GLenum|GLint|GLuin|addressing_mode|bitfield|bool|buffer_create_type|build_status|channel_(?:order|type)|(?:u?(?:char|short|int|long)|float|double)(?:2|3|4|8|16)?|command_(?:queue(?:_info|_properties)?|type)|context(?:_info|_properties)?|device_(?:exec_capabilities|fp_config|id|info|local_mem_type|mem_cache_type|type)|(?:event|sampler)(?:_info)?|filter_mode|half|image_info|kernel(?:_info|_work_group_info)?|map_flags|mem(?:_flags|_info|_object_type)?|platform_(?:id|info)|profiling_info|program(?:_build_info|_info)?))\\b/,\n      alias: 'keyword'\n    },\n    'boolean-opencl-host': {\n      pattern: /\\bCL_(?:TRUE|FALSE)\\b/,\n      alias: 'boolean'\n    },\n    // Extracted from cl.h (2.0) and http://streamcomputing.eu/downloads/?opencl_host.lang (opencl-const)\n    'constant-opencl-host': {\n      pattern: /\\bCL_(?:A|ABGR|ADDRESS_(?:CLAMP(?:_TO_EDGE)?|MIRRORED_REPEAT|NONE|REPEAT)|ARGB|BGRA|BLOCKING|BUFFER_CREATE_TYPE_REGION|BUILD_(?:ERROR|IN_PROGRESS|NONE|PROGRAM_FAILURE|SUCCESS)|COMMAND_(?:ACQUIRE_GL_OBJECTS|BARRIER|COPY_(?:BUFFER(?:_RECT|_TO_IMAGE)?|IMAGE(?:_TO_BUFFER)?)|FILL_(?:BUFFER|IMAGE)|MAP(?:_BUFFER|_IMAGE)|MARKER|MIGRATE(?:_SVM)?_MEM_OBJECTS|NATIVE_KERNEL|NDRANGE_KERNEL|READ_(?:BUFFER(?:_RECT)?|IMAGE)|RELEASE_GL_OBJECTS|SVM_(?:FREE|MAP|MEMCPY|MEMFILL|UNMAP)|TASK|UNMAP_MEM_OBJECT|USER|WRITE_(?:BUFFER(?:_RECT)?|IMAGE))|COMPILER_NOT_AVAILABLE|COMPILE_PROGRAM_FAILURE|COMPLETE|CONTEXT_(?:DEVICES|INTEROP_USER_SYNC|NUM_DEVICES|PLATFORM|PROPERTIES|REFERENCE_COUNT)|DEPTH(?:_STENCIL)?|DEVICE_(?:ADDRESS_BITS|AFFINITY_DOMAIN_(?:L[1-4]_CACHE|NEXT_PARTITIONABLE|NUMA)|AVAILABLE|BUILT_IN_KERNELS|COMPILER_AVAILABLE|DOUBLE_FP_CONFIG|ENDIAN_LITTLE|ERROR_CORRECTION_SUPPORT|EXECUTION_CAPABILITIES|EXTENSIONS|GLOBAL_(?:MEM_(?:CACHELINE_SIZE|CACHE_SIZE|CACHE_TYPE|SIZE)|VARIABLE_PREFERRED_TOTAL_SIZE)|HOST_UNIFIED_MEMORY|IL_VERSION|IMAGE(?:2D_MAX_(?:HEIGHT|WIDTH)|3D_MAX_(?:DEPTH|HEIGHT|WIDTH)|_BASE_ADDRESS_ALIGNMENT|_MAX_ARRAY_SIZE|_MAX_BUFFER_SIZE|_PITCH_ALIGNMENT|_SUPPORT)|LINKER_AVAILABLE|LOCAL_MEM_SIZE|LOCAL_MEM_TYPE|MAX_(?:CLOCK_FREQUENCY|COMPUTE_UNITS|CONSTANT_ARGS|CONSTANT_BUFFER_SIZE|GLOBAL_VARIABLE_SIZE|MEM_ALLOC_SIZE|NUM_SUB_GROUPS|ON_DEVICE_(?:EVENTS|QUEUES)|PARAMETER_SIZE|PIPE_ARGS|READ_IMAGE_ARGS|READ_WRITE_IMAGE_ARGS|SAMPLERS|WORK_GROUP_SIZE|WORK_ITEM_DIMENSIONS|WORK_ITEM_SIZES|WRITE_IMAGE_ARGS)|MEM_BASE_ADDR_ALIGN|MIN_DATA_TYPE_ALIGN_SIZE|NAME|NATIVE_VECTOR_WIDTH_(?:CHAR|DOUBLE|FLOAT|HALF|INT|LONG|SHORT)|NOT_(?:AVAILABLE|FOUND)|OPENCL_C_VERSION|PARENT_DEVICE|PARTITION_(?:AFFINITY_DOMAIN|BY_AFFINITY_DOMAIN|BY_COUNTS|BY_COUNTS_LIST_END|EQUALLY|FAILED|MAX_SUB_DEVICES|PROPERTIES|TYPE)|PIPE_MAX_(?:ACTIVE_RESERVATIONS|PACKET_SIZE)|PLATFORM|PREFERRED_(?:GLOBAL_ATOMIC_ALIGNMENT|INTEROP_USER_SYNC|LOCAL_ATOMIC_ALIGNMENT|PLATFORM_ATOMIC_ALIGNMENT|VECTOR_WIDTH_(?:CHAR|DOUBLE|FLOAT|HALF|INT|LONG|SHORT))|PRINTF_BUFFER_SIZE|PROFILE|PROFILING_TIMER_RESOLUTION|QUEUE_(?:ON_(?:DEVICE_(?:MAX_SIZE|PREFERRED_SIZE|PROPERTIES)|HOST_PROPERTIES)|PROPERTIES)|REFERENCE_COUNT|SINGLE_FP_CONFIG|SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS|SVM_(?:ATOMICS|CAPABILITIES|COARSE_GRAIN_BUFFER|FINE_GRAIN_BUFFER|FINE_GRAIN_SYSTEM)|TYPE(?:_ACCELERATOR|_ALL|_CPU|_CUSTOM|_DEFAULT|_GPU)?|VENDOR(?:_ID)?|VERSION)|DRIVER_VERSION|EVENT_(?:COMMAND_(?:EXECUTION_STATUS|QUEUE|TYPE)|CONTEXT|REFERENCE_COUNT)|EXEC_(?:KERNEL|NATIVE_KERNEL|STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST)|FILTER_(?:LINEAR|NEAREST)|FLOAT|FP_(?:CORRECTLY_ROUNDED_DIVIDE_SQRT|DENORM|FMA|INF_NAN|ROUND_TO_INF|ROUND_TO_NEAREST|ROUND_TO_ZERO|SOFT_FLOAT)|GLOBAL|HALF_FLOAT|IMAGE_(?:ARRAY_SIZE|BUFFER|DEPTH|ELEMENT_SIZE|FORMAT|FORMAT_MISMATCH|FORMAT_NOT_SUPPORTED|HEIGHT|NUM_MIP_LEVELS|NUM_SAMPLES|ROW_PITCH|SLICE_PITCH|WIDTH)|INTENSITY|INVALID_(?:ARG_INDEX|ARG_SIZE|ARG_VALUE|BINARY|BUFFER_SIZE|BUILD_OPTIONS|COMMAND_QUEUE|COMPILER_OPTIONS|CONTEXT|DEVICE|DEVICE_PARTITION_COUNT|DEVICE_QUEUE|DEVICE_TYPE|EVENT|EVENT_WAIT_LIST|GLOBAL_OFFSET|GLOBAL_WORK_SIZE|GL_OBJECT|HOST_PTR|IMAGE_DESCRIPTOR|IMAGE_FORMAT_DESCRIPTOR|IMAGE_SIZE|KERNEL|KERNEL_ARGS|KERNEL_DEFINITION|KERNEL_NAME|LINKER_OPTIONS|MEM_OBJECT|MIP_LEVEL|OPERATION|PIPE_SIZE|PLATFORM|PROGRAM|PROGRAM_EXECUTABLE|PROPERTY|QUEUE_PROPERTIES|SAMPLER|VALUE|WORK_DIMENSION|WORK_GROUP_SIZE|WORK_ITEM_SIZE)|KERNEL_(?:ARG_(?:ACCESS_(?:NONE|QUALIFIER|READ_ONLY|READ_WRITE|WRITE_ONLY)|ADDRESS_(?:CONSTANT|GLOBAL|LOCAL|PRIVATE|QUALIFIER)|INFO_NOT_AVAILABLE|NAME|TYPE_(?:CONST|NAME|NONE|PIPE|QUALIFIER|RESTRICT|VOLATILE))|ATTRIBUTES|COMPILE_NUM_SUB_GROUPS|COMPILE_WORK_GROUP_SIZE|CONTEXT|EXEC_INFO_SVM_FINE_GRAIN_SYSTEM|EXEC_INFO_SVM_PTRS|FUNCTION_NAME|GLOBAL_WORK_SIZE|LOCAL_MEM_SIZE|LOCAL_SIZE_FOR_SUB_GROUP_COUNT|MAX_NUM_SUB_GROUPS|MAX_SUB_GROUP_SIZE_FOR_NDRANGE|NUM_ARGS|PREFERRED_WORK_GROUP_SIZE_MULTIPLE|PRIVATE_MEM_SIZE|PROGRAM|REFERENCE_COUNT|SUB_GROUP_COUNT_FOR_NDRANGE|WORK_GROUP_SIZE)|LINKER_NOT_AVAILABLE|LINK_PROGRAM_FAILURE|LOCAL|LUMINANCE|MAP_(?:FAILURE|READ|WRITE|WRITE_INVALIDATE_REGION)|MEM_(?:ALLOC_HOST_PTR|ASSOCIATED_MEMOBJECT|CONTEXT|COPY_HOST_PTR|COPY_OVERLAP|FLAGS|HOST_NO_ACCESS|HOST_PTR|HOST_READ_ONLY|HOST_WRITE_ONLY|KERNEL_READ_AND_WRITE|MAP_COUNT|OBJECT_(?:ALLOCATION_FAILURE|BUFFER|IMAGE1D|IMAGE1D_ARRAY|IMAGE1D_BUFFER|IMAGE2D|IMAGE2D_ARRAY|IMAGE3D|PIPE)|OFFSET|READ_ONLY|READ_WRITE|REFERENCE_COUNT|SIZE|SVM_ATOMICS|SVM_FINE_GRAIN_BUFFER|TYPE|USES_SVM_POINTER|USE_HOST_PTR|WRITE_ONLY)|MIGRATE_MEM_OBJECT_(?:CONTENT_UNDEFINED|HOST)|MISALIGNED_SUB_BUFFER_OFFSET|NONE|NON_BLOCKING|OUT_OF_(?:HOST_MEMORY|RESOURCES)|PIPE_(?:MAX_PACKETS|PACKET_SIZE)|PLATFORM_(?:EXTENSIONS|HOST_TIMER_RESOLUTION|NAME|PROFILE|VENDOR|VERSION)|PROFILING_(?:COMMAND_(?:COMPLETE|END|QUEUED|START|SUBMIT)|INFO_NOT_AVAILABLE)|PROGRAM_(?:BINARIES|BINARY_SIZES|BINARY_TYPE(?:_COMPILED_OBJECT|_EXECUTABLE|_LIBRARY|_NONE)?|BUILD_(?:GLOBAL_VARIABLE_TOTAL_SIZE|LOG|OPTIONS|STATUS)|CONTEXT|DEVICES|IL|KERNEL_NAMES|NUM_DEVICES|NUM_KERNELS|REFERENCE_COUNT|SOURCE)|QUEUED|QUEUE_(?:CONTEXT|DEVICE|DEVICE_DEFAULT|ON_DEVICE|ON_DEVICE_DEFAULT|OUT_OF_ORDER_EXEC_MODE_ENABLE|PROFILING_ENABLE|PROPERTIES|REFERENCE_COUNT|SIZE)|R|RA|READ_(?:ONLY|WRITE)_CACHE|RG|RGB|RGBA|RGBx|RGx|RUNNING|Rx|SAMPLER_(?:ADDRESSING_MODE|CONTEXT|FILTER_MODE|LOD_MAX|LOD_MIN|MIP_FILTER_MODE|NORMALIZED_COORDS|REFERENCE_COUNT)|(?:UN)?SIGNED_INT(?:8|16|32)|SNORM_INT(?:8|16)|SUBMITTED|SUCCESS|UNORM_INT(?:16|24|8|_101010|_101010_2)|UNORM_SHORT_(?:555|565)|VERSION_(?:1_0|1_1|1_2|2_0|2_1)|sBGRA|sRGB|sRGBA|sRGBx)\\b/,\n      alias: 'constant'\n    },\n    // Extracted from cl.h (2.0) and http://streamcomputing.eu/downloads/?opencl_host.lang (opencl-host)\n    'function-opencl-host': {\n      pattern: /\\bcl(?:BuildProgram|CloneKernel|CompileProgram|Create(?:Buffer|CommandQueue(?:WithProperties)?|Context|ContextFromType|Image|Image2D|Image3D|Kernel|KernelsInProgram|Pipe|ProgramWith(?:Binary|BuiltInKernels|IL|Source)|Sampler|SamplerWithProperties|SubBuffer|SubDevices|UserEvent)|Enqueue(?:(?:Barrier|Marker)(?:WithWaitList)?|Copy(?:Buffer(?:Rect|ToImage)?|Image(?:ToBuffer)?)|(?:Fill|Map)(?:Buffer|Image)|MigrateMemObjects|NDRangeKernel|NativeKernel|(?:Read|Write)(?:Buffer(?:Rect)?|Image)|SVM(?:Free|Map|MemFill|Memcpy|MigrateMem|Unmap)|Task|UnmapMemObject|WaitForEvents)|Finish|Flush|Get(?:CommandQueueInfo|ContextInfo|Device(?:AndHostTimer|IDs|Info)|Event(?:Profiling)?Info|ExtensionFunctionAddress(?:ForPlatform)?|HostTimer|ImageInfo|Kernel(?:ArgInfo|Info|SubGroupInfo|WorkGroupInfo)|MemObjectInfo|PipeInfo|Platform(?:IDs|Info)|Program(?:Build)?Info|SamplerInfo|SupportedImageFormats)|LinkProgram|(?:Release|Retain)(?:CommandQueue|Context|Device|Event|Kernel|MemObject|Program|Sampler)|SVM(?:Alloc|Free)|Set(?:CommandQueueProperty|DefaultDeviceCommandQueue|EventCallback|Kernel(?:Arg(?:SVMPointer)?|ExecInfo)|Kernel|MemObjectDestructorCallback|UserEventStatus)|Unload(?:Platform)?Compiler|WaitForEvents)\\b/,\n      alias: 'function'\n    }\n  };\n  /* OpenCL host API */\n\n  Prism.languages.insertBefore('c', 'keyword', attributes); // Extracted from doxygen class list http://github.khronos.org/OpenCL-CLHPP/annotated.html\n\n  attributes['type-opencl-host-c++'] = {\n    pattern: /\\b(?:Buffer|BufferGL|BufferRenderGL|CommandQueue|Context|Device|DeviceCommandQueue|EnqueueArgs|Event|Image|Image1D|Image1DArray|Image1DBuffer|Image2D|Image2DArray|Image2DGL|Image3D|Image3DGL|ImageFormat|ImageGL|Kernel|KernelFunctor|LocalSpaceArg|Memory|NDRange|Pipe|Platform|Program|Sampler|SVMAllocator|SVMTraitAtomic|SVMTraitCoarse|SVMTraitFine|SVMTraitReadOnly|SVMTraitReadWrite|SVMTraitWriteOnly|UserEvent)\\b/,\n    alias: 'keyword'\n  }; // C++ includes everything from the OpenCL C host API plus the classes defined in cl2.h\n\n  Prism.languages.insertBefore('cpp', 'keyword', attributes);\n})(Prism);\n\nPrism.languages.oz = {\n  'comment': /\\/\\*[\\s\\S]*?\\*\\/|%.*/,\n  'string': {\n    pattern: /\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"/,\n    greedy: true\n  },\n  'atom': {\n    pattern: /'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n    greedy: true,\n    alias: 'builtin'\n  },\n  'keyword': /[$_]|\\[\\]|\\b(?:at|attr|case|catch|choice|class|cond|declare|define|dis|else(?:case|if)?|end|export|fail|false|feat|finally|from|fun|functor|if|import|in|local|lock|meth|nil|not|of|or|prepare|proc|prop|raise|require|self|skip|then|thread|true|try|unit)\\b/,\n  'function': [/[a-z][A-Za-z\\d]*(?=\\()/, {\n    pattern: /(\\{)[A-Z][A-Za-z\\d]*/,\n    lookbehind: true\n  }],\n  'number': /\\b(?:0[bx][\\da-f]+|\\d+\\.?\\d*(?:e~?\\d+)?\\b)|&(?:[^\\\\]|\\\\(?:\\d{3}|.))/i,\n  'variable': /\\b[A-Z][A-Za-z\\d]*|`(?:[^`\\\\]|\\\\.)+`/,\n  'attr-name': /\\w+(?=:)/,\n  'operator': /:(?:=|::?)|<[-:=]?|=(?:=|<?:?)|>=?:?|\\\\=:?|!!?|[|#+\\-*\\/,~^@]|\\b(?:andthen|div|mod|orelse)\\b/,\n  'punctuation': /[\\[\\](){}.:;?]/\n};\nPrism.languages.parigp = {\n  'comment': /\\/\\*[\\s\\S]*?\\*\\/|\\\\\\\\.*/,\n  'string': {\n    pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,\n    greedy: true\n  },\n  // PARI/GP does not care about white spaces at all\n  // so let's process the keywords to build an appropriate regexp\n  // (e.g. \"b *r *e *a *k\", etc.)\n  'keyword': function () {\n    var keywords = ['breakpoint', 'break', 'dbg_down', 'dbg_err', 'dbg_up', 'dbg_x', 'forcomposite', 'fordiv', 'forell', 'forpart', 'forprime', 'forstep', 'forsubgroup', 'forvec', 'for', 'iferr', 'if', 'local', 'my', 'next', 'return', 'until', 'while'];\n    keywords = keywords.map(function (keyword) {\n      return keyword.split('').join(' *');\n    }).join('|');\n    return RegExp('\\\\b(?:' + keywords + ')\\\\b');\n  }(),\n  'function': /\\w[\\w ]*?(?= *\\()/,\n  'number': {\n    // The lookbehind and the negative lookahead prevent from breaking the .. operator\n    pattern: /((?:\\. *\\. *)?)(?:\\d(?: *\\d)*(?: *(?!\\. *\\.)\\.(?: *\\d)*)?|\\. *\\d(?: *\\d)*)(?: *e *[+-]? *\\d(?: *\\d)*)?/i,\n    lookbehind: true\n  },\n  'operator': /\\. *\\.|[*\\/!](?: *=)?|%(?: *=|(?: *#)?(?: *')*)?|\\+(?: *[+=])?|-(?: *[-=>])?|<(?:(?: *<)?(?: *=)?| *>)?|>(?: *>)?(?: *=)?|=(?: *=){0,2}|\\\\(?: *\\/)?(?: *=)?|&(?: *&)?|\\| *\\||['#~^]/,\n  'punctuation': /[\\[\\]{}().,:;|]/\n};\n\n(function (Prism) {\n  var parser = Prism.languages.parser = Prism.languages.extend('markup', {\n    'keyword': {\n      pattern: /(^|[^^])(?:\\^(?:case|eval|for|if|switch|throw)\\b|@(?:BASE|CLASS|GET(?:_DEFAULT)?|OPTIONS|SET_DEFAULT|USE)\\b)/,\n      lookbehind: true\n    },\n    'variable': {\n      pattern: /(^|[^^])\\B\\$(?:\\w+|(?=[.{]))(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\.|:+/\n      }\n    },\n    'function': {\n      pattern: /(^|[^^])\\B[@^]\\w+(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n      lookbehind: true,\n      inside: {\n        'keyword': {\n          pattern: /(^@)(?:GET_|SET_)/,\n          lookbehind: true\n        },\n        'punctuation': /\\.|:+/\n      }\n    },\n    'escape': {\n      pattern: /\\^(?:[$^;@()\\[\\]{}\"':]|#[a-f\\d]*)/i,\n      alias: 'builtin'\n    },\n    'punctuation': /[\\[\\](){};]/\n  });\n  parser = Prism.languages.insertBefore('parser', 'keyword', {\n    'parser-comment': {\n      pattern: /(\\s)#.*/,\n      lookbehind: true,\n      alias: 'comment'\n    },\n    'expression': {\n      // Allow for 3 levels of depth\n      pattern: /(^|[^^])\\((?:[^()]|\\((?:[^()]|\\((?:[^()])*\\))*\\))*\\)/,\n      greedy: true,\n      lookbehind: true,\n      inside: {\n        'string': {\n          pattern: /(^|[^^])([\"'])(?:(?!\\2)[^^]|\\^[\\s\\S])*\\2/,\n          lookbehind: true\n        },\n        'keyword': parser.keyword,\n        'variable': parser.variable,\n        'function': parser.function,\n        'boolean': /\\b(?:true|false)\\b/,\n        'number': /\\b(?:0x[a-f\\d]+|\\d+\\.?\\d*(?:e[+-]?\\d+)?)\\b/i,\n        'escape': parser.escape,\n        'operator': /[~+*\\/\\\\%]|!(?:\\|\\|?|=)?|&&?|\\|\\|?|==|<[<=]?|>[>=]?|-[fd]?|\\b(?:def|eq|ge|gt|in|is|le|lt|ne)\\b/,\n        'punctuation': parser.punctuation\n      }\n    }\n  });\n  parser = Prism.languages.insertBefore('inside', 'punctuation', {\n    'expression': parser.expression,\n    'keyword': parser.keyword,\n    'variable': parser.variable,\n    'function': parser.function,\n    'escape': parser.escape,\n    'parser-punctuation': {\n      pattern: parser.punctuation,\n      alias: 'punctuation'\n    }\n  }, parser['tag'].inside['attr-value']);\n})(Prism); // Based on Free Pascal\n\n/* TODO\n\tSupport inline asm ?\n*/\n\n\nPrism.languages.pascal = {\n  'comment': [/\\(\\*[\\s\\S]+?\\*\\)/, /\\{[\\s\\S]+?\\}/, /\\/\\/.*/],\n  'string': {\n    pattern: /(?:'(?:''|[^'\\r\\n])*'|#[&$%]?[a-f\\d]+)+|\\^[a-z]/i,\n    greedy: true\n  },\n  'keyword': [{\n    // Turbo Pascal\n    pattern: /(^|[^&])\\b(?:absolute|array|asm|begin|case|const|constructor|destructor|do|downto|else|end|file|for|function|goto|if|implementation|inherited|inline|interface|label|nil|object|of|operator|packed|procedure|program|record|reintroduce|repeat|self|set|string|then|to|type|unit|until|uses|var|while|with)\\b/i,\n    lookbehind: true\n  }, {\n    // Free Pascal\n    pattern: /(^|[^&])\\b(?:dispose|exit|false|new|true)\\b/i,\n    lookbehind: true\n  }, {\n    // Object Pascal\n    pattern: /(^|[^&])\\b(?:class|dispinterface|except|exports|finalization|finally|initialization|inline|library|on|out|packed|property|raise|resourcestring|threadvar|try)\\b/i,\n    lookbehind: true\n  }, {\n    // Modifiers\n    pattern: /(^|[^&])\\b(?:absolute|abstract|alias|assembler|bitpacked|break|cdecl|continue|cppdecl|cvar|default|deprecated|dynamic|enumerator|experimental|export|external|far|far16|forward|generic|helper|implements|index|interrupt|iochecks|local|message|name|near|nodefault|noreturn|nostackframe|oldfpccall|otherwise|overload|override|pascal|platform|private|protected|public|published|read|register|reintroduce|result|safecall|saveregisters|softfloat|specialize|static|stdcall|stored|strict|unaligned|unimplemented|varargs|virtual|write)\\b/i,\n    lookbehind: true\n  }],\n  'number': [// Hexadecimal, octal and binary\n  /(?:[&%]\\d+|\\$[a-f\\d]+)/i, // Decimal\n  /\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?/i],\n  'operator': [/\\.\\.|\\*\\*|:=|<[<=>]?|>[>=]?|[+\\-*\\/]=?|[@^=]/i, {\n    pattern: /(^|[^&])\\b(?:and|as|div|exclude|in|include|is|mod|not|or|shl|shr|xor)\\b/,\n    lookbehind: true\n  }],\n  'punctuation': /\\(\\.|\\.\\)|[()\\[\\]:;,.]/\n};\nPrism.languages.objectpascal = Prism.languages.pascal;\nPrism.languages.perl = {\n  'comment': [{\n    // POD\n    pattern: /(^\\s*)=\\w+[\\s\\S]*?=cut.*/m,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^\\\\$])#.*/,\n    lookbehind: true\n  }],\n  // TODO Could be nice to handle Heredoc too.\n  'string': [// q/.../\n  {\n    pattern: /\\b(?:q|qq|qx|qw)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n    greedy: true\n  }, // q a...a\n  {\n    pattern: /\\b(?:q|qq|qx|qw)\\s+([a-zA-Z0-9])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n    greedy: true\n  }, // q(...)\n  {\n    pattern: /\\b(?:q|qq|qx|qw)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,\n    greedy: true\n  }, // q{...}\n  {\n    pattern: /\\b(?:q|qq|qx|qw)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}/,\n    greedy: true\n  }, // q[...]\n  {\n    pattern: /\\b(?:q|qq|qx|qw)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]/,\n    greedy: true\n  }, // q<...>\n  {\n    pattern: /\\b(?:q|qq|qx|qw)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,\n    greedy: true\n  }, // \"...\", `...`\n  {\n    pattern: /(\"|`)(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n    greedy: true\n  }, // '...'\n  // FIXME Multi-line single-quoted strings are not supported as they would break variables containing '\n  {\n    pattern: /'(?:[^'\\\\\\r\\n]|\\\\.)*'/,\n    greedy: true\n  }],\n  'regex': [// m/.../\n  {\n    pattern: /\\b(?:m|qr)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[msixpodualngc]*/,\n    greedy: true\n  }, // m a...a\n  {\n    pattern: /\\b(?:m|qr)\\s+([a-zA-Z0-9])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[msixpodualngc]*/,\n    greedy: true\n  }, // m(...)\n  {\n    pattern: /\\b(?:m|qr)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[msixpodualngc]*/,\n    greedy: true\n  }, // m{...}\n  {\n    pattern: /\\b(?:m|qr)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}[msixpodualngc]*/,\n    greedy: true\n  }, // m[...]\n  {\n    pattern: /\\b(?:m|qr)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\][msixpodualngc]*/,\n    greedy: true\n  }, // m<...>\n  {\n    pattern: /\\b(?:m|qr)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>[msixpodualngc]*/,\n    greedy: true\n  }, // The lookbehinds prevent -s from breaking\n  // FIXME We don't handle change of separator like s(...)[...]\n  // s/.../.../\n  {\n    pattern: /(^|[^-]\\b)(?:s|tr|y)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2[msixpodualngcer]*/,\n    lookbehind: true,\n    greedy: true\n  }, // s a...a...a\n  {\n    pattern: /(^|[^-]\\b)(?:s|tr|y)\\s+([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2[msixpodualngcer]*/,\n    lookbehind: true,\n    greedy: true\n  }, // s(...)(...)\n  {\n    pattern: /(^|[^-]\\b)(?:s|tr|y)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[msixpodualngcer]*/,\n    lookbehind: true,\n    greedy: true\n  }, // s{...}{...}\n  {\n    pattern: /(^|[^-]\\b)(?:s|tr|y)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}[msixpodualngcer]*/,\n    lookbehind: true,\n    greedy: true\n  }, // s[...][...]\n  {\n    pattern: /(^|[^-]\\b)(?:s|tr|y)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\][msixpodualngcer]*/,\n    lookbehind: true,\n    greedy: true\n  }, // s<...><...>\n  {\n    pattern: /(^|[^-]\\b)(?:s|tr|y)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>[msixpodualngcer]*/,\n    lookbehind: true,\n    greedy: true\n  }, // /.../\n  // The look-ahead tries to prevent two divisions on\n  // the same line from being highlighted as regex.\n  // This does not support multi-line regex.\n  {\n    pattern: /\\/(?:[^\\/\\\\\\r\\n]|\\\\.)*\\/[msixpodualngc]*(?=\\s*(?:$|[\\r\\n,.;})&|\\-+*~<>!?^]|(lt|gt|le|ge|eq|ne|cmp|not|and|or|xor|x)\\b))/,\n    greedy: true\n  }],\n  // FIXME Not sure about the handling of ::, ', and #\n  'variable': [// ${^POSTMATCH}\n  /[&*$@%]\\{\\^[A-Z]+\\}/, // $^V\n  /[&*$@%]\\^[A-Z_]/, // ${...}\n  /[&*$@%]#?(?=\\{)/, // $foo\n  /[&*$@%]#?(?:(?:::)*'?(?!\\d)[\\w$]+)+(?:::)*/i, // $1\n  /[&*$@%]\\d+/, // $_, @_, %!\n  // The negative lookahead prevents from breaking the %= operator\n  /(?!%=)[$@%][!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~]/],\n  'filehandle': {\n    // <>, <FOO>, _\n    pattern: /<(?![<=])\\S*>|\\b_\\b/,\n    alias: 'symbol'\n  },\n  'vstring': {\n    // v1.2, 1.2.3\n    pattern: /v\\d+(?:\\.\\d+)*|\\d+(?:\\.\\d+){2,}/,\n    alias: 'string'\n  },\n  'function': {\n    pattern: /sub [a-z0-9_]+/i,\n    inside: {\n      keyword: /sub/\n    }\n  },\n  'keyword': /\\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|say|state|sub|switch|undef|unless|until|use|when|while)\\b/,\n  'number': /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0b[01](?:_?[01])*|(?:\\d(?:_?\\d)*)?\\.?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)\\b/,\n  'operator': /-[rwxoRWXOezsfdlpSbctugkTBMAC]\\b|\\+[+=]?|-[-=>]?|\\*\\*?=?|\\/\\/?=?|=[=~>]?|~[~=]?|\\|\\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\\.(?:=|\\.\\.?)?|[\\\\?]|\\bx(?:=|\\b)|\\b(?:lt|gt|le|ge|eq|ne|cmp|not|and|or|xor)\\b/,\n  'punctuation': /[{}[\\];(),:]/\n};\n\n(function (Prism) {\n  var javascript = Prism.languages.javascript;\n  var type = /{(?:[^{}]|{(?:[^{}]|{[^{}]*})*})+}/.source;\n  var parameterPrefix = '(@(?:param|arg|argument|property)\\\\s+(?:' + type + '\\\\s+)?)';\n  Prism.languages.jsdoc = Prism.languages.extend('javadoclike', {\n    'parameter': {\n      // @param {string} foo - foo bar\n      pattern: RegExp(parameterPrefix + /[$\\w\\xA0-\\uFFFF.]+(?=\\s|$)/.source),\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\./\n      }\n    }\n  });\n  Prism.languages.insertBefore('jsdoc', 'keyword', {\n    'optional-parameter': {\n      // @param {string} [baz.foo=\"bar\"] foo bar\n      pattern: RegExp(parameterPrefix + /\\[[$\\w\\xA0-\\uFFFF.]+(?:=[^[\\]]+)?\\](?=\\s|$)/.source),\n      lookbehind: true,\n      inside: {\n        'parameter': {\n          pattern: /(^\\[)[$\\w\\xA0-\\uFFFF\\.]+/,\n          lookbehind: true,\n          inside: {\n            'punctuation': /\\./\n          }\n        },\n        'code': {\n          pattern: /(=)[\\s\\S]*(?=\\]$)/,\n          lookbehind: true,\n          inside: javascript,\n          alias: 'language-javascript'\n        },\n        'punctuation': /[=[\\]]/\n      }\n    },\n    'class-name': [{\n      pattern: RegExp('(@[a-z]+\\\\s+)' + type),\n      lookbehind: true,\n      inside: {\n        'punctuation': /[.,:?=<>|{}()[\\]]/\n      }\n    }, {\n      pattern: /(@(?:augments|extends|class|interface|memberof!?|this)\\s+)[A-Z]\\w*(?:\\.[A-Z]\\w*)*/,\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\./\n      }\n    }],\n    'example': {\n      pattern: /(@example\\s+)[^@]+?(?=\\s*(?:\\*\\s*)?(?:@\\w|\\*\\/))/,\n      lookbehind: true,\n      inside: {\n        'code': {\n          pattern: /^(\\s*(?:\\*\\s*)?).+$/m,\n          lookbehind: true,\n          inside: javascript,\n          alias: 'language-javascript'\n        }\n      }\n    }\n  });\n  Prism.languages.javadoclike.addSupport('javascript', Prism.languages.jsdoc);\n})(Prism);\n\n(function (Prism) {\n  var typeExpression = /(?:[a-zA-Z]\\w*|[|\\\\[\\]])+/.source;\n  Prism.languages.phpdoc = Prism.languages.extend('javadoclike', {\n    'parameter': {\n      pattern: RegExp('(@(?:global|param|property(?:-read|-write)?|var)\\\\s+(?:' + typeExpression + '\\\\s+)?)\\\\$\\\\w+'),\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('phpdoc', 'keyword', {\n    'class-name': [{\n      pattern: RegExp('(@(?:global|package|param|property(?:-read|-write)?|return|subpackage|throws|var)\\\\s+)' + typeExpression),\n      lookbehind: true,\n      inside: {\n        'keyword': /\\b(?:callback|resource|boolean|integer|double|object|string|array|false|float|mixed|bool|null|self|true|void|int)\\b/,\n        'punctuation': /[|\\\\[\\]()]/\n      }\n    }]\n  });\n  Prism.languages.javadoclike.addSupport('php', Prism.languages.phpdoc);\n})(Prism);\n\nPrism.languages.insertBefore('php', 'variable', {\n  'this': /\\$this\\b/,\n  'global': /\\$(?:_(?:SERVER|GET|POST|FILES|REQUEST|SESSION|ENV|COOKIE)|GLOBALS|HTTP_RAW_POST_DATA|argc|argv|php_errormsg|http_response_header)\\b/,\n  'scope': {\n    pattern: /\\b[\\w\\\\]+::/,\n    inside: {\n      keyword: /static|self|parent/,\n      punctuation: /::|\\\\/\n    }\n  }\n});\nPrism.languages.sql = {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n    lookbehind: true\n  },\n  'variable': [{\n    pattern: /@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,\n    greedy: true\n  }, /@[\\w.$]+/],\n  'string': {\n    pattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,\n    greedy: true,\n    lookbehind: true\n  },\n  'function': /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i,\n  // Should we highlight user defined functions too?\n  'keyword': /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURNS?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,\n  'boolean': /\\b(?:TRUE|FALSE|NULL)\\b/i,\n  'number': /\\b0x[\\da-f]+\\b|\\b\\d+\\.?\\d*|\\B\\.\\d+\\b/i,\n  'operator': /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|IN|LIKE|NOT|OR|IS|DIV|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,\n  'punctuation': /[;[\\]()`,.]/\n};\n\n(function (Prism) {\n  var powershell = Prism.languages.powershell = {\n    'comment': [{\n      pattern: /(^|[^`])<#[\\s\\S]*?#>/,\n      lookbehind: true\n    }, {\n      pattern: /(^|[^`])#.*/,\n      lookbehind: true\n    }],\n    'string': [{\n      pattern: /\"(?:`[\\s\\S]|[^`\"])*\"/,\n      greedy: true,\n      inside: {\n        'function': {\n          // Allow for one level of nesting\n          pattern: /(^|[^`])\\$\\((?:\\$\\(.*?\\)|(?!\\$\\()[^\\r\\n)])*\\)/,\n          lookbehind: true,\n          // Populated at end of file\n          inside: {}\n        }\n      }\n    }, {\n      pattern: /'(?:[^']|'')*'/,\n      greedy: true\n    }],\n    // Matches name spaces as well as casts, attribute decorators. Force starting with letter to avoid matching array indices\n    // Supports two levels of nested brackets (e.g. `[OutputType([System.Collections.Generic.List[int]])]`)\n    'namespace': /\\[[a-z](?:\\[(?:\\[[^\\]]*]|[^\\[\\]])*]|[^\\[\\]])*]/i,\n    'boolean': /\\$(?:true|false)\\b/i,\n    'variable': /\\$\\w+\\b/i,\n    // Cmdlets and aliases. Aliases should come last, otherwise \"write\" gets preferred over \"write-host\" for example\n    // Get-Command | ?{ $_.ModuleName -match \"Microsoft.PowerShell.(Util|Core|Management)\" }\n    // Get-Alias | ?{ $_.ReferencedCommand.Module.Name -match \"Microsoft.PowerShell.(Util|Core|Management)\" }\n    'function': [/\\b(?:Add-(?:Computer|Content|History|Member|PSSnapin|Type)|Checkpoint-Computer|Clear-(?:Content|EventLog|History|Item|ItemProperty|Variable)|Compare-Object|Complete-Transaction|Connect-PSSession|ConvertFrom-(?:Csv|Json|StringData)|Convert-Path|ConvertTo-(?:Csv|Html|Json|Xml)|Copy-(?:Item|ItemProperty)|Debug-Process|Disable-(?:ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)|Disconnect-PSSession|Enable-(?:ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)|Enter-PSSession|Exit-PSSession|Export-(?:Alias|Clixml|Console|Csv|FormatData|ModuleMember|PSSession)|ForEach-Object|Format-(?:Custom|List|Table|Wide)|Get-(?:Alias|ChildItem|Command|ComputerRestorePoint|Content|ControlPanelItem|Culture|Date|Event|EventLog|EventSubscriber|FormatData|Help|History|Host|HotFix|Item|ItemProperty|Job|Location|Member|Module|Process|PSBreakpoint|PSCallStack|PSDrive|PSProvider|PSSession|PSSessionConfiguration|PSSnapin|Random|Service|TraceSource|Transaction|TypeData|UICulture|Unique|Variable|WmiObject)|Group-Object|Import-(?:Alias|Clixml|Csv|LocalizedData|Module|PSSession)|Invoke-(?:Command|Expression|History|Item|RestMethod|WebRequest|WmiMethod)|Join-Path|Limit-EventLog|Measure-(?:Command|Object)|Move-(?:Item|ItemProperty)|New-(?:Alias|Event|EventLog|Item|ItemProperty|Module|ModuleManifest|Object|PSDrive|PSSession|PSSessionConfigurationFile|PSSessionOption|PSTransportOption|Service|TimeSpan|Variable|WebServiceProxy)|Out-(?:Default|File|GridView|Host|Null|Printer|String)|Pop-Location|Push-Location|Read-Host|Receive-(?:Job|PSSession)|Register-(?:EngineEvent|ObjectEvent|PSSessionConfiguration|WmiEvent)|Remove-(?:Computer|Event|EventLog|Item|ItemProperty|Job|Module|PSBreakpoint|PSDrive|PSSession|PSSnapin|TypeData|Variable|WmiObject)|Rename-(?:Computer|Item|ItemProperty)|Reset-ComputerMachinePassword|Resolve-Path|Restart-(?:Computer|Service)|Restore-Computer|Resume-(?:Job|Service)|Save-Help|Select-(?:Object|String|Xml)|Send-MailMessage|Set-(?:Alias|Content|Date|Item|ItemProperty|Location|PSBreakpoint|PSDebug|PSSessionConfiguration|Service|StrictMode|TraceSource|Variable|WmiInstance)|Show-(?:Command|ControlPanelItem|EventLog)|Sort-Object|Split-Path|Start-(?:Job|Process|Service|Sleep|Transaction)|Stop-(?:Computer|Job|Process|Service)|Suspend-(?:Job|Service)|Tee-Object|Test-(?:ComputerSecureChannel|Connection|ModuleManifest|Path|PSSessionConfigurationFile)|Trace-Command|Unblock-File|Undo-Transaction|Unregister-(?:Event|PSSessionConfiguration)|Update-(?:FormatData|Help|List|TypeData)|Use-Transaction|Wait-(?:Event|Job|Process)|Where-Object|Write-(?:Debug|Error|EventLog|Host|Output|Progress|Verbose|Warning))\\b/i, /\\b(?:ac|cat|chdir|clc|cli|clp|clv|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|ebp|echo|epal|epcsv|epsn|erase|fc|fl|ft|fw|gal|gbp|gc|gci|gcs|gdr|gi|gl|gm|gp|gps|group|gsv|gu|gv|gwmi|iex|ii|ipal|ipcsv|ipsn|irm|iwmi|iwr|kill|lp|ls|measure|mi|mount|move|mp|mv|nal|ndr|ni|nv|ogv|popd|ps|pushd|pwd|rbp|rd|rdr|ren|ri|rm|rmdir|rni|rnp|rp|rv|rvpa|rwmi|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls|sort|sp|spps|spsv|start|sv|swmi|tee|trcm|type|write)\\b/i],\n    // per http://technet.microsoft.com/en-us/library/hh847744.aspx\n    'keyword': /\\b(?:Begin|Break|Catch|Class|Continue|Data|Define|Do|DynamicParam|Else|ElseIf|End|Exit|Filter|Finally|For|ForEach|From|Function|If|InlineScript|Parallel|Param|Process|Return|Sequence|Switch|Throw|Trap|Try|Until|Using|Var|While|Workflow)\\b/i,\n    'operator': {\n      pattern: /(\\W?)(?:!|-(eq|ne|gt|ge|lt|le|sh[lr]|not|b?(?:and|x?or)|(?:Not)?(?:Like|Match|Contains|In)|Replace|Join|is(?:Not)?|as)\\b|-[-=]?|\\+[+=]?|[*\\/%]=?)/i,\n      lookbehind: true\n    },\n    'punctuation': /[|{}[\\];(),.]/\n  }; // Variable interpolation inside strings, and nested expressions\n\n  var stringInside = powershell.string[0].inside;\n  stringInside.boolean = powershell.boolean;\n  stringInside.variable = powershell.variable;\n  stringInside.function.inside = powershell;\n})(Prism);\n\nPrism.languages.processing = Prism.languages.extend('clike', {\n  'keyword': /\\b(?:break|catch|case|class|continue|default|else|extends|final|for|if|implements|import|new|null|private|public|return|static|super|switch|this|try|void|while)\\b/,\n  'operator': /<[<=]?|>[>=]?|&&?|\\|\\|?|[%?]|[!=+\\-*\\/]=?/\n});\nPrism.languages.insertBefore('processing', 'number', {\n  // Special case: XML is a type\n  'constant': /\\b(?!XML\\b)[A-Z][A-Z\\d_]+\\b/,\n  'type': {\n    pattern: /\\b(?:boolean|byte|char|color|double|float|int|XML|[A-Z]\\w*)\\b/,\n    alias: 'variable'\n  }\n}); // Spaces are allowed between function name and parenthesis\n\nPrism.languages.processing['function'].pattern = /\\w+(?=\\s*\\()/; // Class-names is not styled by default\n\nPrism.languages.processing['class-name'].alias = 'variable';\nPrism.languages.prolog = {\n  // Syntax depends on the implementation\n  'comment': [/%.+/, /\\/\\*[\\s\\S]*?\\*\\//],\n  // Depending on the implementation, strings may allow escaped newlines and quote-escape\n  'string': {\n    pattern: /([\"'])(?:\\1\\1|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'builtin': /\\b(?:fx|fy|xf[xy]?|yfx?)\\b/,\n  'variable': /\\b[A-Z_]\\w*/,\n  // FIXME: Should we list all null-ary predicates (not followed by a parenthesis) like halt, trace, etc.?\n  'function': /\\b[a-z]\\w*(?:(?=\\()|\\/\\d+)/,\n  'number': /\\b\\d+\\.?\\d*/,\n  // Custom operators are allowed\n  'operator': /[:\\\\=><\\-?*@\\/;+^|!$.]+|\\b(?:is|mod|not|xor)\\b/,\n  'punctuation': /[(){}\\[\\],]/\n};\nPrism.languages.properties = {\n  'comment': /^[ \\t]*[#!].*$/m,\n  'attr-value': {\n    pattern: /(^[ \\t]*(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\s:=])+?(?: *[=:] *| ))(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])+/m,\n    lookbehind: true\n  },\n  'attr-name': /^[ \\t]*(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\s:=])+?(?= *[=:] *| )/m,\n  'punctuation': /[=:]/\n};\nPrism.languages.protobuf = Prism.languages.extend('clike', {\n  keyword: /\\b(?:package|import|message|enum)\\b/,\n  builtin: /\\b(?:required|repeated|optional|reserved)\\b/,\n  primitive: {\n    pattern: /\\b(?:double|float|int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string|bytes)\\b/,\n    alias: 'symbol'\n  }\n});\nPrism.languages.scss = Prism.languages.extend('css', {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n    lookbehind: true\n  },\n  'atrule': {\n    pattern: /@[\\w-]+(?:\\([^()]+\\)|[^(])*?(?=\\s+[{;])/,\n    inside: {\n      'rule': /@[\\w-]+/ // See rest below\n\n    }\n  },\n  // url, compassified\n  'url': /(?:[-a-z]+-)*url(?=\\()/i,\n  // CSS selector regex is not appropriate for Sass\n  // since there can be lot more things (var, @ directive, nesting..)\n  // a selector must start at the end of a property or after a brace (end of other rules or nesting)\n  // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n  // the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n  // can \"pass\" as a selector- e.g: proper#{$erty})\n  // this one was hard to do, so please be careful if you edit this one :)\n  'selector': {\n    // Initial look-ahead is used to prevent matching of blank selectors\n    pattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()]|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}]+[:{][^}]+))/m,\n    inside: {\n      'parent': {\n        pattern: /&/,\n        alias: 'important'\n      },\n      'placeholder': /%[-\\w]+/,\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  },\n  'property': {\n    pattern: /(?:[\\w-]|\\$[-\\w]+|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\n    inside: {\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  }\n});\nPrism.languages.insertBefore('scss', 'atrule', {\n  'keyword': [/@(?:if|else(?: if)?|for|each|while|import|extend|debug|warn|mixin|include|function|return|content)/i, {\n    pattern: /( +)(?:from|through)(?= )/,\n    lookbehind: true\n  }]\n});\nPrism.languages.insertBefore('scss', 'important', {\n  // var and interpolated vars\n  'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n});\nPrism.languages.insertBefore('scss', 'function', {\n  'placeholder': {\n    pattern: /%[-\\w]+/,\n    alias: 'selector'\n  },\n  'statement': {\n    pattern: /\\B!(?:default|optional)\\b/i,\n    alias: 'keyword'\n  },\n  'boolean': /\\b(?:true|false)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  },\n  'operator': {\n    pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|or|not)(?=\\s)/,\n    lookbehind: true\n  }\n});\nPrism.languages.scss['atrule'].inside.rest = Prism.languages.scss;\n\n(function (Prism) {\n  Prism.languages.puppet = {\n    'heredoc': [// Matches the content of a quoted heredoc string (subject to interpolation)\n    {\n      pattern: /(@\\(\"([^\"\\r\\n\\/):]+)\"(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r))*?[ \\t]*\\|?[ \\t]*-?[ \\t]*\\2/,\n      lookbehind: true,\n      alias: 'string',\n      inside: {\n        // Matches the end tag\n        'punctuation': /(?=\\S).*\\S(?= *$)/ // See interpolation below\n\n      }\n    }, // Matches the content of an unquoted heredoc string (no interpolation)\n    {\n      pattern: /(@\\(([^\"\\r\\n\\/):]+)(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r))*?[ \\t]*\\|?[ \\t]*-?[ \\t]*\\2/,\n      lookbehind: true,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        // Matches the end tag\n        'punctuation': /(?=\\S).*\\S(?= *$)/\n      }\n    }, // Matches the start tag of heredoc strings\n    {\n      pattern: /@\\(\"?(?:[^\"\\r\\n\\/):]+)\"?(?:\\/[nrts$uL]*)?\\)/,\n      alias: 'string',\n      inside: {\n        'punctuation': {\n          pattern: /(\\().+?(?=\\))/,\n          lookbehind: true\n        }\n      }\n    }],\n    'multiline-comment': {\n      pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n      lookbehind: true,\n      greedy: true,\n      alias: 'comment'\n    },\n    'regex': {\n      // Must be prefixed with the keyword \"node\" or a non-word char\n      pattern: /((?:\\bnode\\s+|[~=\\(\\[\\{,]\\s*|[=+]>\\s*|^\\s*))\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/(?:[imx]+\\b|\\B)/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        // Extended regexes must have the x flag. They can contain single-line comments.\n        'extended-regex': {\n          pattern: /^\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/[im]*x[im]*$/,\n          inside: {\n            'comment': /#.*/\n          }\n        }\n      }\n    },\n    'comment': {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: true,\n      greedy: true\n    },\n    'string': {\n      // Allow for one nested level of double quotes inside interpolation\n      pattern: /([\"'])(?:\\$\\{(?:[^'\"}]|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}|(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n      greedy: true,\n      inside: {\n        'double-quoted': {\n          pattern: /^\"[\\s\\S]*\"$/,\n          inside: {// See interpolation below\n          }\n        }\n      }\n    },\n    'variable': {\n      pattern: /\\$(?:::)?\\w+(?:::\\w+)*/,\n      inside: {\n        'punctuation': /::/\n      }\n    },\n    'attr-name': /(?:\\w+|\\*)(?=\\s*=>)/,\n    'function': [{\n      pattern: /(\\.)(?!\\d)\\w+/,\n      lookbehind: true\n    }, /\\b(?:contain|debug|err|fail|include|info|notice|realize|require|tag|warning)\\b|\\b(?!\\d)\\w+(?=\\()/],\n    'number': /\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d+)?(?:e-?\\d+)?)\\b/i,\n    'boolean': /\\b(?:true|false)\\b/,\n    // Includes words reserved for future use\n    'keyword': /\\b(?:application|attr|case|class|consumes|default|define|else|elsif|function|if|import|inherits|node|private|produces|type|undef|unless)\\b/,\n    'datatype': {\n      pattern: /\\b(?:Any|Array|Boolean|Callable|Catalogentry|Class|Collection|Data|Default|Enum|Float|Hash|Integer|NotUndef|Numeric|Optional|Pattern|Regexp|Resource|Runtime|Scalar|String|Struct|Tuple|Type|Undef|Variant)\\b/,\n      alias: 'symbol'\n    },\n    'operator': /=[=~>]?|![=~]?|<(?:<\\|?|[=~|-])?|>[>=]?|->?|~>|\\|>?>?|[*\\/%+?]|\\b(?:and|in|or)\\b/,\n    'punctuation': /[\\[\\]{}().,;]|:+/\n  };\n  var interpolation = [{\n    // Allow for one nested level of braces inside interpolation\n    pattern: /(^|[^\\\\])\\$\\{(?:[^'\"{}]|\\{[^}]*\\}|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}/,\n    lookbehind: true,\n    inside: {\n      'short-variable': {\n        // Negative look-ahead prevent wrong highlighting of functions\n        pattern: /(^\\$\\{)(?!\\w+\\()(?:::)?\\w+(?:::\\w+)*/,\n        lookbehind: true,\n        alias: 'variable',\n        inside: {\n          'punctuation': /::/\n        }\n      },\n      'delimiter': {\n        pattern: /^\\$/,\n        alias: 'variable'\n      },\n      rest: Prism.languages.puppet\n    }\n  }, {\n    pattern: /(^|[^\\\\])\\$(?:::)?\\w+(?:::\\w+)*/,\n    lookbehind: true,\n    alias: 'variable',\n    inside: {\n      'punctuation': /::/\n    }\n  }];\n  Prism.languages.puppet['heredoc'][0].inside.interpolation = interpolation;\n  Prism.languages.puppet['string'].inside['double-quoted'].inside.interpolation = interpolation;\n})(Prism);\n\n(function (Prism) {\n  Prism.languages.pure = {\n    'comment': [{\n      pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n      lookbehind: true\n    }, {\n      pattern: /(^|[^\\\\:])\\/\\/.*/,\n      lookbehind: true\n    }, /#!.+/],\n    'inline-lang': {\n      pattern: /%<[\\s\\S]+?%>/,\n      greedy: true,\n      inside: {\n        'lang': {\n          pattern: /(^%< *)-\\*-.+?-\\*-/,\n          lookbehind: true,\n          alias: 'comment'\n        },\n        'delimiter': {\n          pattern: /^%<.*|%>$/,\n          alias: 'punctuation'\n        }\n      }\n    },\n    'string': {\n      pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n      greedy: true\n    },\n    'number': {\n      // The look-behind prevents wrong highlighting of the .. operator\n      pattern: /((?:\\.\\.)?)(?:\\b(?:inf|nan)\\b|\\b0x[\\da-f]+|(?:\\b(?:0b)?\\d+(?:\\.\\d)?|\\B\\.\\d)\\d*(?:e[+-]?\\d+)?L?)/i,\n      lookbehind: true\n    },\n    'keyword': /\\b(?:ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|NULL|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\\b/,\n    'function': /\\b(?:abs|add_(?:(?:fundef|interface|macdef|typedef)(?:_at)?|addr|constdef|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_(?:matrix|pointer)|byte_c?string(?:_pointer)?|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|short|sentry|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\\b/,\n    'special': {\n      pattern: /\\b__[a-z]+__\\b/i,\n      alias: 'builtin'\n    },\n    // Any combination of operator chars can be an operator\n    'operator': /(?=\\b_|[^_])[!\"#$%&'*+,\\-.\\/:<=>?@\\\\^_`|~\\u00a1-\\u00bf\\u00d7-\\u00f7\\u20d0-\\u2bff]+|\\b(?:and|div|mod|not|or)\\b/,\n    // FIXME: How can we prevent | and , to be highlighted as operator when they are used alone?\n    'punctuation': /[(){}\\[\\];,|]/\n  };\n  var inlineLanguages = ['c', {\n    lang: 'c++',\n    alias: 'cpp'\n  }, 'fortran'];\n  var inlineLanguageRe = /%< *-\\*- *{lang}\\d* *-\\*-[\\s\\S]+?%>/.source;\n  inlineLanguages.forEach(function (lang) {\n    var alias = lang;\n\n    if (typeof lang !== 'string') {\n      alias = lang.alias;\n      lang = lang.lang;\n    }\n\n    if (Prism.languages[alias]) {\n      var o = {};\n      o['inline-lang-' + alias] = {\n        pattern: RegExp(inlineLanguageRe.replace('{lang}', lang.replace(/([.+*?\\/\\\\(){}\\[\\]])/g, '\\\\$1')), 'i'),\n        inside: Prism.util.clone(Prism.languages.pure['inline-lang'].inside)\n      };\n      o['inline-lang-' + alias].inside.rest = Prism.util.clone(Prism.languages[alias]);\n      Prism.languages.insertBefore('pure', 'inline-lang', o);\n    }\n  }); // C is the default inline language\n\n  if (Prism.languages.c) {\n    Prism.languages.pure['inline-lang'].inside.rest = Prism.util.clone(Prism.languages.c);\n  }\n})(Prism);\n\nPrism.languages.python = {\n  'comment': {\n    pattern: /(^|[^\\\\])#.*/,\n    lookbehind: true\n  },\n  'string-interpolation': {\n    pattern: /(?:f|rf|fr)(?:(\"\"\"|''')[\\s\\S]+?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        // \"{\" <expression> <optional \"!s\", \"!r\", or \"!a\"> <optional \":\" format specifier> \"}\"\n        pattern: /((?:^|[^{])(?:{{)*){(?!{)(?:[^{}]|{(?!{)(?:[^{}]|{(?!{)(?:[^{}])+})+})+}/,\n        lookbehind: true,\n        inside: {\n          'format-spec': {\n            pattern: /(:)[^:(){}]+(?=}$)/,\n            lookbehind: true\n          },\n          'conversion-option': {\n            pattern: /![sra](?=[:}]$)/,\n            alias: 'punctuation'\n          },\n          rest: null\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  },\n  'triple-quoted-string': {\n    pattern: /(?:[rub]|rb|br)?(\"\"\"|''')[\\s\\S]+?\\1/i,\n    greedy: true,\n    alias: 'string'\n  },\n  'string': {\n    pattern: /(?:[rub]|rb|br)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\n    greedy: true\n  },\n  'function': {\n    pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n    lookbehind: true\n  },\n  'class-name': {\n    pattern: /(\\bclass\\s+)\\w+/i,\n    lookbehind: true\n  },\n  'decorator': {\n    pattern: /(^\\s*)@\\w+(?:\\.\\w+)*/i,\n    lookbehind: true,\n    alias: ['annotation', 'punctuation'],\n    inside: {\n      'punctuation': /\\./\n    }\n  },\n  'keyword': /\\b(?:and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\n  'builtin': /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n  'boolean': /\\b(?:True|False|None)\\b/,\n  'number': /(?:\\b(?=\\d)|\\B(?=\\.))(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*\\.?\\d*|\\.\\d+)(?:e[+-]?\\d+)?j?\\b/i,\n  'operator': /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\nPrism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = Prism.languages.python;\nPrism.languages.py = Prism.languages.python;\nPrism.languages.q = {\n  'string': /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n  'comment': [// From http://code.kx.com/wiki/Reference/Slash:\n  // When / is following a space (or a right parenthesis, bracket, or brace), it is ignored with the rest of the line.\n  {\n    pattern: /([\\t )\\]}])\\/.*/,\n    lookbehind: true,\n    greedy: true\n  }, // From http://code.kx.com/wiki/Reference/Slash:\n  // A line which has / as its first character and contains at least one other non-whitespace character is a whole-line comment and is ignored entirely.\n  // A / on a line by itself begins a multiline comment which is terminated by the next \\ on a line by itself.\n  // If a / is not matched by a \\, the multiline comment is unterminated and continues to end of file.\n  // The / and \\ must be the first char on the line, but may be followed by any amount of whitespace.\n  {\n    pattern: /(^|\\r?\\n|\\r)\\/[\\t ]*(?:(?:\\r?\\n|\\r)(?:.*(?:\\r?\\n|\\r))*?(?:\\\\(?=[\\t ]*(?:\\r?\\n|\\r))|$)|\\S.*)/,\n    lookbehind: true,\n    greedy: true\n  }, // From http://code.kx.com/wiki/Reference/Slash:\n  // A \\ on a line by itself with no preceding matching / will comment to end of file.\n  {\n    pattern: /^\\\\[\\t ]*(?:\\r?\\n|\\r)[\\s\\S]+/m,\n    greedy: true\n  }, {\n    pattern: /^#!.+/m,\n    greedy: true\n  }],\n  'symbol': /`(?::\\S+|[\\w.]*)/,\n  'datetime': {\n    pattern: /0N[mdzuvt]|0W[dtz]|\\d{4}\\.\\d\\d(?:m|\\.\\d\\d(?:T(?:\\d\\d(?::\\d\\d(?::\\d\\d(?:[.:]\\d\\d\\d)?)?)?)?)?[dz]?)|\\d\\d:\\d\\d(?::\\d\\d(?:[.:]\\d\\d\\d)?)?[uvt]?/,\n    alias: 'number'\n  },\n  // The negative look-ahead prevents bad highlighting\n  // of verbs 0: and 1:\n  'number': /\\b(?![01]:)(?:0[wn]|0W[hj]?|0N[hje]?|0x[\\da-fA-F]+|\\d+\\.?\\d*(?:e[+-]?\\d+)?[hjfeb]?)/,\n  'keyword': /\\\\\\w+\\b|\\b(?:abs|acos|aj0?|all|and|any|asc|asin|asof|atan|attr|avgs?|binr?|by|ceiling|cols|cor|cos|count|cov|cross|csv|cut|delete|deltas|desc|dev|differ|distinct|div|do|dsave|ej|enlist|eval|except|exec|exit|exp|fby|fills|first|fkeys|flip|floor|from|get|getenv|group|gtime|hclose|hcount|hdel|hopen|hsym|iasc|identity|idesc|if|ij|in|insert|inter|inv|keys?|last|like|list|ljf?|load|log|lower|lsq|ltime|ltrim|mavg|maxs?|mcount|md5|mdev|med|meta|mins?|mmax|mmin|mmu|mod|msum|neg|next|not|null|or|over|parse|peach|pj|plist|prds?|prev|prior|rand|rank|ratios|raze|read0|read1|reciprocal|reval|reverse|rload|rotate|rsave|rtrim|save|scan|scov|sdev|select|set|setenv|show|signum|sin|sqrt|ssr?|string|sublist|sums?|sv|svar|system|tables|tan|til|trim|txf|type|uj|ungroup|union|update|upper|upsert|value|var|views?|vs|wavg|where|while|within|wj1?|wsum|ww|xasc|xbar|xcols?|xdesc|xexp|xgroup|xkey|xlog|xprev|xrank)\\b/,\n  'adverb': {\n    pattern: /['\\/\\\\]:?|\\beach\\b/,\n    alias: 'function'\n  },\n  'verb': {\n    pattern: /(?:\\B\\.\\B|\\b[01]:|<[=>]?|>=?|[:+\\-*%,!?_~=|$&#@^]):?/,\n    alias: 'operator'\n  },\n  'punctuation': /[(){}\\[\\];.]/\n};\nPrism.languages.qore = Prism.languages.extend('clike', {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:\\/\\/|#).*)/,\n    lookbehind: true\n  },\n  // Overridden to allow unescaped multi-line strings\n  'string': {\n    pattern: /(\"|')(\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n    greedy: true\n  },\n  'variable': /\\$(?!\\d)\\w+\\b/,\n  'keyword': /\\b(?:abstract|any|assert|binary|bool|boolean|break|byte|case|catch|char|class|code|const|continue|data|default|do|double|else|enum|extends|final|finally|float|for|goto|hash|if|implements|import|inherits|instanceof|int|interface|long|my|native|new|nothing|null|object|our|own|private|reference|rethrow|return|short|soft(?:int|float|number|bool|string|date|list)|static|strictfp|string|sub|super|switch|synchronized|this|throw|throws|transient|try|void|volatile|while)\\b/,\n  'number': /\\b(?:0b[01]+|0x[\\da-f]*\\.?[\\da-fp\\-]+|\\d*\\.?\\d+e?\\d*[df]|\\d*\\.?\\d+)\\b/i,\n  'boolean': /\\b(?:true|false)\\b/i,\n  'operator': {\n    pattern: /(^|[^.])(?:\\+[+=]?|-[-=]?|[!=](?:==?|~)?|>>?=?|<(?:=>?|<=?)?|&[&=]?|\\|[|=]?|[*\\/%^]=?|[~?])/,\n    lookbehind: true\n  },\n  'function': /\\$?\\b(?!\\d)\\w+(?=\\()/\n});\nPrism.languages.r = {\n  'comment': /#.*/,\n  'string': {\n    pattern: /(['\"])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'percent-operator': {\n    // Includes user-defined operators\n    // and %%, %*%, %/%, %in%, %o%, %x%\n    pattern: /%[^%\\s]*%/,\n    alias: 'operator'\n  },\n  'boolean': /\\b(?:TRUE|FALSE)\\b/,\n  'ellipsis': /\\.\\.(?:\\.|\\d+)/,\n  'number': [/\\b(?:NaN|Inf)\\b/, /(?:\\b0x[\\dA-Fa-f]+(?:\\.\\d*)?|\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[EePp][+-]?\\d+)?[iL]?/],\n  'keyword': /\\b(?:if|else|repeat|while|function|for|in|next|break|NULL|NA|NA_integer_|NA_real_|NA_complex_|NA_character_)\\b/,\n  'operator': /->?>?|<(?:=|<?-)?|[>=!]=?|::?|&&?|\\|\\|?|[+*\\/^$@~]/,\n  'punctuation': /[(){}\\[\\],;]/\n};\n\n(function (Prism) {\n  Prism.languages.insertBefore('javascript', 'function-variable', {\n    'method-variable': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function-variable'].pattern.source),\n      lookbehind: true,\n      alias: ['function-variable', 'method', 'function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'function', {\n    'method': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function'].source),\n      lookbehind: true,\n      alias: ['function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'constant', {\n    'known-class-name': [{\n      // standard built-ins\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\n      pattern: /\\b(?:(?:(?:Uint|Int)(?:8|16|32)|Uint8Clamped|Float(?:32|64))?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|(?:Weak)?(?:Set|Map)|WebAssembly)\\b/,\n      alias: 'class-name'\n    }, {\n      // errors\n      pattern: /\\b(?:[A-Z]\\w*)Error\\b/,\n      alias: 'class-name'\n    }]\n  });\n  Prism.languages.javascript['keyword'].unshift({\n    pattern: /\\b(?:as|default|export|from|import)\\b/,\n    alias: 'module'\n  }, {\n    pattern: /\\bnull\\b/,\n    alias: ['null', 'nil']\n  }, {\n    pattern: /\\bundefined\\b/,\n    alias: 'nil'\n  });\n  Prism.languages.insertBefore('javascript', 'operator', {\n    'spread': {\n      pattern: /\\.{3}/,\n      alias: 'operator'\n    },\n    'arrow': {\n      pattern: /=>/,\n      alias: 'operator'\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'punctuation', {\n    'property-access': {\n      pattern: /(\\.\\s*)[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*/,\n      lookbehind: true\n    },\n    'maybe-class-name': {\n      pattern: /(^|[^$\\w\\xA0-\\uFFFF])[A-Z][$\\w\\xA0-\\uFFFF]+/,\n      lookbehind: true\n    },\n    'dom': {\n      // this contains only a few commonly used DOM variables\n      pattern: /\\b(?:document|location|navigator|performance|(?:local|session)Storage|window)\\b/,\n      alias: 'variable'\n    },\n    'console': {\n      pattern: /\\bconsole(?=\\s*\\.)/,\n      alias: 'class-name'\n    }\n  }); // add 'maybe-class-name' to tokens which might be a class name\n\n  var maybeClassNameTokens = ['function', 'function-variable', 'method', 'method-variable', 'property-access'];\n\n  for (var i = 0; i < maybeClassNameTokens.length; i++) {\n    var token = maybeClassNameTokens[i];\n    var value = Prism.languages.javascript[token]; // convert regex to object\n\n    if (Prism.util.type(value) === 'RegExp') {\n      value = Prism.languages.javascript[token] = {\n        pattern: value\n      };\n    } // keep in mind that we don't support arrays\n\n\n    var inside = value.inside || {};\n    value.inside = inside;\n    inside['maybe-class-name'] = /^[A-Z][\\s\\S]*/;\n  }\n})(Prism);\n\n(function (Prism) {\n  var javascript = Prism.util.clone(Prism.languages.javascript);\n  Prism.languages.jsx = Prism.languages.extend('markup', javascript);\n  Prism.languages.jsx.tag.pattern = /<\\/?(?:[\\w.:-]+\\s*(?:\\s+(?:[\\w.:-]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s{'\">=]+|\\{(?:\\{(?:\\{[^}]*\\}|[^{}])*\\}|[^{}])+\\}))?|\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}))*\\s*\\/?)?>/i;\n  Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/i;\n  Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">]+)/i;\n  Prism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\n  Prism.languages.insertBefore('inside', 'attr-name', {\n    'spread': {\n      pattern: /\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}/,\n      inside: {\n        'punctuation': /\\.{3}|[{}.]/,\n        'attr-value': /\\w+/\n      }\n    }\n  }, Prism.languages.jsx.tag);\n  Prism.languages.insertBefore('inside', 'attr-value', {\n    'script': {\n      // Allow for two levels of nesting\n      pattern: /=(\\{(?:\\{(?:\\{[^}]*\\}|[^}])*\\}|[^}])+\\})/i,\n      inside: {\n        'script-punctuation': {\n          pattern: /^=(?={)/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.jsx\n      },\n      'alias': 'language-javascript'\n    }\n  }, Prism.languages.jsx.tag); // The following will handle plain text inside tags\n\n  var stringifyToken = function (token) {\n    if (!token) {\n      return '';\n    }\n\n    if (typeof token === 'string') {\n      return token;\n    }\n\n    if (typeof token.content === 'string') {\n      return token.content;\n    }\n\n    return token.content.map(stringifyToken).join('');\n  };\n\n  var walkTokens = function (tokens) {\n    var openedTags = [];\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n      var notTagNorBrace = false;\n\n      if (typeof token !== 'string') {\n        if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n          // We found a tag, now find its kind\n          if (token.content[0].content[0].content === '</') {\n            // Closing tag\n            if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n              // Pop matching opening tag\n              openedTags.pop();\n            }\n          } else {\n            if (token.content[token.content.length - 1].content === '/>') {// Autoclosed tag, ignore\n            } else {\n              // Opening tag\n              openedTags.push({\n                tagName: stringifyToken(token.content[0].content[1]),\n                openedBraces: 0\n              });\n            }\n          }\n        } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {\n          // Here we might have entered a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces++;\n        } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n          // Here we might have left a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces--;\n        } else {\n          notTagNorBrace = true;\n        }\n      }\n\n      if (notTagNorBrace || typeof token === 'string') {\n        if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n          // Here we are inside a tag, and not inside a JSX context.\n          // That's plain text: drop any tokens matched.\n          var plainText = stringifyToken(token); // And merge text with adjacent text\n\n          if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n            plainText += stringifyToken(tokens[i + 1]);\n            tokens.splice(i + 1, 1);\n          }\n\n          if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n            plainText = stringifyToken(tokens[i - 1]) + plainText;\n            tokens.splice(i - 1, 1);\n            i--;\n          }\n\n          tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n        }\n      }\n\n      if (token.content && typeof token.content !== 'string') {\n        walkTokens(token.content);\n      }\n    }\n  };\n\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'jsx' && env.language !== 'tsx') {\n      return;\n    }\n\n    walkTokens(env.tokens);\n  });\n})(Prism);\n\nPrism.languages.renpy = {\n  // TODO Write tests.\n  'comment': {\n    pattern: /(^|[^\\\\])#.+/,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /(\"\"\"|''')[\\s\\S]+?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2|(?:^#?(?:(?:[0-9a-fA-F]{2}){3}|(?:[0-9a-fA-F]){3})$)/m,\n    greedy: true\n  },\n  'function': /[a-z_]\\w*(?=\\()/i,\n  'property': /\\b(?:insensitive|idle|hover|selected_idle|selected_hover|background|position|alt|xpos|ypos|pos|xanchor|yanchor|anchor|xalign|yalign|align|xcenter|ycenter|xofsset|yoffset|ymaximum|maximum|xmaximum|xminimum|yminimum|minimum|xsize|ysizexysize|xfill|yfill|area|antialias|black_color|bold|caret|color|first_indent|font|size|italic|justify|kerning|language|layout|line_leading|line_overlap_split|line_spacing|min_width|newline_indent|outlines|rest_indent|ruby_style|slow_cps|slow_cps_multiplier|strikethrough|text_align|underline|hyperlink_functions|vertical|hinting|foreground|left_margin|xmargin|top_margin|bottom_margin|ymargin|left_padding|right_padding|xpadding|top_padding|bottom_padding|ypadding|size_group|child|hover_sound|activate_sound|mouse|focus_mask|keyboard_focus|bar_vertical|bar_invert|bar_resizing|left_gutter|right_gutter|top_gutter|bottom_gutter|left_bar|right_bar|top_bar|bottom_bar|thumb|thumb_shadow|thumb_offset|unscrollable|spacing|first_spacing|box_reverse|box_wrap|order_reverse|fit_first|ysize|thumbnail_width|thumbnail_height|help|text_ypos|text_xpos|idle_color|hover_color|selected_idle_color|selected_hover_color|insensitive_color|alpha|insensitive_background|hover_background|zorder|value|width|xadjustment|xanchoraround|xaround|xinitial|xoffset|xzoom|yadjustment|yanchoraround|yaround|yinitial|yzoom|zoom|ground|height|text_style|text_y_fudge|selected_insensitive|has_sound|has_music|has_voice|focus|hovered|image_style|length|minwidth|mousewheel|offset|prefix|radius|range|right_margin|rotate|rotate_pad|developer|screen_width|screen_height|window_title|name|version|windows_icon|default_fullscreen|default_text_cps|default_afm_time|main_menu_music|sample_sound|enter_sound|exit_sound|save_directory|enter_transition|exit_transition|intra_transition|main_game_transition|game_main_transition|end_splash_transition|end_game_transition|after_load_transition|window_show_transition|window_hide_transition|adv_nvl_transition|nvl_adv_transition|enter_yesno_transition|exit_yesno_transition|enter_replay_transition|exit_replay_transition|say_attribute_transition|directory_name|executable_name|include_update|window_icon|modal|google_play_key|google_play_salt|drag_name|drag_handle|draggable|dragged|droppable|dropped|narrator_menu|action|default_afm_enable|version_name|version_tuple|inside|fadeout|fadein|layers|layer_clipping|linear|scrollbars|side_xpos|side_ypos|side_spacing|edgescroll|drag_joined|drag_raise|drop_shadow|drop_shadow_color|subpixel|easein|easeout|time|crop|auto|update|get_installed_packages|can_update|UpdateVersion|Update|overlay_functions|translations|window_left_padding|show_side_image|show_two_window)\\b/,\n  'tag': /\\b(?:label|image|menu|[hv]box|frame|text|imagemap|imagebutton|bar|vbar|screen|textbutton|buttoscreenn|fixed|grid|input|key|mousearea|side|timer|viewport|window|hotspot|hotbar|self|button|drag|draggroup|tag|mm_menu_frame|nvl|block|parallel)\\b|\\$/,\n  'keyword': /\\b(?:as|assert|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|pass|print|raise|return|try|while|yield|adjustment|alignaround|allow|angle|around|box_layout|cache|changed|child_size|clicked|clipping|corner1|corner2|default|delay|exclude|scope|slow|slow_abortable|slow_done|sound|style_group|substitute|suffix|transform_anchor|transpose|unhovered|config|theme|mm_root|gm_root|rounded_window|build|disabled_text|disabled|widget_selected|widget_text|widget_hover|widget|updater|behind|call|expression|hide|init|jump|onlayer|python|renpy|scene|set|show|transform|play|queue|stop|pause|define|window|repeat|contains|choice|on|function|event|animation|clockwise|counterclockwise|circles|knot|null|None|random|has|add|use|fade|dissolve|style|store|id|voice|center|left|right|less_rounded|music|movie|clear|persistent|ui)\\b/,\n  'boolean': /\\b(?:[Tt]rue|[Ff]alse)\\b/,\n  'number': /(?:\\b(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*\\.?\\d*)|\\B\\.\\d+)(?:e[+-]?\\d+)?j?/i,\n  'operator': /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]|\\b(?:or|and|not|with|at)\\b/,\n  'punctuation': /[{}[\\];(),.:]/\n};\nPrism.languages.reason = Prism.languages.extend('clike', {\n  'comment': {\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  },\n  // 'class-name' must be matched *after* 'constructor' defined below\n  'class-name': /\\b[A-Z]\\w*/,\n  'keyword': /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n  'operator': /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:mod|land|lor|lxor|lsl|lsr|asr)\\b/\n});\nPrism.languages.insertBefore('reason', 'class-name', {\n  'character': {\n    pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n    alias: 'string'\n  },\n  'constructor': {\n    // Negative look-ahead prevents from matching things like String.capitalize\n    pattern: /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n    alias: 'variable'\n  },\n  'label': {\n    pattern: /\\b[a-z]\\w*(?=::)/,\n    alias: 'symbol'\n  }\n}); // We can't match functions property, so let's not even try.\n\ndelete Prism.languages.reason.function;\nPrism.languages.vala = Prism.languages.extend('clike', {\n  // Classes copied from prism-csharp\n  'class-name': [{\n    // (Foo bar, Bar baz)\n    pattern: /\\b[A-Z]\\w*(?:\\.\\w+)*\\b(?=(?:\\?\\s+|\\*?\\s+\\*?)\\w+)/,\n    inside: {\n      punctuation: /\\./\n    }\n  }, {\n    // [Foo]\n    pattern: /(\\[)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n    lookbehind: true,\n    inside: {\n      punctuation: /\\./\n    }\n  }, {\n    // class Foo : Bar\n    pattern: /(\\b(?:class|interface)\\s+[A-Z]\\w*(?:\\.\\w+)*\\s*:\\s*)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n    lookbehind: true,\n    inside: {\n      punctuation: /\\./\n    }\n  }, {\n    // class Foo\n    pattern: /((?:\\b(?:class|interface|new|struct|enum)\\s+)|(?:catch\\s+\\())[A-Z]\\w*(?:\\.\\w+)*\\b/,\n    lookbehind: true,\n    inside: {\n      punctuation: /\\./\n    }\n  }],\n  'constant': /\\b[A-Z0-9_]+\\b/,\n  'function': /\\w+(?=\\s*\\()/,\n  'keyword': /\\b(?:bool|char|double|float|null|size_t|ssize_t|string|unichar|void|int|int8|int16|int32|int64|long|short|uchar|uint|uint8|uint16|uint32|uint64|ulong|ushort|class|delegate|enum|errordomain|interface|namespace|struct|break|continue|do|for|foreach|return|while|else|if|switch|assert|case|default|abstract|const|dynamic|ensures|extern|inline|internal|override|private|protected|public|requires|signal|static|virtual|volatile|weak|async|owned|unowned|try|catch|finally|throw|as|base|construct|delete|get|in|is|lock|new|out|params|ref|sizeof|set|this|throws|typeof|using|value|var|yield)\\b/i,\n  'number': /(?:\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)(?:f|u?l?)?/i,\n  'operator': /\\+\\+|--|&&|\\|\\||<<=?|>>=?|=>|->|~|[+\\-*\\/%&^|=!<>]=?|\\?\\??|\\.\\.\\./,\n  'punctuation': /[{}[\\];(),.:]/\n});\nPrism.languages.insertBefore('vala', 'string', {\n  'raw-string': {\n    pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n    greedy: true,\n    alias: 'string'\n  },\n  'template-string': {\n    pattern: /@\"[\\s\\S]*?\"/,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        pattern: /\\$(?:\\([^)]*\\)|[a-zA-Z]\\w*)/,\n        inside: {\n          'delimiter': {\n            pattern: /^\\$\\(?|\\)$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.vala\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  }\n});\nPrism.languages.insertBefore('vala', 'keyword', {\n  'regex': {\n    pattern: /\\/(\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[imsx]{0,4}(?=\\s*($|[\\r\\n,.;})\\]]))/,\n    greedy: true\n  }\n});\nPrism.languages.rest = {\n  'table': [{\n    pattern: /(\\s*)(?:\\+[=-]+)+\\+(?:\\r?\\n|\\r)(?:\\1(?:[+|].+)+[+|](?:\\r?\\n|\\r))+\\1(?:\\+[=-]+)+\\+/,\n    lookbehind: true,\n    inside: {\n      'punctuation': /\\||(?:\\+[=-]+)+\\+/\n    }\n  }, {\n    pattern: /(\\s*)(?:=+ +)+=+(?:(?:\\r?\\n|\\r)\\1.+)+(?:\\r?\\n|\\r)\\1(?:=+ +)+=+(?=(?:\\r?\\n|\\r){2}|\\s*$)/,\n    lookbehind: true,\n    inside: {\n      'punctuation': /[=-]+/\n    }\n  }],\n  // Directive-like patterns\n  'substitution-def': {\n    pattern: /(^\\s*\\.\\. )\\|(?:[^|\\s](?:[^|]*[^|\\s])?)\\| [^:]+::/m,\n    lookbehind: true,\n    inside: {\n      'substitution': {\n        pattern: /^\\|(?:[^|\\s]|[^|\\s][^|]*[^|\\s])\\|/,\n        alias: 'attr-value',\n        inside: {\n          'punctuation': /^\\||\\|$/\n        }\n      },\n      'directive': {\n        pattern: /( +)[^:]+::/,\n        lookbehind: true,\n        alias: 'function',\n        inside: {\n          'punctuation': /::$/\n        }\n      }\n    }\n  },\n  'link-target': [{\n    pattern: /(^\\s*\\.\\. )\\[[^\\]]+\\]/m,\n    lookbehind: true,\n    alias: 'string',\n    inside: {\n      'punctuation': /^\\[|\\]$/\n    }\n  }, {\n    pattern: /(^\\s*\\.\\. )_(?:`[^`]+`|(?:[^:\\\\]|\\\\.)+):/m,\n    lookbehind: true,\n    alias: 'string',\n    inside: {\n      'punctuation': /^_|:$/\n    }\n  }],\n  'directive': {\n    pattern: /(^\\s*\\.\\. )[^:]+::/m,\n    lookbehind: true,\n    alias: 'function',\n    inside: {\n      'punctuation': /::$/\n    }\n  },\n  'comment': {\n    // The two alternatives try to prevent highlighting of blank comments\n    pattern: /(^\\s*\\.\\.)(?:(?: .+)?(?:(?:\\r?\\n|\\r).+)+| .+)(?=(?:\\r?\\n|\\r){2}|$)/m,\n    lookbehind: true\n  },\n  'title': [// Overlined and underlined\n  {\n    pattern: /^(([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2+)(?:\\r?\\n|\\r).+(?:\\r?\\n|\\r)\\1$/m,\n    inside: {\n      'punctuation': /^[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+|[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+$/,\n      'important': /.+/\n    }\n  }, // Underlined only\n  {\n    pattern: /(^|(?:\\r?\\n|\\r){2}).+(?:\\r?\\n|\\r)([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2+(?=\\r?\\n|\\r|$)/,\n    lookbehind: true,\n    inside: {\n      'punctuation': /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+$/,\n      'important': /.+/\n    }\n  }],\n  'hr': {\n    pattern: /((?:\\r?\\n|\\r){2})([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2{3,}(?=(?:\\r?\\n|\\r){2})/,\n    lookbehind: true,\n    alias: 'punctuation'\n  },\n  'field': {\n    pattern: /(^\\s*):[^:\\r\\n]+:(?= )/m,\n    lookbehind: true,\n    alias: 'attr-name'\n  },\n  'command-line-option': {\n    pattern: /(^\\s*)(?:[+-][a-z\\d]|(?:--|\\/)[a-z\\d-]+)(?:[ =](?:[a-z][\\w-]*|<[^<>]+>))?(?:, (?:[+-][a-z\\d]|(?:--|\\/)[a-z\\d-]+)(?:[ =](?:[a-z][\\w-]*|<[^<>]+>))?)*(?=(?:\\r?\\n|\\r)? {2,}\\S)/im,\n    lookbehind: true,\n    alias: 'symbol'\n  },\n  'literal-block': {\n    pattern: /::(?:\\r?\\n|\\r){2}([ \\t]+).+(?:(?:\\r?\\n|\\r)\\1.+)*/,\n    inside: {\n      'literal-block-punctuation': {\n        pattern: /^::/,\n        alias: 'punctuation'\n      }\n    }\n  },\n  'quoted-literal-block': {\n    pattern: /::(?:\\r?\\n|\\r){2}([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]).*(?:(?:\\r?\\n|\\r)\\1.*)*/,\n    inside: {\n      'literal-block-punctuation': {\n        pattern: /^(?:::|([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\1*)/m,\n        alias: 'punctuation'\n      }\n    }\n  },\n  'list-bullet': {\n    pattern: /(^\\s*)(?:[*+\\-•‣⁃]|\\(?(?:\\d+|[a-z]|[ivxdclm]+)\\)|(?:\\d+|[a-z]|[ivxdclm]+)\\.)(?= )/im,\n    lookbehind: true,\n    alias: 'punctuation'\n  },\n  'doctest-block': {\n    pattern: /(^\\s*)>>> .+(?:(?:\\r?\\n|\\r).+)*/m,\n    lookbehind: true,\n    inside: {\n      'punctuation': /^>>>/\n    }\n  },\n  'inline': [{\n    pattern: /(^|[\\s\\-:\\/'\"<(\\[{])(?::[^:]+:`.*?`|`.*?`:[^:]+:|(\\*\\*?|``?|\\|)(?!\\s).*?[^\\s]\\2(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$))/m,\n    lookbehind: true,\n    inside: {\n      'bold': {\n        pattern: /(^\\*\\*).+(?=\\*\\*$)/,\n        lookbehind: true\n      },\n      'italic': {\n        pattern: /(^\\*).+(?=\\*$)/,\n        lookbehind: true\n      },\n      'inline-literal': {\n        pattern: /(^``).+(?=``$)/,\n        lookbehind: true,\n        alias: 'symbol'\n      },\n      'role': {\n        pattern: /^:[^:]+:|:[^:]+:$/,\n        alias: 'function',\n        inside: {\n          'punctuation': /^:|:$/\n        }\n      },\n      'interpreted-text': {\n        pattern: /(^`).+(?=`$)/,\n        lookbehind: true,\n        alias: 'attr-value'\n      },\n      'substitution': {\n        pattern: /(^\\|).+(?=\\|$)/,\n        lookbehind: true,\n        alias: 'attr-value'\n      },\n      'punctuation': /\\*\\*?|``?|\\|/\n    }\n  }],\n  'link': [{\n    pattern: /\\[[^\\]]+\\]_(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$)/,\n    alias: 'string',\n    inside: {\n      'punctuation': /^\\[|\\]_$/\n    }\n  }, {\n    pattern: /(?:\\b[a-z\\d](?:[_.:+]?[a-z\\d]+)*_?_|`[^`]+`_?_|_`[^`]+`)(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$)/i,\n    alias: 'string',\n    inside: {\n      'punctuation': /^_?`|`$|`?_?_$/\n    }\n  }],\n  // Line block start,\n  // quote attribution,\n  // explicit markup start,\n  // and anonymous hyperlink target shortcut (__)\n  'punctuation': {\n    pattern: /(^\\s*)(?:\\|(?= |$)|(?:---?|—|\\.\\.|__)(?= )|\\.\\.$)/m,\n    lookbehind: true\n  }\n};\nPrism.languages.rip = {\n  'comment': /#.*/,\n  'keyword': /(?:=>|->)|\\b(?:class|if|else|switch|case|return|exit|try|catch|finally|raise)\\b/,\n  'builtin': /@|\\bSystem\\b/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'date': /\\b\\d{4}-\\d{2}-\\d{2}\\b/,\n  'time': /\\b\\d{2}:\\d{2}:\\d{2}\\b/,\n  'datetime': /\\b\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\b/,\n  'character': /\\B`[^\\s`'\",.:;#\\/\\\\()<>\\[\\]{}]\\b/,\n  'regex': {\n    pattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/(?=\\s*($|[\\r\\n,.;})]))/,\n    lookbehind: true,\n    greedy: true\n  },\n  'symbol': /:[^\\d\\s`'\",.:;#\\/\\\\()<>\\[\\]{}][^\\s`'\",.:;#\\/\\\\()<>\\[\\]{}]*/,\n  'string': {\n    pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'number': /[+-]?(?:(?:\\d+\\.\\d+)|(?:\\d+))/,\n  'punctuation': /(?:\\.{2,3})|[`,.:;=\\/\\\\()<>\\[\\]{}]/,\n  'reference': /[^\\d\\s`'\",.:;#\\/\\\\()<>\\[\\]{}][^\\s`'\",.:;#\\/\\\\()<>\\[\\]{}]*/\n};\nPrism.languages.roboconf = {\n  'comment': /#.*/,\n  'keyword': {\n    'pattern': /(^|\\s)(?:(?:facet|instance of)(?=[ \\t]+[\\w-]+[ \\t]*\\{)|(?:external|import)\\b)/,\n    lookbehind: true\n  },\n  'component': {\n    pattern: /[\\w-]+(?=[ \\t]*\\{)/,\n    alias: 'variable'\n  },\n  'property': /[\\w.-]+(?=[ \\t]*:)/,\n  'value': {\n    pattern: /(=[ \\t]*)[^,;]+/,\n    lookbehind: true,\n    alias: 'attr-value'\n  },\n  'optional': {\n    pattern: /\\(optional\\)/,\n    alias: 'builtin'\n  },\n  'wildcard': {\n    pattern: /(\\.)\\*/,\n    lookbehind: true,\n    alias: 'operator'\n  },\n  'punctuation': /[{},.;:=]/\n};\n\n(function (Prism) {\n  // We don't allow for pipes inside parentheses\n  // to not break table pattern |(. foo |). bar |\n  var modifierRegex = /(?:\\([^|)]+\\)|\\[[^\\]]+\\]|\\{[^}]+\\})+/.source;\n  var modifierTokens = {\n    'css': {\n      pattern: /\\{[^}]+\\}/,\n      inside: {\n        rest: Prism.languages.css\n      }\n    },\n    'class-id': {\n      pattern: /(\\()[^)]+(?=\\))/,\n      lookbehind: true,\n      alias: 'attr-value'\n    },\n    'lang': {\n      pattern: /(\\[)[^\\]]+(?=\\])/,\n      lookbehind: true,\n      alias: 'attr-value'\n    },\n    // Anything else is punctuation (the first pattern is for row/col spans inside tables)\n    'punctuation': /[\\\\\\/]\\d+|\\S/\n  };\n  var textile = Prism.languages.textile = Prism.languages.extend('markup', {\n    'phrase': {\n      pattern: /(^|\\r|\\n)\\S[\\s\\S]*?(?=$|\\r?\\n\\r?\\n|\\r\\r)/,\n      lookbehind: true,\n      inside: {\n        // h1. Header 1\n        'block-tag': {\n          pattern: RegExp('^[a-z]\\\\w*(?:' + modifierRegex + '|[<>=()])*\\\\.'),\n          inside: {\n            'modifier': {\n              pattern: RegExp('(^[a-z]\\\\w*)(?:' + modifierRegex + '|[<>=()])+(?=\\\\.)'),\n              lookbehind: true,\n              inside: modifierTokens\n            },\n            'tag': /^[a-z]\\w*/,\n            'punctuation': /\\.$/\n          }\n        },\n        // # List item\n        // * List item\n        'list': {\n          pattern: RegExp('^[*#]+(?:' + modifierRegex + ')?\\\\s+.+', 'm'),\n          inside: {\n            'modifier': {\n              pattern: RegExp('(^[*#]+)' + modifierRegex),\n              lookbehind: true,\n              inside: modifierTokens\n            },\n            'punctuation': /^[*#]+/\n          }\n        },\n        // | cell | cell | cell |\n        'table': {\n          // Modifiers can be applied to the row: {color:red}.|1|2|3|\n          // or the cell: |{color:red}.1|2|3|\n          pattern: RegExp('^(?:(?:' + modifierRegex + '|[<>=()^~])+\\\\.\\\\s*)?(?:\\\\|(?:(?:' + modifierRegex + '|[<>=()^~_]|[\\\\\\\\/]\\\\d+)+\\\\.)?[^|]*)+\\\\|', 'm'),\n          inside: {\n            'modifier': {\n              // Modifiers for rows after the first one are\n              // preceded by a pipe and a line feed\n              pattern: RegExp('(^|\\\\|(?:\\\\r?\\\\n|\\\\r)?)(?:' + modifierRegex + '|[<>=()^~_]|[\\\\\\\\/]\\\\d+)+(?=\\\\.)'),\n              lookbehind: true,\n              inside: modifierTokens\n            },\n            'punctuation': /\\||^\\./\n          }\n        },\n        'inline': {\n          pattern: RegExp('(\\\\*\\\\*|__|\\\\?\\\\?|[*_%@+\\\\-^~])(?:' + modifierRegex + ')?.+?\\\\1'),\n          inside: {\n            // Note: superscripts and subscripts are not handled specifically\n            // *bold*, **bold**\n            'bold': {\n              pattern: RegExp('(^(\\\\*\\\\*?)(?:' + modifierRegex + ')?).+?(?=\\\\2)'),\n              lookbehind: true\n            },\n            // _italic_, __italic__\n            'italic': {\n              pattern: RegExp('(^(__?)(?:' + modifierRegex + ')?).+?(?=\\\\2)'),\n              lookbehind: true\n            },\n            // ??cite??\n            'cite': {\n              pattern: RegExp('(^\\\\?\\\\?(?:' + modifierRegex + ')?).+?(?=\\\\?\\\\?)'),\n              lookbehind: true,\n              alias: 'string'\n            },\n            // @code@\n            'code': {\n              pattern: RegExp('(^@(?:' + modifierRegex + ')?).+?(?=@)'),\n              lookbehind: true,\n              alias: 'keyword'\n            },\n            // +inserted+\n            'inserted': {\n              pattern: RegExp('(^\\\\+(?:' + modifierRegex + ')?).+?(?=\\\\+)'),\n              lookbehind: true\n            },\n            // -deleted-\n            'deleted': {\n              pattern: RegExp('(^-(?:' + modifierRegex + ')?).+?(?=-)'),\n              lookbehind: true\n            },\n            // %span%\n            'span': {\n              pattern: RegExp('(^%(?:' + modifierRegex + ')?).+?(?=%)'),\n              lookbehind: true\n            },\n            'modifier': {\n              pattern: RegExp('(^\\\\*\\\\*|__|\\\\?\\\\?|[*_%@+\\\\-^~])' + modifierRegex),\n              lookbehind: true,\n              inside: modifierTokens\n            },\n            'punctuation': /[*_%?@+\\-^~]+/\n          }\n        },\n        // [alias]http://example.com\n        'link-ref': {\n          pattern: /^\\[[^\\]]+\\]\\S+$/m,\n          inside: {\n            'string': {\n              pattern: /(\\[)[^\\]]+(?=\\])/,\n              lookbehind: true\n            },\n            'url': {\n              pattern: /(\\])\\S+$/,\n              lookbehind: true\n            },\n            'punctuation': /[\\[\\]]/\n          }\n        },\n        // \"text\":http://example.com\n        // \"text\":link-ref\n        'link': {\n          pattern: RegExp('\"(?:' + modifierRegex + ')?[^\"]+\":.+?(?=[^\\\\w/]?(?:\\\\s|$))'),\n          inside: {\n            'text': {\n              pattern: RegExp('(^\"(?:' + modifierRegex + ')?)[^\"]+(?=\")'),\n              lookbehind: true\n            },\n            'modifier': {\n              pattern: RegExp('(^\")' + modifierRegex),\n              lookbehind: true,\n              inside: modifierTokens\n            },\n            'url': {\n              pattern: /(:).+/,\n              lookbehind: true\n            },\n            'punctuation': /[\":]/\n          }\n        },\n        // !image.jpg!\n        // !image.jpg(Title)!:http://example.com\n        'image': {\n          pattern: RegExp('!(?:' + modifierRegex + '|[<>=()])*[^!\\\\s()]+(?:\\\\([^)]+\\\\))?!(?::.+?(?=[^\\\\w/]?(?:\\\\s|$)))?'),\n          inside: {\n            'source': {\n              pattern: RegExp('(^!(?:' + modifierRegex + '|[<>=()])*)[^!\\\\s()]+(?:\\\\([^)]+\\\\))?(?=!)'),\n              lookbehind: true,\n              alias: 'url'\n            },\n            'modifier': {\n              pattern: RegExp('(^!)(?:' + modifierRegex + '|[<>=()])+'),\n              lookbehind: true,\n              inside: modifierTokens\n            },\n            'url': {\n              pattern: /(:).+/,\n              lookbehind: true\n            },\n            'punctuation': /[!:]/\n          }\n        },\n        // Footnote[1]\n        'footnote': {\n          pattern: /\\b\\[\\d+\\]/,\n          alias: 'comment',\n          inside: {\n            'punctuation': /\\[|\\]/\n          }\n        },\n        // CSS(Cascading Style Sheet)\n        'acronym': {\n          pattern: /\\b[A-Z\\d]+\\([^)]+\\)/,\n          inside: {\n            'comment': {\n              pattern: /(\\()[^)]+(?=\\))/,\n              lookbehind: true\n            },\n            'punctuation': /[()]/\n          }\n        },\n        // Prism(C)\n        'mark': {\n          pattern: /\\b\\((?:TM|R|C)\\)/,\n          alias: 'comment',\n          inside: {\n            'punctuation': /[()]/\n          }\n        }\n      }\n    }\n  });\n  var phraseInside = textile['phrase'].inside;\n  var nestedPatterns = {\n    'inline': phraseInside['inline'],\n    'link': phraseInside['link'],\n    'image': phraseInside['image'],\n    'footnote': phraseInside['footnote'],\n    'acronym': phraseInside['acronym'],\n    'mark': phraseInside['mark']\n  }; // Only allow alpha-numeric HTML tags, not XML tags\n\n  textile.tag.pattern = /<\\/?(?!\\d)[a-z0-9]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i; // Allow some nesting\n\n  var phraseInlineInside = phraseInside['inline'].inside;\n  phraseInlineInside['bold'].inside = nestedPatterns;\n  phraseInlineInside['italic'].inside = nestedPatterns;\n  phraseInlineInside['inserted'].inside = nestedPatterns;\n  phraseInlineInside['deleted'].inside = nestedPatterns;\n  phraseInlineInside['span'].inside = nestedPatterns; // Allow some styles inside table cells\n\n  var phraseTableInside = phraseInside['table'].inside;\n  phraseTableInside['inline'] = nestedPatterns['inline'];\n  phraseTableInside['link'] = nestedPatterns['link'];\n  phraseTableInside['image'] = nestedPatterns['image'];\n  phraseTableInside['footnote'] = nestedPatterns['footnote'];\n  phraseTableInside['acronym'] = nestedPatterns['acronym'];\n  phraseTableInside['mark'] = nestedPatterns['mark'];\n})(Prism);\n/* TODO\n\tAdd support for Markdown notation inside doc comments\n\tAdd support for nested block comments...\n\tMatch closure params even when not followed by dash or brace\n\tAdd better support for macro definition\n*/\n\n\nPrism.languages.rust = {\n  'comment': [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: true\n  }],\n  'string': [{\n    pattern: /b?r(#*)\"(?:\\\\.|(?!\"\\1)[^\\\\\\r\\n])*\"\\1/,\n    greedy: true\n  }, {\n    pattern: /b?\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  }],\n  'char': {\n    pattern: /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u{(?:[\\da-fA-F]_*){1,6}|.)|[^\\\\\\r\\n\\t'])'/,\n    alias: 'string'\n  },\n  'lifetime-annotation': {\n    pattern: /'[^\\s>']+/,\n    alias: 'symbol'\n  },\n  'keyword': /\\b(?:abstract|alignof|as|be|box|break|const|continue|crate|do|dyn|else|enum|extern|false|final|fn|for|if|impl|in|let|loop|match|mod|move|mut|offsetof|once|override|priv|pub|pure|ref|return|sizeof|static|self|Self|struct|super|true|trait|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/,\n  'attribute': {\n    pattern: /#!?\\[.+?\\]/,\n    greedy: true,\n    alias: 'attr-name'\n  },\n  'function': [/\\w+(?=\\s*\\()/, // Macros can use parens or brackets\n  /\\w+!(?=\\s*\\(|\\[)/],\n  'macro-rules': {\n    pattern: /\\w+!/,\n    alias: 'function'\n  },\n  // Hex, oct, bin, dec numbers with visual separators and type suffix\n  'number': /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(\\d(?:_?\\d)*)?\\.?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:[iu](?:8|16|32|64)?|f32|f64))?\\b/,\n  // Closure params should not be confused with bitwise OR |\n  'closure-params': {\n    pattern: /\\|[^|]*\\|(?=\\s*[{-])/,\n    inside: {\n      'punctuation': /[|:,]/,\n      'operator': /[&*]/\n    }\n  },\n  'punctuation': /[{}[\\];(),:]|\\.+|->/,\n  'operator': /[-+*\\/%!^]=?|=[=>]?|@|&[&=]?|\\|[|=]?|<<?=?|>>?=?/\n};\nPrism.languages.sas = {\n  'datalines': {\n    pattern: /^\\s*(?:(?:data)?lines|cards);[\\s\\S]+?(?:\\r?\\n|\\r);/im,\n    alias: 'string',\n    inside: {\n      'keyword': {\n        pattern: /^(\\s*)(?:(?:data)?lines|cards)/i,\n        lookbehind: true\n      },\n      'punctuation': /;/\n    }\n  },\n  'comment': [{\n    pattern: /(^\\s*|;\\s*)\\*.*;/m,\n    lookbehind: true\n  }, /\\/\\*[\\s\\S]+?\\*\\//],\n  'datetime': {\n    // '1jan2013'd, '9:25:19pm't, '18jan2003:9:27:05am'dt\n    pattern: /'[^']+'(?:dt?|t)\\b/i,\n    alias: 'number'\n  },\n  'string': {\n    pattern: /([\"'])(?:\\1\\1|(?!\\1)[\\s\\S])*\\1/,\n    greedy: true\n  },\n  'keyword': /\\b(?:data|else|format|if|input|proc\\s\\w+|quit|run|then|libname|set|output|options)\\b/i,\n  // Decimal (1.2e23), hexadecimal (0c1x)\n  'number': /\\b(?:[\\da-f]+x|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)/i,\n  'operator': /\\*\\*?|\\|\\|?|!!?|¦¦?|<[>=]?|>[<=]?|[-+\\/=&]|[~¬^]=?|\\b(?:eq|ne|gt|lt|ge|le|in|not)\\b/i,\n  'punctuation': /[$%@.(){}\\[\\];,\\\\]/\n};\n\n(function (Prism) {\n  Prism.languages.sass = Prism.languages.extend('css', {\n    // Sass comments don't need to be closed, only indented\n    'comment': {\n      pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t]+.+)*/m,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('sass', 'atrule', {\n    // We want to consume the whole line\n    'atrule-line': {\n      // Includes support for = and + shortcuts\n      pattern: /^(?:[ \\t]*)[@+=].+/m,\n      inside: {\n        'atrule': /(?:@[\\w-]+|[+=])/m\n      }\n    }\n  });\n  delete Prism.languages.sass.atrule;\n  var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n  var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/, {\n    pattern: /(\\s+)-(?=\\s)/,\n    lookbehind: true\n  }];\n  Prism.languages.insertBefore('sass', 'property', {\n    // We want to consume the whole line\n    'variable-line': {\n      pattern: /^[ \\t]*\\$.+/m,\n      inside: {\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator\n      }\n    },\n    // We want to consume the whole line\n    'property-line': {\n      pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s]+.*)/m,\n      inside: {\n        'property': [/[^:\\s]+(?=\\s*:)/, {\n          pattern: /(:)[^:\\s]+/,\n          lookbehind: true\n        }],\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator,\n        'important': Prism.languages.sass.important\n      }\n    }\n  });\n  delete Prism.languages.sass.property;\n  delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n  // what's left should be selectors\n\n  Prism.languages.insertBefore('sass', 'punctuation', {\n    'selector': {\n      pattern: /([ \\t]*)\\S(?:,?[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,?[^,\\r\\n]+)*)*/,\n      lookbehind: true\n    }\n  });\n})(Prism);\n\n(function (Prism) {\n  var inside = {\n    'url': /url\\(([\"']?).*?\\1\\)/i,\n    'string': {\n      pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n      greedy: true\n    },\n    'interpolation': null,\n    // See below\n    'func': null,\n    // See below\n    'important': /\\B!(?:important|optional)\\b/i,\n    'keyword': {\n      pattern: /(^|\\s+)(?:(?:if|else|for|return|unless)(?=\\s+|$)|@[\\w-]+)/,\n      lookbehind: true\n    },\n    'hexcode': /#[\\da-f]{3,6}/i,\n    'number': /\\b\\d+(?:\\.\\d+)?%?/,\n    'boolean': /\\b(?:true|false)\\b/,\n    'operator': [// We want non-word chars around \"-\" because it is\n    // accepted in property names.\n    /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.+|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/],\n    'punctuation': /[{}()\\[\\];:,]/\n  };\n  inside['interpolation'] = {\n    pattern: /\\{[^\\r\\n}:]+\\}/,\n    alias: 'variable',\n    inside: {\n      'delimiter': {\n        pattern: /^{|}$/,\n        alias: 'punctuation'\n      },\n      rest: inside\n    }\n  };\n  inside['func'] = {\n    pattern: /[\\w-]+\\([^)]*\\).*/,\n    inside: {\n      'function': /^[^(]+/,\n      rest: inside\n    }\n  };\n  Prism.languages.stylus = {\n    'comment': {\n      pattern: /(^|[^\\\\])(\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    },\n    'atrule-declaration': {\n      pattern: /(^\\s*)@.+/m,\n      lookbehind: true,\n      inside: {\n        'atrule': /^@[\\w-]+/,\n        rest: inside\n      }\n    },\n    'variable-declaration': {\n      pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:(?:\\{[^}]*\\}|.+)|$)/m,\n      lookbehind: true,\n      inside: {\n        'variable': /^\\S+/,\n        rest: inside\n      }\n    },\n    'statement': {\n      pattern: /(^[ \\t]*)(?:if|else|for|return|unless)[ \\t]+.+/m,\n      lookbehind: true,\n      inside: {\n        keyword: /^\\S+/,\n        rest: inside\n      }\n    },\n    // A property/value pair cannot end with a comma or a brace\n    // It cannot have indented content unless it ended with a semicolon\n    'property-declaration': {\n      pattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)[^{\\r\\n]*(?:;|[^{\\r\\n,](?=$)(?!(\\r?\\n|\\r)(?:\\{|\\2[ \\t]+)))/m,\n      lookbehind: true,\n      inside: {\n        'property': {\n          pattern: /^[^\\s:]+/,\n          inside: {\n            'interpolation': inside.interpolation\n          }\n        },\n        rest: inside\n      }\n    },\n    // A selector can contain parentheses only as part of a pseudo-element\n    // It can span multiple lines.\n    // It must end with a comma or an accolade or have indented content.\n    'selector': {\n      pattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t]+)))/m,\n      lookbehind: true,\n      inside: {\n        'interpolation': inside.interpolation,\n        'punctuation': /[{},]/\n      }\n    },\n    'func': inside.func,\n    'string': inside.string,\n    'interpolation': inside.interpolation,\n    'punctuation': /[{}()\\[\\];:.]/\n  };\n})(Prism);\n\n(function (Prism) {\n  var codeLines = {\n    'code': {\n      pattern: /(^(\\s*(?:\\*\\s*)*)).*[^*\\s].+$/m,\n      lookbehind: true,\n      inside: Prism.languages.java,\n      alias: 'language-java'\n    }\n  };\n  Prism.languages.javadoc = Prism.languages.extend('javadoclike', {});\n  Prism.languages.insertBefore('javadoc', 'keyword', {\n    'class-name': [{\n      pattern: /(@(?:exception|throws|see|link|linkplain|value)\\s+(?:[a-z\\d]+\\.)*)[A-Z](?:\\w*[a-z]\\w*)?(?:\\.[A-Z](?:\\w*[a-z]\\w*)?)*/,\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\./\n      }\n    }, {\n      // @param <T> the first generic type parameter\n      pattern: /(@param\\s+)<[A-Z]\\w*>/,\n      lookbehind: true,\n      inside: {\n        'punctuation': /[.<>]/\n      }\n    }],\n    'namespace': {\n      pattern: /(@(?:exception|throws|see|link|linkplain)\\s+)(?:[a-z\\d]+\\.)+/,\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\./\n      }\n    },\n    'code-section': [{\n      pattern: /(\\{@code\\s+)(?:[^{}]|\\{[^{}]*\\})+?(?=\\s*\\})/,\n      lookbehind: true,\n      inside: codeLines\n    }, {\n      pattern: /(<(code|tt)>\\s*)[\\s\\S]+?(?=\\s*<\\/\\2>)/,\n      lookbehind: true,\n      inside: codeLines\n    }],\n    'tag': Prism.languages.markup.tag\n  });\n  Prism.languages.javadoclike.addSupport('java', Prism.languages.javadoc);\n})(Prism);\n\nPrism.languages.scheme = {\n  'comment': /;.*/,\n  'string': {\n    pattern: /\"(?:[^\"\\\\]|\\\\.)*\"|'[^()#'\\s]+/,\n    greedy: true\n  },\n  'character': {\n    pattern: /#\\\\(?:[ux][a-fA-F\\d]+|[a-zA-Z]+|\\S)/,\n    alias: 'string'\n  },\n  'keyword': {\n    pattern: /(\\()(?:define(?:-syntax|-library|-values)?|(?:case-)?lambda|let(?:\\*|rec)?(?:-values)?|else|if|cond|begin|delay(?:-force)?|parameterize|guard|set!|(?:quasi-)?quote|syntax-rules)(?=[()\\s])/,\n    lookbehind: true\n  },\n  'builtin': {\n    pattern: /(\\()(?:(?:cons|car|cdr|list|call-with-current-continuation|call\\/cc|append|abs|apply|eval)\\b|null\\?|pair\\?|boolean\\?|eof-object\\?|char\\?|procedure\\?|number\\?|port\\?|string\\?|vector\\?|symbol\\?|bytevector\\?)(?=[()\\s])/,\n    lookbehind: true\n  },\n  'number': {\n    pattern: /([\\s()])[-+]?\\d*\\.?\\d+(?:\\s*[-+]\\s*\\d*\\.?\\d+i)?\\b/,\n    lookbehind: true\n  },\n  'boolean': /#[tf]/,\n  'operator': {\n    pattern: /(\\()(?:[-+*%\\/]|[<>]=?|=>?)(?=\\s|$)/,\n    lookbehind: true\n  },\n  'function': {\n    pattern: /(\\()[^()'\\s]+(?=[()\\s)]|$)/,\n    lookbehind: true\n  },\n  'punctuation': /[()']/\n};\nPrism.languages.smalltalk = {\n  'comment': /\"(?:\"\"|[^\"])*\"/,\n  'string': /'(?:''|[^'])*'/,\n  'symbol': /#[\\da-z]+|#(?:-|([+\\/\\\\*~<>=@%|&?!])\\1?)|#(?=\\()/i,\n  'block-arguments': {\n    pattern: /(\\[\\s*):[^\\[|]*\\|/,\n    lookbehind: true,\n    inside: {\n      'variable': /:[\\da-z]+/i,\n      'punctuation': /\\|/\n    }\n  },\n  'temporary-variables': {\n    pattern: /\\|[^|]+\\|/,\n    inside: {\n      'variable': /[\\da-z]+/i,\n      'punctuation': /\\|/\n    }\n  },\n  'keyword': /\\b(?:nil|true|false|self|super|new)\\b/,\n  'character': {\n    pattern: /\\$./,\n    alias: 'string'\n  },\n  'number': [/\\d+r-?[\\dA-Z]+(?:\\.[\\dA-Z]+)?(?:e-?\\d+)?/, /\\b\\d+(?:\\.\\d+)?(?:e-?\\d+)?/],\n  'operator': /[<=]=?|:=|~[~=]|\\/\\/?|\\\\\\\\|>[>=]?|[!^+\\-*&|,@]/,\n  'punctuation': /[.;:?\\[\\](){}]/\n};\n/* TODO\n\tAdd support for variables inside double quoted strings\n\tAdd support for {php}\n*/\n\n(function (Prism) {\n  Prism.languages.smarty = {\n    'comment': /\\{\\*[\\s\\S]*?\\*\\}/,\n    'delimiter': {\n      pattern: /^\\{|\\}$/i,\n      alias: 'punctuation'\n    },\n    'string': /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    'number': /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n    'variable': [/\\$(?!\\d)\\w+/, /#(?!\\d)\\w+#/, {\n      pattern: /(\\.|->)(?!\\d)\\w+/,\n      lookbehind: true\n    }, {\n      pattern: /(\\[)(?!\\d)\\w+(?=\\])/,\n      lookbehind: true\n    }],\n    'function': [{\n      pattern: /(\\|\\s*)@?(?!\\d)\\w+/,\n      lookbehind: true\n    }, /^\\/?(?!\\d)\\w+/, /(?!\\d)\\w+(?=\\()/],\n    'attr-name': {\n      // Value is made optional because it may have already been tokenized\n      pattern: /\\w+\\s*=\\s*(?:(?!\\d)\\w+)?/,\n      inside: {\n        \"variable\": {\n          pattern: /(=\\s*)(?!\\d)\\w+/,\n          lookbehind: true\n        },\n        \"operator\": /=/\n      }\n    },\n    'punctuation': [/[\\[\\]().,:`]|->/],\n    'operator': [/[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/, /\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/, /\\b(?:eq|neq?|gt|lt|gt?e|lt?e|not|mod|or|and)\\b/],\n    'keyword': /\\b(?:false|off|on|no|true|yes)\\b/\n  }; // Tokenize all inline Smarty expressions\n\n  Prism.hooks.add('before-tokenize', function (env) {\n    var smartyPattern = /\\{\\*[\\s\\S]*?\\*\\}|\\{[\\s\\S]+?\\}/g;\n    var smartyLitteralStart = '{literal}';\n    var smartyLitteralEnd = '{/literal}';\n    var smartyLitteralMode = false;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'smarty', smartyPattern, function (match) {\n      // Smarty tags inside {literal} block are ignored\n      if (match === smartyLitteralEnd) {\n        smartyLitteralMode = false;\n      }\n\n      if (!smartyLitteralMode) {\n        if (match === smartyLitteralStart) {\n          smartyLitteralMode = true;\n        }\n\n        return true;\n      }\n\n      return false;\n    });\n  }); // Re-insert the tokens after tokenizing\n\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty');\n  });\n})(Prism);\n\n(function (Prism) {\n  var plsql = Prism.languages.plsql = Prism.languages.extend('sql', {\n    'comment': [/\\/\\*[\\s\\S]*?\\*\\//, /--.*/]\n  });\n  var keyword = plsql['keyword'];\n\n  if (!Array.isArray(keyword)) {\n    keyword = plsql['keyword'] = [keyword];\n  }\n\n  keyword.unshift(/\\b(?:ACCESS|AGENT|AGGREGATE|ARRAY|ARROW|AT|ATTRIBUTE|AUDIT|AUTHID|BFILE_BASE|BLOB_BASE|BLOCK|BODY|BOTH|BOUND|BYTE|CALLING|CHAR_BASE|CHARSET(?:FORM|ID)|CLOB_BASE|COLAUTH|COLLECT|CLUSTERS?|COMPILED|COMPRESS|CONSTANT|CONSTRUCTOR|CONTEXT|CRASH|CUSTOMDATUM|DANGLING|DATE_BASE|DEFINE|DETERMINISTIC|DURATION|ELEMENT|EMPTY|EXCEPTIONS?|EXCLUSIVE|EXTERNAL|FINAL|FORALL|FORM|FOUND|GENERAL|HEAP|HIDDEN|IDENTIFIED|IMMEDIATE|INCLUDING|INCREMENT|INDICATOR|INDEXES|INDICES|INFINITE|INITIAL|ISOPEN|INSTANTIABLE|INTERFACE|INVALIDATE|JAVA|LARGE|LEADING|LENGTH|LIBRARY|LIKE[24C]|LIMITED|LONG|LOOP|MAP|MAXEXTENTS|MAXLEN|MEMBER|MINUS|MLSLABEL|MULTISET|NAME|NAN|NATIVE|NEW|NOAUDIT|NOCOMPRESS|NOCOPY|NOTFOUND|NOWAIT|NUMBER(?:_BASE)?|OBJECT|OCI(?:COLL|DATE|DATETIME|DURATION|INTERVAL|LOBLOCATOR|NUMBER|RAW|REF|REFCURSOR|ROWID|STRING|TYPE)|OFFLINE|ONLINE|ONLY|OPAQUE|OPERATOR|ORACLE|ORADATA|ORGANIZATION|ORL(?:ANY|VARY)|OTHERS|OVERLAPS|OVERRIDING|PACKAGE|PARALLEL_ENABLE|PARAMETERS?|PASCAL|PCTFREE|PIPE(?:LINED)?|PRAGMA|PRIOR|PRIVATE|RAISE|RANGE|RAW|RECORD|REF|REFERENCE|REM|REMAINDER|RESULT|RESOURCE|RETURNING|REVERSE|ROW(?:ID|NUM|TYPE)|SAMPLE|SB[124]|SEGMENT|SELF|SEPARATE|SEQUENCE|SHORT|SIZE(?:_T)?|SPARSE|SQL(?:CODE|DATA|NAME|STATE)|STANDARD|STATIC|STDDEV|STORED|STRING|STRUCT|STYLE|SUBMULTISET|SUBPARTITION|SUBSTITUTABLE|SUBTYPE|SUCCESSFUL|SYNONYM|SYSDATE|TABAUTH|TDO|THE|TIMEZONE_(?:ABBR|HOUR|MINUTE|REGION)|TRAILING|TRANSAC(?:TIONAL)?|TRUSTED|UB[124]|UID|UNDER|UNTRUSTED|VALIDATE|VALIST|VARCHAR2|VARIABLE|VARIANCE|VARRAY|VIEWS|VOID|WHENEVER|WRAPPED|ZONE)\\b/i);\n  var operator = plsql['operator'];\n\n  if (!Array.isArray(operator)) {\n    operator = plsql['operator'] = [operator];\n  }\n\n  operator.unshift(/:=/);\n})(Prism);\n\n(function (Prism) {\n  var stringPattern = /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n  var numberPattern = /\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/;\n  Prism.languages.soy = {\n    'comment': [/\\/\\*[\\s\\S]*?\\*\\//, {\n      pattern: /(\\s)\\/\\/.*/,\n      lookbehind: true,\n      greedy: true\n    }],\n    'command-arg': {\n      pattern: /({+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,\n      lookbehind: true,\n      alias: 'string',\n      inside: {\n        'punctuation': /\\./\n      }\n    },\n    'parameter': {\n      pattern: /({+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    'keyword': [{\n      pattern: /({+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,\n      lookbehind: true\n    }, /\\b(?:any|as|attributes|bool|css|float|in|int|js|html|list|map|null|number|string|uri)\\b/],\n    'delimiter': {\n      pattern: /^{+\\/?|\\/?}+$/,\n      alias: 'punctuation'\n    },\n    'property': /\\w+(?==)/,\n    'variable': {\n      pattern: /\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+]))*/,\n      inside: {\n        'string': {\n          pattern: stringPattern,\n          greedy: true\n        },\n        'number': numberPattern,\n        'punctuation': /[\\[\\].?]/\n      }\n    },\n    'string': {\n      pattern: stringPattern,\n      greedy: true\n    },\n    'function': [/\\w+(?=\\()/, {\n      pattern: /(\\|[^\\S\\r\\n]*)\\w+/,\n      lookbehind: true\n    }],\n    'boolean': /\\b(?:true|false)\\b/,\n    'number': numberPattern,\n    'operator': /\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\b(?:and|not|or)\\b/,\n    'punctuation': /[{}()\\[\\]|.,:]/\n  }; // Tokenize all inline Soy expressions\n\n  Prism.hooks.add('before-tokenize', function (env) {\n    var soyPattern = /{{.+?}}|{.+?}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g;\n    var soyLitteralStart = '{literal}';\n    var soyLitteralEnd = '{/literal}';\n    var soyLitteralMode = false;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'soy', soyPattern, function (match) {\n      // Soy tags inside {literal} block are ignored\n      if (match === soyLitteralEnd) {\n        soyLitteralMode = false;\n      }\n\n      if (!soyLitteralMode) {\n        if (match === soyLitteralStart) {\n          soyLitteralMode = true;\n        }\n\n        return true;\n      }\n\n      return false;\n    });\n  }); // Re-insert the tokens after tokenizing\n\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'soy');\n  });\n})(Prism);\n\nPrism.languages.twig = {\n  'comment': /\\{#[\\s\\S]*?#\\}/,\n  'tag': {\n    pattern: /\\{\\{[\\s\\S]*?\\}\\}|\\{%[\\s\\S]*?%\\}/,\n    inside: {\n      'ld': {\n        pattern: /^(?:\\{\\{-?|\\{%-?\\s*\\w+)/,\n        inside: {\n          'punctuation': /^(?:\\{\\{|\\{%)-?/,\n          'keyword': /\\w+/\n        }\n      },\n      'rd': {\n        pattern: /-?(?:%\\}|\\}\\})$/,\n        inside: {\n          'punctuation': /.+/\n        }\n      },\n      'string': {\n        pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        inside: {\n          'punctuation': /^['\"]|['\"]$/\n        }\n      },\n      'keyword': /\\b(?:even|if|odd)\\b/,\n      'boolean': /\\b(?:true|false|null)\\b/,\n      'number': /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n      'operator': [{\n        pattern: /(\\s)(?:and|b-and|b-xor|b-or|ends with|in|is|matches|not|or|same as|starts with)(?=\\s)/,\n        lookbehind: true\n      }, /[=<>]=?|!=|\\*\\*?|\\/\\/?|\\?:?|[-+~%|]/],\n      'property': /\\b[a-zA-Z_]\\w*\\b/,\n      'punctuation': /[()\\[\\]{}:.,]/\n    }\n  },\n  // The rest can be parsed as HTML\n  'other': {\n    // We want non-blank matches\n    pattern: /\\S(?:[\\s\\S]*\\S)?/,\n    inside: Prism.languages.markup\n  }\n}; // issues: nested multiline comments\n\nPrism.languages.swift = Prism.languages.extend('clike', {\n  'string': {\n    pattern: /(\"|')(\\\\(?:\\((?:[^()]|\\([^)]+\\))+\\)|\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        pattern: /\\\\\\((?:[^()]|\\([^)]+\\))+\\)/,\n        inside: {\n          delimiter: {\n            pattern: /^\\\\\\(|\\)$/,\n            alias: 'variable' // See rest below\n\n          }\n        }\n      }\n    }\n  },\n  'keyword': /\\b(?:as|associativity|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic(?:Type)?|else|enum|extension|fallthrough|final|for|func|get|guard|if|import|in|infix|init|inout|internal|is|lazy|left|let|mutating|new|none|nonmutating|operator|optional|override|postfix|precedence|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|Self|set|static|struct|subscript|super|switch|throws?|try|Type|typealias|unowned|unsafe|var|weak|where|while|willSet|__(?:COLUMN__|FILE__|FUNCTION__|LINE__))\\b/,\n  'number': /\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,\n  'constant': /\\b(?:nil|[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,\n  'atrule': /@\\b(?:IB(?:Outlet|Designable|Action|Inspectable)|class_protocol|exported|noreturn|NS(?:Copying|Managed)|objc|UIApplicationMain|auto_closure)\\b/,\n  'builtin': /\\b(?:[A-Z]\\S+|abs|advance|alignof(?:Value)?|assert|contains|count(?:Elements)?|debugPrint(?:ln)?|distance|drop(?:First|Last)|dump|enumerate|equal|filter|find|first|getVaList|indices|isEmpty|join|last|lexicographicalCompare|map|max(?:Element)?|min(?:Element)?|numericCast|overlaps|partition|print(?:ln)?|reduce|reflect|reverse|sizeof(?:Value)?|sort(?:ed)?|split|startsWith|stride(?:of(?:Value)?)?|suffix|swap|toDebugString|toString|transcode|underestimateCount|unsafeBitCast|with(?:ExtendedLifetime|Unsafe(?:MutablePointers?|Pointers?)|VaList))\\b/\n});\nPrism.languages.swift['string'].inside['interpolation'].inside.rest = Prism.languages.swift;\nPrism.languages.yaml = {\n  'scalar': {\n    pattern: /([\\-:]\\s*(?:![^\\s]+)?[ \\t]*[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)[^\\r\\n]+(?:\\2[^\\r\\n]+)*)/,\n    lookbehind: true,\n    alias: 'string'\n  },\n  'comment': /#.*/,\n  'key': {\n    pattern: /(\\s*(?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:![^\\s]+)?[ \\t]*)[^\\r\\n{[\\]},#\\s]+?(?=\\s*:\\s)/,\n    lookbehind: true,\n    alias: 'atrule'\n  },\n  'directive': {\n    pattern: /(^[ \\t]*)%.+/m,\n    lookbehind: true,\n    alias: 'important'\n  },\n  'datetime': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?)?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?)(?=[ \\t]*(?:$|,|]|}))/m,\n    lookbehind: true,\n    alias: 'number'\n  },\n  'boolean': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:true|false)[ \\t]*(?=$|,|]|})/im,\n    lookbehind: true,\n    alias: 'important'\n  },\n  'null': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:null|~)[ \\t]*(?=$|,|]|})/im,\n    lookbehind: true,\n    alias: 'important'\n  },\n  'string': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(\"|')(?:(?!\\2)[^\\\\\\r\\n]|\\\\.)*\\2(?=[ \\t]*(?:$|,|]|}|\\s*#))/m,\n    lookbehind: true,\n    greedy: true\n  },\n  'number': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+\\.?\\d*|\\.?\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)[ \\t]*(?=$|,|]|})/im,\n    lookbehind: true\n  },\n  'tag': /![^\\s]+/,\n  'important': /[&*][\\w]+/,\n  'punctuation': /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n};\nPrism.languages.yml = Prism.languages.yaml;\nPrism.languages.tcl = {\n  'comment': {\n    pattern: /(^|[^\\\\])#.*/,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"/,\n    greedy: true\n  },\n  'variable': [{\n    pattern: /(\\$)(?:::)?(?:[a-zA-Z0-9]+::)*\\w+/,\n    lookbehind: true\n  }, {\n    pattern: /(\\$){[^}]+}/,\n    lookbehind: true\n  }, {\n    pattern: /(^\\s*set[ \\t]+)(?:::)?(?:[a-zA-Z0-9]+::)*\\w+/m,\n    lookbehind: true\n  }],\n  'function': {\n    pattern: /(^\\s*proc[ \\t]+)[^\\s]+/m,\n    lookbehind: true\n  },\n  'builtin': [{\n    pattern: /(^\\s*)(?:proc|return|class|error|eval|exit|for|foreach|if|switch|while|break|continue)\\b/m,\n    lookbehind: true\n  }, /\\b(?:elseif|else)\\b/],\n  'scope': {\n    pattern: /(^\\s*)(?:global|upvar|variable)\\b/m,\n    lookbehind: true,\n    alias: 'constant'\n  },\n  'keyword': {\n    pattern: /(^\\s*|\\[)(?:after|append|apply|array|auto_(?:execok|import|load|mkindex|qualify|reset)|automkindex_old|bgerror|binary|catch|cd|chan|clock|close|concat|dde|dict|encoding|eof|exec|expr|fblocked|fconfigure|fcopy|file(?:event|name)?|flush|gets|glob|history|http|incr|info|interp|join|lappend|lassign|lindex|linsert|list|llength|load|lrange|lrepeat|lreplace|lreverse|lsearch|lset|lsort|math(?:func|op)|memory|msgcat|namespace|open|package|parray|pid|pkg_mkIndex|platform|puts|pwd|re_syntax|read|refchan|regexp|registry|regsub|rename|Safe_Base|scan|seek|set|socket|source|split|string|subst|Tcl|tcl(?:_endOfWord|_findLibrary|startOf(?:Next|Previous)Word|wordBreak(?:After|Before)|test|vars)|tell|time|tm|trace|unknown|unload|unset|update|uplevel|vwait)\\b/m,\n    lookbehind: true\n  },\n  'operator': /!=?|\\*\\*?|==|&&?|\\|\\|?|<[=<]?|>[=>]?|[-+~\\/%?^]|\\b(?:eq|ne|in|ni)\\b/,\n  'punctuation': /[{}()\\[\\]]/\n};\n/* TODO\n\tHandle multiline code after tag\n\t    %foo= some |\n\t\t\tmultiline |\n\t\t\tcode |\n*/\n\n(function (Prism) {\n  Prism.languages.haml = {\n    // Multiline stuff should appear before the rest\n    'multiline-comment': {\n      pattern: /((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/,\n      lookbehind: true,\n      alias: 'comment'\n    },\n    'multiline-code': [{\n      pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)/,\n      lookbehind: true,\n      inside: {\n        rest: Prism.languages.ruby\n      }\n    }, {\n      pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*\\|[\\t ]*)*/,\n      lookbehind: true,\n      inside: {\n        rest: Prism.languages.ruby\n      }\n    }],\n    // See at the end of the file for known filters\n    'filter': {\n      pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/,\n      lookbehind: true,\n      inside: {\n        'filter-name': {\n          pattern: /^:[\\w-]+/,\n          alias: 'variable'\n        }\n      }\n    },\n    'markup': {\n      pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,\n      lookbehind: true,\n      inside: {\n        rest: Prism.languages.markup\n      }\n    },\n    'doctype': {\n      pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,\n      lookbehind: true\n    },\n    'tag': {\n      // Allows for one nested group of braces\n      pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,\n      lookbehind: true,\n      inside: {\n        'attributes': [{\n          // Lookbehind tries to prevent interpolations from breaking it all\n          // Allows for one nested group of braces\n          pattern: /(^|[^#])\\{(?:\\{[^}]+\\}|[^}])+\\}/,\n          lookbehind: true,\n          inside: {\n            rest: Prism.languages.ruby\n          }\n        }, {\n          pattern: /\\([^)]+\\)/,\n          inside: {\n            'attr-value': {\n              pattern: /(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,\n              lookbehind: true\n            },\n            'attr-name': /[\\w:-]+(?=\\s*!?=|\\s*[,)])/,\n            'punctuation': /[=(),]/\n          }\n        }, {\n          pattern: /\\[[^\\]]+\\]/,\n          inside: {\n            rest: Prism.languages.ruby\n          }\n        }],\n        'punctuation': /[<>]/\n      }\n    },\n    'code': {\n      pattern: /((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,\n      lookbehind: true,\n      inside: {\n        rest: Prism.languages.ruby\n      }\n    },\n    // Interpolations in plain text\n    'interpolation': {\n      pattern: /#\\{[^}]+\\}/,\n      inside: {\n        'delimiter': {\n          pattern: /^#\\{|\\}$/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.ruby\n      }\n    },\n    'punctuation': {\n      pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,\n      lookbehind: true\n    }\n  };\n  var filter_pattern = '((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ]+.+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+'; // Non exhaustive list of available filters and associated languages\n\n  var filters = ['css', {\n    filter: 'coffee',\n    language: 'coffeescript'\n  }, 'erb', 'javascript', 'less', 'markdown', 'ruby', 'scss', 'textile'];\n  var all_filters = {};\n\n  for (var i = 0, l = filters.length; i < l; i++) {\n    var filter = filters[i];\n    filter = typeof filter === 'string' ? {\n      filter: filter,\n      language: filter\n    } : filter;\n\n    if (Prism.languages[filter.language]) {\n      all_filters['filter-' + filter.filter] = {\n        pattern: RegExp(filter_pattern.replace('{{filter_name}}', filter.filter)),\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'variable'\n          },\n          rest: Prism.languages[filter.language]\n        }\n      };\n    }\n  }\n\n  Prism.languages.insertBefore('haml', 'filter', all_filters);\n})(Prism);\n\n(function (Prism) {\n  // pattern: /(?:[\\w-]+|'[^'\\n\\r]*'|\"(?:\\.|[^\\\\\"\\r\\n])*\")/\n  var key = \"(?:[\\\\w-]+|'[^'\\n\\r]*'|\\\"(?:\\\\.|[^\\\\\\\\\\\"\\r\\n])*\\\")\";\n  Prism.languages.toml = {\n    'comment': {\n      pattern: /#.*/,\n      greedy: true\n    },\n    'table': {\n      pattern: RegExp(\"(\\\\[\\\\s*)\" + key + \"(?:\\\\s*\\\\.\\\\s*\" + key + \")*(?=\\\\s*\\\\])\"),\n      lookbehind: true,\n      greedy: true,\n      alias: 'class-name'\n    },\n    'key': {\n      pattern: RegExp(\"(^\\\\s*|[{,]\\\\s*)\" + key + \"(?:\\\\s*\\\\.\\\\s*\" + key + \")*(?=\\\\s*=)\", \"m\"),\n      lookbehind: true,\n      greedy: true,\n      alias: 'property'\n    },\n    'string': {\n      pattern: /\"\"\"(?:\\\\[\\s\\S]|[^\\\\])*?\"\"\"|'''[\\s\\S]*?'''|'[^'\\n\\r]*'|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n      greedy: true\n    },\n    'date': [{\n      // Offset Date-Time, Local Date-Time, Local Date\n      pattern: /\\d{4}-\\d{2}-\\d{2}(?:[T\\s]\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|[+-]\\d{2}:\\d{2})?)?/i,\n      alias: 'number'\n    }, {\n      // Local Time\n      pattern: /\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?/i,\n      alias: 'number'\n    }],\n    'number': /(?:\\b0(?:x[\\da-zA-Z]+(?:_[\\da-zA-Z]+)*|o[0-7]+(?:_[0-7]+)*|b[10]+(?:_[10]+)*))\\b|[-+]?\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?\\b|[-+]?(?:inf|nan)\\b/,\n    'boolean': /\\b(?:true|false)\\b/,\n    'punctuation': /[.,=[\\]{}]/\n  };\n})(Prism);\n\n(function (Prism) {\n  Prism.languages.tt2 = Prism.languages.extend('clike', {\n    comment: {\n      pattern: /#.*|\\[%#[\\s\\S]*?%\\]/,\n      lookbehind: true\n    },\n    keyword: /\\b(?:BLOCK|CALL|CASE|CATCH|CLEAR|DEBUG|DEFAULT|ELSE|ELSIF|END|FILTER|FINAL|FOREACH|GET|IF|IN|INCLUDE|INSERT|LAST|MACRO|META|NEXT|PERL|PROCESS|RAWPERL|RETURN|SET|STOP|TAGS|THROW|TRY|SWITCH|UNLESS|USE|WHILE|WRAPPER)\\b/,\n    punctuation: /[[\\]{},()]/\n  });\n  Prism.languages.insertBefore('tt2', 'number', {\n    operator: /=[>=]?|!=?|<=?|>=?|&&|\\|\\|?|\\b(?:and|or|not)\\b/,\n    variable: {\n      pattern: /[a-z]\\w*(?:\\s*\\.\\s*(?:\\d+|\\$?[a-z]\\w*))*/i\n    }\n  });\n  Prism.languages.insertBefore('tt2', 'keyword', {\n    'delimiter': {\n      pattern: /^(?:\\[%|%%)-?|-?%]$/,\n      alias: 'punctuation'\n    }\n  });\n  Prism.languages.insertBefore('tt2', 'string', {\n    'single-quoted-string': {\n      pattern: /'[^\\\\']*(?:\\\\[\\s\\S][^\\\\']*)*'/,\n      greedy: true,\n      alias: 'string'\n    },\n    'double-quoted-string': {\n      pattern: /\"[^\\\\\"]*(?:\\\\[\\s\\S][^\\\\\"]*)*\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        variable: {\n          pattern: /\\$(?:[a-z]\\w*(?:\\.(?:\\d+|\\$?[a-z]\\w*))*)/i\n        }\n      }\n    }\n  }); // The different types of TT2 strings \"replace\" the C-like standard string\n\n  delete Prism.languages.tt2.string;\n  Prism.hooks.add('before-tokenize', function (env) {\n    var tt2Pattern = /\\[%[\\s\\S]+?%\\]/g;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'tt2', tt2Pattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'tt2');\n  });\n})(Prism);\n\n(function (Prism) {\n  // TODO:\n  // - Add CSS highlighting inside <style> tags\n  // - Add support for multi-line code blocks\n  // - Add support for interpolation #{} and !{}\n  // - Add support for tag interpolation #[]\n  // - Add explicit support for plain text using |\n  // - Add support for markup embedded in plain text\n  Prism.languages.pug = {\n    // Multiline stuff should appear before the rest\n    // This handles both single-line and multi-line comments\n    'comment': {\n      pattern: /(^([\\t ]*))\\/\\/.*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/m,\n      lookbehind: true\n    },\n    // All the tag-related part is in lookbehind\n    // so that it can be highlighted by the \"tag\" pattern\n    'multiline-script': {\n      pattern: /(^([\\t ]*)script\\b.*\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,\n      lookbehind: true,\n      inside: {\n        rest: Prism.languages.javascript\n      }\n    },\n    // See at the end of the file for known filters\n    'filter': {\n      pattern: /(^([\\t ]*)):.+(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,\n      lookbehind: true,\n      inside: {\n        'filter-name': {\n          pattern: /^:[\\w-]+/,\n          alias: 'variable'\n        }\n      }\n    },\n    'multiline-plain-text': {\n      pattern: /(^([\\t ]*)[\\w\\-#.]+\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,\n      lookbehind: true\n    },\n    'markup': {\n      pattern: /(^[\\t ]*)<.+/m,\n      lookbehind: true,\n      inside: {\n        rest: Prism.languages.markup\n      }\n    },\n    'doctype': {\n      pattern: /((?:^|\\n)[\\t ]*)doctype(?: .+)?/,\n      lookbehind: true\n    },\n    // This handle all conditional and loop keywords\n    'flow-control': {\n      pattern: /(^[\\t ]*)(?:if|unless|else|case|when|default|each|while)\\b(?: .+)?/m,\n      lookbehind: true,\n      inside: {\n        'each': {\n          pattern: /^each .+? in\\b/,\n          inside: {\n            'keyword': /\\b(?:each|in)\\b/,\n            'punctuation': /,/\n          }\n        },\n        'branch': {\n          pattern: /^(?:if|unless|else|case|when|default|while)\\b/,\n          alias: 'keyword'\n        },\n        rest: Prism.languages.javascript\n      }\n    },\n    'keyword': {\n      pattern: /(^[\\t ]*)(?:block|extends|include|append|prepend)\\b.+/m,\n      lookbehind: true\n    },\n    'mixin': [// Declaration\n    {\n      pattern: /(^[\\t ]*)mixin .+/m,\n      lookbehind: true,\n      inside: {\n        'keyword': /^mixin/,\n        'function': /\\w+(?=\\s*\\(|\\s*$)/,\n        'punctuation': /[(),.]/\n      }\n    }, // Usage\n    {\n      pattern: /(^[\\t ]*)\\+.+/m,\n      lookbehind: true,\n      inside: {\n        'name': {\n          pattern: /^\\+\\w+/,\n          alias: 'function'\n        },\n        'rest': Prism.languages.javascript\n      }\n    }],\n    'script': {\n      pattern: /(^[\\t ]*script(?:(?:&[^(]+)?\\([^)]+\\))*[\\t ]+).+/m,\n      lookbehind: true,\n      inside: {\n        rest: Prism.languages.javascript\n      }\n    },\n    'plain-text': {\n      pattern: /(^[\\t ]*(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?[\\t ]+).+/m,\n      lookbehind: true\n    },\n    'tag': {\n      pattern: /(^[\\t ]*)(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?:?/m,\n      lookbehind: true,\n      inside: {\n        'attributes': [{\n          pattern: /&[^(]+\\([^)]+\\)/,\n          inside: {\n            rest: Prism.languages.javascript\n          }\n        }, {\n          pattern: /\\([^)]+\\)/,\n          inside: {\n            'attr-value': {\n              pattern: /(=\\s*)(?:\\{[^}]*\\}|[^,)\\r\\n]+)/,\n              lookbehind: true,\n              inside: {\n                rest: Prism.languages.javascript\n              }\n            },\n            'attr-name': /[\\w-]+(?=\\s*!?=|\\s*[,)])/,\n            'punctuation': /[!=(),]+/\n          }\n        }],\n        'punctuation': /:/\n      }\n    },\n    'code': [{\n      pattern: /(^[\\t ]*(?:-|!?=)).+/m,\n      lookbehind: true,\n      inside: {\n        rest: Prism.languages.javascript\n      }\n    }],\n    'punctuation': /[.\\-!=|]+/\n  };\n  var filter_pattern = /(^([\\t ]*)):{{filter_name}}(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/.source; // Non exhaustive list of available filters and associated languages\n\n  var filters = [{\n    filter: 'atpl',\n    language: 'twig'\n  }, {\n    filter: 'coffee',\n    language: 'coffeescript'\n  }, 'ejs', 'handlebars', 'less', 'livescript', 'markdown', {\n    filter: 'sass',\n    language: 'scss'\n  }, 'stylus'];\n  var all_filters = {};\n\n  for (var i = 0, l = filters.length; i < l; i++) {\n    var filter = filters[i];\n    filter = typeof filter === 'string' ? {\n      filter: filter,\n      language: filter\n    } : filter;\n\n    if (Prism.languages[filter.language]) {\n      all_filters['filter-' + filter.filter] = {\n        pattern: RegExp(filter_pattern.replace('{{filter_name}}', filter.filter), 'm'),\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'variable'\n          },\n          rest: Prism.languages[filter.language]\n        }\n      };\n    }\n  }\n\n  Prism.languages.insertBefore('pug', 'filter', all_filters);\n})(Prism);\n\nvar typescript = Prism.util.clone(Prism.languages.typescript);\nPrism.languages.tsx = Prism.languages.extend('jsx', typescript);\n\n(function (Prism) {\n  function createBlock(prefix, inside, contentAlias) {\n    return {\n      pattern: RegExp('<#' + prefix + '[\\\\s\\\\S]*?#>'),\n      alias: 'block',\n      inside: {\n        'delimiter': {\n          pattern: RegExp('^<#' + prefix + '|#>$'),\n          alias: 'important'\n        },\n        'content': {\n          pattern: /[\\s\\S]+/,\n          inside: inside,\n          alias: contentAlias\n        }\n      }\n    };\n  }\n\n  function createT4(insideLang) {\n    var grammar = Prism.languages[insideLang];\n    var className = 'language-' + insideLang;\n    return {\n      'block': {\n        pattern: /<#[\\s\\S]+?#>/,\n        inside: {\n          'directive': createBlock('@', {\n            'attr-value': {\n              pattern: /=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/,\n              inside: {\n                'punctuation': /^=|^[\"']|[\"']$/\n              }\n            },\n            'keyword': /\\w+(?=\\s)/,\n            'attr-name': /\\w+/\n          }),\n          'expression': createBlock('=', grammar, className),\n          'class-feature': createBlock('\\\\+', grammar, className),\n          'standard': createBlock('', grammar, className)\n        }\n      }\n    };\n  }\n\n  Prism.languages['t4-templating'] = Object.defineProperty({}, 'createT4', {\n    value: createT4\n  });\n})(Prism);\n\nPrism.languages['visual-basic'] = {\n  'comment': {\n    pattern: /(?:['‘’]|REM\\b).*/i,\n    inside: {\n      'keyword': /^REM/i\n    }\n  },\n  'directive': {\n    pattern: /#(?:Const|Else|ElseIf|End|ExternalChecksum|ExternalSource|If|Region)(?:[^\\S\\r\\n]_[^\\S\\r\\n]*(?:\\r\\n?|\\n)|.)+/i,\n    alias: 'comment',\n    greedy: true\n  },\n  'string': {\n    pattern: /[\"“”](?:[\"“”]{2}|[^\"“”])*[\"“”]C?/i,\n    greedy: true\n  },\n  'date': {\n    pattern: /#[^\\S\\r\\n]*(?:\\d+([/-])\\d+\\1\\d+(?:[^\\S\\r\\n]+(?:\\d+[^\\S\\r\\n]*(?:AM|PM)|\\d+:\\d+(?::\\d+)?(?:[^\\S\\r\\n]*(?:AM|PM))?))?|(?:\\d+[^\\S\\r\\n]*(?:AM|PM)|\\d+:\\d+(?::\\d+)?(?:[^\\S\\r\\n]*(?:AM|PM))?))[^\\S\\r\\n]*#/i,\n    alias: 'builtin'\n  },\n  'number': /(?:(?:\\b\\d+(?:\\.\\d+)?|\\.\\d+)(?:E[+-]?\\d+)?|&[HO][\\dA-F]+)(?:U?[ILS]|[FRD])?/i,\n  'boolean': /\\b(?:True|False|Nothing)\\b/i,\n  'keyword': /\\b(?:AddHandler|AddressOf|Alias|And(?:Also)?|As|Boolean|ByRef|Byte|ByVal|Call|Case|Catch|C(?:Bool|Byte|Char|Date|Dbl|Dec|Int|Lng|Obj|SByte|Short|Sng|Str|Type|UInt|ULng|UShort)|Char|Class|Const|Continue|Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Do|Double|Each|Else(?:If)?|End(?:If)?|Enum|Erase|Error|Event|Exit|Finally|For|Friend|Function|Get(?:Type|XMLNamespace)?|Global|GoSub|GoTo|Handles|If|Implements|Imports|In|Inherits|Integer|Interface|Is|IsNot|Let|Lib|Like|Long|Loop|Me|Mod|Module|Must(?:Inherit|Override)|My(?:Base|Class)|Namespace|Narrowing|New|Next|Not(?:Inheritable|Overridable)?|Object|Of|On|Operator|Option(?:al)?|Or(?:Else)?|Out|Overloads|Overridable|Overrides|ParamArray|Partial|Private|Property|Protected|Public|RaiseEvent|ReadOnly|ReDim|RemoveHandler|Resume|Return|SByte|Select|Set|Shadows|Shared|short|Single|Static|Step|Stop|String|Structure|Sub|SyncLock|Then|Throw|To|Try|TryCast|TypeOf|U(?:Integer|Long|Short)|Using|Variant|Wend|When|While|Widening|With(?:Events)?|WriteOnly|Xor)\\b/i,\n  'operator': [/[+\\-*/\\\\^<=>&#@$%!]/, {\n    pattern: /([^\\S\\r\\n])_(?=[^\\S\\r\\n]*[\\r\\n])/,\n    lookbehind: true\n  }],\n  'punctuation': /[{}().,:?]/\n};\nPrism.languages.vb = Prism.languages['visual-basic'];\nPrism.languages.t4 = Prism.languages['t4-cs'] = Prism.languages['t4-templating'].createT4('csharp');\n\n(function (Prism) {\n  var specialEscape = {\n    pattern: /\\\\[\\\\(){}[\\]^$+*?|.]/,\n    alias: 'escape'\n  };\n  var escape = /\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|c[a-zA-Z]|0[0-7]{0,2}|[123][0-7]{2}|.)/;\n  var charClass = /\\\\[wsd]|\\.|\\\\p{[^{}]+}/i;\n  var rangeChar = '(?:[^\\\\\\\\-]|' + escape.source + ')';\n  var range = RegExp(rangeChar + '-' + rangeChar); // the name of a capturing group\n\n  var groupName = {\n    pattern: /(<|')[^<>']+(?=[>']$)/,\n    lookbehind: true,\n    alias: 'variable'\n  };\n  var backreference = [/\\\\(?![123][0-7]{2})[1-9]/, // a backreference which is not an octal escape\n  {\n    pattern: /\\\\k<[^<>']+>/,\n    inside: {\n      'group-name': groupName\n    }\n  }];\n  Prism.languages.regex = {\n    'charset': {\n      pattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,\n      lookbehind: true,\n      inside: {\n        'charset-negation': {\n          pattern: /(^\\[)\\^/,\n          lookbehind: true\n        },\n        'charset-punctuation': /^\\[|\\]$/,\n        'range': {\n          pattern: range,\n          inside: {\n            'escape': escape,\n            'range-punctuation': /-/\n          }\n        },\n        'special-escape': specialEscape,\n        'charclass': charClass,\n        'backreference': backreference,\n        'escape': escape\n      }\n    },\n    'special-escape': specialEscape,\n    'charclass': charClass,\n    'backreference': backreference,\n    'anchor': /[$^]|\\\\[ABbGZz]/,\n    'escape': escape,\n    'group': [{\n      // https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html\n      // https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs\n      // (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)\n      pattern: /\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,\n      inside: {\n        'group-name': groupName\n      }\n    }, /\\)/],\n    'quantifier': /[+*?]|\\{(?:\\d+,?\\d*)\\}/,\n    'alternation': /\\|/\n  };\n  ['actionscript', 'coffescript', 'flow', 'javascript', 'typescript', 'vala'].forEach(function (lang) {\n    var grammar = Prism.languages[lang];\n\n    if (grammar) {\n      grammar['regex'].inside = {\n        'regex-flags': /[a-z]+$/,\n        'regex-delimiter': /^\\/|\\/$/,\n        'language-regex': {\n          pattern: /[\\s\\S]+/,\n          inside: Prism.languages.regex\n        }\n      };\n    }\n  });\n})(Prism);\n\nPrism.languages.vbnet = Prism.languages.extend(\"basic\", {\n  'keyword': /(?:\\b(?:ADDHANDLER|ADDRESSOF|ALIAS|AND|ANDALSO|AS|BEEP|BLOAD|BOOLEAN|BSAVE|BYREF|BYTE|BYVAL|CALL(?: ABSOLUTE)?|CASE|CATCH|CBOOL|CBYTE|CCHAR|CDATE|CDEC|CDBL|CHAIN|CHAR|CHDIR|CINT|CLASS|CLEAR|CLNG|CLOSE|CLS|COBJ|COM|COMMON|CONST|CONTINUE|CSBYTE|CSHORT|CSNG|CSTR|CTYPE|CUINT|CULNG|CUSHORT|DATA|DATE|DECIMAL|DECLARE|DEFAULT|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DELEGATE|DIM|DIRECTCAST|DO|DOUBLE|ELSE|ELSEIF|END|ENUM|ENVIRON|ERASE|ERROR|EVENT|EXIT|FALSE|FIELD|FILES|FINALLY|FOR(?: EACH)?|FRIEND|FUNCTION|GET|GETTYPE|GETXMLNAMESPACE|GLOBAL|GOSUB|GOTO|HANDLES|IF|IMPLEMENTS|IMPORTS|IN|INHERITS|INPUT|INTEGER|INTERFACE|IOCTL|IS|ISNOT|KEY|KILL|LINE INPUT|LET|LIB|LIKE|LOCATE|LOCK|LONG|LOOP|LSET|ME|MKDIR|MOD|MODULE|MUSTINHERIT|MUSTOVERRIDE|MYBASE|MYCLASS|NAME|NAMESPACE|NARROWING|NEW|NEXT|NOT|NOTHING|NOTINHERITABLE|NOTOVERRIDABLE|OBJECT|OF|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPERATOR|OPEN|OPTION(?: BASE)?|OPTIONAL|OR|ORELSE|OUT|OVERLOADS|OVERRIDABLE|OVERRIDES|PARAMARRAY|PARTIAL|POKE|PRIVATE|PROPERTY|PROTECTED|PUBLIC|PUT|RAISEEVENT|READ|READONLY|REDIM|REM|REMOVEHANDLER|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SBYTE|SELECT(?: CASE)?|SET|SHADOWS|SHARED|SHORT|SINGLE|SHELL|SLEEP|STATIC|STEP|STOP|STRING|STRUCTURE|SUB|SYNCLOCK|SWAP|SYSTEM|THEN|THROW|TIMER|TO|TROFF|TRON|TRUE|TRY|TRYCAST|TYPE|TYPEOF|UINTEGER|ULONG|UNLOCK|UNTIL|USHORT|USING|VIEW PRINT|WAIT|WEND|WHEN|WHILE|WIDENING|WITH|WITHEVENTS|WRITE|WRITEONLY|XOR)|\\B(?:#CONST|#ELSE|#ELSEIF|#END|#IF))(?:\\$|\\b)/i,\n  'comment': [{\n    pattern: /(?:!|REM\\b).+/i,\n    inside: {\n      'keyword': /^REM/i\n    }\n  }, {\n    pattern: /(^|[^\\\\:])'.*/,\n    lookbehind: true\n  }]\n});\n\n(function (Prism) {\n  Prism.languages.velocity = Prism.languages.extend('markup', {});\n  var velocity = {\n    'variable': {\n      pattern: /(^|[^\\\\](?:\\\\\\\\)*)\\$!?(?:[a-z][\\w-]*(?:\\([^)]*\\))?(?:\\.[a-z][\\w-]*(?:\\([^)]*\\))?|\\[[^\\]]+])*|{[^}]+})/i,\n      lookbehind: true,\n      inside: {} // See below\n\n    },\n    'string': {\n      pattern: /\"[^\"]*\"|'[^']*'/,\n      greedy: true\n    },\n    'number': /\\b\\d+\\b/,\n    'boolean': /\\b(?:true|false)\\b/,\n    'operator': /[=!<>]=?|[+*/%-]|&&|\\|\\||\\.\\.|\\b(?:eq|g[et]|l[et]|n(?:e|ot))\\b/,\n    'punctuation': /[(){}[\\]:,.]/\n  };\n  velocity.variable.inside = {\n    'string': velocity['string'],\n    'function': {\n      pattern: /([^\\w-])[a-z][\\w-]*(?=\\()/,\n      lookbehind: true\n    },\n    'number': velocity['number'],\n    'boolean': velocity['boolean'],\n    'punctuation': velocity['punctuation']\n  };\n  Prism.languages.insertBefore('velocity', 'comment', {\n    'unparsed': {\n      pattern: /(^|[^\\\\])#\\[\\[[\\s\\S]*?]]#/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'punctuation': /^#\\[\\[|]]#$/\n      }\n    },\n    'velocity-comment': [{\n      pattern: /(^|[^\\\\])#\\*[\\s\\S]*?\\*#/,\n      lookbehind: true,\n      greedy: true,\n      alias: 'comment'\n    }, {\n      pattern: /(^|[^\\\\])##.*/,\n      lookbehind: true,\n      greedy: true,\n      alias: 'comment'\n    }],\n    'directive': {\n      pattern: /(^|[^\\\\](?:\\\\\\\\)*)#@?(?:[a-z][\\w-]*|{[a-z][\\w-]*})(?:\\s*\\((?:[^()]|\\([^()]*\\))*\\))?/i,\n      lookbehind: true,\n      inside: {\n        keyword: {\n          pattern: /^#@?(?:[a-z][\\w-]*|{[a-z][\\w-]*})|\\bin\\b/,\n          inside: {\n            'punctuation': /[{}]/\n          }\n        },\n        rest: velocity\n      }\n    },\n    'variable': velocity['variable']\n  });\n  Prism.languages.velocity['tag'].inside['attr-value'].inside.rest = Prism.languages.velocity;\n})(Prism);\n\nPrism.languages.verilog = {\n  'comment': /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n  'string': {\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n    greedy: true\n  },\n  // support for any kernel function (ex: $display())\n  'property': /\\B\\$\\w+\\b/,\n  // support for user defined constants (ex: `define)\n  'constant': /\\B`\\w+\\b/,\n  'function': /\\w+(?=\\()/,\n  // support for verilog and system verilog keywords\n  'keyword': /\\b(?:alias|and|assert|assign|assume|automatic|before|begin|bind|bins|binsof|bit|break|buf|bufif0|bufif1|byte|class|case|casex|casez|cell|chandle|clocking|cmos|config|const|constraint|context|continue|cover|covergroup|coverpoint|cross|deassign|default|defparam|design|disable|dist|do|edge|else|end|endcase|endclass|endclocking|endconfig|endfunction|endgenerate|endgroup|endinterface|endmodule|endpackage|endprimitive|endprogram|endproperty|endspecify|endsequence|endtable|endtask|enum|event|expect|export|extends|extern|final|first_match|for|force|foreach|forever|fork|forkjoin|function|generate|genvar|highz0|highz1|if|iff|ifnone|ignore_bins|illegal_bins|import|incdir|include|initial|inout|input|inside|instance|int|integer|interface|intersect|join|join_any|join_none|large|liblist|library|local|localparam|logic|longint|macromodule|matches|medium|modport|module|nand|negedge|new|nmos|nor|noshowcancelled|not|notif0|notif1|null|or|output|package|packed|parameter|pmos|posedge|primitive|priority|program|property|protected|pull0|pull1|pulldown|pullup|pulsestyle_onevent|pulsestyle_ondetect|pure|rand|randc|randcase|randsequence|rcmos|real|realtime|ref|reg|release|repeat|return|rnmos|rpmos|rtran|rtranif0|rtranif1|scalared|sequence|shortint|shortreal|showcancelled|signed|small|solve|specify|specparam|static|string|strong0|strong1|struct|super|supply0|supply1|table|tagged|task|this|throughout|time|timeprecision|timeunit|tran|tranif0|tranif1|tri|tri0|tri1|triand|trior|trireg|type|typedef|union|unique|unsigned|use|uwire|var|vectored|virtual|void|wait|wait_order|wand|weak0|weak1|while|wildcard|wire|with|within|wor|xnor|xor)\\b/,\n  // bold highlighting for all verilog and system verilog logic blocks\n  'important': /\\b(?:always_latch|always_comb|always_ff|always)\\b ?@?/,\n  // support for time ticks, vectors, and real numbers\n  'number': /\\B##?\\d+|(?:\\b\\d+)?'[odbh] ?[\\da-fzx_?]+|\\b\\d*[._]?\\d+(?:e[-+]?\\d+)?/i,\n  'operator': /[-+{}^~%*\\/?=!<>&|]+/,\n  'punctuation': /[[\\];(),.:]/\n};\nPrism.languages.vhdl = {\n  'comment': /--.+/,\n  // support for all logic vectors\n  'vhdl-vectors': {\n    'pattern': /\\b[oxb]\"[\\da-f_]+\"|\"[01uxzwlh-]+\"/i,\n    'alias': 'number'\n  },\n  // support for operator overloading included\n  'quoted-function': {\n    pattern: /\"\\S+?\"(?=\\()/,\n    alias: 'function'\n  },\n  'string': /\"(?:[^\\\\\"\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"/,\n  'constant': /\\b(?:use|library)\\b/i,\n  // support for predefined attributes included\n  'keyword': /\\b(?:'active|'ascending|'base|'delayed|'driving|'driving_value|'event|'high|'image|'instance_name|'last_active|'last_event|'last_value|'left|'leftof|'length|'low|'path_name|'pos|'pred|'quiet|'range|'reverse_range|'right|'rightof|'simple_name|'stable|'succ|'transaction|'val|'value|access|after|alias|all|architecture|array|assert|attribute|begin|block|body|buffer|bus|case|component|configuration|constant|disconnect|downto|else|elsif|end|entity|exit|file|for|function|generate|generic|group|guarded|if|impure|in|inertial|inout|is|label|library|linkage|literal|loop|map|new|next|null|of|on|open|others|out|package|port|postponed|procedure|process|pure|range|record|register|reject|report|return|select|severity|shared|signal|subtype|then|to|transport|type|unaffected|units|until|use|variable|wait|when|while|with)\\b/i,\n  'boolean': /\\b(?:true|false)\\b/i,\n  'function': /\\w+(?=\\()/,\n  // decimal, based, physical, and exponential numbers supported\n  'number': /'[01uxzwlh-]'|\\b(?:\\d+#[\\da-f_.]+#|\\d[\\d_.]*)(?:e[-+]?\\d+)?/i,\n  'operator': /[<>]=?|:=|[-+*/&=]|\\b(?:abs|not|mod|rem|sll|srl|sla|sra|rol|ror|and|or|nand|xnor|xor|nor)\\b/i,\n  'punctuation': /[{}[\\];(),.:]/\n};\nPrism.languages.vim = {\n  'string': /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\r\\n]|'')*'/,\n  'comment': /\".*/,\n  'function': /\\w+(?=\\()/,\n  'keyword': /\\b(?:ab|abbreviate|abc|abclear|abo|aboveleft|al|all|arga|argadd|argd|argdelete|argdo|arge|argedit|argg|argglobal|argl|arglocal|ar|args|argu|argument|as|ascii|bad|badd|ba|ball|bd|bdelete|be|bel|belowright|bf|bfirst|bl|blast|bm|bmodified|bn|bnext|bN|bNext|bo|botright|bp|bprevious|brea|break|breaka|breakadd|breakd|breakdel|breakl|breaklist|br|brewind|bro|browse|bufdo|b|buffer|buffers|bun|bunload|bw|bwipeout|ca|cabbrev|cabc|cabclear|caddb|caddbuffer|cad|caddexpr|caddf|caddfile|cal|call|cat|catch|cb|cbuffer|cc|ccl|cclose|cd|ce|center|cex|cexpr|cf|cfile|cfir|cfirst|cgetb|cgetbuffer|cgete|cgetexpr|cg|cgetfile|c|change|changes|chd|chdir|che|checkpath|checkt|checktime|cla|clast|cl|clist|clo|close|cmapc|cmapclear|cnew|cnewer|cn|cnext|cN|cNext|cnf|cnfile|cNfcNfile|cnorea|cnoreabbrev|col|colder|colo|colorscheme|comc|comclear|comp|compiler|conf|confirm|con|continue|cope|copen|co|copy|cpf|cpfile|cp|cprevious|cq|cquit|cr|crewind|cuna|cunabbrev|cu|cunmap|cw|cwindow|debugg|debuggreedy|delc|delcommand|d|delete|delf|delfunction|delm|delmarks|diffg|diffget|diffoff|diffpatch|diffpu|diffput|diffsplit|diffthis|diffu|diffupdate|dig|digraphs|di|display|dj|djump|dl|dlist|dr|drop|ds|dsearch|dsp|dsplit|earlier|echoe|echoerr|echom|echomsg|echon|e|edit|el|else|elsei|elseif|em|emenu|endfo|endfor|endf|endfunction|endfun|en|endif|endt|endtry|endw|endwhile|ene|enew|ex|exi|exit|exu|exusage|f|file|files|filetype|fina|finally|fin|find|fini|finish|fir|first|fix|fixdel|fo|fold|foldc|foldclose|folddoc|folddoclosed|foldd|folddoopen|foldo|foldopen|for|fu|fun|function|go|goto|gr|grep|grepa|grepadd|ha|hardcopy|h|help|helpf|helpfind|helpg|helpgrep|helpt|helptags|hid|hide|his|history|ia|iabbrev|iabc|iabclear|if|ij|ijump|il|ilist|imapc|imapclear|in|inorea|inoreabbrev|isearch|isp|isplit|iuna|iunabbrev|iu|iunmap|j|join|ju|jumps|k|keepalt|keepj|keepjumps|kee|keepmarks|laddb|laddbuffer|lad|laddexpr|laddf|laddfile|lan|language|la|last|later|lb|lbuffer|lc|lcd|lch|lchdir|lcl|lclose|let|left|lefta|leftabove|lex|lexpr|lf|lfile|lfir|lfirst|lgetb|lgetbuffer|lgete|lgetexpr|lg|lgetfile|lgr|lgrep|lgrepa|lgrepadd|lh|lhelpgrep|l|list|ll|lla|llast|lli|llist|lmak|lmake|lm|lmap|lmapc|lmapclear|lnew|lnewer|lne|lnext|lN|lNext|lnf|lnfile|lNf|lNfile|ln|lnoremap|lo|loadview|loc|lockmarks|lockv|lockvar|lol|lolder|lop|lopen|lpf|lpfile|lp|lprevious|lr|lrewind|ls|lt|ltag|lu|lunmap|lv|lvimgrep|lvimgrepa|lvimgrepadd|lw|lwindow|mak|make|ma|mark|marks|mat|match|menut|menutranslate|mk|mkexrc|mks|mksession|mksp|mkspell|mkvie|mkview|mkv|mkvimrc|mod|mode|m|move|mzf|mzfile|mz|mzscheme|nbkey|new|n|next|N|Next|nmapc|nmapclear|noh|nohlsearch|norea|noreabbrev|nu|number|nun|nunmap|omapc|omapclear|on|only|o|open|opt|options|ou|ounmap|pc|pclose|ped|pedit|pe|perl|perld|perldo|po|pop|popu|popup|pp|ppop|pre|preserve|prev|previous|p|print|P|Print|profd|profdel|prof|profile|promptf|promptfind|promptr|promptrepl|ps|psearch|pta|ptag|ptf|ptfirst|ptj|ptjump|ptl|ptlast|ptn|ptnext|ptN|ptNext|ptp|ptprevious|ptr|ptrewind|pts|ptselect|pu|put|pw|pwd|pyf|pyfile|py|python|qa|qall|q|quit|quita|quitall|r|read|rec|recover|redi|redir|red|redo|redr|redraw|redraws|redrawstatus|reg|registers|res|resize|ret|retab|retu|return|rew|rewind|ri|right|rightb|rightbelow|rub|ruby|rubyd|rubydo|rubyf|rubyfile|ru|runtime|rv|rviminfo|sal|sall|san|sandbox|sa|sargument|sav|saveas|sba|sball|sbf|sbfirst|sbl|sblast|sbm|sbmodified|sbn|sbnext|sbN|sbNext|sbp|sbprevious|sbr|sbrewind|sb|sbuffer|scripte|scriptencoding|scrip|scriptnames|se|set|setf|setfiletype|setg|setglobal|setl|setlocal|sf|sfind|sfir|sfirst|sh|shell|sign|sil|silent|sim|simalt|sla|slast|sl|sleep|sm|smagic|sm|smap|smapc|smapclear|sme|smenu|sn|snext|sN|sNext|sni|sniff|sno|snomagic|snor|snoremap|snoreme|snoremenu|sor|sort|so|source|spelld|spelldump|spe|spellgood|spelli|spellinfo|spellr|spellrepall|spellu|spellundo|spellw|spellwrong|sp|split|spr|sprevious|sre|srewind|sta|stag|startg|startgreplace|star|startinsert|startr|startreplace|stj|stjump|st|stop|stopi|stopinsert|sts|stselect|sun|sunhide|sunm|sunmap|sus|suspend|sv|sview|syncbind|t|tab|tabc|tabclose|tabd|tabdo|tabe|tabedit|tabf|tabfind|tabfir|tabfirst|tabl|tablast|tabm|tabmove|tabnew|tabn|tabnext|tabN|tabNext|tabo|tabonly|tabp|tabprevious|tabr|tabrewind|tabs|ta|tag|tags|tc|tcl|tcld|tcldo|tclf|tclfile|te|tearoff|tf|tfirst|th|throw|tj|tjump|tl|tlast|tm|tm|tmenu|tn|tnext|tN|tNext|to|topleft|tp|tprevious|tr|trewind|try|ts|tselect|tu|tu|tunmenu|una|unabbreviate|u|undo|undoj|undojoin|undol|undolist|unh|unhide|unlet|unlo|unlockvar|unm|unmap|up|update|verb|verbose|ve|version|vert|vertical|vie|view|vim|vimgrep|vimgrepa|vimgrepadd|vi|visual|viu|viusage|vmapc|vmapclear|vne|vnew|vs|vsplit|vu|vunmap|wa|wall|wh|while|winc|wincmd|windo|winp|winpos|win|winsize|wn|wnext|wN|wNext|wp|wprevious|wq|wqa|wqall|w|write|ws|wsverb|wv|wviminfo|X|xa|xall|x|xit|xm|xmap|xmapc|xmapclear|xme|xmenu|XMLent|XMLns|xn|xnoremap|xnoreme|xnoremenu|xu|xunmap|y|yank)\\b/,\n  'builtin': /\\b(?:autocmd|acd|ai|akm|aleph|allowrevins|altkeymap|ambiwidth|ambw|anti|antialias|arab|arabic|arabicshape|ari|arshape|autochdir|autoindent|autoread|autowrite|autowriteall|aw|awa|background|backspace|backup|backupcopy|backupdir|backupext|backupskip|balloondelay|ballooneval|balloonexpr|bdir|bdlay|beval|bex|bexpr|bg|bh|bin|binary|biosk|bioskey|bk|bkc|bomb|breakat|brk|browsedir|bs|bsdir|bsk|bt|bufhidden|buflisted|buftype|casemap|ccv|cdpath|cedit|cfu|ch|charconvert|ci|cin|cindent|cink|cinkeys|cino|cinoptions|cinw|cinwords|clipboard|cmdheight|cmdwinheight|cmp|cms|columns|com|comments|commentstring|compatible|complete|completefunc|completeopt|consk|conskey|copyindent|cot|cpo|cpoptions|cpt|cscopepathcomp|cscopeprg|cscopequickfix|cscopetag|cscopetagorder|cscopeverbose|cspc|csprg|csqf|cst|csto|csverb|cuc|cul|cursorcolumn|cursorline|cwh|debug|deco|def|define|delcombine|dex|dg|dict|dictionary|diff|diffexpr|diffopt|digraph|dip|dir|directory|dy|ea|ead|eadirection|eb|ed|edcompatible|ef|efm|ei|ek|enc|encoding|endofline|eol|ep|equalalways|equalprg|errorbells|errorfile|errorformat|esckeys|et|eventignore|expandtab|exrc|fcl|fcs|fdc|fde|fdi|fdl|fdls|fdm|fdn|fdo|fdt|fen|fenc|fencs|fex|ff|ffs|fileencoding|fileencodings|fileformat|fileformats|fillchars|fk|fkmap|flp|fml|fmr|foldcolumn|foldenable|foldexpr|foldignore|foldlevel|foldlevelstart|foldmarker|foldmethod|foldminlines|foldnestmax|foldtext|formatexpr|formatlistpat|formatoptions|formatprg|fp|fs|fsync|ft|gcr|gd|gdefault|gfm|gfn|gfs|gfw|ghr|gp|grepformat|grepprg|gtl|gtt|guicursor|guifont|guifontset|guifontwide|guiheadroom|guioptions|guipty|guitablabel|guitabtooltip|helpfile|helpheight|helplang|hf|hh|hi|hidden|highlight|hk|hkmap|hkmapp|hkp|hl|hlg|hls|hlsearch|ic|icon|iconstring|ignorecase|im|imactivatekey|imak|imc|imcmdline|imd|imdisable|imi|iminsert|ims|imsearch|inc|include|includeexpr|incsearch|inde|indentexpr|indentkeys|indk|inex|inf|infercase|insertmode|isf|isfname|isi|isident|isk|iskeyword|isprint|joinspaces|js|key|keymap|keymodel|keywordprg|km|kmp|kp|langmap|langmenu|laststatus|lazyredraw|lbr|lcs|linebreak|lines|linespace|lisp|lispwords|listchars|loadplugins|lpl|lsp|lz|macatsui|magic|makeef|makeprg|matchpairs|matchtime|maxcombine|maxfuncdepth|maxmapdepth|maxmem|maxmempattern|maxmemtot|mco|mef|menuitems|mfd|mh|mis|mkspellmem|ml|mls|mm|mmd|mmp|mmt|modeline|modelines|modifiable|modified|more|mouse|mousef|mousefocus|mousehide|mousem|mousemodel|mouses|mouseshape|mouset|mousetime|mp|mps|msm|mzq|mzquantum|nf|nrformats|numberwidth|nuw|odev|oft|ofu|omnifunc|opendevice|operatorfunc|opfunc|osfiletype|pa|para|paragraphs|paste|pastetoggle|patchexpr|patchmode|path|pdev|penc|pex|pexpr|pfn|ph|pheader|pi|pm|pmbcs|pmbfn|popt|preserveindent|previewheight|previewwindow|printdevice|printencoding|printexpr|printfont|printheader|printmbcharset|printmbfont|printoptions|prompt|pt|pumheight|pvh|pvw|qe|quoteescape|readonly|remap|report|restorescreen|revins|rightleft|rightleftcmd|rl|rlc|ro|rs|rtp|ruf|ruler|rulerformat|runtimepath|sbo|sc|scb|scr|scroll|scrollbind|scrolljump|scrolloff|scrollopt|scs|sect|sections|secure|sel|selection|selectmode|sessionoptions|sft|shcf|shellcmdflag|shellpipe|shellquote|shellredir|shellslash|shelltemp|shelltype|shellxquote|shiftround|shiftwidth|shm|shortmess|shortname|showbreak|showcmd|showfulltag|showmatch|showmode|showtabline|shq|si|sidescroll|sidescrolloff|siso|sj|slm|smartcase|smartindent|smarttab|smc|smd|softtabstop|sol|spc|spell|spellcapcheck|spellfile|spelllang|spellsuggest|spf|spl|splitbelow|splitright|sps|sr|srr|ss|ssl|ssop|stal|startofline|statusline|stl|stmp|su|sua|suffixes|suffixesadd|sw|swapfile|swapsync|swb|swf|switchbuf|sws|sxq|syn|synmaxcol|syntax|tabline|tabpagemax|tabstop|tagbsearch|taglength|tagrelative|tagstack|tal|tb|tbi|tbidi|tbis|tbs|tenc|term|termbidi|termencoding|terse|textauto|textmode|textwidth|tgst|thesaurus|tildeop|timeout|timeoutlen|title|titlelen|titleold|titlestring|toolbar|toolbariconsize|top|tpm|tsl|tsr|ttimeout|ttimeoutlen|ttm|tty|ttybuiltin|ttyfast|ttym|ttymouse|ttyscroll|ttytype|tw|tx|uc|ul|undolevels|updatecount|updatetime|ut|vb|vbs|vdir|verbosefile|vfile|viewdir|viewoptions|viminfo|virtualedit|visualbell|vop|wak|warn|wb|wc|wcm|wd|weirdinvert|wfh|wfw|whichwrap|wi|wig|wildchar|wildcharm|wildignore|wildmenu|wildmode|wildoptions|wim|winaltkeys|window|winfixheight|winfixwidth|winheight|winminheight|winminwidth|winwidth|wiv|wiw|wm|wmh|wmnu|wmw|wop|wrap|wrapmargin|wrapscan|writeany|writebackup|writedelay|ww|noacd|noai|noakm|noallowrevins|noaltkeymap|noanti|noantialias|noar|noarab|noarabic|noarabicshape|noari|noarshape|noautochdir|noautoindent|noautoread|noautowrite|noautowriteall|noaw|noawa|nobackup|noballooneval|nobeval|nobin|nobinary|nobiosk|nobioskey|nobk|nobl|nobomb|nobuflisted|nocf|noci|nocin|nocindent|nocompatible|noconfirm|noconsk|noconskey|nocopyindent|nocp|nocscopetag|nocscopeverbose|nocst|nocsverb|nocuc|nocul|nocursorcolumn|nocursorline|nodeco|nodelcombine|nodg|nodiff|nodigraph|nodisable|noea|noeb|noed|noedcompatible|noek|noendofline|noeol|noequalalways|noerrorbells|noesckeys|noet|noex|noexpandtab|noexrc|nofen|nofk|nofkmap|nofoldenable|nogd|nogdefault|noguipty|nohid|nohidden|nohk|nohkmap|nohkmapp|nohkp|nohls|noic|noicon|noignorecase|noim|noimc|noimcmdline|noimd|noincsearch|noinf|noinfercase|noinsertmode|nois|nojoinspaces|nojs|nolazyredraw|nolbr|nolinebreak|nolisp|nolist|noloadplugins|nolpl|nolz|noma|nomacatsui|nomagic|nomh|noml|nomod|nomodeline|nomodifiable|nomodified|nomore|nomousef|nomousefocus|nomousehide|nonu|nonumber|noodev|noopendevice|nopaste|nopi|nopreserveindent|nopreviewwindow|noprompt|nopvw|noreadonly|noremap|norestorescreen|norevins|nori|norightleft|norightleftcmd|norl|norlc|noro|nors|noru|noruler|nosb|nosc|noscb|noscrollbind|noscs|nosecure|nosft|noshellslash|noshelltemp|noshiftround|noshortname|noshowcmd|noshowfulltag|noshowmatch|noshowmode|nosi|nosm|nosmartcase|nosmartindent|nosmarttab|nosmd|nosn|nosol|nospell|nosplitbelow|nosplitright|nospr|nosr|nossl|nosta|nostartofline|nostmp|noswapfile|noswf|nota|notagbsearch|notagrelative|notagstack|notbi|notbidi|notbs|notermbidi|noterse|notextauto|notextmode|notf|notgst|notildeop|notimeout|notitle|noto|notop|notr|nottimeout|nottybuiltin|nottyfast|notx|novb|novisualbell|nowa|nowarn|nowb|noweirdinvert|nowfh|nowfw|nowildmenu|nowinfixheight|nowinfixwidth|nowiv|nowmnu|nowrap|nowrapscan|nowrite|nowriteany|nowritebackup|nows|invacd|invai|invakm|invallowrevins|invaltkeymap|invanti|invantialias|invar|invarab|invarabic|invarabicshape|invari|invarshape|invautochdir|invautoindent|invautoread|invautowrite|invautowriteall|invaw|invawa|invbackup|invballooneval|invbeval|invbin|invbinary|invbiosk|invbioskey|invbk|invbl|invbomb|invbuflisted|invcf|invci|invcin|invcindent|invcompatible|invconfirm|invconsk|invconskey|invcopyindent|invcp|invcscopetag|invcscopeverbose|invcst|invcsverb|invcuc|invcul|invcursorcolumn|invcursorline|invdeco|invdelcombine|invdg|invdiff|invdigraph|invdisable|invea|inveb|inved|invedcompatible|invek|invendofline|inveol|invequalalways|inverrorbells|invesckeys|invet|invex|invexpandtab|invexrc|invfen|invfk|invfkmap|invfoldenable|invgd|invgdefault|invguipty|invhid|invhidden|invhk|invhkmap|invhkmapp|invhkp|invhls|invhlsearch|invic|invicon|invignorecase|invim|invimc|invimcmdline|invimd|invincsearch|invinf|invinfercase|invinsertmode|invis|invjoinspaces|invjs|invlazyredraw|invlbr|invlinebreak|invlisp|invlist|invloadplugins|invlpl|invlz|invma|invmacatsui|invmagic|invmh|invml|invmod|invmodeline|invmodifiable|invmodified|invmore|invmousef|invmousefocus|invmousehide|invnu|invnumber|invodev|invopendevice|invpaste|invpi|invpreserveindent|invpreviewwindow|invprompt|invpvw|invreadonly|invremap|invrestorescreen|invrevins|invri|invrightleft|invrightleftcmd|invrl|invrlc|invro|invrs|invru|invruler|invsb|invsc|invscb|invscrollbind|invscs|invsecure|invsft|invshellslash|invshelltemp|invshiftround|invshortname|invshowcmd|invshowfulltag|invshowmatch|invshowmode|invsi|invsm|invsmartcase|invsmartindent|invsmarttab|invsmd|invsn|invsol|invspell|invsplitbelow|invsplitright|invspr|invsr|invssl|invsta|invstartofline|invstmp|invswapfile|invswf|invta|invtagbsearch|invtagrelative|invtagstack|invtbi|invtbidi|invtbs|invtermbidi|invterse|invtextauto|invtextmode|invtf|invtgst|invtildeop|invtimeout|invtitle|invto|invtop|invtr|invttimeout|invttybuiltin|invttyfast|invtx|invvb|invvisualbell|invwa|invwarn|invwb|invweirdinvert|invwfh|invwfw|invwildmenu|invwinfixheight|invwinfixwidth|invwiv|invwmnu|invwrap|invwrapscan|invwrite|invwriteany|invwritebackup|invws|t_AB|t_AF|t_al|t_AL|t_bc|t_cd|t_ce|t_Ce|t_cl|t_cm|t_Co|t_cs|t_Cs|t_CS|t_CV|t_da|t_db|t_dl|t_DL|t_EI|t_F1|t_F2|t_F3|t_F4|t_F5|t_F6|t_F7|t_F8|t_F9|t_fs|t_IE|t_IS|t_k1|t_K1|t_k2|t_k3|t_K3|t_k4|t_K4|t_k5|t_K5|t_k6|t_K6|t_k7|t_K7|t_k8|t_K8|t_k9|t_K9|t_KA|t_kb|t_kB|t_KB|t_KC|t_kd|t_kD|t_KD|t_ke|t_KE|t_KF|t_KG|t_kh|t_KH|t_kI|t_KI|t_KJ|t_KK|t_kl|t_KL|t_kN|t_kP|t_kr|t_ks|t_ku|t_le|t_mb|t_md|t_me|t_mr|t_ms|t_nd|t_op|t_RI|t_RV|t_Sb|t_se|t_Sf|t_SI|t_so|t_sr|t_te|t_ti|t_ts|t_ue|t_us|t_ut|t_vb|t_ve|t_vi|t_vs|t_WP|t_WS|t_xs|t_ZH|t_ZR)\\b/,\n  'number': /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?)\\b/i,\n  'operator': /\\|\\||&&|[-+.]=?|[=!](?:[=~][#?]?)?|[<>]=?[#?]?|[*\\/%?]|\\b(?:is(?:not)?)\\b/,\n  'punctuation': /[{}[\\](),;:]/\n};\nPrism.languages['t4-vb'] = Prism.languages['t4-templating'].createT4('visual-basic');\nPrism.languages.wasm = {\n  'comment': [/\\(;[\\s\\S]*?;\\)/, {\n    pattern: /;;.*/,\n    greedy: true\n  }],\n  'string': {\n    pattern: /\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,\n    greedy: true\n  },\n  'keyword': [{\n    pattern: /\\b(?:align|offset)=/,\n    inside: {\n      'operator': /=/\n    }\n  }, {\n    pattern: /\\b(?:(?:f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))?|memory\\.(?:grow|size))\\b/,\n    inside: {\n      'punctuation': /\\./\n    }\n  }, /\\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\\b/],\n  'variable': /\\$[\\w!#$%&'*+\\-./:<=>?@\\\\^_`|~]+/i,\n  'number': /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/,\n  'punctuation': /[()]/\n};\nPrism.languages.wiki = Prism.languages.extend('markup', {\n  'block-comment': {\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n    lookbehind: true,\n    alias: 'comment'\n  },\n  'heading': {\n    pattern: /^(=+).+?\\1/m,\n    inside: {\n      'punctuation': /^=+|=+$/,\n      'important': /.+/\n    }\n  },\n  'emphasis': {\n    // TODO Multi-line\n    pattern: /('{2,5}).+?\\1/,\n    inside: {\n      'bold italic': {\n        pattern: /(''''').+?(?=\\1)/,\n        lookbehind: true\n      },\n      'bold': {\n        pattern: /(''')[^'](?:.*?[^'])?(?=\\1)/,\n        lookbehind: true\n      },\n      'italic': {\n        pattern: /('')[^'](?:.*?[^'])?(?=\\1)/,\n        lookbehind: true\n      },\n      'punctuation': /^''+|''+$/\n    }\n  },\n  'hr': {\n    pattern: /^-{4,}/m,\n    alias: 'punctuation'\n  },\n  'url': [/ISBN +(?:97[89][ -]?)?(?:\\d[ -]?){9}[\\dx]\\b|(?:RFC|PMID) +\\d+/i, /\\[\\[.+?\\]\\]|\\[.+?\\]/],\n  'variable': [/__[A-Z]+__/, // FIXME Nested structures should be handled\n  // {{formatnum:{{#expr:{{{3}}}}}}}\n  /\\{{3}.+?\\}{3}/, /\\{\\{.+?\\}\\}/],\n  'symbol': [/^#redirect/im, /~{3,5}/],\n  // Handle table attrs:\n  // {|\n  // ! style=\"text-align:left;\"| Item\n  // |}\n  'table-tag': {\n    pattern: /((?:^|[|!])[|!])[^|\\r\\n]+\\|(?!\\|)/m,\n    lookbehind: true,\n    inside: {\n      'table-bar': {\n        pattern: /\\|$/,\n        alias: 'punctuation'\n      },\n      rest: Prism.languages.markup['tag'].inside\n    }\n  },\n  'punctuation': /^(?:\\{\\||\\|\\}|\\|-|[*#:;!|])|\\|\\||!!/m\n});\nPrism.languages.insertBefore('wiki', 'tag', {\n  // Prevent highlighting inside <nowiki>, <source> and <pre> tags\n  'nowiki': {\n    pattern: /<(nowiki|pre|source)\\b[\\s\\S]*?>[\\s\\S]*?<\\/\\1>/i,\n    inside: {\n      'tag': {\n        pattern: /<(?:nowiki|pre|source)\\b[\\s\\S]*?>|<\\/(?:nowiki|pre|source)>/i,\n        inside: Prism.languages.markup['tag'].inside\n      }\n    }\n  }\n});\n\n(function (Prism) {\n  Prism.languages.xeora = Prism.languages.extend('markup', {\n    'constant': {\n      pattern: /\\$(?:DomainContents|PageRenderDuration)\\$/,\n      inside: {\n        'punctuation': {\n          pattern: /\\$/\n        }\n      }\n    },\n    'variable': {\n      pattern: /\\$@?(?:#+|[-+*~=^])?[\\w.]+\\$/,\n      inside: {\n        'punctuation': {\n          pattern: /[$.]/\n        },\n        'operator': {\n          pattern: /#+|[-+*~=^@]/\n        }\n      }\n    },\n    'function-inline': {\n      pattern: /\\$F:[-\\w.]+\\?[-\\w.]+(?:,(?:\\|?(?:[-#.^+*~]*(?:[\\w+][^$]*)|=(?:[\\S+][^$]*)|@[-#]*(?:\\w+.)[\\w+.]+)?)*)?\\$/,\n      inside: {\n        'variable': {\n          pattern: /(?:[,|])@?(?:#+|[-+*~=^])?[\\w.]+/,\n          inside: {\n            'punctuation': {\n              pattern: /[,.|]/\n            },\n            'operator': {\n              pattern: /#+|[-+*~=^@]/\n            }\n          }\n        },\n        'punctuation': {\n          pattern: /\\$\\w:|[$:?.,|]/\n        }\n      },\n      alias: 'function'\n    },\n    'function-block': {\n      pattern: /\\$XF:{[-\\w.]+\\?[-\\w.]+(?:,(?:\\|?(?:[-#.^+*~]*(?:[\\w+][^$]*)|=(?:[\\S+][^$]*)|@[-#]*(?:\\w+.)[\\w+.]+)?)*)?}:XF\\$/,\n      inside: {\n        'punctuation': {\n          pattern: /[$:{}?.,|]/\n        }\n      },\n      alias: 'function'\n    },\n    'directive-inline': {\n      pattern: /\\$\\w(?:#\\d+\\+?)?(?:\\[[-\\w.]+])?:[-\\/\\w.]+\\$/,\n      inside: {\n        'punctuation': {\n          pattern: /\\$(?:\\w:|C(?:\\[|#\\d))?|[:{[\\]]/,\n          inside: {\n            'tag': {\n              pattern: /#\\d/\n            }\n          }\n        }\n      },\n      alias: 'function'\n    },\n    'directive-block-open': {\n      pattern: /\\$\\w+:{|\\$\\w(?:#\\d+\\+?)?(?:\\[[-\\w.]+])?:[-\\w.]+:{(![A-Z]+)?/,\n      inside: {\n        'punctuation': {\n          pattern: /\\$(?:\\w:|C(?:\\[|#\\d))?|[:{[\\]]/,\n          inside: {\n            'tag': {\n              pattern: /#\\d/\n            }\n          }\n        },\n        'attribute': {\n          pattern: /![A-Z]+$/,\n          inside: {\n            'punctuation': {\n              pattern: /!/\n            }\n          },\n          alias: 'keyword'\n        }\n      },\n      alias: 'function'\n    },\n    'directive-block-separator': {\n      pattern: /}:[-\\w.]+:{/,\n      inside: {\n        'punctuation': {\n          pattern: /[:{}]/\n        }\n      },\n      alias: 'function'\n    },\n    'directive-block-close': {\n      pattern: /}:[-\\w.]+\\$/,\n      inside: {\n        'punctuation': {\n          pattern: /[:{}$]/\n        }\n      },\n      alias: 'function'\n    }\n  });\n  Prism.languages.insertBefore('inside', 'punctuation', {\n    'variable': Prism.languages.xeora['function-inline'].inside['variable']\n  }, Prism.languages.xeora[\"function-block\"]);\n  Prism.languages.xeoracube = Prism.languages.xeora;\n})(Prism);\n\nPrism.languages.xojo = {\n  'comment': {\n    pattern: /(?:'|\\/\\/|Rem\\b).+/i,\n    inside: {\n      'keyword': /^Rem/i\n    }\n  },\n  'string': {\n    pattern: /\"(?:\"\"|[^\"])*\"/,\n    greedy: true\n  },\n  'number': [/(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:E[+-]?\\d+)?/i, /&[bchou][a-z\\d]+/i],\n  'symbol': /#(?:If|Else|ElseIf|Endif|Pragma)\\b/i,\n  'keyword': /\\b(?:AddHandler|App|Array|As(?:signs)?|By(?:Ref|Val)|Break|Call|Case|Catch|Const|Continue|CurrentMethodName|Declare|Dim|Do(?:wnTo)?|Each|Else(?:If)?|End|Exit|Extends|False|Finally|For|Global|If|In|Lib|Loop|Me|Next|Nil|Optional|ParamArray|Raise(?:Event)?|ReDim|Rem|RemoveHandler|Return|Select|Self|Soft|Static|Step|Super|Then|To|True|Try|Ubound|Until|Using|Wend|While)\\b/i,\n  'operator': /<[=>]?|>=?|[+\\-*\\/\\\\^=]|\\b(?:AddressOf|And|Ctype|IsA?|Mod|New|Not|Or|Xor|WeakAddressOf)\\b/i,\n  'punctuation': /[.,;:()]/\n};\n\n(function (Prism) {\n  Prism.languages.xquery = Prism.languages.extend('markup', {\n    'xquery-comment': {\n      pattern: /\\(:[\\s\\S]*?:\\)/,\n      greedy: true,\n      alias: \"comment\"\n    },\n    'string': {\n      pattern: /([\"'])(?:\\1\\1|(?!\\1)[\\s\\S])*\\1/,\n      greedy: true\n    },\n    'extension': {\n      pattern: /\\(#.+?#\\)/,\n      alias: 'symbol'\n    },\n    'variable': /\\$[\\w-:]+/,\n    'axis': {\n      pattern: /(^|[^-])(?:ancestor(?:-or-self)?|attribute|child|descendant(?:-or-self)?|following(?:-sibling)?|parent|preceding(?:-sibling)?|self)(?=::)/,\n      lookbehind: true,\n      alias: 'operator'\n    },\n    'keyword-operator': {\n      pattern: /(^|[^:-])\\b(?:and|castable as|div|eq|except|ge|gt|idiv|instance of|intersect|is|le|lt|mod|ne|or|union)\\b(?=$|[^:-])/,\n      lookbehind: true,\n      alias: 'operator'\n    },\n    'keyword': {\n      pattern: /(^|[^:-])\\b(?:as|ascending|at|base-uri|boundary-space|case|cast as|collation|construction|copy-namespaces|declare|default|descending|else|empty (?:greatest|least)|encoding|every|external|for|function|if|import|in|inherit|lax|let|map|module|namespace|no-inherit|no-preserve|option|order(?: by|ed|ing)?|preserve|return|satisfies|schema|some|stable|strict|strip|then|to|treat as|typeswitch|unordered|validate|variable|version|where|xquery)\\b(?=$|[^:-])/,\n      lookbehind: true\n    },\n    'function': /[\\w-]+(?::[\\w-]+)*(?=\\s*\\()/,\n    'xquery-element': {\n      pattern: /(element\\s+)[\\w-]+(?::[\\w-]+)*/,\n      lookbehind: true,\n      alias: 'tag'\n    },\n    'xquery-attribute': {\n      pattern: /(attribute\\s+)[\\w-]+(?::[\\w-]+)*/,\n      lookbehind: true,\n      alias: 'attr-name'\n    },\n    'builtin': {\n      pattern: /(^|[^:-])\\b(?:attribute|comment|document|element|processing-instruction|text|xs:(?:anyAtomicType|anyType|anyURI|base64Binary|boolean|byte|date|dateTime|dayTimeDuration|decimal|double|duration|ENTITIES|ENTITY|float|gDay|gMonth|gMonthDay|gYear|gYearMonth|hexBinary|ID|IDREFS?|int|integer|language|long|Name|NCName|negativeInteger|NMTOKENS?|nonNegativeInteger|nonPositiveInteger|normalizedString|NOTATION|positiveInteger|QName|short|string|time|token|unsigned(?:Byte|Int|Long|Short)|untyped(?:Atomic)?|yearMonthDuration))\\b(?=$|[^:-])/,\n      lookbehind: true\n    },\n    'number': /\\b\\d+(?:\\.\\d+)?(?:E[+-]?\\d+)?/,\n    'operator': [/[+*=?|@]|\\.\\.?|:=|!=|<[=<]?|>[=>]?/, {\n      pattern: /(\\s)-(?=\\s)/,\n      lookbehind: true\n    }],\n    'punctuation': /[[\\](){},;:/]/\n  });\n  Prism.languages.xquery.tag.pattern = /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i;\n  Prism.languages.xquery['tag'].inside['attr-value'].pattern = /=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/i;\n  Prism.languages.xquery['tag'].inside['attr-value'].inside['punctuation'] = /^=\"|\"$/;\n  Prism.languages.xquery['tag'].inside['attr-value'].inside['expression'] = {\n    // Allow for two levels of nesting\n    pattern: /{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}/,\n    inside: {\n      rest: Prism.languages.xquery\n    },\n    'alias': 'language-xquery'\n  }; // The following will handle plain text inside tags\n\n  var stringifyToken = function (token) {\n    if (typeof token === 'string') {\n      return token;\n    }\n\n    if (typeof token.content === 'string') {\n      return token.content;\n    }\n\n    return token.content.map(stringifyToken).join('');\n  };\n\n  var walkTokens = function (tokens) {\n    var openedTags = [];\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n      var notTagNorBrace = false;\n\n      if (typeof token !== 'string') {\n        if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n          // We found a tag, now find its kind\n          if (token.content[0].content[0].content === '</') {\n            // Closing tag\n            if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n              // Pop matching opening tag\n              openedTags.pop();\n            }\n          } else {\n            if (token.content[token.content.length - 1].content === '/>') {// Autoclosed tag, ignore\n            } else {\n              // Opening tag\n              openedTags.push({\n                tagName: stringifyToken(token.content[0].content[1]),\n                openedBraces: 0\n              });\n            }\n          }\n        } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{' && ( // Ignore `{{`\n        !tokens[i + 1] || tokens[i + 1].type !== 'punctuation' || tokens[i + 1].content !== '{') && (!tokens[i - 1] || tokens[i - 1].type !== 'plain-text' || tokens[i - 1].content !== '{')) {\n          // Here we might have entered an XQuery expression inside a tag\n          openedTags[openedTags.length - 1].openedBraces++;\n        } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n          // Here we might have left an XQuery expression inside a tag\n          openedTags[openedTags.length - 1].openedBraces--;\n        } else if (token.type !== 'comment') {\n          notTagNorBrace = true;\n        }\n      }\n\n      if (notTagNorBrace || typeof token === 'string') {\n        if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n          // Here we are inside a tag, and not inside an XQuery expression.\n          // That's plain text: drop any tokens matched.\n          var plainText = stringifyToken(token); // And merge text with adjacent text\n\n          if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n            plainText += stringifyToken(tokens[i + 1]);\n            tokens.splice(i + 1, 1);\n          }\n\n          if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n            plainText = stringifyToken(tokens[i - 1]) + plainText;\n            tokens.splice(i - 1, 1);\n            i--;\n          }\n\n          if (/^\\s+$/.test(plainText)) {\n            tokens[i] = plainText;\n          } else {\n            tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n          }\n        }\n      }\n\n      if (token.content && typeof token.content !== 'string') {\n        walkTokens(token.content);\n      }\n    }\n  };\n\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'xquery') {\n      return;\n    }\n\n    walkTokens(env.tokens);\n  });\n})(Prism);\n\nPrism.languages.tap = {\n  fail: /not ok[^#{\\n\\r]*/,\n  pass: /ok[^#{\\n\\r]*/,\n  pragma: /pragma [+-][a-z]+/,\n  bailout: /bail out!.*/i,\n  version: /TAP version \\d+/i,\n  plan: /\\d+\\.\\.\\d+(?: +#.*)?/,\n  subtest: {\n    pattern: /# Subtest(?:: .*)?/,\n    greedy: true\n  },\n  punctuation: /[{}]/,\n  directive: /#.*/,\n  yamlish: {\n    pattern: /(^[^\\S\\r\\n]*)---(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?[^\\S\\r\\n]*\\.\\.\\.$/m,\n    lookbehind: true,\n    inside: Prism.languages.yaml,\n    alias: 'language-yaml'\n  }\n};\n\n(function () {\n  if (typeof self === 'undefined' || !self.Prism || !self.document || !document.querySelector) {\n    return;\n  }\n\n  function $$(expr, con) {\n    return Array.prototype.slice.call((con || document).querySelectorAll(expr));\n  }\n\n  function hasClass(element, className) {\n    className = \" \" + className + \" \";\n    return (\" \" + element.className + \" \").replace(/[\\n\\t]/g, \" \").indexOf(className) > -1;\n  } // Some browsers round the line-height, others don't.\n  // We need to test for it to position the elements properly.\n\n\n  var isLineHeightRounded = function () {\n    var res;\n    return function () {\n      if (typeof res === 'undefined') {\n        var d = document.createElement('div');\n        d.style.fontSize = '13px';\n        d.style.lineHeight = '1.5';\n        d.style.padding = 0;\n        d.style.border = 0;\n        d.innerHTML = '&nbsp;<br />&nbsp;';\n        document.body.appendChild(d); // Browsers that round the line-height should have offsetHeight === 38\n        // The others should have 39.\n\n        res = d.offsetHeight === 38;\n        document.body.removeChild(d);\n      }\n\n      return res;\n    };\n  }();\n\n  function highlightLines(pre, lines, classes) {\n    lines = typeof lines === 'string' ? lines : pre.getAttribute('data-line');\n    var ranges = lines.replace(/\\s+/g, '').split(','),\n        offset = +pre.getAttribute('data-line-offset') || 0;\n    var parseMethod = isLineHeightRounded() ? parseInt : parseFloat;\n    var lineHeight = parseMethod(getComputedStyle(pre).lineHeight);\n    var hasLineNumbers = hasClass(pre, 'line-numbers');\n\n    for (var i = 0, currentRange; currentRange = ranges[i++];) {\n      var range = currentRange.split('-');\n      var start = +range[0],\n          end = +range[1] || start;\n      var line = pre.querySelector('.line-highlight[data-range=\"' + currentRange + '\"]') || document.createElement('div');\n      line.setAttribute('aria-hidden', 'true');\n      line.setAttribute('data-range', currentRange);\n      line.className = (classes || '') + ' line-highlight'; //if the line-numbers plugin is enabled, then there is no reason for this plugin to display the line numbers\n\n      if (hasLineNumbers && Prism.plugins.lineNumbers) {\n        var startNode = Prism.plugins.lineNumbers.getLine(pre, start);\n        var endNode = Prism.plugins.lineNumbers.getLine(pre, end);\n\n        if (startNode) {\n          line.style.top = startNode.offsetTop + 'px';\n        }\n\n        if (endNode) {\n          line.style.height = endNode.offsetTop - startNode.offsetTop + endNode.offsetHeight + 'px';\n        }\n      } else {\n        line.setAttribute('data-start', start);\n\n        if (end > start) {\n          line.setAttribute('data-end', end);\n        }\n\n        line.style.top = (start - offset - 1) * lineHeight + 'px';\n        line.textContent = new Array(end - start + 2).join(' \\n');\n      } //allow this to play nicely with the line-numbers plugin\n\n\n      if (hasLineNumbers) {\n        //need to attack to pre as when line-numbers is enabled, the code tag is relatively which screws up the positioning\n        pre.appendChild(line);\n      } else {\n        (pre.querySelector('code') || pre).appendChild(line);\n      }\n    }\n  }\n\n  function applyHash() {\n    var hash = location.hash.slice(1); // Remove pre-existing temporary lines\n\n    $$('.temporary.line-highlight').forEach(function (line) {\n      line.parentNode.removeChild(line);\n    });\n    var range = (hash.match(/\\.([\\d,-]+)$/) || [, ''])[1];\n\n    if (!range || document.getElementById(hash)) {\n      return;\n    }\n\n    var id = hash.slice(0, hash.lastIndexOf('.')),\n        pre = document.getElementById(id);\n\n    if (!pre) {\n      return;\n    }\n\n    if (!pre.hasAttribute('data-line')) {\n      pre.setAttribute('data-line', '');\n    }\n\n    highlightLines(pre, range, 'temporary ');\n    document.querySelector('.temporary.line-highlight').scrollIntoView();\n  }\n\n  var fakeTimer = 0; // Hack to limit the number of times applyHash() runs\n\n  Prism.hooks.add('before-sanity-check', function (env) {\n    var pre = env.element.parentNode;\n    var lines = pre && pre.getAttribute('data-line');\n\n    if (!pre || !lines || !/pre/i.test(pre.nodeName)) {\n      return;\n    }\n    /*\n    * Cleanup for other plugins (e.g. autoloader).\n     *\n     * Sometimes <code> blocks are highlighted multiple times. It is necessary\n     * to cleanup any left-over tags, because the whitespace inside of the <div>\n     * tags change the content of the <code> tag.\n     */\n\n\n    var num = 0;\n    $$('.line-highlight', pre).forEach(function (line) {\n      num += line.textContent.length;\n      line.parentNode.removeChild(line);\n    }); // Remove extra whitespace\n\n    if (num && /^( \\n)+$/.test(env.code.slice(-num))) {\n      env.code = env.code.slice(0, -num);\n    }\n  });\n  Prism.hooks.add('complete', function completeHook(env) {\n    var pre = env.element.parentNode;\n    var lines = pre && pre.getAttribute('data-line');\n\n    if (!pre || !lines || !/pre/i.test(pre.nodeName)) {\n      return;\n    }\n\n    clearTimeout(fakeTimer);\n    var hasLineNumbers = Prism.plugins.lineNumbers;\n    var isLineNumbersLoaded = env.plugins && env.plugins.lineNumbers;\n\n    if (hasClass(pre, 'line-numbers') && hasLineNumbers && !isLineNumbersLoaded) {\n      Prism.hooks.add('line-numbers', completeHook);\n    } else {\n      highlightLines(pre, lines);\n      fakeTimer = setTimeout(applyHash, 1);\n    }\n  });\n  window.addEventListener('hashchange', applyHash);\n  window.addEventListener('resize', function () {\n    var preElements = document.querySelectorAll('pre[data-line]');\n    Array.prototype.forEach.call(preElements, function (pre) {\n      highlightLines(pre);\n    });\n  });\n})();\n\n(function () {\n  if (typeof self === 'undefined' || !self.Prism || !self.document) {\n    return;\n  }\n  /**\n   * Plugin name which is used as a class name for <pre> which is activating the plugin\n   * @type {String}\n   */\n\n\n  var PLUGIN_NAME = 'line-numbers';\n  /**\n   * Regular expression used for determining line breaks\n   * @type {RegExp}\n   */\n\n  var NEW_LINE_EXP = /\\n(?!$)/g;\n  /**\n   * Resizes line numbers spans according to height of line of code\n   * @param {Element} element <pre> element\n   */\n\n  var _resizeElement = function (element) {\n    var codeStyles = getStyles(element);\n    var whiteSpace = codeStyles['white-space'];\n\n    if (whiteSpace === 'pre-wrap' || whiteSpace === 'pre-line') {\n      var codeElement = element.querySelector('code');\n      var lineNumbersWrapper = element.querySelector('.line-numbers-rows');\n      var lineNumberSizer = element.querySelector('.line-numbers-sizer');\n      var codeLines = codeElement.textContent.split(NEW_LINE_EXP);\n\n      if (!lineNumberSizer) {\n        lineNumberSizer = document.createElement('span');\n        lineNumberSizer.className = 'line-numbers-sizer';\n        codeElement.appendChild(lineNumberSizer);\n      }\n\n      lineNumberSizer.style.display = 'block';\n      codeLines.forEach(function (line, lineNumber) {\n        lineNumberSizer.textContent = line || '\\n';\n        var lineSize = lineNumberSizer.getBoundingClientRect().height;\n        lineNumbersWrapper.children[lineNumber].style.height = lineSize + 'px';\n      });\n      lineNumberSizer.textContent = '';\n      lineNumberSizer.style.display = 'none';\n    }\n  };\n  /**\n   * Returns style declarations for the element\n   * @param {Element} element\n   */\n\n\n  var getStyles = function (element) {\n    if (!element) {\n      return null;\n    }\n\n    return window.getComputedStyle ? getComputedStyle(element) : element.currentStyle || null;\n  };\n\n  window.addEventListener('resize', function () {\n    Array.prototype.forEach.call(document.querySelectorAll('pre.' + PLUGIN_NAME), _resizeElement);\n  });\n  Prism.hooks.add('complete', function (env) {\n    if (!env.code) {\n      return;\n    }\n\n    var code = env.element;\n    var pre = code.parentNode; // works only for <code> wrapped inside <pre> (not inline)\n\n    if (!pre || !/pre/i.test(pre.nodeName)) {\n      return;\n    } // Abort if line numbers already exists\n\n\n    if (code.querySelector('.line-numbers-rows')) {\n      return;\n    }\n\n    var addLineNumbers = false;\n    var lineNumbersRegex = /(?:^|\\s)line-numbers(?:\\s|$)/;\n\n    for (var element = code; element; element = element.parentNode) {\n      if (lineNumbersRegex.test(element.className)) {\n        addLineNumbers = true;\n        break;\n      }\n    } // only add line numbers if <code> or one of its ancestors has the `line-numbers` class\n\n\n    if (!addLineNumbers) {\n      return;\n    } // Remove the class 'line-numbers' from the <code>\n\n\n    code.className = code.className.replace(lineNumbersRegex, ' '); // Add the class 'line-numbers' to the <pre>\n\n    if (!lineNumbersRegex.test(pre.className)) {\n      pre.className += ' line-numbers';\n    }\n\n    var match = env.code.match(NEW_LINE_EXP);\n    var linesNum = match ? match.length + 1 : 1;\n    var lineNumbersWrapper;\n    var lines = new Array(linesNum + 1).join('<span></span>');\n    lineNumbersWrapper = document.createElement('span');\n    lineNumbersWrapper.setAttribute('aria-hidden', 'true');\n    lineNumbersWrapper.className = 'line-numbers-rows';\n    lineNumbersWrapper.innerHTML = lines;\n\n    if (pre.hasAttribute('data-start')) {\n      pre.style.counterReset = 'linenumber ' + (parseInt(pre.getAttribute('data-start'), 10) - 1);\n    }\n\n    env.element.appendChild(lineNumbersWrapper);\n\n    _resizeElement(pre);\n\n    Prism.hooks.run('line-numbers', env);\n  });\n  Prism.hooks.add('line-numbers', function (env) {\n    env.plugins = env.plugins || {};\n    env.plugins.lineNumbers = true;\n  });\n  /**\n   * Global exports\n   */\n\n  Prism.plugins.lineNumbers = {\n    /**\n     * Get node for provided line number\n     * @param {Element} element pre element\n     * @param {Number} number line number\n     * @return {Element|undefined}\n     */\n    getLine: function (element, number) {\n      if (element.tagName !== 'PRE' || !element.classList.contains(PLUGIN_NAME)) {\n        return;\n      }\n\n      var lineNumberRows = element.querySelector('.line-numbers-rows');\n      var lineNumberStart = parseInt(element.getAttribute('data-start'), 10) || 1;\n      var lineNumberEnd = lineNumberStart + (lineNumberRows.children.length - 1);\n\n      if (number < lineNumberStart) {\n        number = lineNumberStart;\n      }\n\n      if (number > lineNumberEnd) {\n        number = lineNumberEnd;\n      }\n\n      var lineIndex = number - lineNumberStart;\n      return lineNumberRows.children[lineIndex];\n    }\n  };\n})();\n\n(function () {\n  if (typeof self !== 'undefined' && !self.Prism || typeof global !== 'undefined' && !global.Prism) {\n    return;\n  }\n\n  var url = /\\b([a-z]{3,7}:\\/\\/|tel:)[\\w\\-+%~/.:=&]+(?:\\?[\\w\\-+%~/.:#=?&!$'()*,;]*)?(?:#[\\w\\-+%~/.:#=?&!$'()*,;]*)?/,\n      email = /\\b\\S+@[\\w.]+[a-z]{2}/,\n      linkMd = /\\[([^\\]]+)]\\(([^)]+)\\)/,\n      // Tokens that may contain URLs and emails\n  candidates = ['comment', 'url', 'attr-value', 'string'];\n  Prism.plugins.autolinker = {\n    processGrammar: function (grammar) {\n      // Abort if grammar has already been processed\n      if (!grammar || grammar['url-link']) {\n        return;\n      }\n\n      Prism.languages.DFS(grammar, function (key, def, type) {\n        if (candidates.indexOf(type) > -1 && !Array.isArray(def)) {\n          if (!def.pattern) {\n            def = this[key] = {\n              pattern: def\n            };\n          }\n\n          def.inside = def.inside || {};\n\n          if (type == 'comment') {\n            def.inside['md-link'] = linkMd;\n          }\n\n          if (type == 'attr-value') {\n            Prism.languages.insertBefore('inside', 'punctuation', {\n              'url-link': url\n            }, def);\n          } else {\n            def.inside['url-link'] = url;\n          }\n\n          def.inside['email-link'] = email;\n        }\n      });\n      grammar['url-link'] = url;\n      grammar['email-link'] = email;\n    }\n  };\n  Prism.hooks.add('before-highlight', function (env) {\n    Prism.plugins.autolinker.processGrammar(env.grammar);\n  });\n  Prism.hooks.add('wrap', function (env) {\n    if (/-link$/.test(env.type)) {\n      env.tag = 'a';\n      var href = env.content;\n\n      if (env.type == 'email-link' && href.indexOf('mailto:') != 0) {\n        href = 'mailto:' + href;\n      } else if (env.type == 'md-link') {\n        // Markdown\n        var match = env.content.match(linkMd);\n        href = match[2];\n        env.content = match[1];\n      }\n\n      env.attributes.href = href; // Silently catch any error thrown by decodeURIComponent (#1186)\n\n      try {\n        env.content = decodeURIComponent(env.content);\n      } catch (e) {}\n    }\n  });\n})();\n\n(function () {\n  if (typeof self !== 'undefined' && !self.Prism || typeof global !== 'undefined' && !global.Prism) {\n    return;\n  }\n\n  var autoLinkerProcess = function (grammar) {\n    if (Prism.plugins.autolinker) {\n      Prism.plugins.autolinker.processGrammar(grammar);\n    }\n\n    return grammar;\n  };\n\n  var dataURI = {\n    pattern: /(.)\\bdata:[^\\/]+\\/[^,]+,(?:(?!\\1)[\\s\\S]|\\\\\\1)+(?=\\1)/,\n    lookbehind: true,\n    inside: {\n      'language-css': {\n        pattern: /(data:[^\\/]+\\/(?:[^+,]+\\+)?css,)[\\s\\S]+/,\n        lookbehind: true\n      },\n      'language-javascript': {\n        pattern: /(data:[^\\/]+\\/(?:[^+,]+\\+)?javascript,)[\\s\\S]+/,\n        lookbehind: true\n      },\n      'language-json': {\n        pattern: /(data:[^\\/]+\\/(?:[^+,]+\\+)?json,)[\\s\\S]+/,\n        lookbehind: true\n      },\n      'language-markup': {\n        pattern: /(data:[^\\/]+\\/(?:[^+,]+\\+)?(?:html|xml),)[\\s\\S]+/,\n        lookbehind: true\n      }\n    }\n  }; // Tokens that may contain URLs\n\n  var candidates = ['url', 'attr-value', 'string'];\n  Prism.plugins.dataURIHighlight = {\n    processGrammar: function (grammar) {\n      // Abort if grammar has already been processed\n      if (!grammar || grammar['data-uri']) {\n        return;\n      }\n\n      Prism.languages.DFS(grammar, function (key, def, type) {\n        if (candidates.indexOf(type) > -1 && !Array.isArray(def)) {\n          if (!def.pattern) {\n            def = this[key] = {\n              pattern: def\n            };\n          }\n\n          def.inside = def.inside || {};\n\n          if (type == 'attr-value') {\n            Prism.languages.insertBefore('inside', def.inside['url-link'] ? 'url-link' : 'punctuation', {\n              'data-uri': dataURI\n            }, def);\n          } else {\n            if (def.inside['url-link']) {\n              Prism.languages.insertBefore('inside', 'url-link', {\n                'data-uri': dataURI\n              }, def);\n            } else {\n              def.inside['data-uri'] = dataURI;\n            }\n          }\n        }\n      });\n      grammar['data-uri'] = dataURI;\n    }\n  };\n  Prism.hooks.add('before-highlight', function (env) {\n    // Prepare the needed grammars for this code block\n    if (dataURI.pattern.test(env.code)) {\n      for (var p in dataURI.inside) {\n        if (dataURI.inside.hasOwnProperty(p)) {\n          if (!dataURI.inside[p].inside && dataURI.inside[p].pattern.test(env.code)) {\n            var lang = p.match(/^language-(.+)/)[1];\n\n            if (Prism.languages[lang]) {\n              dataURI.inside[p].inside = {\n                rest: autoLinkerProcess(Prism.languages[lang])\n              };\n            }\n          }\n        }\n      }\n    }\n\n    Prism.plugins.dataURIHighlight.processGrammar(env.grammar);\n  });\n})();\n\n(function () {\n  if (typeof self !== 'undefined' && !self.Prism || typeof global !== 'undefined' && !global.Prism) {\n    return;\n  }\n\n  if (Prism.languages.css) {\n    // check whether the selector is an advanced pattern before extending it\n    if (Prism.languages.css.selector.pattern) {\n      Prism.languages.css.selector.inside['pseudo-class'] = /:[\\w-]+/;\n      Prism.languages.css.selector.inside['pseudo-element'] = /::[\\w-]+/;\n    } else {\n      Prism.languages.css.selector = {\n        pattern: Prism.languages.css.selector,\n        inside: {\n          'pseudo-class': /:[\\w-]+/,\n          'pseudo-element': /::[\\w-]+/\n        }\n      };\n    }\n  }\n\n  if (Prism.languages.markup) {\n    Prism.languages.markup.tag.inside.tag.inside['tag-id'] = /[\\w-]+/;\n    var Tags = {\n      HTML: {\n        'a': 1,\n        'abbr': 1,\n        'acronym': 1,\n        'b': 1,\n        'basefont': 1,\n        'bdo': 1,\n        'big': 1,\n        'blink': 1,\n        'cite': 1,\n        'code': 1,\n        'dfn': 1,\n        'em': 1,\n        'kbd': 1,\n        'i': 1,\n        'rp': 1,\n        'rt': 1,\n        'ruby': 1,\n        's': 1,\n        'samp': 1,\n        'small': 1,\n        'spacer': 1,\n        'strike': 1,\n        'strong': 1,\n        'sub': 1,\n        'sup': 1,\n        'time': 1,\n        'tt': 1,\n        'u': 1,\n        'var': 1,\n        'wbr': 1,\n        'noframes': 1,\n        'summary': 1,\n        'command': 1,\n        'dt': 1,\n        'dd': 1,\n        'figure': 1,\n        'figcaption': 1,\n        'center': 1,\n        'section': 1,\n        'nav': 1,\n        'article': 1,\n        'aside': 1,\n        'hgroup': 1,\n        'header': 1,\n        'footer': 1,\n        'address': 1,\n        'noscript': 1,\n        'isIndex': 1,\n        'main': 1,\n        'mark': 1,\n        'marquee': 1,\n        'meter': 1,\n        'menu': 1\n      },\n      SVG: {\n        'animateColor': 1,\n        'animateMotion': 1,\n        'animateTransform': 1,\n        'glyph': 1,\n        'feBlend': 1,\n        'feColorMatrix': 1,\n        'feComponentTransfer': 1,\n        'feFuncR': 1,\n        'feFuncG': 1,\n        'feFuncB': 1,\n        'feFuncA': 1,\n        'feComposite': 1,\n        'feConvolveMatrix': 1,\n        'feDiffuseLighting': 1,\n        'feDisplacementMap': 1,\n        'feFlood': 1,\n        'feGaussianBlur': 1,\n        'feImage': 1,\n        'feMerge': 1,\n        'feMergeNode': 1,\n        'feMorphology': 1,\n        'feOffset': 1,\n        'feSpecularLighting': 1,\n        'feTile': 1,\n        'feTurbulence': 1,\n        'feDistantLight': 1,\n        'fePointLight': 1,\n        'feSpotLight': 1,\n        'linearGradient': 1,\n        'radialGradient': 1,\n        'altGlyph': 1,\n        'textPath': 1,\n        'tref': 1,\n        'altglyph': 1,\n        'textpath': 1,\n        'altglyphdef': 1,\n        'altglyphitem': 1,\n        'clipPath': 1,\n        'color-profile': 1,\n        'cursor': 1,\n        'font-face': 1,\n        'font-face-format': 1,\n        'font-face-name': 1,\n        'font-face-src': 1,\n        'font-face-uri': 1,\n        'foreignObject': 1,\n        'glyphRef': 1,\n        'hkern': 1,\n        'vkern': 1\n      },\n      MathML: {}\n    };\n  }\n\n  var language;\n  Prism.hooks.add('wrap', function (env) {\n    if ((env.type == 'tag-id' || env.type == 'property' && env.content.indexOf('-') != 0 || env.type == 'rule' && env.content.indexOf('@-') != 0 || env.type == 'pseudo-class' && env.content.indexOf(':-') != 0 || env.type == 'pseudo-element' && env.content.indexOf('::-') != 0 || env.type == 'attr-name' && env.content.indexOf('data-') != 0) && env.content.indexOf('<') === -1) {\n      if (env.language == 'css' || env.language == 'scss' || env.language == 'markup') {\n        var href = 'https://webplatform.github.io/docs/';\n        var content = env.content;\n\n        if (env.language == 'css' || env.language == 'scss') {\n          href += 'css/';\n\n          if (env.type == 'property') {\n            href += 'properties/';\n          } else if (env.type == 'rule') {\n            href += 'atrules/';\n            content = content.substring(1);\n          } else if (env.type == 'pseudo-class') {\n            href += 'selectors/pseudo-classes/';\n            content = content.substring(1);\n          } else if (env.type == 'pseudo-element') {\n            href += 'selectors/pseudo-elements/';\n            content = content.substring(2);\n          }\n        } else if (env.language == 'markup') {\n          if (env.type == 'tag-id') {\n            // Check language\n            language = getLanguage(env.content) || language;\n\n            if (language) {\n              href += language + '/elements/';\n            } else {\n              return; // Abort\n            }\n          } else if (env.type == 'attr-name') {\n            if (language) {\n              href += language + '/attributes/';\n            } else {\n              return; // Abort\n            }\n          }\n        }\n\n        href += content;\n        env.tag = 'a';\n        env.attributes.href = href;\n        env.attributes.target = '_blank';\n      }\n    }\n  });\n\n  function getLanguage(tag) {\n    var tagL = tag.toLowerCase();\n\n    if (Tags.HTML[tagL]) {\n      return 'html';\n    } else if (Tags.SVG[tag]) {\n      return 'svg';\n    } else if (Tags.MathML[tag]) {\n      return 'mathml';\n    } // Not in dictionary, perform check\n\n\n    if (Tags.HTML[tagL] !== 0 && typeof document !== 'undefined') {\n      var htmlInterface = (document.createElement(tag).toString().match(/\\[object HTML(.+)Element\\]/) || [])[1];\n\n      if (htmlInterface && htmlInterface != 'Unknown') {\n        Tags.HTML[tagL] = 1;\n        return 'html';\n      }\n    }\n\n    Tags.HTML[tagL] = 0;\n\n    if (Tags.SVG[tag] !== 0 && typeof document !== 'undefined') {\n      var svgInterface = (document.createElementNS('http://www.w3.org/2000/svg', tag).toString().match(/\\[object SVG(.+)Element\\]/) || [])[1];\n\n      if (svgInterface && svgInterface != 'Unknown') {\n        Tags.SVG[tag] = 1;\n        return 'svg';\n      }\n    }\n\n    Tags.SVG[tag] = 0; // Lame way to detect MathML, but browsers don’t expose interface names there :(\n\n    if (Tags.MathML[tag] !== 0) {\n      if (tag.indexOf('m') === 0) {\n        Tags.MathML[tag] = 1;\n        return 'mathml';\n      }\n    }\n\n    Tags.MathML[tag] = 0;\n    return null;\n  }\n})();\n\n(function () {\n  if ((typeof self === 'undefined' || !self.Prism) && (typeof global === 'undefined' || !global.Prism)) {\n    return;\n  }\n\n  var options = {\n    classMap: {}\n  };\n  Prism.plugins.customClass = {\n    map: function map(cm) {\n      options.classMap = cm;\n    },\n    prefix: function prefix(string) {\n      options.prefixString = string;\n    }\n  };\n  Prism.hooks.add('wrap', function (env) {\n    if (!options.classMap && !options.prefixString) {\n      return;\n    }\n\n    env.classes = env.classes.map(function (c) {\n      return (options.prefixString || '') + (options.classMap[c] || c);\n    });\n  });\n})();\n\n(function () {\n  if (typeof self === 'undefined' || !self.Prism || !self.document || !document.querySelector) {\n    return;\n  }\n  /**\n   * @param {Element} [container=document]\n   */\n\n\n  self.Prism.fileHighlight = function (container) {\n    container = container || document;\n    var Extensions = {\n      'js': 'javascript',\n      'py': 'python',\n      'rb': 'ruby',\n      'ps1': 'powershell',\n      'psm1': 'powershell',\n      'sh': 'bash',\n      'bat': 'batch',\n      'h': 'c',\n      'tex': 'latex'\n    };\n    Array.prototype.slice.call(container.querySelectorAll('pre[data-src]')).forEach(function (pre) {\n      // ignore if already loaded\n      if (pre.hasAttribute('data-src-loaded')) {\n        return;\n      } // load current\n\n\n      var src = pre.getAttribute('data-src');\n      var language,\n          parent = pre;\n      var lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;\n\n      while (parent && !lang.test(parent.className)) {\n        parent = parent.parentNode;\n      }\n\n      if (parent) {\n        language = (pre.className.match(lang) || [, ''])[1];\n      }\n\n      if (!language) {\n        var extension = (src.match(/\\.(\\w+)$/) || [, ''])[1];\n        language = Extensions[extension] || extension;\n      }\n\n      var code = document.createElement('code');\n      code.className = 'language-' + language;\n      pre.textContent = '';\n      code.textContent = 'Loading…';\n      pre.appendChild(code);\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', src, true);\n\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState == 4) {\n          if (xhr.status < 400 && xhr.responseText) {\n            code.textContent = xhr.responseText;\n            Prism.highlightElement(code); // mark as loaded\n\n            pre.setAttribute('data-src-loaded', '');\n          } else if (xhr.status >= 400) {\n            code.textContent = '✖ Error ' + xhr.status + ' while fetching file: ' + xhr.statusText;\n          } else {\n            code.textContent = '✖ Error: File does not exist or is empty';\n          }\n        }\n      };\n\n      xhr.send(null);\n    });\n\n    if (Prism.plugins.toolbar) {\n      Prism.plugins.toolbar.registerButton('download-file', function (env) {\n        var pre = env.element.parentNode;\n\n        if (!pre || !/pre/i.test(pre.nodeName) || !pre.hasAttribute('data-src') || !pre.hasAttribute('data-download-link')) {\n          return;\n        }\n\n        var src = pre.getAttribute('data-src');\n        var a = document.createElement('a');\n        a.textContent = pre.getAttribute('data-download-link-label') || 'Download';\n        a.setAttribute('download', '');\n        a.href = src;\n        return a;\n      });\n    }\n  };\n\n  document.addEventListener('DOMContentLoaded', function () {\n    // execute inside handler, for dropping Event as argument\n    self.Prism.fileHighlight();\n  });\n})();\n\n(function () {\n  if (typeof self === 'undefined' || !self.Prism || !self.document) {\n    return;\n  }\n\n  var callbacks = [];\n  var map = {};\n\n  var noop = function () {};\n\n  Prism.plugins.toolbar = {};\n  /**\n   * @typedef ButtonOptions\n   * @property {string} text The text displayed.\n   * @property {string} [url] The URL of the link which will be created.\n   * @property {Function} [onClick] The event listener for the `click` event of the created button.\n   */\n\n  /**\n   * Register a button callback with the toolbar.\n   *\n   * @param {string} key\n   * @param {ButtonOptions|Function} opts\n   */\n\n  var registerButton = Prism.plugins.toolbar.registerButton = function (key, opts) {\n    var callback;\n\n    if (typeof opts === 'function') {\n      callback = opts;\n    } else {\n      callback = function (env) {\n        var element;\n\n        if (typeof opts.onClick === 'function') {\n          element = document.createElement('button');\n          element.type = 'button';\n          element.addEventListener('click', function () {\n            opts.onClick.call(this, env);\n          });\n        } else if (typeof opts.url === 'string') {\n          element = document.createElement('a');\n          element.href = opts.url;\n        } else {\n          element = document.createElement('span');\n        }\n\n        element.textContent = opts.text;\n        return element;\n      };\n    }\n\n    if (key in map) {\n      console.warn('There is a button with the key \"' + key + '\" registered already.');\n      return;\n    }\n\n    callbacks.push(map[key] = callback);\n  };\n  /**\n   * Post-highlight Prism hook callback.\n   *\n   * @param env\n   */\n\n\n  var hook = Prism.plugins.toolbar.hook = function (env) {\n    // Check if inline or actual code block (credit to line-numbers plugin)\n    var pre = env.element.parentNode;\n\n    if (!pre || !/pre/i.test(pre.nodeName)) {\n      return;\n    } // Autoloader rehighlights, so only do this once.\n\n\n    if (pre.parentNode.classList.contains('code-toolbar')) {\n      return;\n    } // Create wrapper for <pre> to prevent scrolling toolbar with content\n\n\n    var wrapper = document.createElement(\"div\");\n    wrapper.classList.add(\"code-toolbar\");\n    pre.parentNode.insertBefore(wrapper, pre);\n    wrapper.appendChild(pre); // Setup the toolbar\n\n    var toolbar = document.createElement('div');\n    toolbar.classList.add('toolbar');\n\n    if (document.body.hasAttribute('data-toolbar-order')) {\n      callbacks = document.body.getAttribute('data-toolbar-order').split(',').map(function (key) {\n        return map[key] || noop;\n      });\n    }\n\n    callbacks.forEach(function (callback) {\n      var element = callback(env);\n\n      if (!element) {\n        return;\n      }\n\n      var item = document.createElement('div');\n      item.classList.add('toolbar-item');\n      item.appendChild(element);\n      toolbar.appendChild(item);\n    }); // Add our toolbar to the currently created wrapper of <pre> tag\n\n    wrapper.appendChild(toolbar);\n  };\n\n  registerButton('label', function (env) {\n    var pre = env.element.parentNode;\n\n    if (!pre || !/pre/i.test(pre.nodeName)) {\n      return;\n    }\n\n    if (!pre.hasAttribute('data-label')) {\n      return;\n    }\n\n    var element, template;\n    var text = pre.getAttribute('data-label');\n\n    try {\n      // Any normal text will blow up this selector.\n      template = document.querySelector('template#' + text);\n    } catch (e) {}\n\n    if (template) {\n      element = template.content;\n    } else {\n      if (pre.hasAttribute('data-url')) {\n        element = document.createElement('a');\n        element.href = pre.getAttribute('data-url');\n      } else {\n        element = document.createElement('span');\n      }\n\n      element.textContent = text;\n    }\n\n    return element;\n  });\n  /**\n   * Register the toolbar with Prism.\n   */\n\n  Prism.hooks.add('complete', hook);\n})();\n\n(function () {\n  if (!self.Prism || !self.document || !document.querySelectorAll || ![].filter) return;\n  /**\n   * @callback Adapter\n   * @param {any} response\n   * @param {HTMLPreElement} [pre]\n   * @returns {string}\n   */\n\n  /**\n   * The list of adapter which will be used if `data-adapter` is not specified.\n   *\n   * @type {Array.<{adapter: Adapter, name: string}>}\n   */\n\n  var adapters = [];\n  /**\n   * Adds a new function to the list of adapters.\n   *\n   * If the given adapter is already registered or not a function or there is an adapter with the given name already,\n   * nothing will happen.\n   *\n   * @param {Adapter} adapter The adapter to be registered.\n   * @param {string} [name] The name of the adapter. Defaults to the function name of `adapter`.\n   */\n\n  function registerAdapter(adapter, name) {\n    name = name || adapter.name;\n\n    if (typeof adapter === \"function\" && !getAdapter(adapter) && !getAdapter(name)) {\n      adapters.push({\n        adapter: adapter,\n        name: name\n      });\n    }\n  }\n  /**\n   * Returns the given adapter itself, if registered, or a registered adapter with the given name.\n   *\n   * If no fitting adapter is registered, `null` will be returned.\n   *\n   * @param {string|Function} adapter The adapter itself or the name of an adapter.\n   * @returns {Adapter} A registered adapter or `null`.\n   */\n\n\n  function getAdapter(adapter) {\n    if (typeof adapter === \"function\") {\n      for (var i = 0, item; item = adapters[i++];) {\n        if (item.adapter.valueOf() === adapter.valueOf()) {\n          return item.adapter;\n        }\n      }\n    } else if (typeof adapter === \"string\") {\n      for (var i = 0, item; item = adapters[i++];) {\n        if (item.name === adapter) {\n          return item.adapter;\n        }\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Remove the given adapter or the first registered adapter with the given name from the list of\n   * registered adapters.\n   *\n   * @param {string|Function} adapter The adapter itself or the name of an adapter.\n   */\n\n\n  function removeAdapter(adapter) {\n    if (typeof adapter === \"string\") {\n      adapter = getAdapter(adapter);\n    }\n\n    if (typeof adapter === \"function\") {\n      var index = adapters.map(function (item) {\n        return item.adapter;\n      }).indexOf(adapter);\n\n      if (index >= 0) {\n        adapters.splice(index, 1);\n      }\n    }\n  }\n\n  registerAdapter(function github(rsp, el) {\n    if (rsp && rsp.meta && rsp.data) {\n      if (rsp.meta.status && rsp.meta.status >= 400) {\n        return \"Error: \" + (rsp.data.message || rsp.meta.status);\n      } else if (typeof rsp.data.content === \"string\") {\n        return typeof atob === \"function\" ? atob(rsp.data.content.replace(/\\s/g, \"\")) : \"Your browser cannot decode base64\";\n      }\n    }\n\n    return null;\n  }, 'github');\n  registerAdapter(function gist(rsp, el) {\n    if (rsp && rsp.meta && rsp.data && rsp.data.files) {\n      if (rsp.meta.status && rsp.meta.status >= 400) {\n        return \"Error: \" + (rsp.data.message || rsp.meta.status);\n      }\n\n      var files = rsp.data.files;\n      var filename = el.getAttribute(\"data-filename\");\n\n      if (filename == null) {\n        // Maybe in the future we can somehow render all files\n        // But the standard <script> include for gists does that nicely already,\n        // so that might be getting beyond the scope of this plugin\n        for (var key in files) {\n          if (files.hasOwnProperty(key)) {\n            filename = key;\n            break;\n          }\n        }\n      }\n\n      if (files[filename] !== undefined) {\n        return files[filename].content;\n      }\n\n      return \"Error: unknown or missing gist file \" + filename;\n    }\n\n    return null;\n  }, 'gist');\n  registerAdapter(function bitbucket(rsp, el) {\n    if (rsp && rsp.node && typeof rsp.data === \"string\") {\n      return rsp.data;\n    }\n\n    return null;\n  }, 'bitbucket');\n  var jsonpcb = 0,\n      loadMsg = \"Loading\\u2026\";\n  /**\n   * Highlights all `pre` elements with an `data-jsonp` by requesting the specified JSON and using the specified adapter\n   * or a registered adapter to extract the code to highlight from the response. The highlighted code will be inserted\n   * into the `pre` element.\n   */\n\n  function highlight() {\n    Array.prototype.slice.call(document.querySelectorAll(\"pre[data-jsonp]\")).forEach(function (pre) {\n      pre.textContent = \"\";\n      var code = document.createElement(\"code\");\n      code.textContent = loadMsg;\n      pre.appendChild(code);\n      var adapterName = pre.getAttribute(\"data-adapter\");\n      var adapter = null;\n\n      if (adapterName) {\n        if (typeof window[adapterName] === \"function\") {\n          adapter = window[adapterName];\n        } else {\n          code.textContent = \"JSONP adapter function '\" + adapterName + \"' doesn't exist\";\n          return;\n        }\n      }\n\n      var cb = \"prismjsonp\" + jsonpcb++;\n      var uri = document.createElement(\"a\");\n      var src = uri.href = pre.getAttribute(\"data-jsonp\");\n      uri.href += (uri.search ? \"&\" : \"?\") + (pre.getAttribute(\"data-callback\") || \"callback\") + \"=\" + cb;\n      var timeout = setTimeout(function () {\n        // we could clean up window[cb], but if the request finally succeeds, keeping it around is a good thing\n        if (code.textContent === loadMsg) {\n          code.textContent = \"Timeout loading '\" + src + \"'\";\n        }\n      }, 5000);\n      var script = document.createElement(\"script\");\n      script.src = uri.href;\n\n      window[cb] = function (rsp) {\n        document.head.removeChild(script);\n        clearTimeout(timeout);\n        delete window[cb];\n        var data = \"\";\n\n        if (adapter) {\n          data = adapter(rsp, pre);\n        } else {\n          for (var p in adapters) {\n            data = adapters[p].adapter(rsp, pre);\n\n            if (data !== null) {\n              break;\n            }\n          }\n        }\n\n        if (data === null) {\n          code.textContent = \"Cannot parse response (perhaps you need an adapter function?)\";\n        } else {\n          code.textContent = data;\n          Prism.highlightElement(code);\n        }\n      };\n\n      document.head.appendChild(script);\n    });\n  }\n\n  Prism.plugins.jsonphighlight = {\n    registerAdapter: registerAdapter,\n    removeAdapter: removeAdapter,\n    highlight: highlight\n  };\n  highlight();\n})();\n\n(function () {\n  if (typeof self !== 'undefined' && !self.Prism || typeof global !== 'undefined' && !global.Prism) {\n    return;\n  }\n\n  Prism.hooks.add('wrap', function (env) {\n    if (env.type !== \"keyword\") {\n      return;\n    }\n\n    env.classes.push('keyword-' + env.content);\n  });\n})();\n\n(function () {\n  if (typeof self !== 'undefined' && !self.Prism || !self.document || !Function.prototype.bind) {\n    return;\n  }\n\n  var previewers = {\n    // gradient must be defined before color and angle\n    'gradient': {\n      create: function () {\n        // Stores already processed gradients so that we don't\n        // make the conversion every time the previewer is shown\n        var cache = {};\n        /**\n         * Returns a W3C-valid linear gradient\n         * @param {string} prefix Vendor prefix if any (\"-moz-\", \"-webkit-\", etc.)\n         * @param {string} func Gradient function name (\"linear-gradient\")\n         * @param {string[]} values Array of the gradient function parameters ([\"0deg\", \"red 0%\", \"blue 100%\"])\n         */\n\n        var convertToW3CLinearGradient = function (prefix, func, values) {\n          // Default value for angle\n          var angle = '180deg';\n\n          if (/^(?:-?\\d*\\.?\\d+(?:deg|rad)|to\\b|top|right|bottom|left)/.test(values[0])) {\n            angle = values.shift();\n\n            if (angle.indexOf('to ') < 0) {\n              // Angle uses old keywords\n              // W3C syntax uses \"to\" + opposite keywords\n              if (angle.indexOf('top') >= 0) {\n                if (angle.indexOf('left') >= 0) {\n                  angle = 'to bottom right';\n                } else if (angle.indexOf('right') >= 0) {\n                  angle = 'to bottom left';\n                } else {\n                  angle = 'to bottom';\n                }\n              } else if (angle.indexOf('bottom') >= 0) {\n                if (angle.indexOf('left') >= 0) {\n                  angle = 'to top right';\n                } else if (angle.indexOf('right') >= 0) {\n                  angle = 'to top left';\n                } else {\n                  angle = 'to top';\n                }\n              } else if (angle.indexOf('left') >= 0) {\n                angle = 'to right';\n              } else if (angle.indexOf('right') >= 0) {\n                angle = 'to left';\n              } else if (prefix) {\n                // Angle is shifted by 90deg in prefixed gradients\n                if (angle.indexOf('deg') >= 0) {\n                  angle = 90 - parseFloat(angle) + 'deg';\n                } else if (angle.indexOf('rad') >= 0) {\n                  angle = Math.PI / 2 - parseFloat(angle) + 'rad';\n                }\n              }\n            }\n          }\n\n          return func + '(' + angle + ',' + values.join(',') + ')';\n        };\n        /**\n         * Returns a W3C-valid radial gradient\n         * @param {string} prefix Vendor prefix if any (\"-moz-\", \"-webkit-\", etc.)\n         * @param {string} func Gradient function name (\"linear-gradient\")\n         * @param {string[]} values Array of the gradient function parameters ([\"0deg\", \"red 0%\", \"blue 100%\"])\n         */\n\n\n        var convertToW3CRadialGradient = function (prefix, func, values) {\n          if (values[0].indexOf('at') < 0) {\n            // Looks like old syntax\n            // Default values\n            var position = 'center';\n            var shape = 'ellipse';\n            var size = 'farthest-corner';\n\n            if (/\\bcenter|top|right|bottom|left\\b|^\\d+/.test(values[0])) {\n              // Found a position\n              // Remove angle value, if any\n              position = values.shift().replace(/\\s*-?\\d+(?:rad|deg)\\s*/, '');\n            }\n\n            if (/\\bcircle|ellipse|closest|farthest|contain|cover\\b/.test(values[0])) {\n              // Found a shape and/or size\n              var shapeSizeParts = values.shift().split(/\\s+/);\n\n              if (shapeSizeParts[0] && (shapeSizeParts[0] === 'circle' || shapeSizeParts[0] === 'ellipse')) {\n                shape = shapeSizeParts.shift();\n              }\n\n              if (shapeSizeParts[0]) {\n                size = shapeSizeParts.shift();\n              } // Old keywords are converted to their synonyms\n\n\n              if (size === 'cover') {\n                size = 'farthest-corner';\n              } else if (size === 'contain') {\n                size = 'clothest-side';\n              }\n            }\n\n            return func + '(' + shape + ' ' + size + ' at ' + position + ',' + values.join(',') + ')';\n          }\n\n          return func + '(' + values.join(',') + ')';\n        };\n        /**\n         * Converts a gradient to a W3C-valid one\n         * Does not support old webkit syntax (-webkit-gradient(linear...) and -webkit-gradient(radial...))\n         * @param {string} gradient The CSS gradient\n         */\n\n\n        var convertToW3CGradient = function (gradient) {\n          if (cache[gradient]) {\n            return cache[gradient];\n          }\n\n          var parts = gradient.match(/^(\\b|\\B-[a-z]{1,10}-)((?:repeating-)?(?:linear|radial)-gradient)/); // \"\", \"-moz-\", etc.\n\n          var prefix = parts && parts[1]; // \"linear-gradient\", \"radial-gradient\", etc.\n\n          var func = parts && parts[2];\n          var values = gradient.replace(/^(?:\\b|\\B-[a-z]{1,10}-)(?:repeating-)?(?:linear|radial)-gradient\\(|\\)$/g, '').split(/\\s*,\\s*/);\n\n          if (func.indexOf('linear') >= 0) {\n            return cache[gradient] = convertToW3CLinearGradient(prefix, func, values);\n          } else if (func.indexOf('radial') >= 0) {\n            return cache[gradient] = convertToW3CRadialGradient(prefix, func, values);\n          }\n\n          return cache[gradient] = func + '(' + values.join(',') + ')';\n        };\n\n        return function () {\n          new Prism.plugins.Previewer('gradient', function (value) {\n            this.firstChild.style.backgroundImage = '';\n            this.firstChild.style.backgroundImage = convertToW3CGradient(value);\n            return !!this.firstChild.style.backgroundImage;\n          }, '*', function () {\n            this._elt.innerHTML = '<div></div>';\n          });\n        };\n      }(),\n      tokens: {\n        'gradient': {\n          pattern: /(?:\\b|\\B-[a-z]{1,10}-)(?:repeating-)?(?:linear|radial)-gradient\\((?:(?:rgb|hsl)a?\\(.+?\\)|[^\\)])+\\)/gi,\n          inside: {\n            'function': /[\\w-]+(?=\\()/,\n            'punctuation': /[(),]/\n          }\n        }\n      },\n      languages: {\n        'css': true,\n        'less': true,\n        'sass': [{\n          lang: 'sass',\n          before: 'punctuation',\n          inside: 'inside',\n          root: Prism.languages.sass && Prism.languages.sass['variable-line']\n        }, {\n          lang: 'sass',\n          before: 'punctuation',\n          inside: 'inside',\n          root: Prism.languages.sass && Prism.languages.sass['property-line']\n        }],\n        'scss': true,\n        'stylus': [{\n          lang: 'stylus',\n          before: 'func',\n          inside: 'rest',\n          root: Prism.languages.stylus && Prism.languages.stylus['property-declaration'].inside\n        }, {\n          lang: 'stylus',\n          before: 'func',\n          inside: 'rest',\n          root: Prism.languages.stylus && Prism.languages.stylus['variable-declaration'].inside\n        }]\n      }\n    },\n    'angle': {\n      create: function () {\n        new Prism.plugins.Previewer('angle', function (value) {\n          var num = parseFloat(value);\n          var unit = value.match(/[a-z]+$/i);\n          var max, percentage;\n\n          if (!num || !unit) {\n            return false;\n          }\n\n          unit = unit[0];\n\n          switch (unit) {\n            case 'deg':\n              max = 360;\n              break;\n\n            case 'grad':\n              max = 400;\n              break;\n\n            case 'rad':\n              max = 2 * Math.PI;\n              break;\n\n            case 'turn':\n              max = 1;\n          }\n\n          percentage = 100 * num / max;\n          percentage %= 100;\n          this[(num < 0 ? 'set' : 'remove') + 'Attribute']('data-negative', '');\n          this.querySelector('circle').style.strokeDasharray = Math.abs(percentage) + ',500';\n          return true;\n        }, '*', function () {\n          this._elt.innerHTML = '<svg viewBox=\"0 0 64 64\">' + '<circle r=\"16\" cy=\"32\" cx=\"32\"></circle>' + '</svg>';\n        });\n      },\n      tokens: {\n        'angle': /(?:\\b|\\B-|(?=\\B\\.))\\d*\\.?\\d+(?:deg|g?rad|turn)\\b/i\n      },\n      languages: {\n        'css': true,\n        'less': true,\n        'markup': {\n          lang: 'markup',\n          before: 'punctuation',\n          inside: 'inside',\n          root: Prism.languages.markup && Prism.languages.markup['tag'].inside['attr-value']\n        },\n        'sass': [{\n          lang: 'sass',\n          inside: 'inside',\n          root: Prism.languages.sass && Prism.languages.sass['property-line']\n        }, {\n          lang: 'sass',\n          before: 'operator',\n          inside: 'inside',\n          root: Prism.languages.sass && Prism.languages.sass['variable-line']\n        }],\n        'scss': true,\n        'stylus': [{\n          lang: 'stylus',\n          before: 'func',\n          inside: 'rest',\n          root: Prism.languages.stylus && Prism.languages.stylus['property-declaration'].inside\n        }, {\n          lang: 'stylus',\n          before: 'func',\n          inside: 'rest',\n          root: Prism.languages.stylus && Prism.languages.stylus['variable-declaration'].inside\n        }]\n      }\n    },\n    'color': {\n      create: function () {\n        new Prism.plugins.Previewer('color', function (value) {\n          this.style.backgroundColor = '';\n          this.style.backgroundColor = value;\n          return !!this.style.backgroundColor;\n        });\n      },\n      tokens: {\n        'color': {\n          pattern: /\\B#(?:[0-9a-f]{3}){1,2}\\b|\\b(?:rgb|hsl)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:rgb|hsl)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B|\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGray|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGray|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGray|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gray|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGray|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGray|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGray|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i,\n          inside: {\n            'function': /[\\w-]+(?=\\()/,\n            'punctuation': /[(),]/\n          }\n        }\n      },\n      languages: {\n        'css': true,\n        'less': true,\n        'markup': {\n          lang: 'markup',\n          before: 'punctuation',\n          inside: 'inside',\n          root: Prism.languages.markup && Prism.languages.markup['tag'].inside['attr-value']\n        },\n        'sass': [{\n          lang: 'sass',\n          before: 'punctuation',\n          inside: 'inside',\n          root: Prism.languages.sass && Prism.languages.sass['variable-line']\n        }, {\n          lang: 'sass',\n          inside: 'inside',\n          root: Prism.languages.sass && Prism.languages.sass['property-line']\n        }],\n        'scss': true,\n        'stylus': [{\n          lang: 'stylus',\n          before: 'hexcode',\n          inside: 'rest',\n          root: Prism.languages.stylus && Prism.languages.stylus['property-declaration'].inside\n        }, {\n          lang: 'stylus',\n          before: 'hexcode',\n          inside: 'rest',\n          root: Prism.languages.stylus && Prism.languages.stylus['variable-declaration'].inside\n        }]\n      }\n    },\n    'easing': {\n      create: function () {\n        new Prism.plugins.Previewer('easing', function (value) {\n          value = {\n            'linear': '0,0,1,1',\n            'ease': '.25,.1,.25,1',\n            'ease-in': '.42,0,1,1',\n            'ease-out': '0,0,.58,1',\n            'ease-in-out': '.42,0,.58,1'\n          }[value] || value;\n          var p = value.match(/-?\\d*\\.?\\d+/g);\n\n          if (p.length === 4) {\n            p = p.map(function (p, i) {\n              return (i % 2 ? 1 - p : p) * 100;\n            });\n            this.querySelector('path').setAttribute('d', 'M0,100 C' + p[0] + ',' + p[1] + ', ' + p[2] + ',' + p[3] + ', 100,0');\n            var lines = this.querySelectorAll('line');\n            lines[0].setAttribute('x2', p[0]);\n            lines[0].setAttribute('y2', p[1]);\n            lines[1].setAttribute('x2', p[2]);\n            lines[1].setAttribute('y2', p[3]);\n            return true;\n          }\n\n          return false;\n        }, '*', function () {\n          this._elt.innerHTML = '<svg viewBox=\"-20 -20 140 140\" width=\"100\" height=\"100\">' + '<defs>' + '<marker id=\"prism-previewer-easing-marker\" viewBox=\"0 0 4 4\" refX=\"2\" refY=\"2\" markerUnits=\"strokeWidth\">' + '<circle cx=\"2\" cy=\"2\" r=\"1.5\" />' + '</marker>' + '</defs>' + '<path d=\"M0,100 C20,50, 40,30, 100,0\" />' + '<line x1=\"0\" y1=\"100\" x2=\"20\" y2=\"50\" marker-start=\"url(' + location.href + '#prism-previewer-easing-marker)\" marker-end=\"url(' + location.href + '#prism-previewer-easing-marker)\" />' + '<line x1=\"100\" y1=\"0\" x2=\"40\" y2=\"30\" marker-start=\"url(' + location.href + '#prism-previewer-easing-marker)\" marker-end=\"url(' + location.href + '#prism-previewer-easing-marker)\" />' + '</svg>';\n        });\n      },\n      tokens: {\n        'easing': {\n          pattern: /\\bcubic-bezier\\((?:-?\\d*\\.?\\d+,\\s*){3}-?\\d*\\.?\\d+\\)\\B|\\b(?:linear|ease(?:-in)?(?:-out)?)(?=\\s|[;}]|$)/i,\n          inside: {\n            'function': /[\\w-]+(?=\\()/,\n            'punctuation': /[(),]/\n          }\n        }\n      },\n      languages: {\n        'css': true,\n        'less': true,\n        'sass': [{\n          lang: 'sass',\n          inside: 'inside',\n          before: 'punctuation',\n          root: Prism.languages.sass && Prism.languages.sass['variable-line']\n        }, {\n          lang: 'sass',\n          inside: 'inside',\n          root: Prism.languages.sass && Prism.languages.sass['property-line']\n        }],\n        'scss': true,\n        'stylus': [{\n          lang: 'stylus',\n          before: 'hexcode',\n          inside: 'rest',\n          root: Prism.languages.stylus && Prism.languages.stylus['property-declaration'].inside\n        }, {\n          lang: 'stylus',\n          before: 'hexcode',\n          inside: 'rest',\n          root: Prism.languages.stylus && Prism.languages.stylus['variable-declaration'].inside\n        }]\n      }\n    },\n    'time': {\n      create: function () {\n        new Prism.plugins.Previewer('time', function (value) {\n          var num = parseFloat(value);\n          var unit = value.match(/[a-z]+$/i);\n\n          if (!num || !unit) {\n            return false;\n          }\n\n          unit = unit[0];\n          this.querySelector('circle').style.animationDuration = 2 * num + unit;\n          return true;\n        }, '*', function () {\n          this._elt.innerHTML = '<svg viewBox=\"0 0 64 64\">' + '<circle r=\"16\" cy=\"32\" cx=\"32\"></circle>' + '</svg>';\n        });\n      },\n      tokens: {\n        'time': /(?:\\b|\\B-|(?=\\B\\.))\\d*\\.?\\d+m?s\\b/i\n      },\n      languages: {\n        'css': true,\n        'less': true,\n        'markup': {\n          lang: 'markup',\n          before: 'punctuation',\n          inside: 'inside',\n          root: Prism.languages.markup && Prism.languages.markup['tag'].inside['attr-value']\n        },\n        'sass': [{\n          lang: 'sass',\n          inside: 'inside',\n          root: Prism.languages.sass && Prism.languages.sass['property-line']\n        }, {\n          lang: 'sass',\n          before: 'operator',\n          inside: 'inside',\n          root: Prism.languages.sass && Prism.languages.sass['variable-line']\n        }],\n        'scss': true,\n        'stylus': [{\n          lang: 'stylus',\n          before: 'hexcode',\n          inside: 'rest',\n          root: Prism.languages.stylus && Prism.languages.stylus['property-declaration'].inside\n        }, {\n          lang: 'stylus',\n          before: 'hexcode',\n          inside: 'rest',\n          root: Prism.languages.stylus && Prism.languages.stylus['variable-declaration'].inside\n        }]\n      }\n    }\n  };\n  /**\n   * Returns the absolute X, Y offsets for an element\n   * @param {HTMLElement} element\n   * @returns {{top: number, right: number, bottom: number, left: number, width: number, height: number}}\n   */\n\n  var getOffset = function (element) {\n    var elementBounds = element.getBoundingClientRect();\n    var left = elementBounds.left;\n    var top = elementBounds.top;\n    var documentBounds = document.documentElement.getBoundingClientRect();\n    left -= documentBounds.left;\n    top -= documentBounds.top;\n    return {\n      top: top,\n      right: innerWidth - left - elementBounds.width,\n      bottom: innerHeight - top - elementBounds.height,\n      left: left,\n      width: elementBounds.width,\n      height: elementBounds.height\n    };\n  };\n\n  var tokenRegexp = /(?:^|\\s)token(?=$|\\s)/;\n  var activeRegexp = /(?:^|\\s)active(?=$|\\s)/g;\n  var flippedRegexp = /(?:^|\\s)flipped(?=$|\\s)/g;\n  /**\n   * Previewer constructor\n   * @param {string} type Unique previewer type\n   * @param {function} updater Function that will be called on mouseover.\n   * @param {string[]|string=} supportedLanguages Aliases of the languages this previewer must be enabled for. Defaults to \"*\", all languages.\n   * @param {function=} initializer Function that will be called on initialization.\n   * @constructor\n   */\n\n  var Previewer = function (type, updater, supportedLanguages, initializer) {\n    this._elt = null;\n    this._type = type;\n    this._clsRegexp = RegExp('(?:^|\\\\s)' + type + '(?=$|\\\\s)');\n    this._token = null;\n    this.updater = updater;\n    this._mouseout = this.mouseout.bind(this);\n    this.initializer = initializer;\n    var self = this;\n\n    if (!supportedLanguages) {\n      supportedLanguages = ['*'];\n    }\n\n    if (!Array.isArray(supportedLanguages)) {\n      supportedLanguages = [supportedLanguages];\n    }\n\n    supportedLanguages.forEach(function (lang) {\n      if (typeof lang !== 'string') {\n        lang = lang.lang;\n      }\n\n      if (!Previewer.byLanguages[lang]) {\n        Previewer.byLanguages[lang] = [];\n      }\n\n      if (Previewer.byLanguages[lang].indexOf(self) < 0) {\n        Previewer.byLanguages[lang].push(self);\n      }\n    });\n    Previewer.byType[type] = this;\n  };\n  /**\n   * Creates the HTML element for the previewer.\n   */\n\n\n  Previewer.prototype.init = function () {\n    if (this._elt) {\n      return;\n    }\n\n    this._elt = document.createElement('div');\n    this._elt.className = 'prism-previewer prism-previewer-' + this._type;\n    document.body.appendChild(this._elt);\n\n    if (this.initializer) {\n      this.initializer();\n    }\n  };\n\n  Previewer.prototype.isDisabled = function (token) {\n    do {\n      if (token.hasAttribute && token.hasAttribute('data-previewers')) {\n        var previewers = token.getAttribute('data-previewers');\n        return (previewers || '').split(/\\s+/).indexOf(this._type) === -1;\n      }\n    } while (token = token.parentNode);\n\n    return false;\n  };\n  /**\n   * Checks the class name of each hovered element\n   * @param token\n   */\n\n\n  Previewer.prototype.check = function (token) {\n    if (tokenRegexp.test(token.className) && this.isDisabled(token)) {\n      return;\n    }\n\n    do {\n      if (tokenRegexp.test(token.className) && this._clsRegexp.test(token.className)) {\n        break;\n      }\n    } while (token = token.parentNode);\n\n    if (token && token !== this._token) {\n      this._token = token;\n      this.show();\n    }\n  };\n  /**\n   * Called on mouseout\n   */\n\n\n  Previewer.prototype.mouseout = function () {\n    this._token.removeEventListener('mouseout', this._mouseout, false);\n\n    this._token = null;\n    this.hide();\n  };\n  /**\n   * Shows the previewer positioned properly for the current token.\n   */\n\n\n  Previewer.prototype.show = function () {\n    if (!this._elt) {\n      this.init();\n    }\n\n    if (!this._token) {\n      return;\n    }\n\n    if (this.updater.call(this._elt, this._token.textContent)) {\n      this._token.addEventListener('mouseout', this._mouseout, false);\n\n      var offset = getOffset(this._token);\n      this._elt.className += ' active';\n\n      if (offset.top - this._elt.offsetHeight > 0) {\n        this._elt.className = this._elt.className.replace(flippedRegexp, '');\n        this._elt.style.top = offset.top + 'px';\n        this._elt.style.bottom = '';\n      } else {\n        this._elt.className += ' flipped';\n        this._elt.style.bottom = offset.bottom + 'px';\n        this._elt.style.top = '';\n      }\n\n      this._elt.style.left = offset.left + Math.min(200, offset.width / 2) + 'px';\n    } else {\n      this.hide();\n    }\n  };\n  /**\n   * Hides the previewer.\n   */\n\n\n  Previewer.prototype.hide = function () {\n    this._elt.className = this._elt.className.replace(activeRegexp, '');\n  };\n  /**\n   * Map of all registered previewers by language\n   * @type {{}}\n   */\n\n\n  Previewer.byLanguages = {};\n  /**\n   * Map of all registered previewers by type\n   * @type {{}}\n   */\n\n  Previewer.byType = {};\n  /**\n   * Initializes the mouseover event on the code block.\n   * @param {HTMLElement} elt The code block (env.element)\n   * @param {string} lang The language (env.language)\n   */\n\n  Previewer.initEvents = function (elt, lang) {\n    var previewers = [];\n\n    if (Previewer.byLanguages[lang]) {\n      previewers = previewers.concat(Previewer.byLanguages[lang]);\n    }\n\n    if (Previewer.byLanguages['*']) {\n      previewers = previewers.concat(Previewer.byLanguages['*']);\n    }\n\n    elt.addEventListener('mouseover', function (e) {\n      var target = e.target;\n      previewers.forEach(function (previewer) {\n        previewer.check(target);\n      });\n    }, false);\n  };\n\n  Prism.plugins.Previewer = Previewer;\n  Prism.hooks.add('before-highlight', function (env) {\n    for (var previewer in previewers) {\n      var languages = previewers[previewer].languages;\n\n      if (env.language && languages[env.language] && !languages[env.language].initialized) {\n        var lang = languages[env.language];\n\n        if (!Array.isArray(lang)) {\n          lang = [lang];\n        }\n\n        lang.forEach(function (lang) {\n          var before, inside, root, skip;\n\n          if (lang === true) {\n            before = 'important';\n            inside = env.language;\n            lang = env.language;\n          } else {\n            before = lang.before || 'important';\n            inside = lang.inside || lang.lang;\n            root = lang.root || Prism.languages;\n            skip = lang.skip;\n            lang = env.language;\n          }\n\n          if (!skip && Prism.languages[lang]) {\n            Prism.languages.insertBefore(inside, before, previewers[previewer].tokens, root);\n            env.grammar = Prism.languages[lang];\n            languages[env.language] = {\n              initialized: true\n            };\n          }\n        });\n      }\n    }\n  }); // Initialize the previewers only when needed\n\n  Prism.hooks.add('after-highlight', function (env) {\n    if (Previewer.byLanguages['*'] || Previewer.byLanguages[env.language]) {\n      Previewer.initEvents(env.element, env.language);\n    }\n  });\n\n  for (var previewer in previewers) {\n    previewers[previewer].create();\n  }\n})();\n\n(function () {\n  if (typeof self === 'undefined' || !self.Prism || !self.document || !document.createElement) {\n    return;\n  } // The dependencies map is built automatically with gulp\n\n\n  var lang_dependencies =\n  /*dependencies_placeholder[*/\n  {\n    \"javascript\": \"clike\",\n    \"actionscript\": \"javascript\",\n    \"arduino\": \"cpp\",\n    \"aspnet\": [\"markup\", \"csharp\"],\n    \"bison\": \"c\",\n    \"c\": \"clike\",\n    \"csharp\": \"clike\",\n    \"cpp\": \"c\",\n    \"coffeescript\": \"javascript\",\n    \"crystal\": \"ruby\",\n    \"css-extras\": \"css\",\n    \"d\": \"clike\",\n    \"dart\": \"clike\",\n    \"django\": \"markup-templating\",\n    \"ejs\": [\"javascript\", \"markup-templating\"],\n    \"erb\": [\"ruby\", \"markup-templating\"],\n    \"fsharp\": \"clike\",\n    \"flow\": \"javascript\",\n    \"glsl\": \"clike\",\n    \"gml\": \"clike\",\n    \"go\": \"clike\",\n    \"groovy\": \"clike\",\n    \"haml\": \"ruby\",\n    \"handlebars\": \"markup-templating\",\n    \"haxe\": \"clike\",\n    \"java\": \"clike\",\n    \"javadoc\": [\"markup\", \"java\", \"javadoclike\"],\n    \"jolie\": \"clike\",\n    \"jsdoc\": [\"javascript\", \"javadoclike\"],\n    \"js-extras\": \"javascript\",\n    \"jsonp\": \"json\",\n    \"json5\": \"json\",\n    \"kotlin\": \"clike\",\n    \"less\": \"css\",\n    \"markdown\": \"markup\",\n    \"markup-templating\": \"markup\",\n    \"n4js\": \"javascript\",\n    \"nginx\": \"clike\",\n    \"objectivec\": \"c\",\n    \"opencl\": \"cpp\",\n    \"parser\": \"markup\",\n    \"php\": [\"clike\", \"markup-templating\"],\n    \"phpdoc\": [\"php\", \"javadoclike\"],\n    \"php-extras\": \"php\",\n    \"plsql\": \"sql\",\n    \"processing\": \"clike\",\n    \"protobuf\": \"clike\",\n    \"pug\": [\"markup\", \"javascript\"],\n    \"qore\": \"clike\",\n    \"jsx\": [\"markup\", \"javascript\"],\n    \"tsx\": [\"jsx\", \"typescript\"],\n    \"reason\": \"clike\",\n    \"ruby\": \"clike\",\n    \"sass\": \"css\",\n    \"scss\": \"css\",\n    \"scala\": \"java\",\n    \"smarty\": \"markup-templating\",\n    \"soy\": \"markup-templating\",\n    \"swift\": \"clike\",\n    \"tap\": \"yaml\",\n    \"textile\": \"markup\",\n    \"tt2\": [\"clike\", \"markup-templating\"],\n    \"twig\": \"markup\",\n    \"typescript\": \"javascript\",\n    \"t4-cs\": [\"t4-templating\", \"csharp\"],\n    \"t4-vb\": [\"t4-templating\", \"visual-basic\"],\n    \"vala\": \"clike\",\n    \"vbnet\": \"basic\",\n    \"velocity\": \"markup\",\n    \"wiki\": \"markup\",\n    \"xeora\": \"markup\",\n    \"xquery\": \"markup\"\n    /*]*/\n\n  };\n  var lang_aliases =\n  /*aliases_placeholder[*/\n  {\n    \"html\": \"markup\",\n    \"xml\": \"markup\",\n    \"svg\": \"markup\",\n    \"mathml\": \"markup\",\n    \"js\": \"javascript\",\n    \"adoc\": \"asciidoc\",\n    \"shell\": \"bash\",\n    \"rbnf\": \"bnf\",\n    \"dotnet\": \"csharp\",\n    \"coffee\": \"coffeescript\",\n    \"jinja2\": \"django\",\n    \"dockerfile\": \"docker\",\n    \"gamemakerlanguage\": \"gml\",\n    \"hs\": \"haskell\",\n    \"emacs\": \"lisp\",\n    \"elisp\": \"lisp\",\n    \"emacs-lisp\": \"lisp\",\n    \"md\": \"markdown\",\n    \"n4jsd\": \"n4js\",\n    \"objectpascal\": \"pascal\",\n    \"py\": \"python\",\n    \"rb\": \"ruby\",\n    \"ts\": \"typescript\",\n    \"t4\": \"t4-cs\",\n    \"vb\": \"visual-basic\",\n    \"xeoracube\": \"xeora\",\n    \"yml\": \"yaml\"\n    /*]*/\n\n  };\n  var lang_data = {};\n  var ignored_language = 'none';\n  var script = document.getElementsByTagName('script');\n  script = script[script.length - 1];\n  var languages_path = 'components/';\n\n  if (script.hasAttribute('data-autoloader-path')) {\n    var path = script.getAttribute('data-autoloader-path').trim();\n\n    if (path.length > 0 && !/^[a-z]+:\\/\\//i.test(script.src)) {\n      languages_path = path.replace(/\\/?$/, '/');\n    }\n  } else if (/[\\w-]+\\.js$/.test(script.src)) {\n    languages_path = script.src.replace(/[\\w-]+\\.js$/, 'components/');\n  }\n\n  var config = Prism.plugins.autoloader = {\n    languages_path: languages_path,\n    use_minified: true\n  };\n  /**\n   * Lazy loads an external script\n   * @param {string} src\n   * @param {function=} success\n   * @param {function=} error\n   */\n\n  var addScript = function (src, success, error) {\n    var s = document.createElement('script');\n    s.src = src;\n    s.async = true;\n\n    s.onload = function () {\n      document.body.removeChild(s);\n      success && success();\n    };\n\n    s.onerror = function () {\n      document.body.removeChild(s);\n      error && error();\n    };\n\n    document.body.appendChild(s);\n  };\n  /**\n   * Returns the path to a grammar, using the language_path and use_minified config keys.\n   * @param {string} lang\n   * @returns {string}\n   */\n\n\n  var getLanguagePath = function (lang) {\n    return config.languages_path + 'prism-' + lang + (config.use_minified ? '.min' : '') + '.js';\n  };\n  /**\n   * Tries to load a grammar and\n   * highlight again the given element once loaded.\n   * @param {string} lang\n   * @param {HTMLElement} elt\n   */\n\n\n  var registerElement = function (lang, elt) {\n    if (lang in lang_aliases) {\n      lang = lang_aliases[lang];\n    }\n\n    var data = lang_data[lang];\n\n    if (!data) {\n      data = lang_data[lang] = {};\n    } // Look for additional dependencies defined on the <code> or <pre> tags\n\n\n    var deps = elt.getAttribute('data-dependencies');\n\n    if (!deps && elt.parentNode && elt.parentNode.tagName.toLowerCase() === 'pre') {\n      deps = elt.parentNode.getAttribute('data-dependencies');\n    }\n\n    if (deps) {\n      deps = deps.split(/\\s*,\\s*/g);\n    } else {\n      deps = [];\n    }\n\n    loadLanguages(deps, function () {\n      loadLanguage(lang, function () {\n        Prism.highlightElement(elt);\n      });\n    });\n  };\n  /**\n   * Sequentially loads an array of grammars.\n   * @param {string[]|string} langs\n   * @param {function=} success\n   * @param {function=} error\n   */\n\n\n  var loadLanguages = function (langs, success, error) {\n    if (typeof langs === 'string') {\n      langs = [langs];\n    }\n\n    var i = 0;\n    var l = langs.length;\n\n    var f = function () {\n      if (i < l) {\n        loadLanguage(langs[i], function () {\n          i++;\n          f();\n        }, function () {\n          error && error(langs[i]);\n        });\n      } else if (i === l) {\n        success && success(langs);\n      }\n    };\n\n    f();\n  };\n  /**\n   * Load a grammar with its dependencies\n   * @param {string} lang\n   * @param {function=} success\n   * @param {function=} error\n   */\n\n\n  var loadLanguage = function (lang, success, error) {\n    var force = lang.indexOf('!') >= 0;\n    lang = lang.replace('!', '');\n    lang = lang_aliases[lang] || lang;\n\n    var load = function () {\n      var data = lang_data[lang];\n\n      if (!data) {\n        data = lang_data[lang] = {};\n      }\n\n      if (success) {\n        if (!data.success_callbacks) {\n          data.success_callbacks = [];\n        }\n\n        data.success_callbacks.push(success);\n      }\n\n      if (error) {\n        if (!data.error_callbacks) {\n          data.error_callbacks = [];\n        }\n\n        data.error_callbacks.push(error);\n      }\n\n      if (!force && Prism.languages[lang]) {\n        languageSuccess(lang);\n      } else if (!force && data.error) {\n        languageError(lang);\n      } else if (force || !data.loading) {\n        data.loading = true;\n        var src = getLanguagePath(lang);\n        addScript(src, function () {\n          data.loading = false;\n          languageSuccess(lang);\n        }, function () {\n          data.loading = false;\n          data.error = true;\n          languageError(lang);\n        });\n      }\n    };\n\n    var dependencies = lang_dependencies[lang];\n\n    if (dependencies && dependencies.length) {\n      loadLanguages(dependencies, load);\n    } else {\n      load();\n    }\n  };\n  /**\n   * Runs all success callbacks for this language.\n   * @param {string} lang\n   */\n\n\n  var languageSuccess = function (lang) {\n    if (lang_data[lang] && lang_data[lang].success_callbacks && lang_data[lang].success_callbacks.length) {\n      lang_data[lang].success_callbacks.forEach(function (f) {\n        f(lang);\n      });\n    }\n  };\n  /**\n   * Runs all error callbacks for this language.\n   * @param {string} lang\n   */\n\n\n  var languageError = function (lang) {\n    if (lang_data[lang] && lang_data[lang].error_callbacks && lang_data[lang].error_callbacks.length) {\n      lang_data[lang].error_callbacks.forEach(function (f) {\n        f(lang);\n      });\n    }\n  };\n\n  Prism.hooks.add('complete', function (env) {\n    if (env.element && env.language && !env.grammar) {\n      if (env.language !== ignored_language) {\n        registerElement(env.language, env.element);\n      }\n    }\n  });\n})();\n\n(function () {\n  if (typeof self === 'undefined' || !self.Prism || !self.document || !Prism.languages.markup) {\n    return;\n  }\n\n  Prism.plugins.UnescapedMarkup = true;\n  Prism.hooks.add('before-highlightall', function (env) {\n    env.selector += \", [class*='lang-'] script[type='text/plain'], [class*='language-'] script[type='text/plain']\" + \", script[type='text/plain'][class*='lang-'], script[type='text/plain'][class*='language-']\";\n  });\n  Prism.hooks.add('before-sanity-check', function (env) {\n    if ((env.element.matches || env.element.msMatchesSelector).call(env.element, \"script[type='text/plain']\")) {\n      var code = document.createElement(\"code\");\n      var pre = document.createElement(\"pre\");\n      pre.className = code.className = env.element.className;\n\n      if (env.element.dataset) {\n        Object.keys(env.element.dataset).forEach(function (key) {\n          if (Object.prototype.hasOwnProperty.call(env.element.dataset, key)) {\n            pre.dataset[key] = env.element.dataset[key];\n          }\n        });\n      }\n\n      env.code = env.code.replace(/&lt;\\/script(>|&gt;)/gi, \"</scri\" + \"pt>\");\n      code.textContent = env.code;\n      pre.appendChild(code);\n      env.element.parentNode.replaceChild(pre, env.element);\n      env.element = code;\n      return;\n    }\n\n    var pre = env.element.parentNode;\n\n    if (!env.code && pre && pre.nodeName.toLowerCase() == 'pre' && env.element.childNodes.length && env.element.childNodes[0].nodeName == \"#comment\") {\n      env.element.textContent = env.code = env.element.childNodes[0].textContent;\n    }\n  });\n})();\n\n(function () {\n  if (typeof self === 'undefined' || !self.Prism || !self.document) {\n    return;\n  }\n\n  var clsReg = /(?:^|\\s)command-line(?:\\s|$)/;\n  Prism.hooks.add('before-highlight', function (env) {\n    var vars = env.vars = env.vars || {};\n    var commandLine = vars['command-line'] = vars['command-line'] || {};\n\n    if (commandLine.complete || !env.code) {\n      commandLine.complete = true;\n      return;\n    } // Works only for <code> wrapped inside <pre> (not inline).\n\n\n    var pre = env.element.parentNode;\n\n    if (!pre || !/pre/i.test(pre.nodeName) || // Abort only if neither the <pre> nor the <code> have the class\n    !clsReg.test(pre.className) && !clsReg.test(env.element.className)) {\n      commandLine.complete = true;\n      return;\n    }\n\n    if (env.element.querySelector('.command-line-prompt')) {\n      // Abort if prompt already exists.\n      commandLine.complete = true;\n      return;\n    }\n\n    var codeLines = env.code.split('\\n');\n    commandLine.numberOfLines = codeLines.length;\n    var outputLines = commandLine.outputLines = [];\n    var outputSections = pre.getAttribute('data-output');\n    var outputFilter = pre.getAttribute('data-filter-output');\n\n    if (outputSections || outputSections === '') {\n      // The user specified the output lines. -- cwells\n      outputSections = outputSections.split(',');\n\n      for (var i = 0; i < outputSections.length; i++) {\n        // Parse the output sections into start/end ranges. -- cwells\n        var range = outputSections[i].split('-');\n        var outputStart = parseInt(range[0], 10);\n        var outputEnd = range.length === 2 ? parseInt(range[1], 10) : outputStart;\n\n        if (!isNaN(outputStart) && !isNaN(outputEnd)) {\n          if (outputStart < 1) {\n            outputStart = 1;\n          }\n\n          if (outputEnd > codeLines.length) {\n            outputEnd = codeLines.length;\n          } // Convert start and end to 0-based to simplify the arrays. -- cwells\n\n\n          outputStart--;\n          outputEnd--; // Save the output line in an array and clear it in the code so it's not highlighted. -- cwells\n\n          for (var j = outputStart; j <= outputEnd; j++) {\n            outputLines[j] = codeLines[j];\n            codeLines[j] = '';\n          }\n        }\n      }\n    } else if (outputFilter) {\n      // Treat lines beginning with this string as output. -- cwells\n      for (var i = 0; i < codeLines.length; i++) {\n        if (codeLines[i].indexOf(outputFilter) === 0) {\n          // This line is output. -- cwells\n          outputLines[i] = codeLines[i].slice(outputFilter.length);\n          codeLines[i] = '';\n        }\n      }\n    }\n\n    env.code = codeLines.join('\\n');\n  });\n  Prism.hooks.add('before-insert', function (env) {\n    var vars = env.vars = env.vars || {};\n    var commandLine = vars['command-line'] = vars['command-line'] || {};\n\n    if (commandLine.complete) {\n      return;\n    } // Reinsert the output lines into the highlighted code. -- cwells\n\n\n    var codeLines = env.highlightedCode.split('\\n');\n\n    for (var i = 0; i < commandLine.outputLines.length; i++) {\n      if (commandLine.outputLines.hasOwnProperty(i)) {\n        codeLines[i] = commandLine.outputLines[i];\n      }\n    }\n\n    env.highlightedCode = codeLines.join('\\n');\n  });\n  Prism.hooks.add('complete', function (env) {\n    var vars = env.vars = env.vars || {};\n    var commandLine = vars['command-line'] = vars['command-line'] || {};\n\n    if (commandLine.complete) {\n      return;\n    }\n\n    var pre = env.element.parentNode;\n\n    if (clsReg.test(env.element.className)) {\n      // Remove the class \"command-line\" from the <code>\n      env.element.className = env.element.className.replace(clsReg, ' ');\n    }\n\n    if (!clsReg.test(pre.className)) {\n      // Add the class \"command-line\" to the <pre>\n      pre.className += ' command-line';\n    }\n\n    var getAttribute = function (key, defaultValue) {\n      return (pre.getAttribute(key) || defaultValue).replace(/\"/g, '&quot');\n    }; // Create the \"rows\" that will become the command-line prompts. -- cwells\n\n\n    var promptLines = new Array(commandLine.numberOfLines + 1);\n    var promptText = getAttribute('data-prompt', '');\n\n    if (promptText !== '') {\n      promptLines = promptLines.join('<span data-prompt=\"' + promptText + '\"></span>');\n    } else {\n      var user = getAttribute('data-user', 'user');\n      var host = getAttribute('data-host', 'localhost');\n      promptLines = promptLines.join('<span data-user=\"' + user + '\" data-host=\"' + host + '\"></span>');\n    } // Create the wrapper element. -- cwells\n\n\n    var prompt = document.createElement('span');\n    prompt.className = 'command-line-prompt';\n    prompt.innerHTML = promptLines; // Remove the prompt from the output lines. -- cwells\n\n    for (var i = 0; i < commandLine.outputLines.length; i++) {\n      if (commandLine.outputLines.hasOwnProperty(i)) {\n        var node = prompt.children[i];\n        node.removeAttribute('data-user');\n        node.removeAttribute('data-host');\n        node.removeAttribute('data-prompt');\n      }\n    }\n\n    env.element.insertBefore(prompt, env.element.firstChild);\n    commandLine.complete = true;\n  });\n})();\n\n(function () {\n  var assign = Object.assign || function (obj1, obj2) {\n    for (var name in obj2) {\n      if (obj2.hasOwnProperty(name)) obj1[name] = obj2[name];\n    }\n\n    return obj1;\n  };\n\n  function NormalizeWhitespace(defaults) {\n    this.defaults = assign({}, defaults);\n  }\n\n  function toCamelCase(value) {\n    return value.replace(/-(\\w)/g, function (match, firstChar) {\n      return firstChar.toUpperCase();\n    });\n  }\n\n  function tabLen(str) {\n    var res = 0;\n\n    for (var i = 0; i < str.length; ++i) {\n      if (str.charCodeAt(i) == '\\t'.charCodeAt(0)) res += 3;\n    }\n\n    return str.length + res;\n  }\n\n  NormalizeWhitespace.prototype = {\n    setDefaults: function (defaults) {\n      this.defaults = assign(this.defaults, defaults);\n    },\n    normalize: function (input, settings) {\n      settings = assign(this.defaults, settings);\n\n      for (var name in settings) {\n        var methodName = toCamelCase(name);\n\n        if (name !== \"normalize\" && methodName !== 'setDefaults' && settings[name] && this[methodName]) {\n          input = this[methodName].call(this, input, settings[name]);\n        }\n      }\n\n      return input;\n    },\n\n    /*\n     * Normalization methods\n     */\n    leftTrim: function (input) {\n      return input.replace(/^\\s+/, '');\n    },\n    rightTrim: function (input) {\n      return input.replace(/\\s+$/, '');\n    },\n    tabsToSpaces: function (input, spaces) {\n      spaces = spaces | 0 || 4;\n      return input.replace(/\\t/g, new Array(++spaces).join(' '));\n    },\n    spacesToTabs: function (input, spaces) {\n      spaces = spaces | 0 || 4;\n      return input.replace(RegExp(' {' + spaces + '}', 'g'), '\\t');\n    },\n    removeTrailing: function (input) {\n      return input.replace(/\\s*?$/gm, '');\n    },\n    // Support for deprecated plugin remove-initial-line-feed\n    removeInitialLineFeed: function (input) {\n      return input.replace(/^(?:\\r?\\n|\\r)/, '');\n    },\n    removeIndent: function (input) {\n      var indents = input.match(/^[^\\S\\n\\r]*(?=\\S)/gm);\n      if (!indents || !indents[0].length) return input;\n      indents.sort(function (a, b) {\n        return a.length - b.length;\n      });\n      if (!indents[0].length) return input;\n      return input.replace(RegExp('^' + indents[0], 'gm'), '');\n    },\n    indent: function (input, tabs) {\n      return input.replace(/^[^\\S\\n\\r]*(?=\\S)/gm, new Array(++tabs).join('\\t') + '$&');\n    },\n    breakLines: function (input, characters) {\n      characters = characters === true ? 80 : characters | 0 || 80;\n      var lines = input.split('\\n');\n\n      for (var i = 0; i < lines.length; ++i) {\n        if (tabLen(lines[i]) <= characters) continue;\n        var line = lines[i].split(/(\\s+)/g),\n            len = 0;\n\n        for (var j = 0; j < line.length; ++j) {\n          var tl = tabLen(line[j]);\n          len += tl;\n\n          if (len > characters) {\n            line[j] = '\\n' + line[j];\n            len = tl;\n          }\n        }\n\n        lines[i] = line.join('');\n      }\n\n      return lines.join('\\n');\n    }\n  }; // Support node modules\n\n  if ( true && module.exports) {\n    module.exports = NormalizeWhitespace;\n  } // Exit if prism is not loaded\n\n\n  if (typeof Prism === 'undefined') {\n    return;\n  }\n\n  Prism.plugins.NormalizeWhitespace = new NormalizeWhitespace({\n    'remove-trailing': true,\n    'remove-indent': true,\n    'left-trim': true,\n    'right-trim': true\n    /*'break-lines': 80,\n    'indent': 2,\n    'remove-initial-line-feed': false,\n    'tabs-to-spaces': 4,\n    'spaces-to-tabs': 4*/\n\n  });\n  Prism.hooks.add('before-sanity-check', function (env) {\n    var Normalizer = Prism.plugins.NormalizeWhitespace; // Check settings\n\n    if (env.settings && env.settings['whitespace-normalization'] === false) {\n      return;\n    } // Simple mode if there is no env.element\n\n\n    if ((!env.element || !env.element.parentNode) && env.code) {\n      env.code = Normalizer.normalize(env.code, env.settings);\n      return;\n    } // Normal mode\n\n\n    var pre = env.element.parentNode;\n    var clsReg = /(?:^|\\s)no-whitespace-normalization(?:\\s|$)/;\n    if (!env.code || !pre || pre.nodeName.toLowerCase() !== 'pre' || clsReg.test(pre.className) || clsReg.test(env.element.className)) return;\n    var children = pre.childNodes,\n        before = '',\n        after = '',\n        codeFound = false; // Move surrounding whitespace from the <pre> tag into the <code> tag\n\n    for (var i = 0; i < children.length; ++i) {\n      var node = children[i];\n\n      if (node == env.element) {\n        codeFound = true;\n      } else if (node.nodeName === \"#text\") {\n        if (codeFound) {\n          after += node.nodeValue;\n        } else {\n          before += node.nodeValue;\n        }\n\n        pre.removeChild(node);\n        --i;\n      }\n    }\n\n    if (!env.element.children.length || !Prism.plugins.KeepMarkup) {\n      env.code = before + env.code + after;\n      env.code = Normalizer.normalize(env.code, env.settings);\n    } else {\n      // Preserve markup for keep-markup plugin\n      var html = before + env.element.innerHTML + after;\n      env.element.innerHTML = Normalizer.normalize(html, env.settings);\n      env.code = env.element.textContent;\n    }\n  });\n})();\n\n(function (self, document) {\n  if (typeof self === 'undefined' || !self.Prism || !self.document || !document.createRange) {\n    return;\n  }\n\n  Prism.plugins.KeepMarkup = true;\n  Prism.hooks.add('before-highlight', function (env) {\n    if (!env.element.children.length) {\n      return;\n    }\n\n    var pos = 0;\n    var data = [];\n\n    var f = function (elt, baseNode) {\n      var o = {};\n\n      if (!baseNode) {\n        // Clone the original tag to keep all attributes\n        o.clone = elt.cloneNode(false);\n        o.posOpen = pos;\n        data.push(o);\n      }\n\n      for (var i = 0, l = elt.childNodes.length; i < l; i++) {\n        var child = elt.childNodes[i];\n\n        if (child.nodeType === 1) {\n          // element\n          f(child);\n        } else if (child.nodeType === 3) {\n          // text\n          pos += child.data.length;\n        }\n      }\n\n      if (!baseNode) {\n        o.posClose = pos;\n      }\n    };\n\n    f(env.element, true);\n\n    if (data && data.length) {\n      // data is an array of all existing tags\n      env.keepMarkup = data;\n    }\n  });\n  Prism.hooks.add('after-highlight', function (env) {\n    if (env.keepMarkup && env.keepMarkup.length) {\n      var walk = function (elt, nodeState) {\n        for (var i = 0, l = elt.childNodes.length; i < l; i++) {\n          var child = elt.childNodes[i];\n\n          if (child.nodeType === 1) {\n            // element\n            if (!walk(child, nodeState)) {\n              return false;\n            }\n          } else if (child.nodeType === 3) {\n            // text\n            if (!nodeState.nodeStart && nodeState.pos + child.data.length > nodeState.node.posOpen) {\n              // We found the start position\n              nodeState.nodeStart = child;\n              nodeState.nodeStartPos = nodeState.node.posOpen - nodeState.pos;\n            }\n\n            if (nodeState.nodeStart && nodeState.pos + child.data.length >= nodeState.node.posClose) {\n              // We found the end position\n              nodeState.nodeEnd = child;\n              nodeState.nodeEndPos = nodeState.node.posClose - nodeState.pos;\n            }\n\n            nodeState.pos += child.data.length;\n          }\n\n          if (nodeState.nodeStart && nodeState.nodeEnd) {\n            // Select the range and wrap it with the clone\n            var range = document.createRange();\n            range.setStart(nodeState.nodeStart, nodeState.nodeStartPos);\n            range.setEnd(nodeState.nodeEnd, nodeState.nodeEndPos);\n            nodeState.node.clone.appendChild(range.extractContents());\n            range.insertNode(nodeState.node.clone);\n            range.detach(); // Process is over\n\n            return false;\n          }\n        }\n\n        return true;\n      }; // For each tag, we walk the DOM to reinsert it\n\n\n      env.keepMarkup.forEach(function (node) {\n        walk(env.element, {\n          node: node,\n          pos: 0\n        });\n      }); // Store new highlightedCode for later hooks calls\n\n      env.highlightedCode = env.element.innerHTML;\n    }\n  });\n})(self, document);\n\n(function () {\n  if (typeof self === 'undefined' || !self.Prism || !self.document) {\n    return;\n  }\n\n  if (!Prism.plugins.toolbar) {\n    console.warn('Show Languages plugin loaded before Toolbar plugin.');\n    return;\n  } // The languages map is built automatically with gulp\n\n\n  var Languages =\n  /*languages_placeholder[*/\n  {\n    \"html\": \"HTML\",\n    \"xml\": \"XML\",\n    \"svg\": \"SVG\",\n    \"mathml\": \"MathML\",\n    \"css\": \"CSS\",\n    \"clike\": \"C-like\",\n    \"js\": \"JavaScript\",\n    \"abap\": \"ABAP\",\n    \"abnf\": \"Augmented Backus–Naur form\",\n    \"apacheconf\": \"Apache Configuration\",\n    \"apl\": \"APL\",\n    \"arff\": \"ARFF\",\n    \"asciidoc\": \"AsciiDoc\",\n    \"adoc\": \"AsciiDoc\",\n    \"asm6502\": \"6502 Assembly\",\n    \"aspnet\": \"ASP.NET (C#)\",\n    \"autohotkey\": \"AutoHotkey\",\n    \"autoit\": \"AutoIt\",\n    \"shell\": \"Bash\",\n    \"basic\": \"BASIC\",\n    \"bnf\": \"Backus–Naur form\",\n    \"rbnf\": \"Routing Backus–Naur form\",\n    \"csharp\": \"C#\",\n    \"dotnet\": \"C#\",\n    \"cpp\": \"C++\",\n    \"cil\": \"CIL\",\n    \"coffee\": \"CoffeeScript\",\n    \"cmake\": \"CMake\",\n    \"csp\": \"Content-Security-Policy\",\n    \"css-extras\": \"CSS Extras\",\n    \"django\": \"Django/Jinja2\",\n    \"jinja2\": \"Django/Jinja2\",\n    \"dockerfile\": \"Docker\",\n    \"ebnf\": \"Extended Backus–Naur form\",\n    \"ejs\": \"EJS\",\n    \"erb\": \"ERB\",\n    \"fsharp\": \"F#\",\n    \"gcode\": \"G-code\",\n    \"gedcom\": \"GEDCOM\",\n    \"glsl\": \"GLSL\",\n    \"gml\": \"GameMaker Language\",\n    \"gamemakerlanguage\": \"GameMaker Language\",\n    \"graphql\": \"GraphQL\",\n    \"hs\": \"Haskell\",\n    \"hcl\": \"HCL\",\n    \"http\": \"HTTP\",\n    \"hpkp\": \"HTTP Public-Key-Pins\",\n    \"hsts\": \"HTTP Strict-Transport-Security\",\n    \"ichigojam\": \"IchigoJam\",\n    \"inform7\": \"Inform 7\",\n    \"javadoc\": \"JavaDoc\",\n    \"javadoclike\": \"JavaDoc-like\",\n    \"javastacktrace\": \"Java stack trace\",\n    \"jsdoc\": \"JSDoc\",\n    \"js-extras\": \"JS Extras\",\n    \"json\": \"JSON\",\n    \"jsonp\": \"JSONP\",\n    \"json5\": \"JSON5\",\n    \"latex\": \"LaTeX\",\n    \"emacs\": \"Lisp\",\n    \"elisp\": \"Lisp\",\n    \"emacs-lisp\": \"Lisp\",\n    \"lolcode\": \"LOLCODE\",\n    \"md\": \"Markdown\",\n    \"markup-templating\": \"Markup templating\",\n    \"matlab\": \"MATLAB\",\n    \"mel\": \"MEL\",\n    \"n1ql\": \"N1QL\",\n    \"n4js\": \"N4JS\",\n    \"n4jsd\": \"N4JS\",\n    \"nand2tetris-hdl\": \"Nand To Tetris HDL\",\n    \"nasm\": \"NASM\",\n    \"nginx\": \"nginx\",\n    \"nsis\": \"NSIS\",\n    \"objectivec\": \"Objective-C\",\n    \"ocaml\": \"OCaml\",\n    \"opencl\": \"OpenCL\",\n    \"parigp\": \"PARI/GP\",\n    \"objectpascal\": \"Object Pascal\",\n    \"php\": \"PHP\",\n    \"phpdoc\": \"PHPDoc\",\n    \"php-extras\": \"PHP Extras\",\n    \"plsql\": \"PL/SQL\",\n    \"powershell\": \"PowerShell\",\n    \"properties\": \".properties\",\n    \"protobuf\": \"Protocol Buffers\",\n    \"py\": \"Python\",\n    \"q\": \"Q (kdb+ database)\",\n    \"jsx\": \"React JSX\",\n    \"tsx\": \"React TSX\",\n    \"renpy\": \"Ren'py\",\n    \"rest\": \"reST (reStructuredText)\",\n    \"rb\": \"Ruby\",\n    \"sas\": \"SAS\",\n    \"sass\": \"Sass (Sass)\",\n    \"scss\": \"Sass (Scss)\",\n    \"sql\": \"SQL\",\n    \"soy\": \"Soy (Closure Template)\",\n    \"tap\": \"TAP\",\n    \"toml\": \"TOML\",\n    \"tt2\": \"Template Toolkit 2\",\n    \"ts\": \"TypeScript\",\n    \"t4-cs\": \"T4 Text Templates (C#)\",\n    \"t4\": \"T4 Text Templates (C#)\",\n    \"t4-vb\": \"T4 Text Templates (VB)\",\n    \"t4-templating\": \"T4 templating\",\n    \"vbnet\": \"VB.Net\",\n    \"vhdl\": \"VHDL\",\n    \"vim\": \"vim\",\n    \"visual-basic\": \"Visual Basic\",\n    \"vb\": \"Visual Basic\",\n    \"wasm\": \"WebAssembly\",\n    \"wiki\": \"Wiki markup\",\n    \"xeoracube\": \"XeoraCube\",\n    \"xojo\": \"Xojo (REALbasic)\",\n    \"xquery\": \"XQuery\",\n    \"yaml\": \"YAML\",\n    \"yml\": \"YAML\"\n    /*]*/\n\n  };\n  Prism.plugins.toolbar.registerButton('show-language', function (env) {\n    var pre = env.element.parentNode;\n\n    if (!pre || !/pre/i.test(pre.nodeName)) {\n      return;\n    }\n    /**\n     * Tries to guess the name of a language given its id.\n     *\n     * @param {string} id The language id.\n     * @returns {string}\n     */\n\n\n    function guessTitle(id) {\n      if (!id) {\n        return id;\n      }\n\n      return (id.substring(0, 1).toUpperCase() + id.substring(1)).replace(/s(?=cript)/, 'S');\n    }\n\n    var language = pre.getAttribute('data-language') || Languages[env.language] || guessTitle(env.language);\n\n    if (!language) {\n      return;\n    }\n\n    var element = document.createElement('span');\n    element.textContent = language;\n    return element;\n  });\n})();\n\n(function () {\n  if (typeof self === 'undefined' || !self.Prism || !self.document) {\n    return;\n  }\n\n  if (!Prism.plugins.toolbar) {\n    console.warn('Copy to Clipboard plugin loaded before Toolbar plugin.');\n    return;\n  }\n\n  var ClipboardJS = window.ClipboardJS || undefined;\n\n  if (!ClipboardJS && \"function\" === 'function') {\n    ClipboardJS = __webpack_require__(/*! clipboard */ \"./node_modules/clipboard/dist/clipboard.js\");\n  }\n\n  var callbacks = [];\n\n  if (!ClipboardJS) {\n    var script = document.createElement('script');\n    var head = document.querySelector('head');\n\n    script.onload = function () {\n      ClipboardJS = window.ClipboardJS;\n\n      if (ClipboardJS) {\n        while (callbacks.length) {\n          callbacks.pop()();\n        }\n      }\n    };\n\n    script.src = 'https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.0/clipboard.min.js';\n    head.appendChild(script);\n  }\n\n  Prism.plugins.toolbar.registerButton('copy-to-clipboard', function (env) {\n    var linkCopy = document.createElement('a');\n    linkCopy.textContent = 'Copy';\n\n    if (!ClipboardJS) {\n      callbacks.push(registerClipboard);\n    } else {\n      registerClipboard();\n    }\n\n    return linkCopy;\n\n    function registerClipboard() {\n      var clip = new ClipboardJS(linkCopy, {\n        'text': function () {\n          return env.code;\n        }\n      });\n      clip.on('success', function () {\n        linkCopy.textContent = 'Copied!';\n        resetText();\n      });\n      clip.on('error', function () {\n        linkCopy.textContent = 'Press Ctrl+C to copy';\n        resetText();\n      });\n    }\n\n    function resetText() {\n      setTimeout(function () {\n        linkCopy.textContent = 'Copy';\n      }, 5000);\n    }\n  });\n})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./HTML Manual Repository/public/js/prism.js\n");

/***/ }),

/***/ "./HTML Manual Repository/public/js/prism.min.js":
/*!*******************************************************!*\
  !*** ./HTML Manual Repository/public/js/prism.min.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var _self = \"undefined\" != typeof window ? window : \"undefined\" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? self : {},\n    Prism = function (e) {\n  var t = /\\blang(?:uage)?-([\\w-]+)\\b/i,\n      n = 0,\n      a = {\n    manual: e.Prism && e.Prism.manual,\n    disableWorkerMessageHandler: e.Prism && e.Prism.disableWorkerMessageHandler,\n    util: {\n      encode: function (e) {\n        return e instanceof i ? new i(e.type, a.util.encode(e.content), e.alias) : Array.isArray(e) ? e.map(a.util.encode) : e.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\\u00a0/g, \" \");\n      },\n      type: function (e) {\n        return Object.prototype.toString.call(e).slice(8, -1);\n      },\n      objId: function (e) {\n        return e.__id || Object.defineProperty(e, \"__id\", {\n          value: ++n\n        }), e.__id;\n      },\n      clone: function e(t, n) {\n        var i,\n            r,\n            o = a.util.type(t);\n\n        switch (n = n || {}, o) {\n          case \"Object\":\n            if (r = a.util.objId(t), n[r]) return n[r];\n\n            for (var s in i = {}, n[r] = i, t) t.hasOwnProperty(s) && (i[s] = e(t[s], n));\n\n            return i;\n\n          case \"Array\":\n            return r = a.util.objId(t), n[r] ? n[r] : (i = [], n[r] = i, t.forEach(function (t, a) {\n              i[a] = e(t, n);\n            }), i);\n\n          default:\n            return t;\n        }\n      }\n    },\n    languages: {\n      extend: function (e, t) {\n        var n = a.util.clone(a.languages[e]);\n\n        for (var i in t) n[i] = t[i];\n\n        return n;\n      },\n      insertBefore: function (e, t, n, i) {\n        var r = (i = i || a.languages)[e],\n            o = {};\n\n        for (var s in r) if (r.hasOwnProperty(s)) {\n          if (s == t) for (var l in n) n.hasOwnProperty(l) && (o[l] = n[l]);\n          n.hasOwnProperty(s) || (o[s] = r[s]);\n        }\n\n        var d = i[e];\n        return i[e] = o, a.languages.DFS(a.languages, function (t, n) {\n          n === d && t != e && (this[t] = o);\n        }), o;\n      },\n      DFS: function e(t, n, i, r) {\n        r = r || {};\n        var o = a.util.objId;\n\n        for (var s in t) if (t.hasOwnProperty(s)) {\n          n.call(t, s, t[s], i || s);\n          var l = t[s],\n              d = a.util.type(l);\n          \"Object\" !== d || r[o(l)] ? \"Array\" !== d || r[o(l)] || (r[o(l)] = !0, e(l, n, s, r)) : (r[o(l)] = !0, e(l, n, null, r));\n        }\n      }\n    },\n    plugins: {},\n    highlightAll: function (e, t) {\n      a.highlightAllUnder(document, e, t);\n    },\n    highlightAllUnder: function (e, t, n) {\n      var i = {\n        callback: n,\n        selector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n      };\n      a.hooks.run(\"before-highlightall\", i);\n\n      for (var r, o = i.elements || e.querySelectorAll(i.selector), s = 0; r = o[s++];) a.highlightElement(r, !0 === t, i.callback);\n    },\n    highlightElement: function (n, i, r) {\n      for (var o, s, l = n; l && !t.test(l.className);) l = l.parentNode;\n\n      l && (o = (l.className.match(t) || [, \"\"])[1].toLowerCase(), s = a.languages[o]), n.className = n.className.replace(t, \"\").replace(/\\s+/g, \" \") + \" language-\" + o, n.parentNode && (l = n.parentNode, /pre/i.test(l.nodeName) && (l.className = l.className.replace(t, \"\").replace(/\\s+/g, \" \") + \" language-\" + o));\n\n      var d = {\n        element: n,\n        language: o,\n        grammar: s,\n        code: n.textContent\n      },\n          c = function (e) {\n        d.highlightedCode = e, a.hooks.run(\"before-insert\", d), d.element.innerHTML = d.highlightedCode, a.hooks.run(\"after-highlight\", d), a.hooks.run(\"complete\", d), r && r.call(d.element);\n      };\n\n      if (a.hooks.run(\"before-sanity-check\", d), d.code) {\n        if (a.hooks.run(\"before-highlight\", d), d.grammar) {\n          if (i && e.Worker) {\n            var p = new Worker(a.filename);\n            p.onmessage = function (e) {\n              c(e.data);\n            }, p.postMessage(JSON.stringify({\n              language: d.language,\n              code: d.code,\n              immediateClose: !0\n            }));\n          } else c(a.highlight(d.code, d.grammar, d.language));\n        } else c(a.util.encode(d.code));\n      } else a.hooks.run(\"complete\", d);\n    },\n    highlight: function (e, t, n) {\n      var r = {\n        code: e,\n        grammar: t,\n        language: n\n      };\n      return a.hooks.run(\"before-tokenize\", r), r.tokens = a.tokenize(r.code, r.grammar), a.hooks.run(\"after-tokenize\", r), i.stringify(a.util.encode(r.tokens), r.language);\n    },\n    matchGrammar: function (e, t, n, r, o, s, l) {\n      for (var d in n) if (n.hasOwnProperty(d) && n[d]) {\n        if (d == l) return;\n        var c = n[d];\n        c = \"Array\" === a.util.type(c) ? c : [c];\n\n        for (var p = 0; p < c.length; ++p) {\n          var u = c[p],\n              m = u.inside,\n              g = !!u.lookbehind,\n              b = !!u.greedy,\n              E = 0,\n              f = u.alias;\n\n          if (b && !u.pattern.global) {\n            var _ = u.pattern.toString().match(/[imuy]*$/)[0];\n            u.pattern = RegExp(u.pattern.source, _ + \"g\");\n          }\n\n          u = u.pattern || u;\n\n          for (var h = r, S = o; h < t.length; S += t[h].length, ++h) {\n            var T = t[h];\n            if (t.length > e.length) return;\n\n            if (!(T instanceof i)) {\n              if (b && h != t.length - 1) {\n                if (u.lastIndex = S, !(C = u.exec(e))) break;\n\n                for (var A = C.index + (g ? C[1].length : 0), y = C.index + C[0].length, I = h, R = S, N = t.length; I < N && (R < y || !t[I].type && !t[I - 1].greedy); ++I) A >= (R += t[I].length) && (++h, S = R);\n\n                if (t[h] instanceof i) continue;\n                O = I - h, T = e.slice(S, R), C.index -= S;\n              } else {\n                u.lastIndex = 0;\n                var C = u.exec(T),\n                    O = 1;\n              }\n\n              if (C) {\n                g && (E = C[1] ? C[1].length : 0);\n                y = (A = C.index + E) + (C = C[0].slice(E)).length;\n                var v = T.slice(0, A),\n                    k = T.slice(y),\n                    P = [h, O];\n                v && (++h, S += v.length, P.push(v));\n                var w = new i(d, m ? a.tokenize(C, m) : C, f, C, b);\n                if (P.push(w), k && P.push(k), Array.prototype.splice.apply(t, P), 1 != O && a.matchGrammar(e, t, n, h, S, !0, d), s) break;\n              } else if (s) break;\n            }\n          }\n        }\n      }\n    },\n    tokenize: function (e, t) {\n      var n = [e],\n          i = t.rest;\n\n      if (i) {\n        for (var r in i) t[r] = i[r];\n\n        delete t.rest;\n      }\n\n      return a.matchGrammar(e, n, t, 0, 0, !1), n;\n    },\n    hooks: {\n      all: {},\n      add: function (e, t) {\n        var n = a.hooks.all;\n        n[e] = n[e] || [], n[e].push(t);\n      },\n      run: function (e, t) {\n        var n = a.hooks.all[e];\n        if (n && n.length) for (var i, r = 0; i = n[r++];) i(t);\n      }\n    },\n    Token: i\n  };\n\n  function i(e, t, n, a, i) {\n    this.type = e, this.content = t, this.alias = n, this.length = 0 | (a || \"\").length, this.greedy = !!i;\n  }\n\n  if (e.Prism = a, i.stringify = function (e, t) {\n    if (\"string\" == typeof e) return e;\n    if (Array.isArray(e)) return e.map(function (e) {\n      return i.stringify(e, t);\n    }).join(\"\");\n    var n = {\n      type: e.type,\n      content: i.stringify(e.content, t),\n      tag: \"span\",\n      classes: [\"token\", e.type],\n      attributes: {},\n      language: t\n    };\n\n    if (e.alias) {\n      var r = Array.isArray(e.alias) ? e.alias : [e.alias];\n      Array.prototype.push.apply(n.classes, r);\n    }\n\n    a.hooks.run(\"wrap\", n);\n    var o = Object.keys(n.attributes).map(function (e) {\n      return e + '=\"' + (n.attributes[e] || \"\").replace(/\"/g, \"&quot;\") + '\"';\n    }).join(\" \");\n    return \"<\" + n.tag + ' class=\"' + n.classes.join(\" \") + '\"' + (o ? \" \" + o : \"\") + \">\" + n.content + \"</\" + n.tag + \">\";\n  }, !e.document) return e.addEventListener ? (a.disableWorkerMessageHandler || e.addEventListener(\"message\", function (t) {\n    var n = JSON.parse(t.data),\n        i = n.language,\n        r = n.code,\n        o = n.immediateClose;\n    e.postMessage(a.highlight(r, a.languages[i], i)), o && e.close();\n  }, !1), a) : a;\n  var r = document.currentScript || [].slice.call(document.getElementsByTagName(\"script\")).pop();\n  return r && (a.filename = r.src, a.manual || r.hasAttribute(\"data-manual\") || (\"loading\" !== document.readyState ? window.requestAnimationFrame ? window.requestAnimationFrame(a.highlightAll) : window.setTimeout(a.highlightAll, 16) : document.addEventListener(\"DOMContentLoaded\", a.highlightAll))), a;\n}(_self);\n\n true && module.exports && (module.exports = Prism), \"undefined\" != typeof global && (global.Prism = Prism), Prism.languages.markup = {\n  comment: /<!--[\\s\\S]*?-->/,\n  prolog: /<\\?[\\s\\S]+?\\?>/,\n  doctype: /<!DOCTYPE[\\s\\S]+?>/i,\n  cdata: /<!\\[CDATA\\[[\\s\\S]*?]]>/i,\n  tag: {\n    pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/i,\n    greedy: !0,\n    inside: {\n      tag: {\n        pattern: /^<\\/?[^\\s>\\/]+/i,\n        inside: {\n          punctuation: /^<\\/?/,\n          namespace: /^[^\\s>\\/:]+:/\n        }\n      },\n      \"attr-value\": {\n        pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/i,\n        inside: {\n          punctuation: [/^=/, {\n            pattern: /^(\\s*)[\"']|[\"']$/,\n            lookbehind: !0\n          }]\n        }\n      },\n      punctuation: /\\/?>/,\n      \"attr-name\": {\n        pattern: /[^\\s>\\/]+/,\n        inside: {\n          namespace: /^[^\\s>\\/:]+:/\n        }\n      }\n    }\n  },\n  entity: /&#?[\\da-z]{1,8};/i\n}, Prism.languages.markup.tag.inside[\"attr-value\"].inside.entity = Prism.languages.markup.entity, Prism.hooks.add(\"wrap\", function (e) {\n  \"entity\" === e.type && (e.attributes.title = e.content.replace(/&amp;/, \"&\"));\n}), Object.defineProperty(Prism.languages.markup.tag, \"addInlined\", {\n  value: function (e, t) {\n    var n = {};\n    n[\"language-\" + t] = {\n      pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n      lookbehind: !0,\n      inside: Prism.languages[t]\n    }, n.cdata = /^<!\\[CDATA\\[|\\]\\]>$/i;\n    var a = {\n      \"included-cdata\": {\n        pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n        inside: n\n      }\n    };\n    a[\"language-\" + t] = {\n      pattern: /[\\s\\S]+/,\n      inside: Prism.languages[t]\n    };\n    var i = {};\n    i[e] = {\n      pattern: RegExp(/(<__[\\s\\S]*?>)(?:<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\s*|[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, e), \"i\"),\n      lookbehind: !0,\n      greedy: !0,\n      inside: a\n    }, Prism.languages.insertBefore(\"markup\", \"cdata\", i);\n  }\n}), Prism.languages.xml = Prism.languages.extend(\"markup\", {}), Prism.languages.html = Prism.languages.markup, Prism.languages.mathml = Prism.languages.markup, Prism.languages.svg = Prism.languages.markup, function (e) {\n  var t = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n  e.languages.css = {\n    comment: /\\/\\*[\\s\\S]*?\\*\\//,\n    atrule: {\n      pattern: /@[\\w-]+?[\\s\\S]*?(?:;|(?=\\s*\\{))/i,\n      inside: {\n        rule: /@[\\w-]+/\n      }\n    },\n    url: RegExp(\"url\\\\((?:\" + t.source + \"|.*?)\\\\)\", \"i\"),\n    selector: RegExp(\"[^{}\\\\s](?:[^{};\\\"']|\" + t.source + \")*?(?=\\\\s*\\\\{)\"),\n    string: {\n      pattern: t,\n      greedy: !0\n    },\n    property: /[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*(?=\\s*:)/i,\n    important: /!important\\b/i,\n    function: /[-a-z0-9]+(?=\\()/i,\n    punctuation: /[(){};:,]/\n  }, e.languages.css.atrule.inside.rest = e.languages.css;\n  var n = e.languages.markup;\n  n && (n.tag.addInlined(\"style\", \"css\"), e.languages.insertBefore(\"inside\", \"attr-value\", {\n    \"style-attr\": {\n      pattern: /\\s*style=(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/i,\n      inside: {\n        \"attr-name\": {\n          pattern: /^\\s*style/i,\n          inside: n.tag.inside\n        },\n        punctuation: /^\\s*=\\s*['\"]|['\"]\\s*$/,\n        \"attr-value\": {\n          pattern: /.+/i,\n          inside: e.languages.css\n        }\n      },\n      alias: \"language-css\"\n    }\n  }, n.tag));\n}(Prism), Prism.languages.clike = {\n  comment: [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    lookbehind: !0\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: !0,\n    greedy: !0\n  }],\n  string: {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: !0\n  },\n  \"class-name\": {\n    pattern: /((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,\n    lookbehind: !0,\n    inside: {\n      punctuation: /[.\\\\]/\n    }\n  },\n  keyword: /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n  boolean: /\\b(?:true|false)\\b/,\n  function: /\\w+(?=\\()/,\n  number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n  operator: /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,\n  punctuation: /[{}[\\];(),.:]/\n}, Prism.languages.javascript = Prism.languages.extend(\"clike\", {\n  \"class-name\": [Prism.languages.clike[\"class-name\"], {\n    pattern: /(^|[^$\\w\\xA0-\\uFFFF])[_$A-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\.(?:prototype|constructor))/,\n    lookbehind: !0\n  }],\n  keyword: [{\n    pattern: /((?:^|})\\s*)(?:catch|finally)\\b/,\n    lookbehind: !0\n  }, {\n    pattern: /(^|[^.])\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n    lookbehind: !0\n  }],\n  number: /\\b(?:(?:0[xX][\\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+)n?|\\d+n|NaN|Infinity)\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n  function: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n  operator: /-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/\n}), Prism.languages.javascript[\"class-name\"][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/, Prism.languages.insertBefore(\"javascript\", \"keyword\", {\n  regex: {\n    pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyu]{0,5}(?=\\s*($|[\\r\\n,.;})\\]]))/,\n    lookbehind: !0,\n    greedy: !0\n  },\n  \"function-variable\": {\n    pattern: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/,\n    alias: \"function\"\n  },\n  parameter: [{\n    pattern: /(function(?:\\s+[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)?\\s*\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\))/,\n    lookbehind: !0,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=>)/i,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /(\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*=>)/,\n    lookbehind: !0,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\s*)\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*\\{)/,\n    lookbehind: !0,\n    inside: Prism.languages.javascript\n  }],\n  constant: /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n}), Prism.languages.insertBefore(\"javascript\", \"string\", {\n  \"template-string\": {\n    pattern: /`(?:\\\\[\\s\\S]|\\${[^}]+}|[^\\\\`])*`/,\n    greedy: !0,\n    inside: {\n      interpolation: {\n        pattern: /\\${[^}]+}/,\n        inside: {\n          \"interpolation-punctuation\": {\n            pattern: /^\\${|}$/,\n            alias: \"punctuation\"\n          },\n          rest: Prism.languages.javascript\n        }\n      },\n      string: /[\\s\\S]+/\n    }\n  }\n}), Prism.languages.markup && Prism.languages.markup.tag.addInlined(\"script\", \"javascript\"), Prism.languages.js = Prism.languages.javascript, Prism.languages.abap = {\n  comment: /^\\*.*/m,\n  string: /(`|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/m,\n  \"string-template\": {\n    pattern: /([|}])(?:\\\\.|[^\\\\|{\\r\\n])*(?=[|{])/,\n    lookbehind: !0,\n    alias: \"string\"\n  },\n  \"eol-comment\": {\n    pattern: /(^|\\s)\".*/m,\n    lookbehind: !0,\n    alias: \"comment\"\n  },\n  keyword: {\n    pattern: /(\\s|\\.|^)(?:SCIENTIFIC_WITH_LEADING_ZERO|SCALE_PRESERVING_SCIENTIFIC|RMC_COMMUNICATION_FAILURE|END-ENHANCEMENT-SECTION|MULTIPLY-CORRESPONDING|SUBTRACT-CORRESPONDING|VERIFICATION-MESSAGE|DIVIDE-CORRESPONDING|ENHANCEMENT-SECTION|CURRENCY_CONVERSION|RMC_SYSTEM_FAILURE|START-OF-SELECTION|MOVE-CORRESPONDING|RMC_INVALID_STATUS|CUSTOMER-FUNCTION|END-OF-DEFINITION|ENHANCEMENT-POINT|SYSTEM-EXCEPTIONS|ADD-CORRESPONDING|SCALE_PRESERVING|SELECTION-SCREEN|CURSOR-SELECTION|END-OF-SELECTION|LOAD-OF-PROGRAM|SCROLL-BOUNDARY|SELECTION-TABLE|EXCEPTION-TABLE|IMPLEMENTATIONS|PARAMETER-TABLE|RIGHT-JUSTIFIED|UNIT_CONVERSION|AUTHORITY-CHECK|LIST-PROCESSING|SIGN_AS_POSTFIX|COL_BACKGROUND|IMPLEMENTATION|INTERFACE-POOL|TRANSFORMATION|IDENTIFICATION|ENDENHANCEMENT|LINE-SELECTION|INITIALIZATION|LEFT-JUSTIFIED|SELECT-OPTIONS|SELECTION-SETS|COMMUNICATION|CORRESPONDING|DECIMAL_SHIFT|PRINT-CONTROL|VALUE-REQUEST|CHAIN-REQUEST|FUNCTION-POOL|FIELD-SYMBOLS|FUNCTIONALITY|INVERTED-DATE|SELECTION-SET|CLASS-METHODS|OUTPUT-LENGTH|CLASS-CODING|COL_NEGATIVE|ERRORMESSAGE|FIELD-GROUPS|HELP-REQUEST|NO-EXTENSION|NO-TOPOFPAGE|REDEFINITION|DISPLAY-MODE|ENDINTERFACE|EXIT-COMMAND|FIELD-SYMBOL|NO-SCROLLING|SHORTDUMP-ID|ACCESSPOLICY|CLASS-EVENTS|COL_POSITIVE|DECLARATIONS|ENHANCEMENTS|FILTER-TABLE|SWITCHSTATES|SYNTAX-CHECK|TRANSPORTING|ASYNCHRONOUS|SYNTAX-TRACE|TOKENIZATION|USER-COMMAND|WITH-HEADING|ABAP-SOURCE|BREAK-POINT|CHAIN-INPUT|COMPRESSION|FIXED-POINT|NEW-SECTION|NON-UNICODE|OCCURRENCES|RESPONSIBLE|SYSTEM-CALL|TRACE-TABLE|ABBREVIATED|CHAR-TO-HEX|END-OF-FILE|ENDFUNCTION|ENVIRONMENT|ASSOCIATION|COL_HEADING|EDITOR-CALL|END-OF-PAGE|ENGINEERING|IMPLEMENTED|INTENSIFIED|RADIOBUTTON|SYSTEM-EXIT|TOP-OF-PAGE|TRANSACTION|APPLICATION|CONCATENATE|DESTINATION|ENHANCEMENT|IMMEDIATELY|NO-GROUPING|PRECOMPILED|REPLACEMENT|TITLE-LINES|ACTIVATION|BYTE-ORDER|CLASS-POOL|CONNECTION|CONVERSION|DEFINITION|DEPARTMENT|EXPIRATION|INHERITING|MESSAGE-ID|NO-HEADING|PERFORMING|QUEUE-ONLY|RIGHTSPACE|SCIENTIFIC|STATUSINFO|STRUCTURES|SYNCPOINTS|WITH-TITLE|ATTRIBUTES|BOUNDARIES|CLASS-DATA|COL_NORMAL|DD\\/MM\\/YYYY|DESCENDING|INTERFACES|LINE-COUNT|MM\\/DD\\/YYYY|NON-UNIQUE|PRESERVING|SELECTIONS|STATEMENTS|SUBROUTINE|TRUNCATION|TYPE-POOLS|ARITHMETIC|BACKGROUND|ENDPROVIDE|EXCEPTIONS|IDENTIFIER|INDEX-LINE|OBLIGATORY|PARAMETERS|PERCENTAGE|PUSHBUTTON|RESOLUTION|COMPONENTS|DEALLOCATE|DISCONNECT|DUPLICATES|FIRST-LINE|HEAD-LINES|NO-DISPLAY|OCCURRENCE|RESPECTING|RETURNCODE|SUBMATCHES|TRACE-FILE|ASCENDING|BYPASSING|ENDMODULE|EXCEPTION|EXCLUDING|EXPORTING|INCREMENT|MATCHCODE|PARAMETER|PARTIALLY|PREFERRED|REFERENCE|REPLACING|RETURNING|SELECTION|SEPARATED|SPECIFIED|STATEMENT|TIMESTAMP|TYPE-POOL|ACCEPTING|APPENDAGE|ASSIGNING|COL_GROUP|COMPARING|CONSTANTS|DANGEROUS|IMPORTING|INSTANCES|LEFTSPACE|LOG-POINT|QUICKINFO|READ-ONLY|SCROLLING|SQLSCRIPT|STEP-LOOP|TOP-LINES|TRANSLATE|APPENDING|AUTHORITY|CHARACTER|COMPONENT|CONDITION|DIRECTORY|DUPLICATE|MESSAGING|RECEIVING|SUBSCREEN|ACCORDING|COL_TOTAL|END-LINES|ENDMETHOD|ENDSELECT|EXPANDING|EXTENSION|INCLUDING|INFOTYPES|INTERFACE|INTERVALS|LINE-SIZE|PF-STATUS|PROCEDURE|PROTECTED|REQUESTED|RESUMABLE|RIGHTPLUS|SAP-SPOOL|SECONDARY|STRUCTURE|SUBSTRING|TABLEVIEW|NUMOFCHAR|ADJACENT|ANALYSIS|ASSIGNED|BACKWARD|CHANNELS|CHECKBOX|CONTINUE|CRITICAL|DATAINFO|DD\\/MM\\/YY|DURATION|ENCODING|ENDCLASS|FUNCTION|LEFTPLUS|LINEFEED|MM\\/DD\\/YY|OVERFLOW|RECEIVED|SKIPPING|SORTABLE|STANDARD|SUBTRACT|SUPPRESS|TABSTRIP|TITLEBAR|TRUNCATE|UNASSIGN|WHENEVER|ANALYZER|COALESCE|COMMENTS|CONDENSE|DECIMALS|DEFERRED|ENDWHILE|EXPLICIT|KEYWORDS|MESSAGES|POSITION|PRIORITY|RECEIVER|RENAMING|TIMEZONE|TRAILING|ALLOCATE|CENTERED|CIRCULAR|CONTROLS|CURRENCY|DELETING|DESCRIBE|DISTANCE|ENDCATCH|EXPONENT|EXTENDED|GENERATE|IGNORING|INCLUDES|INTERNAL|MAJOR-ID|MODIFIER|NEW-LINE|OPTIONAL|PROPERTY|ROLLBACK|STARTING|SUPPLIED|ABSTRACT|CHANGING|CONTEXTS|CREATING|CUSTOMER|DATABASE|DAYLIGHT|DEFINING|DISTINCT|DIVISION|ENABLING|ENDCHAIN|ESCAPING|HARMLESS|IMPLICIT|INACTIVE|LANGUAGE|MINOR-ID|MULTIPLY|NEW-PAGE|NO-TITLE|POS_HIGH|SEPARATE|TEXTPOOL|TRANSFER|SELECTOR|DBMAXLEN|ITERATOR|SELECTOR|ARCHIVE|BIT-XOR|BYTE-CO|COLLECT|COMMENT|CURRENT|DEFAULT|DISPLAY|ENDFORM|EXTRACT|LEADING|LISTBOX|LOCATOR|MEMBERS|METHODS|NESTING|POS_LOW|PROCESS|PROVIDE|RAISING|RESERVE|SECONDS|SUMMARY|VISIBLE|BETWEEN|BIT-AND|BYTE-CS|CLEANUP|COMPUTE|CONTROL|CONVERT|DATASET|ENDCASE|FORWARD|HEADERS|HOTSPOT|INCLUDE|INVERSE|KEEPING|NO-ZERO|OBJECTS|OVERLAY|PADDING|PATTERN|PROGRAM|REFRESH|SECTION|SUMMING|TESTING|VERSION|WINDOWS|WITHOUT|BIT-NOT|BYTE-CA|BYTE-NA|CASTING|CONTEXT|COUNTRY|DYNAMIC|ENABLED|ENDLOOP|EXECUTE|FRIENDS|HANDLER|HEADING|INITIAL|\\*-INPUT|LOGFILE|MAXIMUM|MINIMUM|NO-GAPS|NO-SIGN|PRAGMAS|PRIMARY|PRIVATE|REDUCED|REPLACE|REQUEST|RESULTS|UNICODE|WARNING|ALIASES|BYTE-CN|BYTE-NS|CALLING|COL_KEY|COLUMNS|CONNECT|ENDEXEC|ENTRIES|EXCLUDE|FILTERS|FURTHER|HELP-ID|LOGICAL|MAPPING|MESSAGE|NAMETAB|OPTIONS|PACKAGE|PERFORM|RECEIVE|STATICS|VARYING|BINDING|CHARLEN|GREATER|XSTRLEN|ACCEPT|APPEND|DETAIL|ELSEIF|ENDING|ENDTRY|FORMAT|FRAMES|GIVING|HASHED|HEADER|IMPORT|INSERT|MARGIN|MODULE|NATIVE|OBJECT|OFFSET|REMOTE|RESUME|SAVING|SIMPLE|SUBMIT|TABBED|TOKENS|UNIQUE|UNPACK|UPDATE|WINDOW|YELLOW|ACTUAL|ASPECT|CENTER|CURSOR|DELETE|DIALOG|DIVIDE|DURING|ERRORS|EVENTS|EXTEND|FILTER|HANDLE|HAVING|IGNORE|LITTLE|MEMORY|NO-GAP|OCCURS|OPTION|PERSON|PLACES|PUBLIC|REDUCE|REPORT|RESULT|SINGLE|SORTED|SWITCH|SYNTAX|TARGET|VALUES|WRITER|ASSERT|BLOCKS|BOUNDS|BUFFER|CHANGE|COLUMN|COMMIT|CONCAT|COPIES|CREATE|DDMMYY|DEFINE|ENDIAN|ESCAPE|EXPAND|KERNEL|LAYOUT|LEGACY|LEVELS|MMDDYY|NUMBER|OUTPUT|RANGES|READER|RETURN|SCREEN|SEARCH|SELECT|SHARED|SOURCE|STABLE|STATIC|SUBKEY|SUFFIX|TABLES|UNWIND|YYMMDD|ASSIGN|BACKUP|BEFORE|BINARY|BIT-OR|BLANKS|CLIENT|CODING|COMMON|DEMAND|DYNPRO|EXCEPT|EXISTS|EXPORT|FIELDS|GLOBAL|GROUPS|LENGTH|LOCALE|MEDIUM|METHOD|MODIFY|NESTED|OTHERS|REJECT|SCROLL|SUPPLY|SYMBOL|ENDFOR|STRLEN|ALIGN|BEGIN|BOUND|ENDAT|ENTRY|EVENT|FINAL|FLUSH|GRANT|INNER|SHORT|USING|WRITE|AFTER|BLACK|BLOCK|CLOCK|COLOR|COUNT|DUMMY|EMPTY|ENDDO|ENDON|GREEN|INDEX|INOUT|LEAVE|LEVEL|LINES|MODIF|ORDER|OUTER|RANGE|RESET|RETRY|RIGHT|SMART|SPLIT|STYLE|TABLE|THROW|UNDER|UNTIL|UPPER|UTF-8|WHERE|ALIAS|BLANK|CLEAR|CLOSE|EXACT|FETCH|FIRST|FOUND|GROUP|LLANG|LOCAL|OTHER|REGEX|SPOOL|TITLE|TYPES|VALID|WHILE|ALPHA|BOXED|CATCH|CHAIN|CHECK|CLASS|COVER|ENDIF|EQUIV|FIELD|FLOOR|FRAME|INPUT|LOWER|MATCH|NODES|PAGES|PRINT|RAISE|ROUND|SHIFT|SPACE|SPOTS|STAMP|STATE|TASKS|TIMES|TRMAC|ULINE|UNION|VALUE|WIDTH|EQUAL|LOG10|TRUNC|BLOB|CASE|CEIL|CLOB|COND|EXIT|FILE|GAPS|HOLD|INCL|INTO|KEEP|KEYS|LAST|LINE|LONG|LPAD|MAIL|MODE|OPEN|PINK|READ|ROWS|TEST|THEN|ZERO|AREA|BACK|BADI|BYTE|CAST|EDIT|EXEC|FAIL|FIND|FKEQ|FONT|FREE|GKEQ|HIDE|INIT|ITNO|LATE|LOOP|MAIN|MARK|MOVE|NEXT|NULL|RISK|ROLE|UNIT|WAIT|ZONE|BASE|CALL|CODE|DATA|DATE|FKGE|GKGE|HIGH|KIND|LEFT|LIST|MASK|MESH|NAME|NODE|PACK|PAGE|POOL|SEND|SIGN|SIZE|SOME|STOP|TASK|TEXT|TIME|USER|VARY|WITH|WORD|BLUE|CONV|COPY|DEEP|ELSE|FORM|FROM|HINT|ICON|JOIN|LIKE|LOAD|ONLY|PART|SCAN|SKIP|SORT|TYPE|UNIX|VIEW|WHEN|WORK|ACOS|ASIN|ATAN|COSH|EACH|FRAC|LESS|RTTI|SINH|SQRT|TANH|AVG|BIT|DIV|ISO|LET|OUT|PAD|SQL|ALL|CI_|CPI|END|LOB|LPI|MAX|MIN|NEW|OLE|RUN|SET|\\?TO|YES|ABS|ADD|AND|BIG|FOR|HDB|JOB|LOW|NOT|SAP|TRY|VIA|XML|ANY|GET|IDS|KEY|MOD|OFF|PUT|RAW|RED|REF|SUM|TAB|XSD|CNT|COS|EXP|LOG|SIN|TAN|XOR|AT|CO|CP|DO|GT|ID|IF|NS|OR|BT|CA|CS|GE|NA|NB|EQ|IN|LT|NE|NO|OF|ON|PF|TO|AS|BY|CN|IS|LE|NP|UP|E|I|M|O|Z|C|X)\\b/i,\n    lookbehind: !0\n  },\n  number: /\\b\\d+\\b/,\n  operator: {\n    pattern: /(\\s)(?:\\*\\*?|<[=>]?|>=?|\\?=|[-+\\/=])(?=\\s)/,\n    lookbehind: !0\n  },\n  \"string-operator\": {\n    pattern: /(\\s)&&?(?=\\s)/,\n    lookbehind: !0,\n    alias: \"keyword\"\n  },\n  \"token-operator\": [{\n    pattern: /(\\w)(?:->?|=>|[~|{}])(?=\\w)/,\n    lookbehind: !0,\n    alias: \"punctuation\"\n  }, {\n    pattern: /[|{}]/,\n    alias: \"punctuation\"\n  }],\n  punctuation: /[,.:()]/\n}, function (e) {\n  var t = \"(?:ALPHA|BIT|CHAR|CR|CRLF|CTL|DIGIT|DQUOTE|HEXDIG|HTAB|LF|LWSP|OCTET|SP|VCHAR|WSP)\";\n  e.languages.abnf = {\n    comment: /;.*/,\n    string: {\n      pattern: /(?:%[is])?\"[^\"\\n\\r]*\"/,\n      greedy: !0,\n      inside: {\n        punctuation: /^%[is]/\n      }\n    },\n    range: {\n      pattern: /%(?:b[01]+-[01]+|d\\d+-\\d+|x[A-F\\d]+-[A-F\\d]+)/i,\n      alias: \"number\"\n    },\n    terminal: {\n      pattern: /%(?:b[01]+(?:\\.[01]+)*|d\\d+(?:\\.\\d+)*|x[A-F\\d]+(?:\\.[A-F\\d]+)*)/i,\n      alias: \"number\"\n    },\n    repetition: {\n      pattern: /(^|[^\\w-])(?:\\d*\\*\\d*|\\d+)/,\n      lookbehind: !0,\n      alias: \"operator\"\n    },\n    definition: {\n      pattern: /(^[ \\t]*)(?:[a-z][\\w-]*|<[^>\\r\\n]*>)(?=\\s*=)/m,\n      lookbehind: !0,\n      alias: \"keyword\",\n      inside: {\n        punctuation: /<|>/\n      }\n    },\n    \"core-rule\": {\n      pattern: RegExp(\"(?:(^|[^<\\\\w-])\" + t + \"|<\" + t + \">)(?![\\\\w-])\", \"i\"),\n      lookbehind: !0,\n      alias: [\"rule\", \"constant\"],\n      inside: {\n        punctuation: /<|>/\n      }\n    },\n    rule: {\n      pattern: /(^|[^<\\w-])[a-z][\\w-]*|<[^>\\r\\n]*>/i,\n      lookbehind: !0,\n      inside: {\n        punctuation: /<|>/\n      }\n    },\n    operator: /=\\/?|\\//,\n    punctuation: /[()\\[\\]]/\n  };\n}(Prism), Prism.languages.actionscript = Prism.languages.extend(\"javascript\", {\n  keyword: /\\b(?:as|break|case|catch|class|const|default|delete|do|else|extends|finally|for|function|if|implements|import|in|instanceof|interface|internal|is|native|new|null|package|private|protected|public|return|super|switch|this|throw|try|typeof|use|var|void|while|with|dynamic|each|final|get|include|namespace|native|override|set|static)\\b/,\n  operator: /\\+\\+|--|(?:[+\\-*\\/%^]|&&?|\\|\\|?|<<?|>>?>?|[!=]=?)=?|[~?@]/\n}), Prism.languages.actionscript[\"class-name\"].alias = \"function\", Prism.languages.markup && Prism.languages.insertBefore(\"actionscript\", \"string\", {\n  xml: {\n    pattern: /(^|[^.])<\\/?\\w+(?:\\s+[^\\s>\\/=]+=(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2)*\\s*\\/?>/,\n    lookbehind: !0,\n    inside: {\n      rest: Prism.languages.markup\n    }\n  }\n}), Prism.languages.ada = {\n  comment: /--.*/,\n  string: /\"(?:\"\"|[^\"\\r\\f\\n])*\"/i,\n  number: [{\n    pattern: /\\b\\d(?:_?\\d)*#[\\dA-F](?:_?[\\dA-F])*(?:\\.[\\dA-F](?:_?[\\dA-F])*)?#(?:E[+-]?\\d(?:_?\\d)*)?/i\n  }, {\n    pattern: /\\b\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:E[+-]?\\d(?:_?\\d)*)?\\b/i\n  }],\n  \"attr-name\": /\\b'\\w+/i,\n  keyword: /\\b(?:abort|abs|abstract|accept|access|aliased|all|and|array|at|begin|body|case|constant|declare|delay|delta|digits|do|else|new|return|elsif|end|entry|exception|exit|for|function|generic|goto|if|in|interface|is|limited|loop|mod|not|null|of|others|out|overriding|package|pragma|private|procedure|protected|raise|range|record|rem|renames|requeue|reverse|select|separate|some|subtype|synchronized|tagged|task|terminate|then|type|until|use|when|while|with|xor)\\b/i,\n  boolean: /\\b(?:true|false)\\b/i,\n  operator: /<[=>]?|>=?|=>?|:=|\\/=?|\\*\\*?|[&+-]/,\n  punctuation: /\\.\\.?|[,;():]/,\n  char: /'.'/,\n  variable: /\\b[a-z](?:[_a-z\\d])*\\b/i\n}, Prism.languages.apacheconf = {\n  comment: /#.*/,\n  \"directive-inline\": {\n    pattern: /(^\\s*)\\b(?:AcceptFilter|AcceptPathInfo|AccessFileName|Action|Add(?:Alt|AltByEncoding|AltByType|Charset|DefaultCharset|Description|Encoding|Handler|Icon|IconByEncoding|IconByType|InputFilter|Language|ModuleInfo|OutputFilter|OutputFilterByType|Type)|Alias|AliasMatch|Allow(?:CONNECT|EncodedSlashes|Methods|Override|OverrideList)?|Anonymous(?:_LogEmail|_MustGiveEmail|_NoUserID|_VerifyEmail)?|AsyncRequestWorkerFactor|Auth(?:BasicAuthoritative|BasicFake|BasicProvider|BasicUseDigestAlgorithm|DBDUserPWQuery|DBDUserRealmQuery|DBMGroupFile|DBMType|DBMUserFile|Digest(?:Algorithm|Domain|NonceLifetime|Provider|Qop|ShmemSize)|Form(?:Authoritative|Body|DisableNoStore|FakeBasicAuth|Location|LoginRequiredLocation|LoginSuccessLocation|LogoutLocation|Method|Mimetype|Password|Provider|SitePassphrase|Size|Username)|GroupFile|LDAP(?:AuthorizePrefix|BindAuthoritative|BindDN|BindPassword|CharsetConfig|CompareAsUser|CompareDNOnServer|DereferenceAliases|GroupAttribute|GroupAttributeIsDN|InitialBindAsUser|InitialBindPattern|MaxSubGroupDepth|RemoteUserAttribute|RemoteUserIsDN|SearchAsUser|SubGroupAttribute|SubGroupClass|Url)|Merging|Name|Type|UserFile|nCache(?:Context|Enable|ProvideFor|SOCache|Timeout)|nzFcgiCheckAuthnProvider|nzFcgiDefineProvider|zDBDLoginToReferer|zDBDQuery|zDBDRedirectQuery|zDBMType|zSendForbiddenOnFailure)|BalancerGrowth|BalancerInherit|BalancerMember|BalancerPersist|BrowserMatch|BrowserMatchNoCase|BufferSize|BufferedLogs|CGIDScriptTimeout|CGIMapExtension|Cache(?:DefaultExpire|DetailHeader|DirLength|DirLevels|Disable|Enable|File|Header|IgnoreCacheControl|IgnoreHeaders|IgnoreNoLastMod|IgnoreQueryString|IgnoreURLSessionIdentifiers|KeyBaseURL|LastModifiedFactor|Lock|LockMaxAge|LockPath|MaxExpire|MaxFileSize|MinExpire|MinFileSize|NegotiatedDocs|QuickHandler|ReadSize|ReadTime|Root|Socache(?:MaxSize|MaxTime|MinTime|ReadSize|ReadTime)?|StaleOnError|StoreExpired|StoreNoStore|StorePrivate)|CharsetDefault|CharsetOptions|CharsetSourceEnc|CheckCaseOnly|CheckSpelling|ChrootDir|ContentDigest|CookieDomain|CookieExpires|CookieName|CookieStyle|CookieTracking|CoreDumpDirectory|CustomLog|DBDExptime|DBDInitSQL|DBDKeep|DBDMax|DBDMin|DBDParams|DBDPersist|DBDPrepareSQL|DBDriver|DTracePrivileges|Dav|DavDepthInfinity|DavGenericLockDB|DavLockDB|DavMinTimeout|DefaultIcon|DefaultLanguage|DefaultRuntimeDir|DefaultType|Define|Deflate(?:BufferSize|CompressionLevel|FilterNote|InflateLimitRequestBody|InflateRatio(?:Burst|Limit)|MemLevel|WindowSize)|Deny|DirectoryCheckHandler|DirectoryIndex|DirectoryIndexRedirect|DirectorySlash|DocumentRoot|DumpIOInput|DumpIOOutput|EnableExceptionHook|EnableMMAP|EnableSendfile|Error|ErrorDocument|ErrorLog|ErrorLogFormat|Example|ExpiresActive|ExpiresByType|ExpiresDefault|ExtFilterDefine|ExtFilterOptions|ExtendedStatus|FallbackResource|FileETag|FilterChain|FilterDeclare|FilterProtocol|FilterProvider|FilterTrace|ForceLanguagePriority|ForceType|ForensicLog|GprofDir|GracefulShutdownTimeout|Group|Header|HeaderName|Heartbeat(?:Address|Listen|MaxServers|Storage)|HostnameLookups|ISAPI(?:AppendLogToErrors|AppendLogToQuery|CacheFile|FakeAsync|LogNotSupported|ReadAheadBuffer)|IdentityCheck|IdentityCheckTimeout|ImapBase|ImapDefault|ImapMenu|Include|IncludeOptional|Index(?:HeadInsert|Ignore|IgnoreReset|Options|OrderDefault|StyleSheet)|InputSed|KeepAlive|KeepAliveTimeout|KeptBodySize|LDAP(?:CacheEntries|CacheTTL|ConnectionPoolTTL|ConnectionTimeout|LibraryDebug|OpCacheEntries|OpCacheTTL|ReferralHopLimit|Referrals|Retries|RetryDelay|SharedCacheFile|SharedCacheSize|Timeout|TrustedClientCert|TrustedGlobalCert|TrustedMode|VerifyServerCert)|LanguagePriority|Limit(?:InternalRecursion|Request(?:Body|FieldSize|Fields|Line)|XMLRequestBody)|Listen|ListenBackLog|LoadFile|LoadModule|LogFormat|LogLevel|LogMessage|LuaAuthzProvider|LuaCodeCache|Lua(?:Hook(?:AccessChecker|AuthChecker|CheckUserID|Fixups|InsertFilter|Log|MapToStorage|TranslateName|TypeChecker)|Inherit|InputFilter|MapHandler|OutputFilter|PackageCPath|PackagePath|QuickHandler|Root|Scope)|MMapFile|Max(?:ConnectionsPerChild|KeepAliveRequests|MemFree|RangeOverlaps|RangeReversals|Ranges|RequestWorkers|SpareServers|SpareThreads|Threads)|MergeTrailers|MetaDir|MetaFiles|MetaSuffix|MimeMagicFile|MinSpareServers|MinSpareThreads|ModMimeUsePathInfo|ModemStandard|MultiviewsMatch|Mutex|NWSSLTrustedCerts|NWSSLUpgradeable|NameVirtualHost|NoProxy|Options|Order|OutputSed|PassEnv|PidFile|PrivilegesMode|Protocol|ProtocolEcho|Proxy(?:AddHeaders|BadHeader|Block|Domain|ErrorOverride|ExpressDBMFile|ExpressDBMType|ExpressEnable|FtpDirCharset|FtpEscapeWildcards|FtpListOnWildcard|HTML(?:BufSize|CharsetOut|DocType|Enable|Events|Extended|Fixups|Interp|Links|Meta|StripComments|URLMap)|IOBufferSize|MaxForwards|Pass(?:Inherit|InterpolateEnv|Match|Reverse|ReverseCookieDomain|ReverseCookiePath)?|PreserveHost|ReceiveBufferSize|Remote|RemoteMatch|Requests|SCGIInternalRedirect|SCGISendfile|Set|SourceAddress|Status|Timeout|Via)|RLimitCPU|RLimitMEM|RLimitNPROC|ReadmeName|ReceiveBufferSize|Redirect|RedirectMatch|RedirectPermanent|RedirectTemp|ReflectorHeader|RemoteIP(?:Header|InternalProxy|InternalProxyList|ProxiesHeader|TrustedProxy|TrustedProxyList)|RemoveCharset|RemoveEncoding|RemoveHandler|RemoveInputFilter|RemoveLanguage|RemoveOutputFilter|RemoveType|RequestHeader|RequestReadTimeout|Require|Rewrite(?:Base|Cond|Engine|Map|Options|Rule)|SSIETag|SSIEndTag|SSIErrorMsg|SSILastModified|SSILegacyExprParser|SSIStartTag|SSITimeFormat|SSIUndefinedEcho|SSL(?:CACertificateFile|CACertificatePath|CADNRequestFile|CADNRequestPath|CARevocationCheck|CARevocationFile|CARevocationPath|CertificateChainFile|CertificateFile|CertificateKeyFile|CipherSuite|Compression|CryptoDevice|Engine|FIPS|HonorCipherOrder|InsecureRenegotiation|OCSP(?:DefaultResponder|Enable|OverrideResponder|ResponderTimeout|ResponseMaxAge|ResponseTimeSkew|UseRequestNonce)|OpenSSLConfCmd|Options|PassPhraseDialog|Protocol|Proxy(?:CACertificateFile|CACertificatePath|CARevocation(?:Check|File|Path)|CheckPeer(?:CN|Expire|Name)|CipherSuite|Engine|MachineCertificate(?:ChainFile|File|Path)|Protocol|Verify|VerifyDepth)|RandomSeed|RenegBufferSize|Require|RequireSSL|SRPUnknownUserSeed|SRPVerifierFile|Session(?:Cache|CacheTimeout|TicketKeyFile|Tickets)|Stapling(?:Cache|ErrorCacheTimeout|FakeTryLater|ForceURL|ResponderTimeout|ResponseMaxAge|ResponseTimeSkew|ReturnResponderErrors|StandardCacheTimeout)|StrictSNIVHostCheck|UseStapling|UserName|VerifyClient|VerifyDepth)|Satisfy|ScoreBoardFile|Script(?:Alias|AliasMatch|InterpreterSource|Log|LogBuffer|LogLength|Sock)?|SecureListen|SeeRequestTail|SendBufferSize|Server(?:Admin|Alias|Limit|Name|Path|Root|Signature|Tokens)|Session(?:Cookie(?:Name|Name2|Remove)|Crypto(?:Cipher|Driver|Passphrase|PassphraseFile)|DBD(?:CookieName|CookieName2|CookieRemove|DeleteLabel|InsertLabel|PerUser|SelectLabel|UpdateLabel)|Env|Exclude|Header|Include|MaxAge)?|SetEnv|SetEnvIf|SetEnvIfExpr|SetEnvIfNoCase|SetHandler|SetInputFilter|SetOutputFilter|StartServers|StartThreads|Substitute|Suexec|SuexecUserGroup|ThreadLimit|ThreadStackSize|ThreadsPerChild|TimeOut|TraceEnable|TransferLog|TypesConfig|UnDefine|UndefMacro|UnsetEnv|Use|UseCanonicalName|UseCanonicalPhysicalPort|User|UserDir|VHostCGIMode|VHostCGIPrivs|VHostGroup|VHostPrivs|VHostSecure|VHostUser|Virtual(?:DocumentRoot|ScriptAlias)(?:IP)?|WatchdogInterval|XBitHack|xml2EncAlias|xml2EncDefault|xml2StartParse)\\b/im,\n    lookbehind: !0,\n    alias: \"property\"\n  },\n  \"directive-block\": {\n    pattern: /<\\/?\\b(?:Auth[nz]ProviderAlias|Directory|DirectoryMatch|Else|ElseIf|Files|FilesMatch|If|IfDefine|IfModule|IfVersion|Limit|LimitExcept|Location|LocationMatch|Macro|Proxy|Require(?:All|Any|None)|VirtualHost)\\b *.*>/i,\n    inside: {\n      \"directive-block\": {\n        pattern: /^<\\/?\\w+/,\n        inside: {\n          punctuation: /^<\\/?/\n        },\n        alias: \"tag\"\n      },\n      \"directive-block-parameter\": {\n        pattern: /.*[^>]/,\n        inside: {\n          punctuation: /:/,\n          string: {\n            pattern: /(\"|').*\\1/,\n            inside: {\n              variable: /[$%]\\{?(?:\\w\\.?[-+:]?)+\\}?/\n            }\n          }\n        },\n        alias: \"attr-value\"\n      },\n      punctuation: />/\n    },\n    alias: \"tag\"\n  },\n  \"directive-flags\": {\n    pattern: /\\[(?:\\w,?)+\\]/,\n    alias: \"keyword\"\n  },\n  string: {\n    pattern: /(\"|').*\\1/,\n    inside: {\n      variable: /[$%]\\{?(?:\\w\\.?[-+:]?)+\\}?/\n    }\n  },\n  variable: /[$%]\\{?(?:\\w\\.?[-+:]?)+\\}?/,\n  regex: /\\^?.*\\$|\\^.*\\$?/\n}, Prism.languages.apl = {\n  comment: /(?:⍝|#[! ]).*$/m,\n  string: {\n    pattern: /'(?:[^'\\r\\n]|'')*'/,\n    greedy: !0\n  },\n  number: /¯?(?:\\d*\\.?\\d+(?:e[+¯]?\\d+)?|¯|∞)(?:j¯?(?:\\d*\\.?\\d+(?:e[+¯]?\\d+)?|¯|∞))?/i,\n  statement: /:[A-Z][a-z][A-Za-z]*\\b/,\n  \"system-function\": {\n    pattern: /⎕[A-Z]+/i,\n    alias: \"function\"\n  },\n  constant: /[⍬⌾#⎕⍞]/,\n  function: /[-+×÷⌈⌊∣|⍳⍸?*⍟○!⌹<≤=>≥≠≡≢∊⍷∪∩~∨∧⍱⍲⍴,⍪⌽⊖⍉↑↓⊂⊃⊆⊇⌷⍋⍒⊤⊥⍕⍎⊣⊢⍁⍂≈⍯↗¤→]/,\n  \"monadic-operator\": {\n    pattern: /[\\\\\\/⌿⍀¨⍨⌶&∥]/,\n    alias: \"operator\"\n  },\n  \"dyadic-operator\": {\n    pattern: /[.⍣⍠⍤∘⌸@⌺]/,\n    alias: \"operator\"\n  },\n  assignment: {\n    pattern: /←/,\n    alias: \"keyword\"\n  },\n  punctuation: /[\\[;\\]()◇⋄]/,\n  dfn: {\n    pattern: /[{}⍺⍵⍶⍹∇⍫:]/,\n    alias: \"builtin\"\n  }\n}, Prism.languages.applescript = {\n  comment: [/\\(\\*(?:\\(\\*[\\s\\S]*?\\*\\)|[\\s\\S])*?\\*\\)/, /--.+/, /#.+/],\n  string: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n  number: /(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e-?\\d+)?\\b/i,\n  operator: [/[&=≠≤≥*+\\-\\/÷^]|[<>]=?/, /\\b(?:(?:start|begin|end)s? with|(?:(?:does not|doesn't) contain|contains?)|(?:is|isn't|is not) (?:in|contained by)|(?:(?:is|isn't|is not) )?(?:greater|less) than(?: or equal)?(?: to)?|(?:(?:does not|doesn't) come|comes) (?:before|after)|(?:is|isn't|is not) equal(?: to)?|(?:(?:does not|doesn't) equal|equals|equal to|isn't|is not)|(?:a )?(?:ref(?: to)?|reference to)|(?:and|or|div|mod|as|not))\\b/],\n  keyword: /\\b(?:about|above|after|against|apart from|around|aside from|at|back|before|beginning|behind|below|beneath|beside|between|but|by|considering|continue|copy|does|eighth|else|end|equal|error|every|exit|false|fifth|first|for|fourth|from|front|get|given|global|if|ignoring|in|instead of|into|is|it|its|last|local|me|middle|my|ninth|of|on|onto|out of|over|prop|property|put|repeat|return|returning|second|set|seventh|since|sixth|some|tell|tenth|that|the|then|third|through|thru|timeout|times|to|transaction|true|try|until|where|while|whose|with|without)\\b/,\n  class: {\n    pattern: /\\b(?:alias|application|boolean|class|constant|date|file|integer|list|number|POSIX file|real|record|reference|RGB color|script|text|centimetres|centimeters|feet|inches|kilometres|kilometers|metres|meters|miles|yards|square feet|square kilometres|square kilometers|square metres|square meters|square miles|square yards|cubic centimetres|cubic centimeters|cubic feet|cubic inches|cubic metres|cubic meters|cubic yards|gallons|litres|liters|quarts|grams|kilograms|ounces|pounds|degrees Celsius|degrees Fahrenheit|degrees Kelvin)\\b/,\n    alias: \"builtin\"\n  },\n  punctuation: /[{}():,¬«»《》]/\n}, Prism.languages.c = Prism.languages.extend(\"clike\", {\n  \"class-name\": {\n    pattern: /(\\b(?:enum|struct)\\s+)\\w+/,\n    lookbehind: !0\n  },\n  keyword: /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\b/,\n  operator: />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/,\n  number: /(?:\\b0x(?:[\\da-f]+\\.?[\\da-f]*|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]*/i\n}), Prism.languages.insertBefore(\"c\", \"string\", {\n  macro: {\n    pattern: /(^\\s*)#\\s*[a-z]+(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n    lookbehind: !0,\n    alias: \"property\",\n    inside: {\n      string: {\n        pattern: /(#\\s*include\\s*)(?:<.+?>|(\"|')(?:\\\\?.)+?\\2)/,\n        lookbehind: !0\n      },\n      directive: {\n        pattern: /(#\\s*)\\b(?:define|defined|elif|else|endif|error|ifdef|ifndef|if|import|include|line|pragma|undef|using)\\b/,\n        lookbehind: !0,\n        alias: \"keyword\"\n      }\n    }\n  },\n  constant: /\\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\\b/\n}), delete Prism.languages.c.boolean, Prism.languages.arff = {\n  comment: /%.*/,\n  string: {\n    pattern: /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: !0\n  },\n  keyword: /@(?:attribute|data|end|relation)\\b/i,\n  number: /\\b\\d+(?:\\.\\d+)?\\b/,\n  punctuation: /[{},]/\n}, function (e) {\n  var t = {\n    pattern: /(^[ \\t]*)\\[(?!\\[)(?:([\"'$`])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\[(?:[^\\]\\\\]|\\\\.)*\\]|[^\\]\\\\]|\\\\.)*\\]/m,\n    lookbehind: !0,\n    inside: {\n      quoted: {\n        pattern: /([$`])(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,\n        inside: {\n          punctuation: /^[$`]|[$`]$/\n        }\n      },\n      interpreted: {\n        pattern: /'(?:[^'\\\\]|\\\\.)*'/,\n        inside: {\n          punctuation: /^'|'$/\n        }\n      },\n      string: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n      variable: /\\w+(?==)/,\n      punctuation: /^\\[|\\]$|,/,\n      operator: /=/,\n      \"attr-value\": /(?!^\\s+$).+/\n    }\n  },\n      n = e.languages.asciidoc = {\n    \"comment-block\": {\n      pattern: /^(\\/{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1/m,\n      alias: \"comment\"\n    },\n    table: {\n      pattern: /^\\|={3,}(?:(?:\\r?\\n|\\r).*)*?(?:\\r?\\n|\\r)\\|={3,}$/m,\n      inside: {\n        specifiers: {\n          pattern: /(?!\\|)(?:(?:(?:\\d+(?:\\.\\d+)?|\\.\\d+)[+*])?(?:[<^>](?:\\.[<^>])?|\\.[<^>])?[a-z]*)(?=\\|)/,\n          alias: \"attr-value\"\n        },\n        punctuation: {\n          pattern: /(^|[^\\\\])[|!]=*/,\n          lookbehind: !0\n        }\n      }\n    },\n    \"passthrough-block\": {\n      pattern: /^(\\+{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n      inside: {\n        punctuation: /^\\++|\\++$/\n      }\n    },\n    \"literal-block\": {\n      pattern: /^(-{4,}|\\.{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n      inside: {\n        punctuation: /^(?:-+|\\.+)|(?:-+|\\.+)$/\n      }\n    },\n    \"other-block\": {\n      pattern: /^(--|\\*{4,}|_{4,}|={4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n      inside: {\n        punctuation: /^(?:-+|\\*+|_+|=+)|(?:-+|\\*+|_+|=+)$/\n      }\n    },\n    \"list-punctuation\": {\n      pattern: /(^[ \\t]*)(?:-|\\*{1,5}|\\.{1,5}|(?:[a-z]|\\d+)\\.|[xvi]+\\))(?= )/im,\n      lookbehind: !0,\n      alias: \"punctuation\"\n    },\n    \"list-label\": {\n      pattern: /(^[ \\t]*)[a-z\\d].+(?::{2,4}|;;)(?=\\s)/im,\n      lookbehind: !0,\n      alias: \"symbol\"\n    },\n    \"indented-block\": {\n      pattern: /((\\r?\\n|\\r)\\2)([ \\t]+)\\S.*(?:(?:\\r?\\n|\\r)\\3.+)*(?=\\2{2}|$)/,\n      lookbehind: !0\n    },\n    comment: /^\\/\\/.*/m,\n    title: {\n      pattern: /^.+(?:\\r?\\n|\\r)(?:={3,}|-{3,}|~{3,}|\\^{3,}|\\+{3,})$|^={1,5} +.+|^\\.(?![\\s.]).*/m,\n      alias: \"important\",\n      inside: {\n        punctuation: /^(?:\\.|=+)|(?:=+|-+|~+|\\^+|\\++)$/\n      }\n    },\n    \"attribute-entry\": {\n      pattern: /^:[^:\\r\\n]+:(?: .*?(?: \\+(?:\\r?\\n|\\r).*?)*)?$/m,\n      alias: \"tag\"\n    },\n    attributes: t,\n    hr: {\n      pattern: /^'{3,}$/m,\n      alias: \"punctuation\"\n    },\n    \"page-break\": {\n      pattern: /^<{3,}$/m,\n      alias: \"punctuation\"\n    },\n    admonition: {\n      pattern: /^(?:TIP|NOTE|IMPORTANT|WARNING|CAUTION):/m,\n      alias: \"keyword\"\n    },\n    callout: [{\n      pattern: /(^[ \\t]*)<?\\d*>/m,\n      lookbehind: !0,\n      alias: \"symbol\"\n    }, {\n      pattern: /<\\d+>/,\n      alias: \"symbol\"\n    }],\n    macro: {\n      pattern: /\\b[a-z\\d][a-z\\d-]*::?(?:(?:\\S+)??\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,\n      inside: {\n        function: /^[a-z\\d-]+(?=:)/,\n        punctuation: /^::?/,\n        attributes: {\n          pattern: /(?:\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,\n          inside: t.inside\n        }\n      }\n    },\n    inline: {\n      pattern: /(^|[^\\\\])(?:(?:\\B\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\\\.)*\\])?(?:\\b_(?!\\s)(?: _|[^_\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: _|[^_\\\\\\r\\n]|\\\\.)+)*_\\b|\\B``(?!\\s).+?(?:(?:\\r?\\n|\\r).+?)*''\\B|\\B`(?!\\s)(?: ['`]|.)+?(?:(?:\\r?\\n|\\r)(?: ['`]|.)+?)*['`]\\B|\\B(['*+#])(?!\\s)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+)*\\3\\B)|(?:\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\4)[^\\\\]|\\\\.)*\\4|\\\\.)*\\])?(?:(__|\\*\\*|\\+\\+\\+?|##|\\$\\$|[~^]).+?(?:(?:\\r?\\n|\\r).+?)*\\5|\\{[^}\\r\\n]+\\}|\\[\\[\\[?.+?(?:(?:\\r?\\n|\\r).+?)*\\]?\\]\\]|<<.+?(?:(?:\\r?\\n|\\r).+?)*>>|\\(\\(\\(?.+?(?:(?:\\r?\\n|\\r).+?)*\\)?\\)\\)))/m,\n      lookbehind: !0,\n      inside: {\n        attributes: t,\n        url: {\n          pattern: /^(?:\\[\\[\\[?.+?\\]?\\]\\]|<<.+?>>)$/,\n          inside: {\n            punctuation: /^(?:\\[\\[\\[?|<<)|(?:\\]\\]\\]?|>>)$/\n          }\n        },\n        \"attribute-ref\": {\n          pattern: /^\\{.+\\}$/,\n          inside: {\n            variable: {\n              pattern: /(^\\{)[a-z\\d,+_-]+/,\n              lookbehind: !0\n            },\n            operator: /^[=?!#%@$]|!(?=[:}])/,\n            punctuation: /^\\{|\\}$|::?/\n          }\n        },\n        italic: {\n          pattern: /^(['_])[\\s\\S]+\\1$/,\n          inside: {\n            punctuation: /^(?:''?|__?)|(?:''?|__?)$/\n          }\n        },\n        bold: {\n          pattern: /^\\*[\\s\\S]+\\*$/,\n          inside: {\n            punctuation: /^\\*\\*?|\\*\\*?$/\n          }\n        },\n        punctuation: /^(?:``?|\\+{1,3}|##?|\\$\\$|[~^]|\\(\\(\\(?)|(?:''?|\\+{1,3}|##?|\\$\\$|[~^`]|\\)?\\)\\))$/\n      }\n    },\n    replacement: {\n      pattern: /\\((?:C|TM|R)\\)/,\n      alias: \"builtin\"\n    },\n    entity: /&#?[\\da-z]{1,8};/i,\n    \"line-continuation\": {\n      pattern: /(^| )\\+$/m,\n      lookbehind: !0,\n      alias: \"punctuation\"\n    }\n  };\n\n  function a(e) {\n    for (var t = {}, a = 0, i = (e = e.split(\" \")).length; a < i; a++) t[e[a]] = n[e[a]];\n\n    return t;\n  }\n\n  t.inside.interpreted.inside.rest = a(\"macro inline replacement entity\"), n[\"passthrough-block\"].inside.rest = a(\"macro\"), n[\"literal-block\"].inside.rest = a(\"callout\"), n.table.inside.rest = a(\"comment-block passthrough-block literal-block other-block list-punctuation indented-block comment title attribute-entry attributes hr page-break admonition list-label callout macro inline replacement entity line-continuation\"), n[\"other-block\"].inside.rest = a(\"table list-punctuation indented-block comment attribute-entry attributes hr page-break admonition list-label macro inline replacement entity line-continuation\"), n.title.inside.rest = a(\"macro inline replacement entity\"), e.hooks.add(\"wrap\", function (e) {\n    \"entity\" === e.type && (e.attributes.title = e.content.replace(/&amp;/, \"&\"));\n  }), e.languages.adoc = e.languages.asciidoc;\n}(Prism), Prism.languages.asm6502 = {\n  comment: /;.*/,\n  directive: {\n    pattern: /\\.\\w+(?= )/,\n    alias: \"keyword\"\n  },\n  string: /([\"'`])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n  opcode: {\n    pattern: /\\b(?:adc|and|asl|bcc|bcs|beq|bit|bmi|bne|bpl|brk|bvc|bvs|clc|cld|cli|clv|cmp|cpx|cpy|dec|dex|dey|eor|inc|inx|iny|jmp|jsr|lda|ldx|ldy|lsr|nop|ora|pha|php|pla|plp|rol|ror|rti|rts|sbc|sec|sed|sei|sta|stx|sty|tax|tay|tsx|txa|txs|tya|ADC|AND|ASL|BCC|BCS|BEQ|BIT|BMI|BNE|BPL|BRK|BVC|BVS|CLC|CLD|CLI|CLV|CMP|CPX|CPY|DEC|DEX|DEY|EOR|INC|INX|INY|JMP|JSR|LDA|LDX|LDY|LSR|NOP|ORA|PHA|PHP|PLA|PLP|ROL|ROR|RTI|RTS|SBC|SEC|SED|SEI|STA|STX|STY|TAX|TAY|TSX|TXA|TXS|TYA)\\b/,\n    alias: \"property\"\n  },\n  hexnumber: {\n    pattern: /#?\\$[\\da-f]{2,4}/i,\n    alias: \"string\"\n  },\n  binarynumber: {\n    pattern: /#?%[01]+/,\n    alias: \"string\"\n  },\n  decimalnumber: {\n    pattern: /#?\\d+/,\n    alias: \"string\"\n  },\n  register: {\n    pattern: /\\b[xya]\\b/i,\n    alias: \"variable\"\n  }\n}, Prism.languages.csharp = Prism.languages.extend(\"clike\", {\n  keyword: /\\b(?:abstract|add|alias|as|ascending|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|descending|do|double|dynamic|else|enum|event|explicit|extern|false|finally|fixed|float|for|foreach|from|get|global|goto|group|if|implicit|in|int|interface|internal|into|is|join|let|lock|long|namespace|new|null|object|operator|orderby|out|override|params|partial|private|protected|public|readonly|ref|remove|return|sbyte|sealed|select|set|short|sizeof|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|value|var|virtual|void|volatile|where|while|yield)\\b/,\n  string: [{\n    pattern: /@(\"|')(?:\\1\\1|\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n    greedy: !0\n  }, {\n    pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*?\\1/,\n    greedy: !0\n  }],\n  \"class-name\": [{\n    pattern: /\\b[A-Z]\\w*(?:\\.\\w+)*\\b(?=\\s+\\w+)/,\n    inside: {\n      punctuation: /\\./\n    }\n  }, {\n    pattern: /(\\[)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n    lookbehind: !0,\n    inside: {\n      punctuation: /\\./\n    }\n  }, {\n    pattern: /(\\b(?:class|interface)\\s+[A-Z]\\w*(?:\\.\\w+)*\\s*:\\s*)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n    lookbehind: !0,\n    inside: {\n      punctuation: /\\./\n    }\n  }, {\n    pattern: /((?:\\b(?:class|interface|new)\\s+)|(?:catch\\s+\\())[A-Z]\\w*(?:\\.\\w+)*\\b/,\n    lookbehind: !0,\n    inside: {\n      punctuation: /\\./\n    }\n  }],\n  number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)f?/i,\n  operator: />>=?|<<=?|[-=]>|([-+&|?])\\1|~|[-+*/%&|^!=<>]=?/,\n  punctuation: /\\?\\.?|::|[{}[\\];(),.:]/\n}), Prism.languages.insertBefore(\"csharp\", \"class-name\", {\n  \"generic-method\": {\n    pattern: /\\w+\\s*<[^>\\r\\n]+?>\\s*(?=\\()/,\n    inside: {\n      function: /^\\w+/,\n      \"class-name\": {\n        pattern: /\\b[A-Z]\\w*(?:\\.\\w+)*\\b/,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      keyword: Prism.languages.csharp.keyword,\n      punctuation: /[<>(),.:]/\n    }\n  },\n  preprocessor: {\n    pattern: /(^\\s*)#.*/m,\n    lookbehind: !0,\n    alias: \"property\",\n    inside: {\n      directive: {\n        pattern: /(\\s*#)\\b(?:define|elif|else|endif|endregion|error|if|line|pragma|region|undef|warning)\\b/,\n        lookbehind: !0,\n        alias: \"keyword\"\n      }\n    }\n  }\n}), Prism.languages.dotnet = Prism.languages.csharp, Prism.languages.autohotkey = {\n  comment: {\n    pattern: /(^[^\";\\n]*(\"[^\"\\n]*?\"[^\"\\n]*?)*)(?:;.*$|^\\s*\\/\\*[\\s\\S]*\\n\\*\\/)/m,\n    lookbehind: !0\n  },\n  string: /\"(?:[^\"\\n\\r]|\"\")*\"/m,\n  function: /[^(); \\t,\\n+*\\-=?>:\\\\\\/<&%\\[\\]]+?(?=\\()/m,\n  tag: /^[ \\t]*[^\\s:]+?(?=:(?:[^:]|$))/m,\n  variable: /%\\w+%/,\n  number: /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n  operator: /\\?|\\/\\/?=?|:=|\\|[=|]?|&[=&]?|\\+[=+]?|-[=-]?|\\*[=*]?|<(?:<=?|>|=)?|>>?=?|[.^!=~]=?|\\b(?:AND|NOT|OR)\\b/,\n  punctuation: /[{}[\\]():,]/,\n  boolean: /\\b(?:true|false)\\b/,\n  selector: /\\b(?:AutoTrim|BlockInput|Break|Click|ClipWait|Continue|Control|ControlClick|ControlFocus|ControlGet|ControlGetFocus|ControlGetPos|ControlGetText|ControlMove|ControlSend|ControlSendRaw|ControlSetText|CoordMode|Critical|DetectHiddenText|DetectHiddenWindows|Drive|DriveGet|DriveSpaceFree|EnvAdd|EnvDiv|EnvGet|EnvMult|EnvSet|EnvSub|EnvUpdate|Exit|ExitApp|FileAppend|FileCopy|FileCopyDir|FileCreateDir|FileCreateShortcut|FileDelete|FileEncoding|FileGetAttrib|FileGetShortcut|FileGetSize|FileGetTime|FileGetVersion|FileInstall|FileMove|FileMoveDir|FileRead|FileReadLine|FileRecycle|FileRecycleEmpty|FileRemoveDir|FileSelectFile|FileSelectFolder|FileSetAttrib|FileSetTime|FormatTime|GetKeyState|Gosub|Goto|GroupActivate|GroupAdd|GroupClose|GroupDeactivate|Gui|GuiControl|GuiControlGet|Hotkey|ImageSearch|IniDelete|IniRead|IniWrite|Input|InputBox|KeyWait|ListHotkeys|ListLines|ListVars|Loop|Menu|MouseClick|MouseClickDrag|MouseGetPos|MouseMove|MsgBox|OnExit|OutputDebug|Pause|PixelGetColor|PixelSearch|PostMessage|Process|Progress|Random|RegDelete|RegRead|RegWrite|Reload|Repeat|Return|Run|RunAs|RunWait|Send|SendEvent|SendInput|SendMessage|SendMode|SendPlay|SendRaw|SetBatchLines|SetCapslockState|SetControlDelay|SetDefaultMouseSpeed|SetEnv|SetFormat|SetKeyDelay|SetMouseDelay|SetNumlockState|SetScrollLockState|SetStoreCapslockMode|SetTimer|SetTitleMatchMode|SetWinDelay|SetWorkingDir|Shutdown|Sleep|Sort|SoundBeep|SoundGet|SoundGetWaveVolume|SoundPlay|SoundSet|SoundSetWaveVolume|SplashImage|SplashTextOff|SplashTextOn|SplitPath|StatusBarGetText|StatusBarWait|StringCaseSense|StringGetPos|StringLeft|StringLen|StringLower|StringMid|StringReplace|StringRight|StringSplit|StringTrimLeft|StringTrimRight|StringUpper|Suspend|SysGet|Thread|ToolTip|Transform|TrayTip|URLDownloadToFile|WinActivate|WinActivateBottom|WinClose|WinGet|WinGetActiveStats|WinGetActiveTitle|WinGetClass|WinGetPos|WinGetText|WinGetTitle|WinHide|WinKill|WinMaximize|WinMenuSelectItem|WinMinimize|WinMinimizeAll|WinMinimizeAllUndo|WinMove|WinRestore|WinSet|WinSetTitle|WinShow|WinWait|WinWaitActive|WinWaitClose|WinWaitNotActive)\\b/i,\n  constant: /\\b(?:a_ahkpath|a_ahkversion|a_appdata|a_appdatacommon|a_autotrim|a_batchlines|a_caretx|a_carety|a_computername|a_controldelay|a_cursor|a_dd|a_ddd|a_dddd|a_defaultmousespeed|a_desktop|a_desktopcommon|a_detecthiddentext|a_detecthiddenwindows|a_endchar|a_eventinfo|a_exitreason|a_formatfloat|a_formatinteger|a_gui|a_guievent|a_guicontrol|a_guicontrolevent|a_guiheight|a_guiwidth|a_guix|a_guiy|a_hour|a_iconfile|a_iconhidden|a_iconnumber|a_icontip|a_index|a_ipaddress1|a_ipaddress2|a_ipaddress3|a_ipaddress4|a_isadmin|a_iscompiled|a_iscritical|a_ispaused|a_issuspended|a_isunicode|a_keydelay|a_language|a_lasterror|a_linefile|a_linenumber|a_loopfield|a_loopfileattrib|a_loopfiledir|a_loopfileext|a_loopfilefullpath|a_loopfilelongpath|a_loopfilename|a_loopfileshortname|a_loopfileshortpath|a_loopfilesize|a_loopfilesizekb|a_loopfilesizemb|a_loopfiletimeaccessed|a_loopfiletimecreated|a_loopfiletimemodified|a_loopreadline|a_loopregkey|a_loopregname|a_loopregsubkey|a_loopregtimemodified|a_loopregtype|a_mday|a_min|a_mm|a_mmm|a_mmmm|a_mon|a_mousedelay|a_msec|a_mydocuments|a_now|a_nowutc|a_numbatchlines|a_ostype|a_osversion|a_priorhotkey|programfiles|a_programfiles|a_programs|a_programscommon|a_screenheight|a_screenwidth|a_scriptdir|a_scriptfullpath|a_scriptname|a_sec|a_space|a_startmenu|a_startmenucommon|a_startup|a_startupcommon|a_stringcasesense|a_tab|a_temp|a_thisfunc|a_thishotkey|a_thislabel|a_thismenu|a_thismenuitem|a_thismenuitempos|a_tickcount|a_timeidle|a_timeidlephysical|a_timesincepriorhotkey|a_timesincethishotkey|a_titlematchmode|a_titlematchmodespeed|a_username|a_wday|a_windelay|a_windir|a_workingdir|a_yday|a_year|a_yweek|a_yyyy|clipboard|clipboardall|comspec|errorlevel)\\b/i,\n  builtin: /\\b(?:abs|acos|asc|asin|atan|ceil|chr|class|cos|dllcall|exp|fileexist|Fileopen|floor|il_add|il_create|il_destroy|instr|substr|isfunc|islabel|IsObject|ln|log|lv_add|lv_delete|lv_deletecol|lv_getcount|lv_getnext|lv_gettext|lv_insert|lv_insertcol|lv_modify|lv_modifycol|lv_setimagelist|mod|onmessage|numget|numput|registercallback|regexmatch|regexreplace|round|sin|tan|sqrt|strlen|sb_seticon|sb_setparts|sb_settext|strsplit|tv_add|tv_delete|tv_getchild|tv_getcount|tv_getnext|tv_get|tv_getparent|tv_getprev|tv_getselection|tv_gettext|tv_modify|varsetcapacity|winactive|winexist|__New|__Call|__Get|__Set)\\b/i,\n  symbol: /\\b(?:alt|altdown|altup|appskey|backspace|browser_back|browser_favorites|browser_forward|browser_home|browser_refresh|browser_search|browser_stop|bs|capslock|ctrl|ctrlbreak|ctrldown|ctrlup|del|delete|down|end|enter|esc|escape|f1|f10|f11|f12|f13|f14|f15|f16|f17|f18|f19|f2|f20|f21|f22|f23|f24|f3|f4|f5|f6|f7|f8|f9|home|ins|insert|joy1|joy10|joy11|joy12|joy13|joy14|joy15|joy16|joy17|joy18|joy19|joy2|joy20|joy21|joy22|joy23|joy24|joy25|joy26|joy27|joy28|joy29|joy3|joy30|joy31|joy32|joy4|joy5|joy6|joy7|joy8|joy9|joyaxes|joybuttons|joyinfo|joyname|joypov|joyr|joyu|joyv|joyx|joyy|joyz|lalt|launch_app1|launch_app2|launch_mail|launch_media|lbutton|lcontrol|lctrl|left|lshift|lwin|lwindown|lwinup|mbutton|media_next|media_play_pause|media_prev|media_stop|numlock|numpad0|numpad1|numpad2|numpad3|numpad4|numpad5|numpad6|numpad7|numpad8|numpad9|numpadadd|numpadclear|numpaddel|numpaddiv|numpaddot|numpaddown|numpadend|numpadenter|numpadhome|numpadins|numpadleft|numpadmult|numpadpgdn|numpadpgup|numpadright|numpadsub|numpadup|pgdn|pgup|printscreen|ralt|rbutton|rcontrol|rctrl|right|rshift|rwin|rwindown|rwinup|scrolllock|shift|shiftdown|shiftup|space|tab|up|volume_down|volume_mute|volume_up|wheeldown|wheelleft|wheelright|wheelup|xbutton1|xbutton2)\\b/i,\n  important: /#\\b(?:AllowSameLineComments|ClipboardTimeout|CommentFlag|ErrorStdOut|EscapeChar|HotkeyInterval|HotkeyModifierTimeout|Hotstring|IfWinActive|IfWinExist|IfWinNotActive|IfWinNotExist|Include|IncludeAgain|InstallKeybdHook|InstallMouseHook|KeyHistory|LTrim|MaxHotkeysPerInterval|MaxMem|MaxThreads|MaxThreadsBuffer|MaxThreadsPerHotkey|NoEnv|NoTrayIcon|Persistent|SingleInstance|UseHook|WinActivateForce)\\b/i,\n  keyword: /\\b(?:Abort|AboveNormal|Add|ahk_class|ahk_group|ahk_id|ahk_pid|All|Alnum|Alpha|AltSubmit|AltTab|AltTabAndMenu|AltTabMenu|AltTabMenuDismiss|AlwaysOnTop|AutoSize|Background|BackgroundTrans|BelowNormal|between|BitAnd|BitNot|BitOr|BitShiftLeft|BitShiftRight|BitXOr|Bold|Border|Button|ByRef|Checkbox|Checked|CheckedGray|Choose|ChooseString|Close|Color|ComboBox|Contains|ControlList|Count|Date|DateTime|Days|DDL|Default|DeleteAll|Delimiter|Deref|Destroy|Digit|Disable|Disabled|DropDownList|Edit|Eject|Else|Enable|Enabled|Error|Exist|Expand|ExStyle|FileSystem|First|Flash|Float|FloatFast|Focus|Font|for|global|Grid|Group|GroupBox|GuiClose|GuiContextMenu|GuiDropFiles|GuiEscape|GuiSize|Hdr|Hidden|Hide|High|HKCC|HKCR|HKCU|HKEY_CLASSES_ROOT|HKEY_CURRENT_CONFIG|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKLM|HKU|Hours|HScroll|Icon|IconSmall|ID|IDLast|If|IfEqual|IfExist|IfGreater|IfGreaterOrEqual|IfInString|IfLess|IfLessOrEqual|IfMsgBox|IfNotEqual|IfNotExist|IfNotInString|IfWinActive|IfWinExist|IfWinNotActive|IfWinNotExist|Ignore|ImageList|in|Integer|IntegerFast|Interrupt|is|italic|Join|Label|LastFound|LastFoundExist|Limit|Lines|List|ListBox|ListView|local|Lock|Logoff|Low|Lower|Lowercase|MainWindow|Margin|Maximize|MaximizeBox|MaxSize|Minimize|MinimizeBox|MinMax|MinSize|Minutes|MonthCal|Mouse|Move|Multi|NA|No|NoActivate|NoDefault|NoHide|NoIcon|NoMainWindow|norm|Normal|NoSort|NoSortHdr|NoStandard|Not|NoTab|NoTimers|Number|Off|Ok|On|OwnDialogs|Owner|Parse|Password|Picture|Pixel|Pos|Pow|Priority|ProcessName|Radio|Range|Read|ReadOnly|Realtime|Redraw|REG_BINARY|REG_DWORD|REG_EXPAND_SZ|REG_MULTI_SZ|REG_SZ|Region|Relative|Rename|Report|Resize|Restore|Retry|RGB|Screen|Seconds|Section|Serial|SetLabel|ShiftAltTab|Show|Single|Slider|SortDesc|Standard|static|Status|StatusBar|StatusCD|strike|Style|Submit|SysMenu|Tab2|TabStop|Text|Theme|Tile|ToggleCheck|ToggleEnable|ToolWindow|Top|Topmost|TransColor|Transparent|Tray|TreeView|TryAgain|Type|UnCheck|underline|Unicode|Unlock|UpDown|Upper|Uppercase|UseErrorLevel|Vis|VisFirst|Visible|VScroll|Wait|WaitClose|WantCtrlA|WantF2|WantReturn|While|Wrap|Xdigit|xm|xp|xs|Yes|ym|yp|ys)\\b/i\n}, Prism.languages.autoit = {\n  comment: [/;.*/, {\n    pattern: /(^\\s*)#(?:comments-start|cs)[\\s\\S]*?^\\s*#(?:comments-end|ce)/m,\n    lookbehind: !0\n  }],\n  url: {\n    pattern: /(^\\s*#include\\s+)(?:<[^\\r\\n>]+>|\"[^\\r\\n\"]+\")/m,\n    lookbehind: !0\n  },\n  string: {\n    pattern: /([\"'])(?:\\1\\1|(?!\\1)[^\\r\\n])*\\1/,\n    greedy: !0,\n    inside: {\n      variable: /([%$@])\\w+\\1/\n    }\n  },\n  directive: {\n    pattern: /(^\\s*)#\\w+/m,\n    lookbehind: !0,\n    alias: \"keyword\"\n  },\n  function: /\\b\\w+(?=\\()/,\n  variable: /[$@]\\w+/,\n  keyword: /\\b(?:Case|Const|Continue(?:Case|Loop)|Default|Dim|Do|Else(?:If)?|End(?:Func|If|Select|Switch|With)|Enum|Exit(?:Loop)?|For|Func|Global|If|In|Local|Next|Null|ReDim|Select|Static|Step|Switch|Then|To|Until|Volatile|WEnd|While|With)\\b/i,\n  number: /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i,\n  boolean: /\\b(?:True|False)\\b/i,\n  operator: /<[=>]?|[-+*\\/=&>]=?|[?^]|\\b(?:And|Or|Not)\\b/i,\n  punctuation: /[\\[\\]().,:]/\n}, function (e) {\n  var t = {\n    variable: [{\n      pattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n      inside: {\n        variable: [{\n          pattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n          lookbehind: !0\n        }, /^\\$\\(\\(/],\n        number: /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n        operator: /--?|-=|\\+\\+?|\\+=|!=?|~|\\*\\*?|\\*=|\\/=?|%=?|<<=?|>>=?|<=?|>=?|==?|&&?|&=|\\^=?|\\|\\|?|\\|=|\\?|:/,\n        punctuation: /\\(\\(?|\\)\\)?|,|;/\n      }\n    }, {\n      pattern: /\\$\\([^)]+\\)|`[^`]+`/,\n      greedy: !0,\n      inside: {\n        variable: /^\\$\\(|^`|\\)$|`$/\n      }\n    }, /\\$(?:[\\w#?*!@]+|\\{[^}]+\\})/i]\n  };\n  e.languages.bash = {\n    shebang: {\n      pattern: /^#!\\s*\\/bin\\/bash|^#!\\s*\\/bin\\/sh/,\n      alias: \"important\"\n    },\n    comment: {\n      pattern: /(^|[^\"{\\\\])#.*/,\n      lookbehind: !0\n    },\n    string: [{\n      pattern: /((?:^|[^<])<<\\s*)[\"']?(\\w+?)[\"']?\\s*\\r?\\n(?:[\\s\\S])*?\\r?\\n\\2/,\n      lookbehind: !0,\n      greedy: !0,\n      inside: t\n    }, {\n      pattern: /([\"'])(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|`[^`]+`|(?!\\1)[^\\\\])*\\1/,\n      greedy: !0,\n      inside: t\n    }],\n    variable: t.variable,\n    function: {\n      pattern: /(^|[\\s;|&])(?:add|alias|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|builtin|bzip2|cal|cat|cd|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|comm|command|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|enable|env|ethtool|eval|exec|expand|expect|export|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|getopts|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|hash|head|help|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logout|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|popd|pr|printcap|printenv|printf|ps|pushd|pv|pwd|quota|quotacheck|quotactl|ram|rar|rcp|read|readarray|readonly|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|shift|shopt|shutdown|sleep|slocate|sort|source|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tail|tar|tee|test|time|timeout|times|top|touch|tr|traceroute|trap|tsort|tty|type|ulimit|umask|umount|unalias|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zip|zypper)(?=$|[\\s;|&])/,\n      lookbehind: !0\n    },\n    keyword: {\n      pattern: /(^|[\\s;|&])(?:let|:|\\.|if|then|else|elif|fi|for|break|continue|while|in|case|function|select|do|done|until|echo|exit|return|set|declare)(?=$|[\\s;|&])/,\n      lookbehind: !0\n    },\n    boolean: {\n      pattern: /(^|[\\s;|&])(?:true|false)(?=$|[\\s;|&])/,\n      lookbehind: !0\n    },\n    operator: /&&?|\\|\\|?|==?|!=?|<<<?|>>|<=?|>=?|=~/,\n    punctuation: /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];]/\n  };\n  var n = t.variable[1].inside;\n  n.string = e.languages.bash.string, n.function = e.languages.bash.function, n.keyword = e.languages.bash.keyword, n.boolean = e.languages.bash.boolean, n.operator = e.languages.bash.operator, n.punctuation = e.languages.bash.punctuation, e.languages.shell = e.languages.bash;\n}(Prism), Prism.languages.basic = {\n  comment: {\n    pattern: /(?:!|REM\\b).+/i,\n    inside: {\n      keyword: /^REM/i\n    }\n  },\n  string: {\n    pattern: /\"(?:\"\"|[!#$%&'()*,\\/:;<=>?^_ +\\-.A-Z\\d])*\"/i,\n    greedy: !0\n  },\n  number: /(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,\n  keyword: /\\b(?:AS|BEEP|BLOAD|BSAVE|CALL(?: ABSOLUTE)?|CASE|CHAIN|CHDIR|CLEAR|CLOSE|CLS|COM|COMMON|CONST|DATA|DECLARE|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DIM|DO|DOUBLE|ELSE|ELSEIF|END|ENVIRON|ERASE|ERROR|EXIT|FIELD|FILES|FOR|FUNCTION|GET|GOSUB|GOTO|IF|INPUT|INTEGER|IOCTL|KEY|KILL|LINE INPUT|LOCATE|LOCK|LONG|LOOP|LSET|MKDIR|NAME|NEXT|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPEN|OPTION BASE|OUT|POKE|PUT|READ|REDIM|REM|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SHARED|SINGLE|SELECT CASE|SHELL|SLEEP|STATIC|STEP|STOP|STRING|SUB|SWAP|SYSTEM|THEN|TIMER|TO|TROFF|TRON|TYPE|UNLOCK|UNTIL|USING|VIEW PRINT|WAIT|WEND|WHILE|WRITE)(?:\\$|\\b)/i,\n  function: /\\b(?:ABS|ACCESS|ACOS|ANGLE|AREA|ARITHMETIC|ARRAY|ASIN|ASK|AT|ATN|BASE|BEGIN|BREAK|CAUSE|CEIL|CHR|CLIP|COLLATE|COLOR|CON|COS|COSH|COT|CSC|DATE|DATUM|DEBUG|DECIMAL|DEF|DEG|DEGREES|DELETE|DET|DEVICE|DISPLAY|DOT|ELAPSED|EPS|ERASABLE|EXLINE|EXP|EXTERNAL|EXTYPE|FILETYPE|FIXED|FP|GO|GRAPH|HANDLER|IDN|IMAGE|IN|INT|INTERNAL|IP|IS|KEYED|LBOUND|LCASE|LEFT|LEN|LENGTH|LET|LINE|LINES|LOG|LOG10|LOG2|LTRIM|MARGIN|MAT|MAX|MAXNUM|MID|MIN|MISSING|MOD|NATIVE|NUL|NUMERIC|OF|OPTION|ORD|ORGANIZATION|OUTIN|OUTPUT|PI|POINT|POINTER|POINTS|POS|PRINT|PROGRAM|PROMPT|RAD|RADIANS|RANDOMIZE|RECORD|RECSIZE|RECTYPE|RELATIVE|REMAINDER|REPEAT|REST|RETRY|REWRITE|RIGHT|RND|ROUND|RTRIM|SAME|SEC|SELECT|SEQUENTIAL|SET|SETTER|SGN|SIN|SINH|SIZE|SKIP|SQR|STANDARD|STATUS|STR|STREAM|STYLE|TAB|TAN|TANH|TEMPLATE|TEXT|THERE|TIME|TIMEOUT|TRACE|TRANSFORM|TRUNCATE|UBOUND|UCASE|USE|VAL|VARIABLE|VIEWPORT|WHEN|WINDOW|WITH|ZER|ZONEWIDTH)(?:\\$|\\b)/i,\n  operator: /<[=>]?|>=?|[+\\-*\\/^=&]|\\b(?:AND|EQV|IMP|NOT|OR|XOR)\\b/i,\n  punctuation: /[,;:()]/\n}, function (e) {\n  var t = /%%?[~:\\w]+%?|!\\S+!/,\n      n = {\n    pattern: /\\/[a-z?]+(?=[ :]|$):?|-[a-z]\\b|--[a-z-]+\\b/im,\n    alias: \"attr-name\",\n    inside: {\n      punctuation: /:/\n    }\n  },\n      a = /\"[^\"]*\"/,\n      i = /(?:\\b|-)\\d+\\b/;\n  e.languages.batch = {\n    comment: [/^::.*/m, {\n      pattern: /((?:^|[&(])[ \\t]*)rem\\b(?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n      lookbehind: !0\n    }],\n    label: {\n      pattern: /^:.*/m,\n      alias: \"property\"\n    },\n    command: [{\n      pattern: /((?:^|[&(])[ \\t]*)for(?: ?\\/[a-z?](?:[ :](?:\"[^\"]*\"|\\S+))?)* \\S+ in \\([^)]+\\) do/im,\n      lookbehind: !0,\n      inside: {\n        keyword: /^for\\b|\\b(?:in|do)\\b/i,\n        string: a,\n        parameter: n,\n        variable: t,\n        number: i,\n        punctuation: /[()',]/\n      }\n    }, {\n      pattern: /((?:^|[&(])[ \\t]*)if(?: ?\\/[a-z?](?:[ :](?:\"[^\"]*\"|\\S+))?)* (?:not )?(?:cmdextversion \\d+|defined \\w+|errorlevel \\d+|exist \\S+|(?:\"[^\"]*\"|\\S+)?(?:==| (?:equ|neq|lss|leq|gtr|geq) )(?:\"[^\"]*\"|\\S+))/im,\n      lookbehind: !0,\n      inside: {\n        keyword: /^if\\b|\\b(?:not|cmdextversion|defined|errorlevel|exist)\\b/i,\n        string: a,\n        parameter: n,\n        variable: t,\n        number: i,\n        operator: /\\^|==|\\b(?:equ|neq|lss|leq|gtr|geq)\\b/i\n      }\n    }, {\n      pattern: /((?:^|[&()])[ \\t]*)else\\b/im,\n      lookbehind: !0,\n      inside: {\n        keyword: /^else\\b/i\n      }\n    }, {\n      pattern: /((?:^|[&(])[ \\t]*)set(?: ?\\/[a-z](?:[ :](?:\"[^\"]*\"|\\S+))?)* (?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n      lookbehind: !0,\n      inside: {\n        keyword: /^set\\b/i,\n        string: a,\n        parameter: n,\n        variable: [t, /\\w+(?=(?:[*\\/%+\\-&^|]|<<|>>)?=)/],\n        number: i,\n        operator: /[*\\/%+\\-&^|]=?|<<=?|>>=?|[!~_=]/,\n        punctuation: /[()',]/\n      }\n    }, {\n      pattern: /((?:^|[&(])[ \\t]*@?)\\w+\\b(?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n      lookbehind: !0,\n      inside: {\n        keyword: /^\\w+\\b/i,\n        string: a,\n        parameter: n,\n        label: {\n          pattern: /(^\\s*):\\S+/m,\n          lookbehind: !0,\n          alias: \"property\"\n        },\n        variable: t,\n        number: i,\n        operator: /\\^/\n      }\n    }],\n    operator: /[&@]/,\n    punctuation: /[()']/\n  };\n}(Prism), Prism.languages.bison = Prism.languages.extend(\"c\", {}), Prism.languages.insertBefore(\"bison\", \"comment\", {\n  bison: {\n    pattern: /^[\\s\\S]*?%%[\\s\\S]*?%%/,\n    inside: {\n      c: {\n        pattern: /%\\{[\\s\\S]*?%\\}|\\{(?:\\{[^}]*\\}|[^{}])*\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^%?\\{|%?\\}$/,\n            alias: \"punctuation\"\n          },\n          \"bison-variable\": {\n            pattern: /[$@](?:<[^\\s>]+>)?[\\w$]+/,\n            alias: \"variable\",\n            inside: {\n              punctuation: /<|>/\n            }\n          },\n          rest: Prism.languages.c\n        }\n      },\n      comment: Prism.languages.c.comment,\n      string: Prism.languages.c.string,\n      property: /\\S+(?=:)/,\n      keyword: /%\\w+/,\n      number: {\n        pattern: /(^|[^@])\\b(?:0x[\\da-f]+|\\d+)/i,\n        lookbehind: !0\n      },\n      punctuation: /%[%?]|[|:;\\[\\]<>]/\n    }\n  }\n}), Prism.languages.bnf = {\n  string: {\n    pattern: /\"[^\\r\\n\"]*\"|'[^\\r\\n']*'/\n  },\n  definition: {\n    pattern: /<[^<>\\r\\n\\t]+>(?=\\s*::=)/,\n    alias: [\"rule\", \"keyword\"],\n    inside: {\n      punctuation: /^<|>$/\n    }\n  },\n  rule: {\n    pattern: /<[^<>\\r\\n\\t]+>/,\n    inside: {\n      punctuation: /^<|>$/\n    }\n  },\n  operator: /::=|[|()[\\]{}*+?]|\\.{3}/\n}, Prism.languages.rbnf = Prism.languages.bnf, Prism.languages.brainfuck = {\n  pointer: {\n    pattern: /<|>/,\n    alias: \"keyword\"\n  },\n  increment: {\n    pattern: /\\+/,\n    alias: \"inserted\"\n  },\n  decrement: {\n    pattern: /-/,\n    alias: \"deleted\"\n  },\n  branching: {\n    pattern: /\\[|\\]/,\n    alias: \"important\"\n  },\n  operator: /[.,]/,\n  comment: /\\S+/\n}, Prism.languages.bro = {\n  comment: {\n    pattern: /(^|[^\\\\$])#.*/,\n    lookbehind: !0,\n    inside: {\n      italic: /\\b(?:TODO|FIXME|XXX)\\b/\n    }\n  },\n  string: {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: !0\n  },\n  boolean: /\\b[TF]\\b/,\n  function: {\n    pattern: /(?:function|hook|event) \\w+(?:::\\w+)?/,\n    inside: {\n      keyword: /^(?:function|hook|event)/\n    }\n  },\n  variable: {\n    pattern: /(?:global|local) \\w+/i,\n    inside: {\n      keyword: /(?:global|local)/\n    }\n  },\n  builtin: /(?:@(?:load(?:-(?:sigs|plugin))?|unload|prefixes|ifn?def|else|(?:end)?if|DIR|FILENAME))|(?:&?(?:redef|priority|log|optional|default|add_func|delete_func|expire_func|read_expire|write_expire|create_expire|synchronized|persistent|rotate_interval|rotate_size|encrypt|raw_output|mergeable|group|error_handler|type_column))/,\n  constant: {\n    pattern: /const \\w+/i,\n    inside: {\n      keyword: /const/\n    }\n  },\n  keyword: /\\b(?:break|next|continue|alarm|using|of|add|delete|export|print|return|schedule|when|timeout|addr|any|bool|count|double|enum|file|int|interval|pattern|opaque|port|record|set|string|subnet|table|time|vector|for|if|else|in|module|function)\\b/,\n  operator: /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,\n  number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n  punctuation: /[{}[\\];(),.:]/\n}, Prism.languages.cpp = Prism.languages.extend(\"c\", {\n  \"class-name\": {\n    pattern: /(\\b(?:class|enum|struct)\\s+)\\w+/,\n    lookbehind: !0\n  },\n  keyword: /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/,\n  boolean: /\\b(?:true|false)\\b/,\n  operator: />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/\n}), Prism.languages.insertBefore(\"cpp\", \"string\", {\n  \"raw-string\": {\n    pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n    alias: \"string\",\n    greedy: !0\n  }\n}), Prism.languages.aspnet = Prism.languages.extend(\"markup\", {\n  \"page-directive tag\": {\n    pattern: /<%\\s*@.*%>/i,\n    inside: {\n      \"page-directive tag\": /<%\\s*@\\s*(?:Assembly|Control|Implements|Import|Master(?:Type)?|OutputCache|Page|PreviousPageType|Reference|Register)?|%>/i,\n      rest: Prism.languages.markup.tag.inside\n    }\n  },\n  \"directive tag\": {\n    pattern: /<%.*%>/i,\n    inside: {\n      \"directive tag\": /<%\\s*?[$=%#:]{0,2}|%>/i,\n      rest: Prism.languages.csharp\n    }\n  }\n}), Prism.languages.aspnet.tag.pattern = /<(?!%)\\/?[^\\s>\\/]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i, Prism.languages.insertBefore(\"inside\", \"punctuation\", {\n  \"directive tag\": Prism.languages.aspnet[\"directive tag\"]\n}, Prism.languages.aspnet.tag.inside[\"attr-value\"]), Prism.languages.insertBefore(\"aspnet\", \"comment\", {\n  \"asp comment\": /<%--[\\s\\S]*?--%>/\n}), Prism.languages.insertBefore(\"aspnet\", Prism.languages.javascript ? \"script\" : \"tag\", {\n  \"asp script\": {\n    pattern: /(<script(?=.*runat=['\"]?server['\"]?)[\\s\\S]*?>)[\\s\\S]*?(?=<\\/script>)/i,\n    lookbehind: !0,\n    inside: Prism.languages.csharp || {}\n  }\n}), Prism.languages.arduino = Prism.languages.extend(\"cpp\", {\n  keyword: /\\b(?:setup|if|else|while|do|for|return|in|instanceof|default|function|loop|goto|switch|case|new|try|throw|catch|finally|null|break|continue|boolean|bool|void|byte|word|string|String|array|int|long|integer|double)\\b/,\n  builtin: /\\b(?:KeyboardController|MouseController|SoftwareSerial|EthernetServer|EthernetClient|LiquidCrystal|LiquidCrystal_I2C|RobotControl|GSMVoiceCall|EthernetUDP|EsploraTFT|HttpClient|RobotMotor|WiFiClient|GSMScanner|FileSystem|Scheduler|GSMServer|YunClient|YunServer|IPAddress|GSMClient|GSMModem|Keyboard|Ethernet|Console|GSMBand|Esplora|Stepper|Process|WiFiUDP|GSM_SMS|Mailbox|USBHost|Firmata|PImage|Client|Server|GSMPIN|FileIO|Bridge|Serial|EEPROM|Stream|Mouse|Audio|Servo|File|Task|GPRS|WiFi|Wire|TFT|GSM|SPI|SD|runShellCommandAsynchronously|analogWriteResolution|retrieveCallingNumber|printFirmwareVersion|analogReadResolution|sendDigitalPortPair|noListenOnLocalhost|readJoystickButton|setFirmwareVersion|readJoystickSwitch|scrollDisplayRight|getVoiceCallStatus|scrollDisplayLeft|writeMicroseconds|delayMicroseconds|beginTransmission|getSignalStrength|runAsynchronously|getAsynchronously|listenOnLocalhost|getCurrentCarrier|readAccelerometer|messageAvailable|sendDigitalPorts|lineFollowConfig|countryNameWrite|runShellCommand|readStringUntil|rewindDirectory|readTemperature|setClockDivider|readLightSensor|endTransmission|analogReference|detachInterrupt|countryNameRead|attachInterrupt|encryptionType|readBytesUntil|robotNameWrite|readMicrophone|robotNameRead|cityNameWrite|userNameWrite|readJoystickY|readJoystickX|mouseReleased|openNextFile|scanNetworks|noInterrupts|digitalWrite|beginSpeaker|mousePressed|isActionDone|mouseDragged|displayLogos|noAutoscroll|addParameter|remoteNumber|getModifiers|keyboardRead|userNameRead|waitContinue|processInput|parseCommand|printVersion|readNetworks|writeMessage|blinkVersion|cityNameRead|readMessage|setDataMode|parsePacket|isListening|setBitOrder|beginPacket|isDirectory|motorsWrite|drawCompass|digitalRead|clearScreen|serialEvent|rightToLeft|setTextSize|leftToRight|requestFrom|keyReleased|compassRead|analogWrite|interrupts|WiFiServer|disconnect|playMelody|parseFloat|autoscroll|getPINUsed|setPINUsed|setTimeout|sendAnalog|readSlider|analogRead|beginWrite|createChar|motorsStop|keyPressed|tempoWrite|readButton|subnetMask|debugPrint|macAddress|writeGreen|randomSeed|attachGPRS|readString|sendString|remotePort|releaseAll|mouseMoved|background|getXChange|getYChange|answerCall|getResult|voiceCall|endPacket|constrain|getSocket|writeJSON|getButton|available|connected|findUntil|readBytes|exitValue|readGreen|writeBlue|startLoop|IPAddress|isPressed|sendSysex|pauseMode|gatewayIP|setCursor|getOemKey|tuneWrite|noDisplay|loadImage|switchPIN|onRequest|onReceive|changePIN|playFile|noBuffer|parseInt|overflow|checkPIN|knobRead|beginTFT|bitClear|updateIR|bitWrite|position|writeRGB|highByte|writeRed|setSpeed|readBlue|noStroke|remoteIP|transfer|shutdown|hangCall|beginSMS|endWrite|attached|maintain|noCursor|checkReg|checkPUK|shiftOut|isValid|shiftIn|pulseIn|connect|println|localIP|pinMode|getIMEI|display|noBlink|process|getBand|running|beginSD|drawBMP|lowByte|setBand|release|bitRead|prepare|pointTo|readRed|setMode|noFill|remove|listen|stroke|detach|attach|noTone|exists|buffer|height|bitSet|circle|config|cursor|random|IRread|setDNS|endSMS|getKey|micros|millis|begin|print|write|ready|flush|width|isPIN|blink|clear|press|mkdir|rmdir|close|point|yield|image|BSSID|click|delay|read|text|move|peek|beep|rect|line|open|seek|fill|size|turn|stop|home|find|step|tone|sqrt|RSSI|SSID|end|bit|tan|cos|sin|pow|map|abs|max|min|get|run|put)\\b/,\n  constant: /\\b(?:DIGITAL_MESSAGE|FIRMATA_STRING|ANALOG_MESSAGE|REPORT_DIGITAL|REPORT_ANALOG|INPUT_PULLUP|SET_PIN_MODE|INTERNAL2V56|SYSTEM_RESET|LED_BUILTIN|INTERNAL1V1|SYSEX_START|INTERNAL|EXTERNAL|DEFAULT|OUTPUT|INPUT|HIGH|LOW)\\b/\n}), Prism.languages.cil = {\n  comment: /\\/\\/.*/,\n  string: {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: !0\n  },\n  directive: {\n    pattern: /(^|\\W)\\.[a-z]+(?=\\s)/,\n    lookbehind: !0,\n    alias: \"class-name\"\n  },\n  variable: /\\[[\\w\\.]+\\]/,\n  keyword: /\\b(?:abstract|ansi|assembly|auto|autochar|beforefieldinit|bool|bstr|byvalstr|catch|char|cil|class|currency|date|decimal|default|enum|error|explicit|extends|extern|famandassem|family|famorassem|final(?:ly)?|float32|float64|hidebysig|iant|idispatch|implements|import|initonly|instance|u?int(?:8|16|32|64)?|interface|iunknown|literal|lpstr|lpstruct|lptstr|lpwstr|managed|method|native(?:Type)?|nested|newslot|object(?:ref)?|pinvokeimpl|private|privatescope|public|reqsecobj|rtspecialname|runtime|sealed|sequential|serializable|specialname|static|string|struct|syschar|tbstr|unicode|unmanagedexp|unsigned|value(?:type)?|variant|virtual|void)\\b/,\n  function: /\\b(?:(?:constrained|unaligned|volatile|readonly|tail|no)\\.)?(?:conv\\.(?:[iu][1248]?|ovf\\.[iu][1248]?(?:\\.un)?|r\\.un|r4|r8)|ldc\\.(?:i4(?:\\.[0-9]+|\\.[mM]1|\\.s)?|i8|r4|r8)|ldelem(?:\\.[iu][1248]?|\\.r[48]|\\.ref|a)?|ldind\\.(?:[iu][1248]?|r[48]|ref)|stelem\\.?(?:i[1248]?|r[48]|ref)?|stind\\.(i[1248]?|r[48]|ref)?|end(?:fault|filter|finally)|ldarg(?:\\.[0-3s]|a(?:\\.s)?)?|ldloc(?:\\.[0-9]+|\\.s)?|sub(?:\\.ovf(?:\\.un)?)?|mul(?:\\.ovf(?:\\.un)?)?|add(?:\\.ovf(?:\\.un)?)?|stloc(?:\\.[0-3s])?|refany(?:type|val)|blt(?:\\.un)?(?:\\.s)?|ble(?:\\.un)?(?:\\.s)?|bgt(?:\\.un)?(?:\\.s)?|bge(?:\\.un)?(?:\\.s)?|unbox(?:\\.any)?|init(?:blk|obj)|call(?:i|virt)?|brfalse(?:\\.s)?|bne\\.un(?:\\.s)?|ldloca(?:\\.s)?|brzero(?:\\.s)?|brtrue(?:\\.s)?|brnull(?:\\.s)?|brinst(?:\\.s)?|starg(?:\\.s)?|leave(?:\\.s)?|shr(?:\\.un)?|rem(?:\\.un)?|div(?:\\.un)?|clt(?:\\.un)?|alignment|ldvirtftn|castclass|beq(?:\\.s)?|mkrefany|localloc|ckfinite|rethrow|ldtoken|ldsflda|cgt\\.un|arglist|switch|stsfld|sizeof|newobj|newarr|ldsfld|ldnull|ldflda|isinst|throw|stobj|stloc|stfld|ldstr|ldobj|ldlen|ldftn|ldfld|cpobj|cpblk|break|br\\.s|xor|shl|ret|pop|not|nop|neg|jmp|dup|clt|cgt|ceq|box|and|or|br)\\b/,\n  boolean: /\\b(?:true|false)\\b/,\n  number: /\\b-?(?:0x[0-9a-fA-F]+|[0-9]+)(?:\\.[0-9a-fA-F]+)?\\b/i,\n  punctuation: /[{}[\\];(),:=]|IL_[0-9A-Za-z]+/\n}, function (e) {\n  var t = /#(?!\\{).+/,\n      n = {\n    pattern: /#\\{[^}]+\\}/,\n    alias: \"variable\"\n  };\n  e.languages.coffeescript = e.languages.extend(\"javascript\", {\n    comment: t,\n    string: [{\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: !0\n    }, {\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: !0,\n      inside: {\n        interpolation: n\n      }\n    }],\n    keyword: /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n    \"class-member\": {\n      pattern: /@(?!\\d)\\w+/,\n      alias: \"variable\"\n    }\n  }), e.languages.insertBefore(\"coffeescript\", \"comment\", {\n    \"multiline-comment\": {\n      pattern: /###[\\s\\S]+?###/,\n      alias: \"comment\"\n    },\n    \"block-regex\": {\n      pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n      alias: \"regex\",\n      inside: {\n        comment: t,\n        interpolation: n\n      }\n    }\n  }), e.languages.insertBefore(\"coffeescript\", \"string\", {\n    \"inline-javascript\": {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n      inside: {\n        delimiter: {\n          pattern: /^`|`$/,\n          alias: \"punctuation\"\n        },\n        rest: e.languages.javascript\n      }\n    },\n    \"multiline-string\": [{\n      pattern: /'''[\\s\\S]*?'''/,\n      greedy: !0,\n      alias: \"string\"\n    }, {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: !0,\n      alias: \"string\",\n      inside: {\n        interpolation: n\n      }\n    }]\n  }), e.languages.insertBefore(\"coffeescript\", \"keyword\", {\n    property: /(?!\\d)\\w+(?=\\s*:(?!:))/\n  }), delete e.languages.coffeescript[\"template-string\"], e.languages.coffee = e.languages.coffeescript;\n}(Prism), Prism.languages.cmake = {\n  comment: /#.*/,\n  string: {\n    pattern: /\"(?:[^\\\\\"]|\\\\.)*\"/,\n    greedy: !0,\n    inside: {\n      interpolation: {\n        pattern: /\\${(?:[^{}$]|\\${[^{}$]*})*}/,\n        inside: {\n          punctuation: /\\${|}/,\n          variable: /\\w+/\n        }\n      }\n    }\n  },\n  variable: /\\b(?:CMAKE_\\w+|\\w+_(?:VERSION(?:_MAJOR|_MINOR|_PATCH|_TWEAK)?|(?:BINARY|SOURCE)_DIR|DESCRIPTION|HOMEPAGE_URL|ROOT)|(?:CTEST_CUSTOM_(?:MAXIMUM_(?:(?:FAIL|PASS)ED_TEST_OUTPUT_SIZE|NUMBER_OF_(?:ERROR|WARNING)S)|ERROR_(?:P(?:OST|RE)_CONTEXT|EXCEPTION|MATCH)|P(?:OST|RE)_MEMCHECK|WARNING_(?:EXCEPTION|MATCH)|(?:MEMCHECK|TESTS)_IGNORE|P(?:OST|RE)_TEST|COVERAGE_EXCLUDE)|ANDROID|APPLE|BORLAND|BUILD_SHARED_LIBS|CACHE|CPACK_(?:ABSOLUTE_DESTINATION_FILES|COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY|ERROR_ON_ABSOLUTE_INSTALL_DESTINATION|INCLUDE_TOPLEVEL_DIRECTORY|INSTALL_DEFAULT_DIRECTORY_PERMISSIONS|INSTALL_SCRIPT|PACKAGING_INSTALL_PREFIX|SET_DESTDIR|WARN_ON_ABSOLUTE_INSTALL_DESTINATION)|CTEST_(?:BINARY_DIRECTORY|BUILD_COMMAND|BUILD_NAME|BZR_COMMAND|BZR_UPDATE_OPTIONS|CHANGE_ID|CHECKOUT_COMMAND|CONFIGURATION_TYPE|CONFIGURE_COMMAND|COVERAGE_COMMAND|COVERAGE_EXTRA_FLAGS|CURL_OPTIONS|CUSTOM_(?:COVERAGE_EXCLUDE|ERROR_EXCEPTION|ERROR_MATCH|ERROR_POST_CONTEXT|ERROR_PRE_CONTEXT|MAXIMUM_FAILED_TEST_OUTPUT_SIZE|MAXIMUM_NUMBER_OF_(?:ERRORS|WARNINGS)|MAXIMUM_PASSED_TEST_OUTPUT_SIZE|MEMCHECK_IGNORE|POST_MEMCHECK|POST_TEST|PRE_MEMCHECK|PRE_TEST|TESTS_IGNORE|WARNING_EXCEPTION|WARNING_MATCH)|CVS_CHECKOUT|CVS_COMMAND|CVS_UPDATE_OPTIONS|DROP_LOCATION|DROP_METHOD|DROP_SITE|DROP_SITE_CDASH|DROP_SITE_PASSWORD|DROP_SITE_USER|EXTRA_COVERAGE_GLOB|GIT_COMMAND|GIT_INIT_SUBMODULES|GIT_UPDATE_CUSTOM|GIT_UPDATE_OPTIONS|HG_COMMAND|HG_UPDATE_OPTIONS|LABELS_FOR_SUBPROJECTS|MEMORYCHECK_(?:COMMAND|COMMAND_OPTIONS|SANITIZER_OPTIONS|SUPPRESSIONS_FILE|TYPE)|NIGHTLY_START_TIME|P4_CLIENT|P4_COMMAND|P4_OPTIONS|P4_UPDATE_OPTIONS|RUN_CURRENT_SCRIPT|SCP_COMMAND|SITE|SOURCE_DIRECTORY|SUBMIT_URL|SVN_COMMAND|SVN_OPTIONS|SVN_UPDATE_OPTIONS|TEST_LOAD|TEST_TIMEOUT|TRIGGER_SITE|UPDATE_COMMAND|UPDATE_OPTIONS|UPDATE_VERSION_ONLY|USE_LAUNCHERS)|CYGWIN|ENV|EXECUTABLE_OUTPUT_PATH|GHS-MULTI|IOS|LIBRARY_OUTPUT_PATH|MINGW|MSVC(?:10|11|12|14|60|70|71|80|90|_IDE|_TOOLSET_VERSION|_VERSION)?|MSYS|PROJECT_(?:BINARY_DIR|DESCRIPTION|HOMEPAGE_URL|NAME|SOURCE_DIR|VERSION|VERSION_(?:MAJOR|MINOR|PATCH|TWEAK))|UNIX|WIN32|WINCE|WINDOWS_PHONE|WINDOWS_STORE|XCODE|XCODE_VERSION))\\b/,\n  property: /\\b(?:cxx_\\w+|(?:ARCHIVE_OUTPUT_(?:DIRECTORY|NAME)|COMPILE_DEFINITIONS|COMPILE_PDB_NAME|COMPILE_PDB_OUTPUT_DIRECTORY|EXCLUDE_FROM_DEFAULT_BUILD|IMPORTED_(?:IMPLIB|LIBNAME|LINK_DEPENDENT_LIBRARIES|LINK_INTERFACE_LANGUAGES|LINK_INTERFACE_LIBRARIES|LINK_INTERFACE_MULTIPLICITY|LOCATION|NO_SONAME|OBJECTS|SONAME)|INTERPROCEDURAL_OPTIMIZATION|LIBRARY_OUTPUT_DIRECTORY|LIBRARY_OUTPUT_NAME|LINK_FLAGS|LINK_INTERFACE_LIBRARIES|LINK_INTERFACE_MULTIPLICITY|LOCATION|MAP_IMPORTED_CONFIG|OSX_ARCHITECTURES|OUTPUT_NAME|PDB_NAME|PDB_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_NAME|STATIC_LIBRARY_FLAGS|VS_CSHARP|VS_DOTNET_REFERENCEPROP|VS_DOTNET_REFERENCE|VS_GLOBAL_SECTION_POST|VS_GLOBAL_SECTION_PRE|VS_GLOBAL|XCODE_ATTRIBUTE)_\\w+|\\w+_(?:CLANG_TIDY|COMPILER_LAUNCHER|CPPCHECK|CPPLINT|INCLUDE_WHAT_YOU_USE|OUTPUT_NAME|POSTFIX|VISIBILITY_PRESET)|ABSTRACT|ADDITIONAL_MAKE_CLEAN_FILES|ADVANCED|ALIASED_TARGET|ALLOW_DUPLICATE_CUSTOM_TARGETS|ANDROID_(?:ANT_ADDITIONAL_OPTIONS|API|API_MIN|ARCH|ASSETS_DIRECTORIES|GUI|JAR_DEPENDENCIES|NATIVE_LIB_DEPENDENCIES|NATIVE_LIB_DIRECTORIES|PROCESS_MAX|PROGUARD|PROGUARD_CONFIG_PATH|SECURE_PROPS_PATH|SKIP_ANT_STEP|STL_TYPE)|ARCHIVE_OUTPUT_DIRECTORY|ARCHIVE_OUTPUT_NAME|ATTACHED_FILES|ATTACHED_FILES_ON_FAIL|AUTOGEN_(?:BUILD_DIR|ORIGIN_DEPENDS|PARALLEL|SOURCE_GROUP|TARGETS_FOLDER|TARGET_DEPENDS)|AUTOMOC|AUTOMOC_(?:COMPILER_PREDEFINES|DEPEND_FILTERS|EXECUTABLE|MACRO_NAMES|MOC_OPTIONS|SOURCE_GROUP|TARGETS_FOLDER)|AUTORCC|AUTORCC_EXECUTABLE|AUTORCC_OPTIONS|AUTORCC_SOURCE_GROUP|AUTOUIC|AUTOUIC_EXECUTABLE|AUTOUIC_OPTIONS|AUTOUIC_SEARCH_PATHS|BINARY_DIR|BUILDSYSTEM_TARGETS|BUILD_RPATH|BUILD_RPATH_USE_ORIGIN|BUILD_WITH_INSTALL_NAME_DIR|BUILD_WITH_INSTALL_RPATH|BUNDLE|BUNDLE_EXTENSION|CACHE_VARIABLES|CLEAN_NO_CUSTOM|COMMON_LANGUAGE_RUNTIME|COMPATIBLE_INTERFACE_(?:BOOL|NUMBER_MAX|NUMBER_MIN|STRING)|COMPILE_(?:DEFINITIONS|FEATURES|FLAGS|OPTIONS|PDB_NAME|PDB_OUTPUT_DIRECTORY)|COST|CPACK_DESKTOP_SHORTCUTS|CPACK_NEVER_OVERWRITE|CPACK_PERMANENT|CPACK_STARTUP_SHORTCUTS|CPACK_START_MENU_SHORTCUTS|CPACK_WIX_ACL|CROSSCOMPILING_EMULATOR|CUDA_EXTENSIONS|CUDA_PTX_COMPILATION|CUDA_RESOLVE_DEVICE_SYMBOLS|CUDA_SEPARABLE_COMPILATION|CUDA_STANDARD|CUDA_STANDARD_REQUIRED|CXX_EXTENSIONS|CXX_STANDARD|CXX_STANDARD_REQUIRED|C_EXTENSIONS|C_STANDARD|C_STANDARD_REQUIRED|DEBUG_CONFIGURATIONS|DEBUG_POSTFIX|DEFINE_SYMBOL|DEFINITIONS|DEPENDS|DEPLOYMENT_ADDITIONAL_FILES|DEPLOYMENT_REMOTE_DIRECTORY|DISABLED|DISABLED_FEATURES|ECLIPSE_EXTRA_CPROJECT_CONTENTS|ECLIPSE_EXTRA_NATURES|ENABLED_FEATURES|ENABLED_LANGUAGES|ENABLE_EXPORTS|ENVIRONMENT|EXCLUDE_FROM_ALL|EXCLUDE_FROM_DEFAULT_BUILD|EXPORT_NAME|EXPORT_PROPERTIES|EXTERNAL_OBJECT|EchoString|FAIL_REGULAR_EXPRESSION|FIND_LIBRARY_USE_LIB32_PATHS|FIND_LIBRARY_USE_LIB64_PATHS|FIND_LIBRARY_USE_LIBX32_PATHS|FIND_LIBRARY_USE_OPENBSD_VERSIONING|FIXTURES_CLEANUP|FIXTURES_REQUIRED|FIXTURES_SETUP|FOLDER|FRAMEWORK|Fortran_FORMAT|Fortran_MODULE_DIRECTORY|GENERATED|GENERATOR_FILE_NAME|GENERATOR_IS_MULTI_CONFIG|GHS_INTEGRITY_APP|GHS_NO_SOURCE_GROUP_FILE|GLOBAL_DEPENDS_DEBUG_MODE|GLOBAL_DEPENDS_NO_CYCLES|GNUtoMS|HAS_CXX|HEADER_FILE_ONLY|HELPSTRING|IMPLICIT_DEPENDS_INCLUDE_TRANSFORM|IMPORTED|IMPORTED_(?:COMMON_LANGUAGE_RUNTIME|CONFIGURATIONS|GLOBAL|IMPLIB|LIBNAME|LINK_DEPENDENT_LIBRARIES|LINK_INTERFACE_(?:LANGUAGES|LIBRARIES|MULTIPLICITY)|LOCATION|NO_SONAME|OBJECTS|SONAME)|IMPORT_PREFIX|IMPORT_SUFFIX|INCLUDE_DIRECTORIES|INCLUDE_REGULAR_EXPRESSION|INSTALL_NAME_DIR|INSTALL_RPATH|INSTALL_RPATH_USE_LINK_PATH|INTERFACE_(?:AUTOUIC_OPTIONS|COMPILE_DEFINITIONS|COMPILE_FEATURES|COMPILE_OPTIONS|INCLUDE_DIRECTORIES|LINK_DEPENDS|LINK_DIRECTORIES|LINK_LIBRARIES|LINK_OPTIONS|POSITION_INDEPENDENT_CODE|SOURCES|SYSTEM_INCLUDE_DIRECTORIES)|INTERPROCEDURAL_OPTIMIZATION|IN_TRY_COMPILE|IOS_INSTALL_COMBINED|JOB_POOLS|JOB_POOL_COMPILE|JOB_POOL_LINK|KEEP_EXTENSION|LABELS|LANGUAGE|LIBRARY_OUTPUT_DIRECTORY|LIBRARY_OUTPUT_NAME|LINKER_LANGUAGE|LINK_(?:DEPENDS|DEPENDS_NO_SHARED|DIRECTORIES|FLAGS|INTERFACE_LIBRARIES|INTERFACE_MULTIPLICITY|LIBRARIES|OPTIONS|SEARCH_END_STATIC|SEARCH_START_STATIC|WHAT_YOU_USE)|LISTFILE_STACK|LOCATION|MACOSX_BUNDLE|MACOSX_BUNDLE_INFO_PLIST|MACOSX_FRAMEWORK_INFO_PLIST|MACOSX_PACKAGE_LOCATION|MACOSX_RPATH|MACROS|MANUALLY_ADDED_DEPENDENCIES|MEASUREMENT|MODIFIED|NAME|NO_SONAME|NO_SYSTEM_FROM_IMPORTED|OBJECT_DEPENDS|OBJECT_OUTPUTS|OSX_ARCHITECTURES|OUTPUT_NAME|PACKAGES_FOUND|PACKAGES_NOT_FOUND|PARENT_DIRECTORY|PASS_REGULAR_EXPRESSION|PDB_NAME|PDB_OUTPUT_DIRECTORY|POSITION_INDEPENDENT_CODE|POST_INSTALL_SCRIPT|PREDEFINED_TARGETS_FOLDER|PREFIX|PRE_INSTALL_SCRIPT|PRIVATE_HEADER|PROCESSORS|PROCESSOR_AFFINITY|PROJECT_LABEL|PUBLIC_HEADER|REPORT_UNDEFINED_PROPERTIES|REQUIRED_FILES|RESOURCE|RESOURCE_LOCK|RULE_LAUNCH_COMPILE|RULE_LAUNCH_CUSTOM|RULE_LAUNCH_LINK|RULE_MESSAGES|RUNTIME_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_NAME|RUN_SERIAL|SKIP_AUTOGEN|SKIP_AUTOMOC|SKIP_AUTORCC|SKIP_AUTOUIC|SKIP_BUILD_RPATH|SKIP_RETURN_CODE|SOURCES|SOURCE_DIR|SOVERSION|STATIC_LIBRARY_FLAGS|STATIC_LIBRARY_OPTIONS|STRINGS|SUBDIRECTORIES|SUFFIX|SYMBOLIC|TARGET_ARCHIVES_MAY_BE_SHARED_LIBS|TARGET_MESSAGES|TARGET_SUPPORTS_SHARED_LIBS|TESTS|TEST_INCLUDE_FILE|TEST_INCLUDE_FILES|TIMEOUT|TIMEOUT_AFTER_MATCH|TYPE|USE_FOLDERS|VALUE|VARIABLES|VERSION|VISIBILITY_INLINES_HIDDEN|VS_(?:CONFIGURATION_TYPE|COPY_TO_OUT_DIR|DEBUGGER_(?:COMMAND|COMMAND_ARGUMENTS|ENVIRONMENT|WORKING_DIRECTORY)|DEPLOYMENT_CONTENT|DEPLOYMENT_LOCATION|DOTNET_REFERENCES|DOTNET_REFERENCES_COPY_LOCAL|GLOBAL_KEYWORD|GLOBAL_PROJECT_TYPES|GLOBAL_ROOTNAMESPACE|INCLUDE_IN_VSIX|IOT_STARTUP_TASK|KEYWORD|RESOURCE_GENERATOR|SCC_AUXPATH|SCC_LOCALPATH|SCC_PROJECTNAME|SCC_PROVIDER|SDK_REFERENCES|SHADER_(?:DISABLE_OPTIMIZATIONS|ENABLE_DEBUG|ENTRYPOINT|FLAGS|MODEL|OBJECT_FILE_NAME|OUTPUT_HEADER_FILE|TYPE|VARIABLE_NAME)|STARTUP_PROJECT|TOOL_OVERRIDE|USER_PROPS|WINRT_COMPONENT|WINRT_EXTENSIONS|WINRT_REFERENCES|XAML_TYPE)|WILL_FAIL|WIN32_EXECUTABLE|WINDOWS_EXPORT_ALL_SYMBOLS|WORKING_DIRECTORY|WRAP_EXCLUDE|XCODE_(?:EMIT_EFFECTIVE_PLATFORM_NAME|EXPLICIT_FILE_TYPE|FILE_ATTRIBUTES|LAST_KNOWN_FILE_TYPE|PRODUCT_TYPE|SCHEME_(?:ADDRESS_SANITIZER|ADDRESS_SANITIZER_USE_AFTER_RETURN|ARGUMENTS|DISABLE_MAIN_THREAD_CHECKER|DYNAMIC_LIBRARY_LOADS|DYNAMIC_LINKER_API_USAGE|ENVIRONMENT|EXECUTABLE|GUARD_MALLOC|MAIN_THREAD_CHECKER_STOP|MALLOC_GUARD_EDGES|MALLOC_SCRIBBLE|MALLOC_STACK|THREAD_SANITIZER(?:_STOP)?|UNDEFINED_BEHAVIOUR_SANITIZER(?:_STOP)?|ZOMBIE_OBJECTS))|XCTEST)\\b/,\n  keyword: /\\b(?:add_compile_definitions|add_compile_options|add_custom_command|add_custom_target|add_definitions|add_dependencies|add_executable|add_library|add_link_options|add_subdirectory|add_test|aux_source_directory|break|build_command|build_name|cmake_host_system_information|cmake_minimum_required|cmake_parse_arguments|cmake_policy|configure_file|continue|create_test_sourcelist|ctest_build|ctest_configure|ctest_coverage|ctest_empty_binary_directory|ctest_memcheck|ctest_read_custom_files|ctest_run_script|ctest_sleep|ctest_start|ctest_submit|ctest_test|ctest_update|ctest_upload|define_property|else|elseif|enable_language|enable_testing|endforeach|endfunction|endif|endmacro|endwhile|exec_program|execute_process|export|export_library_dependencies|file|find_file|find_library|find_package|find_path|find_program|fltk_wrap_ui|foreach|function|get_cmake_property|get_directory_property|get_filename_component|get_property|get_source_file_property|get_target_property|get_test_property|if|include|include_directories|include_external_msproject|include_guard|include_regular_expression|install|install_files|install_programs|install_targets|link_directories|link_libraries|list|load_cache|load_command|macro|make_directory|mark_as_advanced|math|message|option|output_required_files|project|qt_wrap_cpp|qt_wrap_ui|remove|remove_definitions|return|separate_arguments|set|set_directory_properties|set_property|set_source_files_properties|set_target_properties|set_tests_properties|site_name|source_group|string|subdir_depends|subdirs|target_compile_definitions|target_compile_features|target_compile_options|target_include_directories|target_link_directories|target_link_libraries|target_link_options|target_sources|try_compile|try_run|unset|use_mangled_mesa|utility_source|variable_requires|variable_watch|while|write_file)(?=\\s*\\()\\b/,\n  boolean: /\\b(?:ON|OFF|TRUE|FALSE)\\b/,\n  namespace: /\\b(?:PROPERTIES|SHARED|PRIVATE|STATIC|PUBLIC|INTERFACE|TARGET_OBJECTS)\\b/,\n  operator: /\\b(?:NOT|AND|OR|MATCHES|LESS|GREATER|EQUAL|STRLESS|STRGREATER|STREQUAL|VERSION_LESS|VERSION_EQUAL|VERSION_GREATER|DEFINED)\\b/,\n  inserted: {\n    pattern: /\\b\\w+::\\w+\\b/,\n    alias: \"class-name\"\n  },\n  number: /\\b\\d+(?:\\.\\d+)*\\b/,\n  function: /\\b[a-z_]\\w*(?=\\s*\\()\\b/i,\n  punctuation: /[()>}]|\\$[<{]/\n}, Prism.languages.clojure = {\n  comment: /;+.*/,\n  string: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n  operator: /(?:::|[:|'])\\b[a-z][\\w*+!?-]*\\b/i,\n  keyword: {\n    pattern: /([^\\w+*'?-])(?:def|if|do|let|\\.\\.|quote|var|->>|->|fn|loop|recur|throw|try|monitor-enter|\\.|new|set!|def\\-|defn|defn\\-|defmacro|defmulti|defmethod|defstruct|defonce|declare|definline|definterface|defprotocol|==|defrecord|>=|deftype|<=|defproject|ns|\\*|\\+|\\-|\\/|<|=|>|accessor|agent|agent-errors|aget|alength|all-ns|alter|and|append-child|apply|array-map|aset|aset-boolean|aset-byte|aset-char|aset-double|aset-float|aset-int|aset-long|aset-short|assert|assoc|await|await-for|bean|binding|bit-and|bit-not|bit-or|bit-shift-left|bit-shift-right|bit-xor|boolean|branch\\?|butlast|byte|cast|char|children|class|clear-agent-errors|comment|commute|comp|comparator|complement|concat|conj|cons|constantly|cond|if-not|construct-proxy|contains\\?|count|create-ns|create-struct|cycle|dec|deref|difference|disj|dissoc|distinct|doall|doc|dorun|doseq|dosync|dotimes|doto|double|down|drop|drop-while|edit|end\\?|ensure|eval|every\\?|false\\?|ffirst|file-seq|filter|find|find-doc|find-ns|find-var|first|float|flush|for|fnseq|frest|gensym|get-proxy-class|get|hash-map|hash-set|identical\\?|identity|if-let|import|in-ns|inc|index|insert-child|insert-left|insert-right|inspect-table|inspect-tree|instance\\?|int|interleave|intersection|into|into-array|iterate|join|key|keys|keyword|keyword\\?|last|lazy-cat|lazy-cons|left|lefts|line-seq|list\\*|list|load|load-file|locking|long|loop|macroexpand|macroexpand-1|make-array|make-node|map|map-invert|map\\?|mapcat|max|max-key|memfn|merge|merge-with|meta|min|min-key|name|namespace|neg\\?|new|newline|next|nil\\?|node|not|not-any\\?|not-every\\?|not=|ns-imports|ns-interns|ns-map|ns-name|ns-publics|ns-refers|ns-resolve|ns-unmap|nth|nthrest|or|parse|partial|path|peek|pop|pos\\?|pr|pr-str|print|print-str|println|println-str|prn|prn-str|project|proxy|proxy-mappings|quot|rand|rand-int|range|re-find|re-groups|re-matcher|re-matches|re-pattern|re-seq|read|read-line|reduce|ref|ref-set|refer|rem|remove|remove-method|remove-ns|rename|rename-keys|repeat|replace|replicate|resolve|rest|resultset-seq|reverse|rfirst|right|rights|root|rrest|rseq|second|select|select-keys|send|send-off|seq|seq-zip|seq\\?|set|short|slurp|some|sort|sort-by|sorted-map|sorted-map-by|sorted-set|special-symbol\\?|split-at|split-with|str|string\\?|struct|struct-map|subs|subvec|symbol|symbol\\?|sync|take|take-nth|take-while|test|time|to-array|to-array-2d|tree-seq|true\\?|union|up|update-proxy|val|vals|var-get|var-set|var\\?|vector|vector-zip|vector\\?|when|when-first|when-let|when-not|with-local-vars|with-meta|with-open|with-out-str|xml-seq|xml-zip|zero\\?|zipmap|zipper)(?=[^\\w+*'?-])/,\n    lookbehind: !0\n  },\n  boolean: /\\b(?:true|false|nil)\\b/,\n  number: /\\b[0-9A-Fa-f]+\\b/,\n  punctuation: /[{}\\[\\](),]/\n}, function (e) {\n  e.languages.ruby = e.languages.extend(\"clike\", {\n    comment: [/#.*/, {\n      pattern: /^=begin\\s[\\s\\S]*?^=end/m,\n      greedy: !0\n    }],\n    keyword: /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\\b/\n  });\n  var t = {\n    pattern: /#\\{[^}]+\\}/,\n    inside: {\n      delimiter: {\n        pattern: /^#\\{|\\}$/,\n        alias: \"tag\"\n      },\n      rest: e.languages.ruby\n    }\n  };\n  delete e.languages.ruby.function, e.languages.insertBefore(\"ruby\", \"keyword\", {\n    regex: [{\n      pattern: /%r([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[gim]{0,3}/,\n      greedy: !0,\n      inside: {\n        interpolation: t\n      }\n    }, {\n      pattern: /%r\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/,\n      greedy: !0,\n      inside: {\n        interpolation: t\n      }\n    }, {\n      pattern: /%r\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/,\n      greedy: !0,\n      inside: {\n        interpolation: t\n      }\n    }, {\n      pattern: /%r\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/,\n      greedy: !0,\n      inside: {\n        interpolation: t\n      }\n    }, {\n      pattern: /%r<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/,\n      greedy: !0,\n      inside: {\n        interpolation: t\n      }\n    }, {\n      pattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*($|[\\r\\n,.;})]))/,\n      lookbehind: !0,\n      greedy: !0\n    }],\n    variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n    symbol: {\n      pattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n      lookbehind: !0\n    },\n    \"method-definition\": {\n      pattern: /(\\bdef\\s+)[\\w.]+/,\n      lookbehind: !0,\n      inside: {\n        function: /\\w+$/,\n        rest: e.languages.ruby\n      }\n    }\n  }), e.languages.insertBefore(\"ruby\", \"number\", {\n    builtin: /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n    constant: /\\b[A-Z]\\w*(?:[?!]|\\b)/\n  }), e.languages.ruby.string = [{\n    pattern: /%[qQiIwWxs]?([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n    greedy: !0,\n    inside: {\n      interpolation: t\n    }\n  }, {\n    pattern: /%[qQiIwWxs]?\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,\n    greedy: !0,\n    inside: {\n      interpolation: t\n    }\n  }, {\n    pattern: /%[qQiIwWxs]?\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/,\n    greedy: !0,\n    inside: {\n      interpolation: t\n    }\n  }, {\n    pattern: /%[qQiIwWxs]?\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/,\n    greedy: !0,\n    inside: {\n      interpolation: t\n    }\n  }, {\n    pattern: /%[qQiIwWxs]?<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,\n    greedy: !0,\n    inside: {\n      interpolation: t\n    }\n  }, {\n    pattern: /(\"|')(?:#\\{[^}]+\\}|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: !0,\n    inside: {\n      interpolation: t\n    }\n  }], e.languages.rb = e.languages.ruby;\n}(Prism), Prism.languages.csp = {\n  directive: {\n    pattern: /\\b(?:(?:base-uri|form-action|frame-ancestors|plugin-types|referrer|reflected-xss|report-to|report-uri|require-sri-for|sandbox) |(?:block-all-mixed-content|disown-opener|upgrade-insecure-requests)(?: |;)|(?:child|connect|default|font|frame|img|manifest|media|object|script|style|worker)-src )/i,\n    alias: \"keyword\"\n  },\n  safe: {\n    pattern: /'(?:self|none|strict-dynamic|(?:nonce-|sha(?:256|384|512)-)[a-zA-Z\\d+=/]+)'/,\n    alias: \"selector\"\n  },\n  unsafe: {\n    pattern: /(?:'unsafe-inline'|'unsafe-eval'|'unsafe-hashed-attributes'|\\*)/,\n    alias: \"function\"\n  }\n}, Prism.languages.css.selector = {\n  pattern: Prism.languages.css.selector,\n  inside: {\n    \"pseudo-element\": /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\n    \"pseudo-class\": /:[-\\w]+/,\n    class: /\\.[-:.\\w]+/,\n    id: /#[-:.\\w]+/,\n    attribute: {\n      pattern: /\\[(?:[^[\\]\"']|(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1)*\\]/,\n      greedy: !0,\n      inside: {\n        punctuation: /^\\[|\\]$/,\n        \"case-sensitivity\": {\n          pattern: /(\\s)[si]$/i,\n          lookbehind: !0,\n          alias: \"keyword\"\n        },\n        namespace: {\n          pattern: /^(\\s*)[-*\\w\\xA0-\\uFFFF]*\\|(?!=)/,\n          lookbehind: !0,\n          inside: {\n            punctuation: /\\|$/\n          }\n        },\n        attribute: {\n          pattern: /^(\\s*)[-\\w\\xA0-\\uFFFF]+/,\n          lookbehind: !0\n        },\n        value: [/(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/, {\n          pattern: /(=\\s*)[-\\w\\xA0-\\uFFFF]+(?=\\s*$)/,\n          lookbehind: !0\n        }],\n        operator: /[|~*^$]?=/\n      }\n    },\n    \"n-th\": {\n      pattern: /(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,\n      lookbehind: !0,\n      inside: {\n        number: /[\\dn]+/,\n        operator: /[+-]/\n      }\n    },\n    punctuation: /[()]/\n  }\n}, Prism.languages.insertBefore(\"css\", \"property\", {\n  variable: {\n    pattern: /(^|[^-\\w\\xA0-\\uFFFF])--[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*/i,\n    lookbehind: !0\n  }\n}), Prism.languages.insertBefore(\"css\", \"function\", {\n  operator: {\n    pattern: /(\\s)[+\\-*\\/](?=\\s)/,\n    lookbehind: !0\n  },\n  hexcode: /#[\\da-f]{3,8}/i,\n  entity: /\\\\[\\da-f]{1,8}/i,\n  unit: {\n    pattern: /(\\d)(?:%|[a-z]+)/,\n    lookbehind: !0\n  },\n  number: /-?[\\d.]+/\n}), Prism.languages.d = Prism.languages.extend(\"clike\", {\n  string: [/\\b[rx]\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"[cwd]?/, /\\bq\"(?:\\[[\\s\\S]*?\\]|\\([\\s\\S]*?\\)|<[\\s\\S]*?>|\\{[\\s\\S]*?\\})\"/, /\\bq\"([_a-zA-Z][_a-zA-Z\\d]*)(?:\\r?\\n|\\r)[\\s\\S]*?(?:\\r?\\n|\\r)\\1\"/, /\\bq\"(.)[\\s\\S]*?\\1\"/, /'(?:\\\\'|\\\\?[^']+)'/, /([\"`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1[cwd]?/],\n  number: [/\\b0x\\.?[a-f\\d_]+(?:(?!\\.\\.)\\.[a-f\\d_]*)?(?:p[+-]?[a-f\\d_]+)?[ulfi]*/i, {\n    pattern: /((?:\\.\\.)?)(?:\\b0b\\.?|\\b|\\.)\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:e[+-]?\\d[\\d_]*)?[ulfi]*/i,\n    lookbehind: !0\n  }],\n  keyword: /\\$|\\b(?:abstract|alias|align|asm|assert|auto|body|bool|break|byte|case|cast|catch|cdouble|cent|cfloat|char|class|const|continue|creal|dchar|debug|default|delegate|delete|deprecated|do|double|else|enum|export|extern|false|final|finally|float|for|foreach|foreach_reverse|function|goto|idouble|if|ifloat|immutable|import|inout|int|interface|invariant|ireal|lazy|long|macro|mixin|module|new|nothrow|null|out|override|package|pragma|private|protected|public|pure|real|ref|return|scope|shared|short|static|struct|super|switch|synchronized|template|this|throw|true|try|typedef|typeid|typeof|ubyte|ucent|uint|ulong|union|unittest|ushort|version|void|volatile|wchar|while|with|__(?:(?:FILE|MODULE|LINE|FUNCTION|PRETTY_FUNCTION|DATE|EOF|TIME|TIMESTAMP|VENDOR|VERSION)__|gshared|traits|vector|parameters)|string|wstring|dstring|size_t|ptrdiff_t)\\b/,\n  operator: /\\|[|=]?|&[&=]?|\\+[+=]?|-[-=]?|\\.?\\.\\.|=[>=]?|!(?:i[ns]\\b|<>?=?|>=?|=)?|\\bi[ns]\\b|(?:<[<>]?|>>?>?|\\^\\^|[*\\/%^~])=?/\n}), Prism.languages.d.comment = [/^\\s*#!.+/, {\n  pattern: /(^|[^\\\\])\\/\\+(?:\\/\\+[\\s\\S]*?\\+\\/|[\\s\\S])*?\\+\\//,\n  lookbehind: !0\n}].concat(Prism.languages.d.comment), Prism.languages.insertBefore(\"d\", \"comment\", {\n  \"token-string\": {\n    pattern: /\\bq\\{(?:\\{[^}]*\\}|[^}])*\\}/,\n    alias: \"string\"\n  }\n}), Prism.languages.insertBefore(\"d\", \"keyword\", {\n  property: /\\B@\\w*/\n}), Prism.languages.insertBefore(\"d\", \"function\", {\n  register: {\n    pattern: /\\b(?:[ABCD][LHX]|E[ABCD]X|E?(?:BP|SP|DI|SI)|[ECSDGF]S|CR[0234]|DR[012367]|TR[3-7]|X?MM[0-7]|R[ABCD]X|[BS]PL|R[BS]P|[DS]IL|R[DS]I|R(?:[89]|1[0-5])[BWD]?|XMM(?:[89]|1[0-5])|YMM(?:1[0-5]|\\d))\\b|\\bST(?:\\([0-7]\\)|\\b)/,\n    alias: \"variable\"\n  }\n}), Prism.languages.dart = Prism.languages.extend(\"clike\", {\n  string: [{\n    pattern: /r?(\"\"\"|''')[\\s\\S]*?\\1/,\n    greedy: !0\n  }, {\n    pattern: /r?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: !0\n  }],\n  keyword: [/\\b(?:async|sync|yield)\\*/, /\\b(?:abstract|assert|async|await|break|case|catch|class|const|continue|default|deferred|do|dynamic|else|enum|export|external|extends|factory|final|finally|for|get|if|implements|import|in|library|new|null|operator|part|rethrow|return|set|static|super|switch|this|throw|try|typedef|var|void|while|with|yield)\\b/],\n  operator: /\\bis!|\\b(?:as|is)\\b|\\+\\+|--|&&|\\|\\||<<=?|>>=?|~(?:\\/=?)?|[+\\-*\\/%&^|=!<>]=?|\\?/\n}), Prism.languages.insertBefore(\"dart\", \"function\", {\n  metadata: {\n    pattern: /@\\w+/,\n    alias: \"symbol\"\n  }\n}), Prism.languages.diff = {\n  coord: [/^(?:\\*{3}|-{3}|\\+{3}).*$/m, /^@@.*@@$/m, /^\\d+.*$/m],\n  deleted: /^[-<].*$/m,\n  inserted: /^[+>].*$/m,\n  diff: {\n    pattern: /^!(?!!).+$/m,\n    alias: \"important\"\n  }\n}, function (e) {\n  function t(e, t) {\n    return \"___\" + e.toUpperCase() + t + \"___\";\n  }\n\n  Object.defineProperties(e.languages[\"markup-templating\"] = {}, {\n    buildPlaceholders: {\n      value: function (n, a, i, r) {\n        if (n.language === a) {\n          var o = n.tokenStack = [];\n          n.code = n.code.replace(i, function (e) {\n            if (\"function\" == typeof r && !r(e)) return e;\n\n            for (var i, s = o.length; -1 !== n.code.indexOf(i = t(a, s));) ++s;\n\n            return o[s] = e, i;\n          }), n.grammar = e.languages.markup;\n        }\n      }\n    },\n    tokenizePlaceholders: {\n      value: function (n, a) {\n        if (n.language === a && n.tokenStack) {\n          n.grammar = e.languages[a];\n          var i = 0,\n              r = Object.keys(n.tokenStack);\n          !function o(s) {\n            for (var l = 0; l < s.length && !(i >= r.length); l++) {\n              var d = s[l];\n\n              if (\"string\" == typeof d || d.content && \"string\" == typeof d.content) {\n                var c = r[i],\n                    p = n.tokenStack[c],\n                    u = \"string\" == typeof d ? d : d.content,\n                    m = t(a, c),\n                    g = u.indexOf(m);\n\n                if (g > -1) {\n                  ++i;\n                  var b = u.substring(0, g),\n                      E = new e.Token(a, e.tokenize(p, n.grammar), \"language-\" + a, p),\n                      f = u.substring(g + m.length),\n                      _ = [];\n                  b && _.push.apply(_, o([b])), _.push(E), f && _.push.apply(_, o([f])), \"string\" == typeof d ? s.splice.apply(s, [l, 1].concat(_)) : d.content = _;\n                }\n              } else d.content && o(d.content);\n            }\n\n            return s;\n          }(n.tokens);\n        }\n      }\n    }\n  });\n}(Prism), Prism.languages.docker = {\n  keyword: {\n    pattern: /(^\\s*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\\s)/im,\n    lookbehind: !0\n  },\n  string: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n  comment: /#.*/,\n  punctuation: /---|\\.\\.\\.|[:[\\]{}\\-,|>?]/\n}, Prism.languages.dockerfile = Prism.languages.docker, Prism.languages.ebnf = {\n  comment: /\\(\\*[\\s\\S]*?\\*\\)/,\n  string: {\n    pattern: /\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/,\n    greedy: !0\n  },\n  special: {\n    pattern: /\\?[^?\\r\\n]*\\?/,\n    greedy: !0,\n    alias: \"class-name\"\n  },\n  definition: {\n    pattern: /^(\\s*)[a-z]\\w*(?:[ \\t]+[a-z]\\w*)*(?=\\s*=)/im,\n    lookbehind: !0,\n    alias: [\"rule\", \"keyword\"]\n  },\n  rule: /[a-z]\\w*(?:[ \\t]+[a-z]\\w*)*/i,\n  punctuation: /\\([:/]|[:/]\\)|[.,;()[\\]{}]/,\n  operator: /[-=|*/!]/\n}, Prism.languages.eiffel = {\n  comment: /--.*/,\n  string: [{\n    pattern: /\"([^[]*)\\[[\\s\\S]*?\\]\\1\"/,\n    greedy: !0\n  }, {\n    pattern: /\"([^{]*)\\{[\\s\\S]*?\\}\\1\"/,\n    greedy: !0\n  }, {\n    pattern: /\"(?:%\\s+%|%.|[^%\"\\r\\n])*\"/,\n    greedy: !0\n  }],\n  char: /'(?:%.|[^%'\\r\\n])+'/,\n  keyword: /\\b(?:across|agent|alias|all|and|attached|as|assign|attribute|check|class|convert|create|Current|debug|deferred|detachable|do|else|elseif|end|ensure|expanded|export|external|feature|from|frozen|if|implies|inherit|inspect|invariant|like|local|loop|not|note|obsolete|old|once|or|Precursor|redefine|rename|require|rescue|Result|retry|select|separate|some|then|undefine|until|variant|Void|when|xor)\\b/i,\n  boolean: /\\b(?:True|False)\\b/i,\n  \"class-name\": {\n    pattern: /\\b[A-Z][\\dA-Z_]*\\b/,\n    alias: \"builtin\"\n  },\n  number: [/\\b0[xcb][\\da-f](?:_*[\\da-f])*\\b/i, /(?:\\d(?:_*\\d)*)?\\.(?:(?:\\d(?:_*\\d)*)?e[+-]?)?\\d(?:_*\\d)*|\\d(?:_*\\d)*\\.?/i],\n  punctuation: /:=|<<|>>|\\(\\||\\|\\)|->|\\.(?=\\w)|[{}[\\];(),:?]/,\n  operator: /\\\\\\\\|\\|\\.\\.\\||\\.\\.|\\/[~\\/=]?|[><]=?|[-+*^=~]/\n}, function (e) {\n  e.languages.ejs = {\n    delimiter: {\n      pattern: /^<%[-_=]?|[-_]?%>$/,\n      alias: \"punctuation\"\n    },\n    comment: /^#[\\s\\S]*/,\n    \"language-javascript\": {\n      pattern: /[\\s\\S]+/,\n      inside: e.languages.javascript\n    }\n  }, e.hooks.add(\"before-tokenize\", function (t) {\n    e.languages[\"markup-templating\"].buildPlaceholders(t, \"ejs\", /<%(?!%)[\\s\\S]+?%>/g);\n  }), e.hooks.add(\"after-tokenize\", function (t) {\n    e.languages[\"markup-templating\"].tokenizePlaceholders(t, \"ejs\");\n  });\n}(Prism), Prism.languages.elixir = {\n  comment: {\n    pattern: /#.*/m,\n    lookbehind: !0\n  },\n  regex: {\n    pattern: /~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,\n    greedy: !0\n  },\n  string: [{\n    pattern: /~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,\n    greedy: !0,\n    inside: {}\n  }, {\n    pattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\n    greedy: !0,\n    inside: {}\n  }, {\n    pattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: !0,\n    inside: {}\n  }],\n  atom: {\n    pattern: /(^|[^:]):\\w+/,\n    lookbehind: !0,\n    alias: \"symbol\"\n  },\n  \"attr-name\": /\\w+:(?!:)/,\n  capture: {\n    pattern: /(^|[^&])&(?:[^&\\s\\d()][^\\s()]*|(?=\\())/,\n    lookbehind: !0,\n    alias: \"function\"\n  },\n  argument: {\n    pattern: /(^|[^&])&\\d+/,\n    lookbehind: !0,\n    alias: \"variable\"\n  },\n  attribute: {\n    pattern: /@\\w+/,\n    alias: \"variable\"\n  },\n  number: /\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,\n  keyword: /\\b(?:after|alias|and|case|catch|cond|def(?:callback|exception|impl|module|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|require|rescue|try|unless|use|when)\\b/,\n  boolean: /\\b(?:true|false|nil)\\b/,\n  operator: [/\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/, {\n    pattern: /([^<])<(?!<)/,\n    lookbehind: !0\n  }, {\n    pattern: /([^>])>(?!>)/,\n    lookbehind: !0\n  }],\n  punctuation: /<<|>>|[.,%\\[\\]{}()]/\n}, Prism.languages.elixir.string.forEach(function (e) {\n  e.inside = {\n    interpolation: {\n      pattern: /#\\{[^}]+\\}/,\n      inside: {\n        delimiter: {\n          pattern: /^#\\{|\\}$/,\n          alias: \"punctuation\"\n        },\n        rest: Prism.languages.elixir\n      }\n    }\n  };\n}), Prism.languages.elm = {\n  comment: /--.*|{-[\\s\\S]*?-}/,\n  char: {\n    pattern: /'(?:[^\\\\'\\r\\n]|\\\\(?:[abfnrtv\\\\']|\\d+|x[0-9a-fA-F]+))'/,\n    greedy: !0\n  },\n  string: [{\n    pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n    greedy: !0\n  }, {\n    pattern: /\"(?:[^\\\\\"\\r\\n]|\\\\(?:[abfnrtv\\\\\"]|\\d+|x[0-9a-fA-F]+))*\"/,\n    greedy: !0\n  }],\n  import_statement: {\n    pattern: /^\\s*import\\s+[A-Z]\\w*(?:\\.[A-Z]\\w*)*(?:\\s+as\\s+([A-Z]\\w*)(?:\\.[A-Z]\\w*)*)?(?:\\s+exposing\\s+)?/m,\n    inside: {\n      keyword: /\\b(?:import|as|exposing)\\b/\n    }\n  },\n  keyword: /\\b(?:alias|as|case|else|exposing|if|in|infixl|infixr|let|module|of|then|type)\\b/,\n  builtin: /\\b(?:abs|acos|always|asin|atan|atan2|ceiling|clamp|compare|cos|curry|degrees|e|flip|floor|fromPolar|identity|isInfinite|isNaN|logBase|max|min|negate|never|not|pi|radians|rem|round|sin|sqrt|tan|toFloat|toPolar|toString|truncate|turns|uncurry|xor)\\b/,\n  number: /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0x[0-9a-f]+)\\b/i,\n  operator: /\\s\\.\\s|[+\\-/*=.$<>:&|^?%#@~!]{2,}|[+\\-/*=$<>:&|^?%#@~!]/,\n  hvariable: /\\b(?:[A-Z]\\w*\\.)*[a-z]\\w*\\b/,\n  constant: /\\b(?:[A-Z]\\w*\\.)*[A-Z]\\w*\\b/,\n  punctuation: /[{}[\\]|(),.:]/\n}, function (e) {\n  e.languages.erb = e.languages.extend(\"ruby\", {}), e.languages.insertBefore(\"erb\", \"comment\", {\n    delimiter: {\n      pattern: /^<%=?|%>$/,\n      alias: \"punctuation\"\n    }\n  }), e.hooks.add(\"before-tokenize\", function (t) {\n    e.languages[\"markup-templating\"].buildPlaceholders(t, \"erb\", /<%=?(?:[^\\r\\n]|[\\r\\n](?!=begin)|[\\r\\n]=begin\\s[\\s\\S]*?^=end)+?%>/gm);\n  }), e.hooks.add(\"after-tokenize\", function (t) {\n    e.languages[\"markup-templating\"].tokenizePlaceholders(t, \"erb\");\n  });\n}(Prism), Prism.languages.erlang = {\n  comment: /%.+/,\n  string: {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n    greedy: !0\n  },\n  \"quoted-function\": {\n    pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'(?=\\()/,\n    alias: \"function\"\n  },\n  \"quoted-atom\": {\n    pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'/,\n    alias: \"atom\"\n  },\n  boolean: /\\b(?:true|false)\\b/,\n  keyword: /\\b(?:fun|when|case|of|end|if|receive|after|try|catch)\\b/,\n  number: [/\\$\\\\?./, /\\d+#[a-z0-9]+/i, /(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i],\n  function: /\\b[a-z][\\w@]*(?=\\()/,\n  variable: {\n    pattern: /(^|[^@])(?:\\b|\\?)[A-Z_][\\w@]*/,\n    lookbehind: !0\n  },\n  operator: [/[=\\/<>:]=|=[:\\/]=|\\+\\+?|--?|[=*\\/!]|\\b(?:bnot|div|rem|band|bor|bxor|bsl|bsr|not|and|or|xor|orelse|andalso)\\b/, {\n    pattern: /(^|[^<])<(?!<)/,\n    lookbehind: !0\n  }, {\n    pattern: /(^|[^>])>(?!>)/,\n    lookbehind: !0\n  }],\n  atom: /\\b[a-z][\\w@]*/,\n  punctuation: /[()[\\]{}:;,.#|]|<<|>>/\n}, Prism.languages.fsharp = Prism.languages.extend(\"clike\", {\n  comment: [{\n    pattern: /(^|[^\\\\])\\(\\*[\\s\\S]*?\\*\\)/,\n    lookbehind: !0\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: !0\n  }],\n  string: {\n    pattern: /(?:\"\"\"[\\s\\S]*?\"\"\"|@\"(?:\"\"|[^\"])*\"|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")B?|'(?:[^\\\\']|\\\\.)'B?/,\n    greedy: !0\n  },\n  \"class-name\": {\n    pattern: /(\\b(?:exception|inherit|interface|new|of|type)\\s+|\\w\\s*:\\s*|\\s:\\??>\\s*)[.\\w]+\\b(?:\\s*(?:->|\\*)\\s*[.\\w]+\\b)*(?!\\s*[:.])/,\n    lookbehind: !0,\n    inside: {\n      operator: /->|\\*/,\n      punctuation: /\\./\n    }\n  },\n  keyword: /\\b(?:let|return|use|yield)(?:!\\B|\\b)|\\b(abstract|and|as|assert|base|begin|class|default|delegate|do|done|downcast|downto|elif|else|end|exception|extern|false|finally|for|fun|function|global|if|in|inherit|inline|interface|internal|lazy|match|member|module|mutable|namespace|new|not|null|of|open|or|override|private|public|rec|select|static|struct|then|to|true|try|type|upcast|val|void|when|while|with|asr|land|lor|lsl|lsr|lxor|mod|sig|atomic|break|checked|component|const|constraint|constructor|continue|eager|event|external|fixed|functor|include|method|mixin|object|parallel|process|protected|pure|sealed|tailcall|trait|virtual|volatile)\\b/,\n  number: [/\\b0x[\\da-fA-F]+(?:un|lf|LF)?\\b/, /\\b0b[01]+(?:y|uy)?\\b/, /(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[fm]|e[+-]?\\d+)?\\b/i, /\\b\\d+(?:[IlLsy]|u[lsy]?|UL)?\\b/],\n  operator: /([<>~&^])\\1\\1|([*.:<>&])\\2|<-|->|[!=:]=|<?\\|{1,3}>?|\\??(?:<=|>=|<>|[-+*/%=<>])\\??|[!?^&]|~[+~-]|:>|:\\?>?/\n}), Prism.languages.insertBefore(\"fsharp\", \"keyword\", {\n  preprocessor: {\n    pattern: /^[^\\r\\n\\S]*#.*/m,\n    alias: \"property\",\n    inside: {\n      directive: {\n        pattern: /(\\s*#)\\b(?:else|endif|if|light|line|nowarn)\\b/,\n        lookbehind: !0,\n        alias: \"keyword\"\n      }\n    }\n  }\n}), Prism.languages.insertBefore(\"fsharp\", \"punctuation\", {\n  \"computation-expression\": {\n    pattern: /[_a-z]\\w*(?=\\s*\\{)/i,\n    alias: \"keyword\"\n  }\n}), Prism.languages.insertBefore(\"fsharp\", \"string\", {\n  annotation: {\n    pattern: /\\[<.+?>\\]/,\n    inside: {\n      punctuation: /^\\[<|>\\]$/,\n      \"class-name\": {\n        pattern: /^\\w+$|(^|;\\s*)[A-Z]\\w*(?=\\()/,\n        lookbehind: !0\n      },\n      \"annotation-content\": {\n        pattern: /[\\s\\S]+/,\n        inside: Prism.languages.fsharp\n      }\n    }\n  }\n}), function (e) {\n  e.languages.flow = e.languages.extend(\"javascript\", {}), e.languages.insertBefore(\"flow\", \"keyword\", {\n    type: [{\n      pattern: /\\b(?:[Nn]umber|[Ss]tring|[Bb]oolean|Function|any|mixed|null|void)\\b/,\n      alias: \"tag\"\n    }]\n  }), e.languages.flow[\"function-variable\"].pattern = /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=\\s*(?:function\\b|(?:\\([^()]*\\)(?:\\s*:\\s*\\w+)?|[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/i, delete e.languages.flow.parameter, e.languages.insertBefore(\"flow\", \"operator\", {\n    \"flow-punctuation\": {\n      pattern: /\\{\\||\\|\\}/,\n      alias: \"punctuation\"\n    }\n  }), Array.isArray(e.languages.flow.keyword) || (e.languages.flow.keyword = [e.languages.flow.keyword]), e.languages.flow.keyword.unshift({\n    pattern: /(^|[^$]\\b)(?:type|opaque|declare|Class)\\b(?!\\$)/,\n    lookbehind: !0\n  }, {\n    pattern: /(^|[^$]\\B)\\$(?:await|Diff|Exact|Keys|ObjMap|PropertyType|Shape|Record|Supertype|Subtype|Enum)\\b(?!\\$)/,\n    lookbehind: !0\n  });\n}(Prism), Prism.languages.fortran = {\n  \"quoted-number\": {\n    pattern: /[BOZ](['\"])[A-F0-9]+\\1/i,\n    alias: \"number\"\n  },\n  string: {\n    pattern: /(?:\\w+_)?(['\"])(?:\\1\\1|&(?:\\r\\n?|\\n)(?:\\s*!.+(?:\\r\\n?|\\n))?|(?!\\1).)*(?:\\1|&)/,\n    inside: {\n      comment: {\n        pattern: /(&(?:\\r\\n?|\\n)\\s*)!.*/,\n        lookbehind: !0\n      }\n    }\n  },\n  comment: {\n    pattern: /!.*/,\n    greedy: !0\n  },\n  boolean: /\\.(?:TRUE|FALSE)\\.(?:_\\w+)?/i,\n  number: /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[ED][+-]?\\d+)?(?:_\\w+)?/i,\n  keyword: [/\\b(?:INTEGER|REAL|DOUBLE ?PRECISION|COMPLEX|CHARACTER|LOGICAL)\\b/i, /\\b(?:END ?)?(?:BLOCK ?DATA|DO|FILE|FORALL|FUNCTION|IF|INTERFACE|MODULE(?! PROCEDURE)|PROGRAM|SELECT|SUBROUTINE|TYPE|WHERE)\\b/i, /\\b(?:ALLOCATABLE|ALLOCATE|BACKSPACE|CALL|CASE|CLOSE|COMMON|CONTAINS|CONTINUE|CYCLE|DATA|DEALLOCATE|DIMENSION|DO|END|EQUIVALENCE|EXIT|EXTERNAL|FORMAT|GO ?TO|IMPLICIT(?: NONE)?|INQUIRE|INTENT|INTRINSIC|MODULE PROCEDURE|NAMELIST|NULLIFY|OPEN|OPTIONAL|PARAMETER|POINTER|PRINT|PRIVATE|PUBLIC|READ|RETURN|REWIND|SAVE|SELECT|STOP|TARGET|WHILE|WRITE)\\b/i, /\\b(?:ASSIGNMENT|DEFAULT|ELEMENTAL|ELSE|ELSEWHERE|ELSEIF|ENTRY|IN|INCLUDE|INOUT|KIND|NULL|ONLY|OPERATOR|OUT|PURE|RECURSIVE|RESULT|SEQUENCE|STAT|THEN|USE)\\b/i],\n  operator: [/\\*\\*|\\/\\/|=>|[=\\/]=|[<>]=?|::|[+\\-*=%]|\\.(?:EQ|NE|LT|LE|GT|GE|NOT|AND|OR|EQV|NEQV)\\.|\\.[A-Z]+\\./i, {\n    pattern: /(^|(?!\\().)\\/(?!\\))/,\n    lookbehind: !0\n  }],\n  punctuation: /\\(\\/|\\/\\)|[(),;:&]/\n}, Prism.languages.gcode = {\n  comment: /;.*|\\B\\(.*?\\)\\B/,\n  string: {\n    pattern: /\"(?:\"\"|[^\"])*\"/,\n    greedy: !0\n  },\n  keyword: /\\b[GM]\\d+(?:\\.\\d+)?\\b/,\n  property: /\\b[A-Z]/,\n  checksum: {\n    pattern: /\\*\\d+/,\n    alias: \"punctuation\"\n  },\n  punctuation: /:/\n}, Prism.languages.gedcom = {\n  \"line-value\": {\n    pattern: /(^\\s*\\d+ +(?:@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@ +)?\\w+ +).+/m,\n    lookbehind: !0,\n    inside: {\n      pointer: {\n        pattern: /^@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@$/,\n        alias: \"variable\"\n      }\n    }\n  },\n  tag: {\n    pattern: /(^\\s*\\d+ +(?:@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@ +)?)\\w+/m,\n    lookbehind: !0,\n    alias: \"string\"\n  },\n  level: {\n    pattern: /(^\\s*)\\d+/m,\n    lookbehind: !0,\n    alias: \"number\"\n  },\n  pointer: {\n    pattern: /@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@/,\n    alias: \"variable\"\n  }\n}, Prism.languages.gherkin = {\n  pystring: {\n    pattern: /(\"\"\"|''')[\\s\\S]+?\\1/,\n    alias: \"string\"\n  },\n  comment: {\n    pattern: /((?:^|\\r?\\n|\\r)[ \\t]*)#.*/,\n    lookbehind: !0\n  },\n  tag: {\n    pattern: /((?:^|\\r?\\n|\\r)[ \\t]*)@\\S*/,\n    lookbehind: !0\n  },\n  feature: {\n    pattern: /((?:^|\\r?\\n|\\r)[ \\t]*)(?:Ability|Ahoy matey!|Arwedd|Aspekt|Besigheid Behoefte|Business Need|Caracteristica|Característica|Egenskab|Egenskap|Eiginleiki|Feature|Fīča|Fitur|Fonctionnalité|Fonksyonalite|Funcionalidade|Funcionalitat|Functionalitate|Funcţionalitate|Funcționalitate|Functionaliteit|Fungsi|Funkcia|Funkcija|Funkcionalitāte|Funkcionalnost|Funkcja|Funksie|Funktionalität|Funktionalitéit|Funzionalità|Hwaet|Hwæt|Jellemző|Karakteristik|laH|Lastnost|Mak|Mogucnost|Mogućnost|Moznosti|Možnosti|OH HAI|Omadus|Ominaisuus|Osobina|Özellik|perbogh|poQbogh malja'|Potrzeba biznesowa|Požadavek|Požiadavka|Pretty much|Qap|Qu'meH 'ut|Savybė|Tính năng|Trajto|Vermoë|Vlastnosť|Właściwość|Značilnost|Δυνατότητα|Λειτουργία|Могућност|Мөмкинлек|Особина|Свойство|Үзенчәлеклелек|Функционал|Функционалност|Функция|Функціонал|תכונה|خاصية|خصوصیت|صلاحیت|کاروبار کی ضرورت|وِیژگی|रूप लेख|ਖਾਸੀਅਤ|ਨਕਸ਼ ਨੁਹਾਰ|ਮੁਹਾਂਦਰਾ|గుణము|ಹೆಚ್ಚಳ|ความต้องการทางธุรกิจ|ความสามารถ|โครงหลัก|기능|フィーチャ|功能|機能):(?:[^:]+(?:\\r?\\n|\\r|$))*/,\n    lookbehind: !0,\n    inside: {\n      important: {\n        pattern: /(:)[^\\r\\n]+/,\n        lookbehind: !0\n      },\n      keyword: /[^:\\r\\n]+:/\n    }\n  },\n  scenario: {\n    pattern: /((?:^|\\r?\\n|\\r)[ \\t]*)(?:Abstract Scenario|Abstrakt Scenario|Achtergrond|Aer|Ær|Agtergrond|All y'all|Antecedentes|Antecedents|Atburðarás|Atburðarásir|Awww, look mate|B4|Background|Baggrund|Bakgrund|Bakgrunn|Bakgrunnur|Beispiele|Beispiller|Bối cảnh|Cefndir|Cenario|Cenário|Cenario de Fundo|Cenário de Fundo|Cenarios|Cenários|Contesto|Context|Contexte|Contexto|Conto|Contoh|Contone|Dæmi|Dasar|Dead men tell no tales|Delineacao do Cenario|Delineação do Cenário|Dis is what went down|Dữ liệu|Dyagram senaryo|Dyagram Senaryo|Egzanp|Ejemplos|Eksempler|Ekzemploj|Enghreifftiau|Esbozo do escenario|Escenari|Escenario|Esempi|Esquema de l'escenari|Esquema del escenario|Esquema do Cenario|Esquema do Cenário|Examples|EXAMPLZ|Exempel|Exemple|Exemples|Exemplos|First off|Fono|Forgatókönyv|Forgatókönyv vázlat|Fundo|Geçmiş|ghantoH|Grundlage|Hannergrond|Háttér|Heave to|Istorik|Juhtumid|Keadaan|Khung kịch bản|Khung tình huống|Kịch bản|Koncept|Konsep skenario|Kontèks|Kontekst|Kontekstas|Konteksts|Kontext|Konturo de la scenaro|Latar Belakang|lut|lut chovnatlh|lutmey|Lýsing Atburðarásar|Lýsing Dæma|Menggariskan Senario|MISHUN|MISHUN SRSLY|mo'|Náčrt Scenára|Náčrt Scénáře|Náčrt Scenáru|Oris scenarija|Örnekler|Osnova|Osnova Scenára|Osnova scénáře|Osnutek|Ozadje|Paraugs|Pavyzdžiai|Példák|Piemēri|Plan du scénario|Plan du Scénario|Plan senaryo|Plan Senaryo|Plang vum Szenario|Pozadí|Pozadie|Pozadina|Príklady|Příklady|Primer|Primeri|Primjeri|Przykłady|Raamstsenaarium|Reckon it's like|Rerefons|Scenár|Scénář|Scenarie|Scenarij|Scenarijai|Scenarijaus šablonas|Scenariji|Scenārijs|Scenārijs pēc parauga|Scenarijus|Scenario|Scénario|Scenario Amlinellol|Scenario Outline|Scenario Template|Scenariomal|Scenariomall|Scenarios|Scenariu|Scenariusz|Scenaro|Schema dello scenario|Se ðe|Se the|Se þe|Senario|Senaryo|Senaryo deskripsyon|Senaryo Deskripsyon|Senaryo taslağı|Shiver me timbers|Situācija|Situai|Situasie|Situasie Uiteensetting|Skenario|Skenario konsep|Skica|Structura scenariu|Structură scenariu|Struktura scenarija|Stsenaarium|Swa|Swa hwaer swa|Swa hwær swa|Szablon scenariusza|Szenario|Szenariogrundriss|Tapaukset|Tapaus|Tapausaihio|Taust|Tausta|Template Keadaan|Template Senario|Template Situai|The thing of it is|Tình huống|Variantai|Voorbeelde|Voorbeelden|Wharrimean is|Yo\\-ho\\-ho|You'll wanna|Założenia|Παραδείγματα|Περιγραφή Σεναρίου|Σενάρια|Σενάριο|Υπόβαθρο|Кереш|Контекст|Концепт|Мисаллар|Мисоллар|Основа|Передумова|Позадина|Предистория|Предыстория|Приклади|Пример|Примери|Примеры|Рамка на сценарий|Скица|Структура сценарија|Структура сценария|Структура сценарію|Сценарий|Сценарий структураси|Сценарийның төзелеше|Сценарији|Сценарио|Сценарій|Тарих|Үрнәкләр|דוגמאות|רקע|תבנית תרחיש|תרחיש|الخلفية|الگوی سناریو|امثلة|پس منظر|زمینه|سناریو|سيناريو|سيناريو مخطط|مثالیں|منظر نامے کا خاکہ|منظرنامہ|نمونه ها|उदाहरण|परिदृश्य|परिदृश्य रूपरेखा|पृष्ठभूमि|ਉਦਾਹਰਨਾਂ|ਪਟਕਥਾ|ਪਟਕਥਾ ਢਾਂਚਾ|ਪਟਕਥਾ ਰੂਪ ਰੇਖਾ|ਪਿਛੋਕੜ|ఉదాహరణలు|కథనం|నేపథ్యం|సన్నివేశం|ಉದಾಹರಣೆಗಳು|ಕಥಾಸಾರಾಂಶ|ವಿವರಣೆ|ಹಿನ್ನೆಲೆ|โครงสร้างของเหตุการณ์|ชุดของตัวอย่าง|ชุดของเหตุการณ์|แนวคิด|สรุปเหตุการณ์|เหตุการณ์|배경|시나리오|시나리오 개요|예|サンプル|シナリオ|シナリオアウトライン|シナリオテンプレ|シナリオテンプレート|テンプレ|例|例子|剧本|剧本大纲|劇本|劇本大綱|场景|场景大纲|場景|場景大綱|背景):[^:\\r\\n]*/,\n    lookbehind: !0,\n    inside: {\n      important: {\n        pattern: /(:)[^\\r\\n]*/,\n        lookbehind: !0\n      },\n      keyword: /[^:\\r\\n]+:/\n    }\n  },\n  \"table-body\": {\n    pattern: /((?:\\r?\\n|\\r)[ \\t]*\\|.+\\|[^\\r\\n]*)+/,\n    lookbehind: !0,\n    inside: {\n      outline: {\n        pattern: /<[^>]+?>/,\n        alias: \"variable\"\n      },\n      td: {\n        pattern: /\\s*[^\\s|][^|]*/,\n        alias: \"string\"\n      },\n      punctuation: /\\|/\n    }\n  },\n  \"table-head\": {\n    pattern: /(?:\\r?\\n|\\r)[ \\t]*\\|.+\\|[^\\r\\n]*/,\n    inside: {\n      th: {\n        pattern: /\\s*[^\\s|][^|]*/,\n        alias: \"variable\"\n      },\n      punctuation: /\\|/\n    }\n  },\n  atrule: {\n    pattern: /((?:\\r?\\n|\\r)[ \\t]+)(?:'ach|'a|'ej|7|a|A také|A taktiež|A tiež|A zároveň|Aber|Ac|Adott|Akkor|Ak|Aleshores|Ale|Ali|Allora|Alors|Als|Ama|Amennyiben|Amikor|Ampak|an|AN|Ananging|And y'all|And|Angenommen|Anrhegedig a|An|Apabila|Atès|Atesa|Atunci|Avast!|Aye|A|awer|Bagi|Banjur|Bet|Biết|Blimey!|Buh|But at the end of the day I reckon|But y'all|But|BUT|Cal|Când|Cando|Cand|Ce|Cuando|Če|Ða ðe|Ða|Dadas|Dada|Dados|Dado|DaH ghu' bejlu'|dann|Dann|Dano|Dan|Dar|Dat fiind|Data|Date fiind|Date|Dati fiind|Dati|Daţi fiind|Dați fiind|Dato|DEN|Den youse gotta|Dengan|De|Diberi|Diyelim ki|Donada|Donat|Donitaĵo|Do|Dun|Duota|Ðurh|Eeldades|Ef|Eğer ki|Entao|Então|Entón|Entonces|En|Epi|E|És|Etant donnée|Etant donné|Et|Étant données|Étant donnée|Étant donné|Etant données|Etant donnés|Étant donnés|Fakat|Gangway!|Gdy|Gegeben seien|Gegeben sei|Gegeven|Gegewe|ghu' noblu'|Gitt|Given y'all|Given|Givet|Givun|Ha|Cho|I CAN HAZ|In|Ir|It's just unbelievable|I|Ja|Jeśli|Jeżeli|Kadar|Kada|Kad|Kai|Kaj|Když|Keď|Kemudian|Ketika|Khi|Kiedy|Ko|Kuid|Kui|Kun|Lan|latlh|Le sa a|Let go and haul|Le|Lè sa a|Lè|Logo|Lorsqu'<|Lorsque|mä|Maar|Mais|Mając|Majd|Maka|Manawa|Mas|Ma|Menawa|Men|Mutta|Nalikaning|Nalika|Nanging|Når|När|Nato|Nhưng|Niin|Njuk|O zaman|Og|Och|Oletetaan|Onda|Ond|Oraz|Pak|Pero|Però|Podano|Pokiaľ|Pokud|Potem|Potom|Privzeto|Pryd|qaSDI'|Quando|Quand|Quan|Så|Sed|Se|Siis|Sipoze ke|Sipoze Ke|Sipoze|Si|Şi|Și|Soit|Stel|Tada|Tad|Takrat|Tak|Tapi|Ter|Tetapi|Tha the|Tha|Then y'all|Then|Thì|Thurh|Toda|Too right|ugeholl|Und|Un|Và|vaj|Vendar|Ve|wann|Wanneer|WEN|Wenn|When y'all|When|Wtedy|Wun|Y'know|Yeah nah|Yna|Youse know like when|Youse know when youse got|Y|Za predpokladu|Za předpokladu|Zadani|Zadano|Zadan|Zadate|Zadato|Zakładając|Zaradi|Zatati|Þa þe|Þa|Þá|Þegar|Þurh|Αλλά|Δεδομένου|Και|Όταν|Τότε|А також|Агар|Але|Али|Аммо|А|Әгәр|Әйтик|Әмма|Бирок|Ва|Вә|Дадено|Дано|Допустим|Если|Задате|Задати|Задато|И|І|К тому же|Када|Кад|Когато|Когда|Коли|Ләкин|Лекин|Нәтиҗәдә|Нехай|Но|Онда|Припустимо, що|Припустимо|Пусть|Также|Та|Тогда|Тоді|То|Унда|Һәм|Якщо|אבל|אזי|אז|בהינתן|וגם|כאשר|آنگاه|اذاً|اگر|اما|اور|با فرض|بالفرض|بفرض|پھر|تب|ثم|جب|عندما|فرض کیا|لكن|لیکن|متى|هنگامی|و|अगर|और|कदा|किन्तु|चूंकि|जब|तथा|तदा|तब|परन्तु|पर|यदि|ਅਤੇ|ਜਦੋਂ|ਜਿਵੇਂ ਕਿ|ਜੇਕਰ|ਤਦ|ਪਰ|అప్పుడు|ఈ పరిస్థితిలో|కాని|చెప్పబడినది|మరియు|ಆದರೆ|ನಂತರ|ನೀಡಿದ|ಮತ್ತು|ಸ್ಥಿತಿಯನ್ನು|กำหนดให้|ดังนั้น|แต่|เมื่อ|และ|그러면<|그리고<|단<|만약<|만일<|먼저<|조건<|하지만<|かつ<|しかし<|ただし<|ならば<|もし<|並且<|但し<|但是<|假如<|假定<|假設<|假设<|前提<|同时<|同時<|并且<|当<|當<|而且<|那么<|那麼<)(?=[ \\t]+)/,\n    lookbehind: !0\n  },\n  string: {\n    pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|'(?:\\\\.|[^'\\\\\\r\\n])*'/,\n    inside: {\n      outline: {\n        pattern: /<[^>]+?>/,\n        alias: \"variable\"\n      }\n    }\n  },\n  outline: {\n    pattern: /<[^>]+?>/,\n    alias: \"variable\"\n  }\n}, Prism.languages.git = {\n  comment: /^#.*/m,\n  deleted: /^[-–].*/m,\n  inserted: /^\\+.*/m,\n  string: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/m,\n  command: {\n    pattern: /^.*\\$ git .*$/m,\n    inside: {\n      parameter: /\\s--?\\w+/m\n    }\n  },\n  coord: /^@@.*@@$/m,\n  commit_sha1: /^commit \\w{40}$/m\n}, Prism.languages.glsl = Prism.languages.extend(\"clike\", {\n  comment: [/\\/\\*[\\s\\S]*?\\*\\//, /\\/\\/(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/],\n  number: /(?:\\b0x[\\da-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ulf]*/i,\n  keyword: /\\b(?:attribute|const|uniform|varying|buffer|shared|coherent|volatile|restrict|readonly|writeonly|atomic_uint|layout|centroid|flat|smooth|noperspective|patch|sample|break|continue|do|for|while|switch|case|default|if|else|subroutine|in|out|inout|float|double|int|void|bool|true|false|invariant|precise|discard|return|d?mat[234](?:x[234])?|[ibdu]?vec[234]|uint|lowp|mediump|highp|precision|[iu]?sampler[123]D|[iu]?samplerCube|sampler[12]DShadow|samplerCubeShadow|[iu]?sampler[12]DArray|sampler[12]DArrayShadow|[iu]?sampler2DRect|sampler2DRectShadow|[iu]?samplerBuffer|[iu]?sampler2DMS(?:Array)?|[iu]?samplerCubeArray|samplerCubeArrayShadow|[iu]?image[123]D|[iu]?image2DRect|[iu]?imageCube|[iu]?imageBuffer|[iu]?image[12]DArray|[iu]?imageCubeArray|[iu]?image2DMS(?:Array)?|struct|common|partition|active|asm|class|union|enum|typedef|template|this|resource|goto|inline|noinline|public|static|extern|external|interface|long|short|half|fixed|unsigned|superp|input|output|hvec[234]|fvec[234]|sampler3DRect|filter|sizeof|cast|namespace|using)\\b/\n}), Prism.languages.insertBefore(\"glsl\", \"comment\", {\n  preprocessor: {\n    pattern: /(^[ \\t]*)#(?:(?:define|undef|if|ifdef|ifndef|else|elif|endif|error|pragma|extension|version|line)\\b)?/m,\n    lookbehind: !0,\n    alias: \"builtin\"\n  }\n}), Prism.languages.gamemakerlanguage = Prism.languages.gml = Prism.languages.extend(\"clike\", {\n  number: /(?:\\b0x[\\da-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ulf]*/i,\n  keyword: /\\b(?:if|else|switch|case|default|break|for|repeat|while|do|until|continue|exit|return|globalvar|var|enum)\\b/,\n  operator: /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]|\\b(?:or|and|not|with|at|xor|not)\\b/,\n  constant: /\\b(self|other|all|noone|global|local|undefined|pointer_(?:invalid|null)|action_(?:stop|restart|continue|reverse)|pi|GM_build_date|GM_version|timezone_(?:local|utc)|gamespeed_(?:fps|microseconds)|ev_(?:create|destroy|step|alarm|keyboard|mouse|collision|other|draw|draw_(?:begin|end|pre|post)|keypress|keyrelease|trigger|(?:left|right|middle|no)_button|(?:left|right|middle)_press|(?:left|right|middle)_release|mouse_(?:enter|leave|wheel_up|wheel_down)|global_(?:left|right|middle)_button|global_(?:left|right|middle)_press|global_(?:left|right|middle)_release|joystick(?:1|2)_(?:left|right|up|down|button1|button2|button3|button4|button5|button6|button7|button8)|outside|boundary|game_start|game_end|room_start|room_end|no_more_lives|animation_end|end_of_path|no_more_health|user\\d|step_(?:normal|begin|end)|gui|gui_begin|gui_end)|vk_(?:nokey|anykey|enter|return|shift|control|alt|escape|space|backspace|tab|pause|printscreen|left|right|up|down|home|end|delete|insert|pageup|pagedown|f\\d|numpad\\d|divide|multiply|subtract|add|decimal|lshift|lcontrol|lalt|rshift|rcontrol|ralt)|mb_(?:any|none|left|right|middle)|c_(?:aqua|black|blue|dkgray|fuchsia|gray|green|lime|ltgray|maroon|navy|olive|purple|red|silver|teal|white|yellow|orange)|fa_(?:left|center|right|top|middle|bottom|readonly|hidden|sysfile|volumeid|directory|archive)|pr_(?:pointlist|linelist|linestrip|trianglelist|trianglestrip|trianglefan)|bm_(?:complex|normal|add|max|subtract|zero|one|src_colour|inv_src_colour|src_color|inv_src_color|src_alpha|inv_src_alpha|dest_alpha|inv_dest_alpha|dest_colour|inv_dest_colour|dest_color|inv_dest_color|src_alpha_sat)|audio_(?:falloff_(?:none|inverse_distance|inverse_distance_clamped|linear_distance|linear_distance_clamped|exponent_distance|exponent_distance_clamped)|old_system|new_system|mono|stereo|3d)|cr_(?:default|none|arrow|cross|beam|size_nesw|size_ns|size_nwse|size_we|uparrow|hourglass|drag|appstart|handpoint|size_all)|spritespeed_framesper(?:second|gameframe)|asset_(?:object|unknown|sprite|sound|room|path|script|font|timeline|tiles|shader)|ds_type_(?:map|list|stack|queue|grid|priority)|ef_(?:explosion|ring|ellipse|firework|smoke|smokeup|star|spark|flare|cloud|rain|snow)|pt_shape_(?:pixel|disk|square|line|star|circle|ring|sphere|flare|spark|explosion|cloud|smoke|snow)|ps_(?:distr|shape)_(?:linear|gaussian|invgaussian|rectangle|ellipse|diamond|line)|ty_(?:real|string)|dll_(?:cdel|cdecl|stdcall)|matrix_(?:view|projection|world)|os_(?:win32|windows|macosx|ios|android|linux|unknown|winphone|win8native|psvita|ps4|xboxone|ps3|uwp)|browser_(?:not_a_browser|unknown|ie|firefox|chrome|safari|safari_mobile|opera|tizen|windows_store|ie_mobile)|device_ios_(?:unknown|iphone|iphone_retina|ipad|ipad_retina|iphone5|iphone6|iphone6plus)|device_(?:emulator|tablet)|display_(?:landscape|landscape_flipped|portrait|portrait_flipped)|of_challenge_(?:win|lose|tie)|leaderboard_type_(?:number|time_mins_secs)|cmpfunc_(?:never|less|equal|lessequal|greater|notequal|greaterequal|always)|cull_(?:noculling|clockwise|counterclockwise)|lighttype_(?:dir|point)|iap_(?:ev_storeload|ev_product|ev_purchase|ev_consume|ev_restore|storeload_ok|storeload_failed|status_uninitialised|status_unavailable|status_loading|status_available|status_processing|status_restoring|failed|unavailable|available|purchased|canceled|refunded)|fb_login_(?:default|fallback_to_webview|no_fallback_to_webview|forcing_webview|use_system_account|forcing_safari)|phy_joint_(?:anchor_1_x|anchor_1_y|anchor_2_x|anchor_2_y|reaction_force_x|reaction_force_y|reaction_torque|motor_speed|angle|motor_torque|max_motor_torque|translation|speed|motor_force|max_motor_force|length_1|length_2|damping_ratio|frequency|lower_angle_limit|upper_angle_limit|angle_limits|max_length|max_torque|max_force)|phy_debug_render_(?:aabb|collision_pairs|coms|core_shapes|joints|obb|shapes)|phy_particle_flag_(?:water|zombie|wall|spring|elastic|viscous|powder|tensile|colourmixing|colormixing)|phy_particle_group_flag_(?:solid|rigid)|phy_particle_data_flag_(?:typeflags|position|velocity|colour|color|category)|achievement_(?:our_info|friends_info|leaderboard_info|info|filter_(?:all_players|friends_only|favorites_only)|type_challenge|type_score_challenge|pic_loaded|show_(?:ui|profile|leaderboard|achievement|bank|friend_picker|purchase_prompt))|network_(?:socket_(?:tcp|udp|bluetooth)|type_(?:connect|disconnect|data|non_blocking_connect)|config_(?:connect_timeout|use_non_blocking_socket|enable_reliable_udp|disable_reliable_udp))|buffer_(?:fixed|grow|wrap|fast|vbuffer|network|u8|s8|u16|s16|u32|s32|u64|f16|f32|f64|bool|text|string|seek_start|seek_relative|seek_end|generalerror|outofspace|outofbounds|invalidtype)|gp_(?:face\\d|shoulderl|shoulderr|shoulderlb|shoulderrb|select|start|stickl|stickr|padu|padd|padl|padr|axislh|axislv|axisrh|axisrv)|ov_(?:friends|community|players|settings|gamegroup|achievements)|lb_sort_(?:none|ascending|descending)|lb_disp_(?:none|numeric|time_sec|time_ms)|ugc_(?:result_success|filetype_(?:community|microtrans)|visibility_(?:public|friends_only|private)|query_RankedBy(?:Vote|PublicationDate|Trend|NumTimesReported|TotalVotesAsc|VotesUp|TextSearch)|query_(?:AcceptedForGameRankedByAcceptanceDate|FavoritedByFriendsRankedByPublicationDate|CreatedByFriendsRankedByPublicationDate|NotYetRated)|sortorder_CreationOrder(?:Desc|Asc)|sortorder_(?:TitleAsc|LastUpdatedDesc|SubscriptionDateDesc|VoteScoreDesc|ForModeration)|list_(?:Published|VotedOn|VotedUp|VotedDown|WillVoteLater|Favorited|Subscribed|UsedOrPlayed|Followed)|match_(?:Items|Items_Mtx|Items_ReadyToUse|Collections|Artwork|Videos|Screenshots|AllGuides|WebGuides|IntegratedGuides|UsableInGame|ControllerBindings))|vertex_usage_(?:position|colour|color|normal|texcoord|textcoord|blendweight|blendindices|psize|tangent|binormal|fog|depth|sample)|vertex_type_(?:float\\d|colour|color|ubyte4)|layerelementtype_(?:undefined|background|instance|oldtilemap|sprite|tilemap|particlesystem|tile)|tile_(?:rotate|flip|mirror|index_mask)|input_type|se_(?:chorus|compressor|echo|equalizer|flanger|gargle|none|reverb)|text_type|(obj|scr|spr|rm)\\w+)\\b/,\n  variable: /\\b(x|y|(?:x|y)(?:previous|start)|(?:h|v)speed|direction|speed|friction|gravity|gravity_direction|path_(?:index|position|positionprevious|speed|scale|orientation|endaction)|object_index|id|solid|persistent|mask_index|instance_(?:count|id)|alarm|timeline_(?:index|position|speed|running|loop)|visible|sprite_(?:index|width|height|xoffset|yoffset)|image_(?:number|index|speed|depth|xscale|yscale|angle|alpha|blend)|bbox_(?:left|right|top|bottom)|layer|phy_(?:rotation|(?:position|linear_velocity|speed|com|collision|col_normal)_(?:x|y)|angular_(?:velocity|damping)|position_(?:x|y)previous|speed|linear_damping|bullet|fixed_rotation|active|mass|inertia|dynamic|kinematic|sleeping|collision_points)|working_directory|webgl_enabled|view_(?:(?:y|x|w|h)view|(?:y|x|w|h)port|(?:v|h)(?:speed|border)|visible|surface_id|object|enabled|current|angle)|undefined|transition_(?:steps|kind|color)|temp_directory|show_(?:score|lives|health)|secure_mode|score|room_(?:width|speed|persistent|last|height|first|caption)|room|pointer_(?:null|invalid)|os_(?:version|type|device|browser)|mouse_(?:y|x|lastbutton|button)|lives|keyboard_(?:string|lastkey|lastchar|key)|iap_data|health|gamemaker_(?:version|registered|pro)|game_(?:save|project|display)_(?:id|name)|fps_real|fps|event_(?:type|object|number|action)|error_(?:occurred|last)|display_aa|delta_time|debug_mode|cursor_sprite|current_(?:year|weekday|time|second|month|minute|hour|day)|caption_(?:score|lives|health)|browser_(?:width|height)|background_(?:yscale|y|xscale|x|width|vtiled|vspeed|visible|showcolour|showcolor|index|htiled|hspeed|height|foreground|colour|color|blend|alpha)|async_load|application_surface|argument(?:_relitive|_count|\\d)|argument|global|local|self|other)\\b/\n}), Prism.languages.go = Prism.languages.extend(\"clike\", {\n  keyword: /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,\n  builtin: /\\b(?:bool|byte|complex(?:64|128)|error|float(?:32|64)|rune|string|u?int(?:8|16|32|64)?|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(?:ln)?|real|recover)\\b/,\n  boolean: /\\b(?:_|iota|nil|true|false)\\b/,\n  operator: /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,\n  number: /(?:\\b0x[a-f\\d]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[-+]?\\d+)?)i?/i,\n  string: {\n    pattern: /([\"'`])(\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n    greedy: !0\n  }\n}), delete Prism.languages.go[\"class-name\"], Prism.languages.graphql = {\n  comment: /#.*/,\n  string: {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n    greedy: !0\n  },\n  number: /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  boolean: /\\b(?:true|false)\\b/,\n  variable: /\\$[a-z_]\\w*/i,\n  directive: {\n    pattern: /@[a-z_]\\w*/i,\n    alias: \"function\"\n  },\n  \"attr-name\": {\n    pattern: /[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n    greedy: !0\n  },\n  \"class-name\": {\n    pattern: /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+)[a-zA-Z_]\\w*/,\n    lookbehind: !0\n  },\n  fragment: {\n    pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n    lookbehind: !0,\n    alias: \"function\"\n  },\n  keyword: /\\b(?:enum|fragment|implements|input|interface|mutation|on|query|scalar|schema|type|union)\\b/,\n  operator: /[!=|]|\\.{3}/,\n  punctuation: /[!(){}\\[\\]:=,]/,\n  constant: /\\b(?!ID\\b)[A-Z][A-Z_\\d]*\\b/\n}, Prism.languages.groovy = Prism.languages.extend(\"clike\", {\n  keyword: /\\b(?:as|def|in|abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\\b/,\n  string: [{\n    pattern: /(\"\"\"|''')[\\s\\S]*?\\1|(?:\\$\\/)(?:\\$\\/\\$|[\\s\\S])*?\\/\\$/,\n    greedy: !0\n  }, {\n    pattern: /([\"'\\/])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: !0\n  }],\n  number: /\\b(?:0b[01_]+|0x[\\da-f_]+(?:\\.[\\da-f_p\\-]+)?|[\\d_]+(?:\\.[\\d_]+)?(?:e[+-]?[\\d]+)?)[glidf]?\\b/i,\n  operator: {\n    pattern: /(^|[^.])(?:~|==?~?|\\?[.:]?|\\*(?:[.=]|\\*=?)?|\\.[@&]|\\.\\.<|\\.{1,2}(?!\\.)|-[-=>]?|\\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\\|[|=]?|\\/=?|\\^=?|%=?)/,\n    lookbehind: !0\n  },\n  punctuation: /\\.+|[{}[\\];(),:$]/\n}), Prism.languages.insertBefore(\"groovy\", \"string\", {\n  shebang: {\n    pattern: /#!.+/,\n    alias: \"comment\"\n  }\n}), Prism.languages.insertBefore(\"groovy\", \"punctuation\", {\n  \"spock-block\": /\\b(?:setup|given|when|then|and|cleanup|expect|where):/\n}), Prism.languages.insertBefore(\"groovy\", \"function\", {\n  annotation: {\n    alias: \"punctuation\",\n    pattern: /(^|[^.])@\\w+/,\n    lookbehind: !0\n  }\n}), Prism.hooks.add(\"wrap\", function (e) {\n  if (\"groovy\" === e.language && \"string\" === e.type) {\n    var t = e.content[0];\n\n    if (\"'\" != t) {\n      var n = /([^\\\\])(?:\\$(?:\\{.*?\\}|[\\w.]+))/;\n      \"$\" === t && (n = /([^\\$])(?:\\$(?:\\{.*?\\}|[\\w.]+))/), e.content = e.content.replace(/&lt;/g, \"<\").replace(/&amp;/g, \"&\"), e.content = Prism.highlight(e.content, {\n        expression: {\n          pattern: n,\n          lookbehind: !0,\n          inside: Prism.languages.groovy\n        }\n      }), e.classes.push(\"/\" === t ? \"regex\" : \"gstring\");\n    }\n  }\n}), Prism.languages.less = Prism.languages.extend(\"css\", {\n  comment: [/\\/\\*[\\s\\S]*?\\*\\//, {\n    pattern: /(^|[^\\\\])\\/\\/.*/,\n    lookbehind: !0\n  }],\n  atrule: {\n    pattern: /@[\\w-]+?(?:\\([^{}]+\\)|[^(){};])*?(?=\\s*\\{)/i,\n    inside: {\n      punctuation: /[:()]/\n    }\n  },\n  selector: {\n    pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\([^{}]*\\)|[^{};@])*?(?=\\s*\\{)/,\n    inside: {\n      variable: /@+[\\w-]+/\n    }\n  },\n  property: /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/i,\n  operator: /[+\\-*\\/]/\n}), Prism.languages.insertBefore(\"less\", \"property\", {\n  variable: [{\n    pattern: /@[\\w-]+\\s*:/,\n    inside: {\n      punctuation: /:/\n    }\n  }, /@@?[\\w-]+/],\n  \"mixin-usage\": {\n    pattern: /([{;]\\s*)[.#](?!\\d)[\\w-]+.*?(?=[(;])/,\n    lookbehind: !0,\n    alias: \"function\"\n  }\n}), function (e) {\n  e.languages.handlebars = {\n    comment: /\\{\\{![\\s\\S]*?\\}\\}/,\n    delimiter: {\n      pattern: /^\\{\\{\\{?|\\}\\}\\}?$/i,\n      alias: \"punctuation\"\n    },\n    string: /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    number: /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n    boolean: /\\b(?:true|false)\\b/,\n    block: {\n      pattern: /^(\\s*~?\\s*)[#\\/]\\S+?(?=\\s*~?\\s*$|\\s)/i,\n      lookbehind: !0,\n      alias: \"keyword\"\n    },\n    brackets: {\n      pattern: /\\[[^\\]]+\\]/,\n      inside: {\n        punctuation: /\\[|\\]/,\n        variable: /[\\s\\S]+/\n      }\n    },\n    punctuation: /[!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,\n    variable: /[^!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/\n  }, e.hooks.add(\"before-tokenize\", function (t) {\n    e.languages[\"markup-templating\"].buildPlaceholders(t, \"handlebars\", /\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g);\n  }), e.hooks.add(\"after-tokenize\", function (t) {\n    e.languages[\"markup-templating\"].tokenizePlaceholders(t, \"handlebars\");\n  });\n}(Prism), Prism.languages.haskell = {\n  comment: {\n    pattern: /(^|[^-!#$%*+=?&@|~.:<>^\\\\\\/])(?:--[^-!#$%*+=?&@|~.:<>^\\\\\\/].*|{-[\\s\\S]*?-})/m,\n    lookbehind: !0\n  },\n  char: /'(?:[^\\\\']|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|\\d+|o[0-7]+|x[0-9a-fA-F]+))'/,\n  string: {\n    pattern: /\"(?:[^\\\\\"]|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|\\d+|o[0-7]+|x[0-9a-fA-F]+)|\\\\\\s+\\\\)*\"/,\n    greedy: !0\n  },\n  keyword: /\\b(?:case|class|data|deriving|do|else|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\\b/,\n  import_statement: {\n    pattern: /((?:\\r?\\n|\\r|^)\\s*)import\\s+(?:qualified\\s+)?(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*(?:\\s+as\\s+(?:[A-Z][_a-zA-Z0-9']*)(?:\\.[A-Z][\\w']*)*)?(?:\\s+hiding\\b)?/m,\n    lookbehind: !0,\n    inside: {\n      keyword: /\\b(?:import|qualified|as|hiding)\\b/\n    }\n  },\n  builtin: /\\b(?:abs|acos|acosh|all|and|any|appendFile|approxRational|asTypeOf|asin|asinh|atan|atan2|atanh|basicIORun|break|catch|ceiling|chr|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|denominator|digitToInt|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromDouble|fromEnum|fromInt|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|group|head|id|inRange|index|init|intToDigit|interact|ioError|isAlpha|isAlphaNum|isAscii|isControl|isDenormalized|isDigit|isHexDigit|isIEEE|isInfinite|isLower|isNaN|isNegativeZero|isOctDigit|isPrint|isSpace|isUpper|iterate|last|lcm|length|lex|lexDigits|lexLitChar|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|numerator|odd|or|ord|otherwise|pack|pi|pred|primExitWith|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|range|rangeSize|read|readDec|readFile|readFloat|readHex|readIO|readInt|readList|readLitChar|readLn|readOct|readParen|readSigned|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showInt|showList|showLitChar|showParen|showSigned|showString|shows|showsPrec|significand|signum|sin|sinh|snd|sort|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|threadToIOResult|toEnum|toInt|toInteger|toLower|toRational|toUpper|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\\b/,\n  number: /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0o[0-7]+|0x[0-9a-f]+)\\b/i,\n  operator: /\\s\\.\\s|[-!#$%*+=?&@|~.:<>^\\\\\\/]*\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]+|[-!#$%*+=?&@|~.:<>^\\\\\\/]+\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]*|[-!#$%*+=?&@|~:<>^\\\\\\/]+|`([A-Z][\\w']*\\.)*[_a-z][\\w']*`/,\n  hvariable: /\\b(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*\\b/,\n  constant: /\\b(?:[A-Z][\\w']*\\.)*[A-Z][\\w']*\\b/,\n  punctuation: /[{}[\\];(),.:]/\n}, Prism.languages.hs = Prism.languages.haskell, Prism.languages.haxe = Prism.languages.extend(\"clike\", {\n  string: {\n    pattern: /([\"'])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n    greedy: !0,\n    inside: {\n      interpolation: {\n        pattern: /(^|[^\\\\])\\$(?:\\w+|\\{[^}]+\\})/,\n        lookbehind: !0,\n        inside: {\n          interpolation: {\n            pattern: /^\\$\\w*/,\n            alias: \"variable\"\n          }\n        }\n      }\n    }\n  },\n  keyword: /\\bthis\\b|\\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|from|for|function|if|implements|import|in|inline|interface|macro|new|null|override|public|private|return|static|super|switch|throw|to|try|typedef|using|var|while)(?!\\.)\\b/,\n  operator: /\\.{3}|\\+\\+?|-[->]?|[=!]=?|&&?|\\|\\|?|<[<=]?|>[>=]?|[*\\/%~^]/\n}), Prism.languages.insertBefore(\"haxe\", \"class-name\", {\n  regex: {\n    pattern: /~\\/(?:[^\\/\\\\\\r\\n]|\\\\.)+\\/[igmsu]*/,\n    greedy: !0\n  }\n}), Prism.languages.insertBefore(\"haxe\", \"keyword\", {\n  preprocessor: {\n    pattern: /#\\w+/,\n    alias: \"builtin\"\n  },\n  metadata: {\n    pattern: /@:?\\w+/,\n    alias: \"symbol\"\n  },\n  reification: {\n    pattern: /\\$(?:\\w+|(?=\\{))/,\n    alias: \"variable\"\n  }\n}), Prism.languages.haxe.string.inside.interpolation.inside.rest = Prism.languages.haxe, delete Prism.languages.haxe[\"class-name\"], Prism.languages.hcl = {\n  comment: /(?:\\/\\/|#).*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n  heredoc: {\n    pattern: /<<-?(\\w+)[\\s\\S]*?^\\s*\\1/m,\n    greedy: !0,\n    alias: \"string\"\n  },\n  keyword: [{\n    pattern: /(?:resource|data)\\s+(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")(?=\\s+\"[\\w-]+\"\\s+{)/i,\n    inside: {\n      type: {\n        pattern: /(resource|data|\\s+)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")/i,\n        lookbehind: !0,\n        alias: \"variable\"\n      }\n    }\n  }, {\n    pattern: /(?:provider|provisioner|variable|output|module|backend)\\s+(?:[\\w-]+|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")\\s+(?={)/i,\n    inside: {\n      type: {\n        pattern: /(provider|provisioner|variable|output|module|backend)\\s+(?:[\\w-]+|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")\\s+/i,\n        lookbehind: !0,\n        alias: \"variable\"\n      }\n    }\n  }, {\n    pattern: /[\\w-]+(?=\\s+{)/\n  }],\n  property: [/[\\w-\\.]+(?=\\s*=(?!=))/, /\"(?:\\\\[\\s\\S]|[^\\\\\"])+\"(?=\\s*[:=])/],\n  string: {\n    pattern: /\"(?:[^\\\\$\"]|\\\\[\\s\\S]|\\$(?:(?=\")|\\$+|[^\"${])|\\$\\{(?:[^{}\"]|\"(?:[^\\\\\"]|\\\\[\\s\\S])*\")*\\})*\"/,\n    greedy: !0,\n    inside: {\n      interpolation: {\n        pattern: /(^|[^$])\\$\\{(?:[^{}\"]|\"(?:[^\\\\\"]|\\\\[\\s\\S])*\")*\\}/,\n        lookbehind: !0,\n        inside: {\n          type: {\n            pattern: /(\\b(?:terraform|var|self|count|module|path|data|local)\\b\\.)[\\w\\*]+/i,\n            lookbehind: !0,\n            alias: \"variable\"\n          },\n          keyword: /\\b(?:terraform|var|self|count|module|path|data|local)\\b/i,\n          function: /\\w+(?=\\()/,\n          string: {\n            pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n            greedy: !0\n          },\n          number: /\\b0x[\\da-f]+|\\d+\\.?\\d*(?:e[+-]?\\d+)?/i,\n          punctuation: /[!\\$#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~?:]/\n        }\n      }\n    }\n  },\n  number: /\\b0x[\\da-f]+|\\d+\\.?\\d*(?:e[+-]?\\d+)?/i,\n  boolean: /\\b(?:true|false)\\b/i,\n  punctuation: /[=\\[\\]{}]/\n}, function (e) {\n  e.languages.http = {\n    \"request-line\": {\n      pattern: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\s(?:https?:\\/\\/|\\/)\\S+\\sHTTP\\/[0-9.]+/m,\n      inside: {\n        property: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\b/,\n        \"attr-name\": /:\\w+/\n      }\n    },\n    \"response-status\": {\n      pattern: /^HTTP\\/1.[01] \\d+.*/m,\n      inside: {\n        property: {\n          pattern: /(^HTTP\\/1.[01] )\\d+.*/i,\n          lookbehind: !0\n        }\n      }\n    },\n    \"header-name\": {\n      pattern: /^[\\w-]+:(?=.)/m,\n      alias: \"keyword\"\n    }\n  };\n  var t,\n      n = e.languages,\n      a = {\n    \"application/javascript\": n.javascript,\n    \"application/json\": n.json || n.javascript,\n    \"application/xml\": n.xml,\n    \"text/xml\": n.xml,\n    \"text/html\": n.html,\n    \"text/css\": n.css\n  },\n      i = {\n    \"application/json\": !0,\n    \"application/xml\": !0\n  };\n\n  function r(e) {\n    return \"(?:\" + e + \"|\" + (\"\\\\w+/(?:[\\\\w.-]+\\\\+)+\" + e.replace(/^[a-z]+\\//, \"\") + \"(?![+\\\\w.-])\") + \")\";\n  }\n\n  for (var o in a) if (a[o]) {\n    t = t || {};\n    var s = i[o] ? r(o) : o;\n    t[o] = {\n      pattern: RegExp(\"(content-type:\\\\s*\" + s + \"[\\\\s\\\\S]*?)(?:\\\\r?\\\\n|\\\\r){2}[\\\\s\\\\S]*\", \"i\"),\n      lookbehind: !0,\n      inside: {\n        rest: a[o]\n      }\n    };\n  }\n\n  t && e.languages.insertBefore(\"http\", \"header-name\", t);\n}(Prism), Prism.languages.hpkp = {\n  directive: {\n    pattern: /\\b(?:(?:includeSubDomains|preload|strict)(?: |;)|pin-sha256=\"[a-zA-Z\\d+=/]+\"|(?:max-age|report-uri)=|report-to )/,\n    alias: \"keyword\"\n  },\n  safe: {\n    pattern: /\\d{7,}/,\n    alias: \"selector\"\n  },\n  unsafe: {\n    pattern: /\\d{1,6}/,\n    alias: \"function\"\n  }\n}, Prism.languages.hsts = {\n  directive: {\n    pattern: /\\b(?:max-age=|includeSubDomains|preload)/,\n    alias: \"keyword\"\n  },\n  safe: {\n    pattern: /\\d{8,}/,\n    alias: \"selector\"\n  },\n  unsafe: {\n    pattern: /\\d{1,7}/,\n    alias: \"function\"\n  }\n}, Prism.languages.ichigojam = {\n  comment: /(?:\\B'|REM)(?:[^\\n\\r]*)/i,\n  string: {\n    pattern: /\"(?:\"\"|[!#$%&'()*,\\/:;<=>?^_ +\\-.A-Z\\d])*\"/i,\n    greedy: !0\n  },\n  number: /\\B#[0-9A-F]+|\\B`[01]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,\n  keyword: /\\b(?:BEEP|BPS|CASE|CLEAR|CLK|CLO|CLP|CLS|CLT|CLV|CONT|COPY|ELSE|END|FILE|FILES|FOR|GOSUB|GSB|GOTO|IF|INPUT|KBD|LED|LET|LIST|LOAD|LOCATE|LRUN|NEW|NEXT|OUT|RIGHT|PLAY|POKE|PRINT|PWM|REM|RENUM|RESET|RETURN|RTN|RUN|SAVE|SCROLL|SLEEP|SRND|STEP|STOP|SUB|TEMPO|THEN|TO|UART|VIDEO|WAIT)(?:\\$|\\b)/i,\n  function: /\\b(?:ABS|ANA|ASC|BIN|BTN|DEC|END|FREE|HELP|HEX|I2CR|I2CW|IN|INKEY|LEN|LINE|PEEK|RND|SCR|SOUND|STR|TICK|USR|VER|VPEEK|ZER)(?:\\$|\\b)/i,\n  label: /(?:\\B@[^\\s]+)/i,\n  operator: /<[=>]?|>=?|\\|\\||&&|[+\\-*\\/=|&^~!]|\\b(?:AND|NOT|OR)\\b/i,\n  punctuation: /[\\[,;:()\\]]/\n}, Prism.languages.icon = {\n  comment: /#.*/,\n  string: {\n    pattern: /([\"'])(?:(?!\\1)[^\\\\\\r\\n_]|\\\\.|_(?!\\1)(?:\\r\\n|[\\s\\S]))*\\1/,\n    greedy: !0\n  },\n  number: /\\b(?:\\d+r[a-z\\d]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b|\\.\\d+\\b/i,\n  \"builtin-keyword\": {\n    pattern: /&(?:allocated|ascii|clock|collections|cset|current|date|dateline|digits|dump|e|error(?:number|text|value)?|errout|fail|features|file|host|input|lcase|letters|level|line|main|null|output|phi|pi|pos|progname|random|regions|source|storage|subject|time|trace|ucase|version)\\b/,\n    alias: \"variable\"\n  },\n  directive: {\n    pattern: /\\$\\w+/,\n    alias: \"builtin\"\n  },\n  keyword: /\\b(?:break|by|case|create|default|do|else|end|every|fail|global|if|initial|invocable|link|local|next|not|of|procedure|record|repeat|return|static|suspend|then|to|until|while)\\b/,\n  function: /(?!\\d)\\w+(?=\\s*[({]|\\s*!\\s*\\[)/,\n  operator: /[+-]:(?!=)|(?:[\\/?@^%&]|\\+\\+?|--?|==?=?|~==?=?|\\*\\*?|\\|\\|\\|?|<(?:->?|<?=?)|>>?=?)(?::=)?|:(?:=:?)?|[!.\\\\|~]/,\n  punctuation: /[\\[\\](){},;]/\n}, Prism.languages.inform7 = {\n  string: {\n    pattern: /\"[^\"]*\"/,\n    inside: {\n      substitution: {\n        pattern: /\\[[^\\]]+\\]/,\n        inside: {\n          delimiter: {\n            pattern: /\\[|\\]/,\n            alias: \"punctuation\"\n          }\n        }\n      }\n    }\n  },\n  comment: {\n    pattern: /\\[[^\\]]+\\]/,\n    greedy: !0\n  },\n  title: {\n    pattern: /^[ \\t]*(?:volume|book|part(?! of)|chapter|section|table)\\b.+/im,\n    alias: \"important\"\n  },\n  number: {\n    pattern: /(^|[^-])(?:\\b\\d+(?:\\.\\d+)?(?:\\^\\d+)?\\w*|\\b(?:one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve))\\b(?!-)/i,\n    lookbehind: !0\n  },\n  verb: {\n    pattern: /(^|[^-])\\b(?:applying to|are|attacking|answering|asking|be(?:ing)?|burning|buying|called|carries|carry(?! out)|carrying|climbing|closing|conceal(?:s|ing)?|consulting|contain(?:s|ing)?|cutting|drinking|dropping|eating|enclos(?:es?|ing)|entering|examining|exiting|getting|giving|going|ha(?:ve|s|ving)|hold(?:s|ing)?|impl(?:y|ies)|incorporat(?:es?|ing)|inserting|is|jumping|kissing|listening|locking|looking|mean(?:s|ing)?|opening|provid(?:es?|ing)|pulling|pushing|putting|relat(?:es?|ing)|removing|searching|see(?:s|ing)?|setting|showing|singing|sleeping|smelling|squeezing|switching|support(?:s|ing)?|swearing|taking|tasting|telling|thinking|throwing|touching|turning|tying|unlock(?:s|ing)?|var(?:y|ies|ying)|waiting|waking|waving|wear(?:s|ing)?)\\b(?!-)/i,\n    lookbehind: !0,\n    alias: \"operator\"\n  },\n  keyword: {\n    pattern: /(^|[^-])\\b(?:after|before|carry out|check|continue the action|definition(?= *:)|do nothing|else|end (?:if|unless|the story)|every turn|if|include|instead(?: of)?|let|move|no|now|otherwise|repeat|report|resume the story|rule for|running through|say(?:ing)?|stop the action|test|try(?:ing)?|understand|unless|use|when|while|yes)\\b(?!-)/i,\n    lookbehind: !0\n  },\n  property: {\n    pattern: /(^|[^-])\\b(?:adjacent(?! to)|carried|closed|concealed|contained|dark|described|edible|empty|enclosed|enterable|even|female|fixed in place|full|handled|held|improper-named|incorporated|inedible|invisible|lighted|lit|lock(?:able|ed)|male|marked for listing|mentioned|negative|neuter|non-(?:empty|full|recurring)|odd|opaque|open(?:able)?|plural-named|portable|positive|privately-named|proper-named|provided|publically-named|pushable between rooms|recurring|related|rubbing|scenery|seen|singular-named|supported|swinging|switch(?:able|ed(?: on| off)?)|touch(?:able|ed)|transparent|unconcealed|undescribed|unlit|unlocked|unmarked for listing|unmentioned|unopenable|untouchable|unvisited|variable|visible|visited|wearable|worn)\\b(?!-)/i,\n    lookbehind: !0,\n    alias: \"symbol\"\n  },\n  position: {\n    pattern: /(^|[^-])\\b(?:above|adjacent to|back side of|below|between|down|east|everywhere|front side|here|in|inside(?: from)?|north(?:east|west)?|nowhere|on(?: top of)?|other side|outside(?: from)?|parts? of|regionally in|south(?:east|west)?|through|up|west|within)\\b(?!-)/i,\n    lookbehind: !0,\n    alias: \"keyword\"\n  },\n  type: {\n    pattern: /(^|[^-])\\b(?:actions?|activit(?:y|ies)|actors?|animals?|backdrops?|containers?|devices?|directions?|doors?|holders?|kinds?|lists?|m[ae]n|nobody|nothing|nouns?|numbers?|objects?|people|persons?|player(?:'s holdall)?|regions?|relations?|rooms?|rule(?:book)?s?|scenes?|someone|something|supporters?|tables?|texts?|things?|time|vehicles?|wom[ae]n)\\b(?!-)/i,\n    lookbehind: !0,\n    alias: \"variable\"\n  },\n  punctuation: /[.,:;(){}]/\n}, Prism.languages.inform7.string.inside.substitution.inside.rest = Prism.languages.inform7, Prism.languages.inform7.string.inside.substitution.inside.rest.text = {\n  pattern: /\\S(?:\\s*\\S)*/,\n  alias: \"comment\"\n}, Prism.languages.ini = {\n  comment: /^[ \\t]*[;#].*$/m,\n  selector: /^[ \\t]*\\[.*?\\]/m,\n  constant: /^[ \\t]*[^\\s=]+?(?=[ \\t]*=)/m,\n  \"attr-value\": {\n    pattern: /=.*/,\n    inside: {\n      punctuation: /^[=]/\n    }\n  }\n}, Prism.languages.io = {\n  comment: [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    lookbehind: !0\n  }, {\n    pattern: /(^|[^\\\\])\\/\\/.*/,\n    lookbehind: !0\n  }, {\n    pattern: /(^|[^\\\\])#.*/,\n    lookbehind: !0\n  }],\n  \"triple-quoted-string\": {\n    pattern: /\"\"\"(?:\\\\[\\s\\S]|(?!\"\"\")[^\\\\])*\"\"\"/,\n    greedy: !0,\n    alias: \"string\"\n  },\n  string: {\n    pattern: /\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\n    greedy: !0\n  },\n  keyword: /\\b(?:activate|activeCoroCount|asString|block|break|catch|clone|collectGarbage|compileString|continue|do|doFile|doMessage|doString|else|elseif|exit|for|foreach|forward|getSlot|getEnvironmentVariable|hasSlot|if|ifFalse|ifNil|ifNilEval|ifTrue|isActive|isNil|isResumable|list|message|method|parent|pass|pause|perform|performWithArgList|print|println|proto|raise|raiseResumable|removeSlot|resend|resume|schedulerSleepSeconds|self|sender|setSchedulerSleepSeconds|setSlot|shallowCopy|slotNames|super|system|then|thisBlock|thisContext|call|try|type|uniqueId|updateSlot|wait|while|write|yield)\\b/,\n  builtin: /\\b(?:Array|AudioDevice|AudioMixer|Block|Box|Buffer|CFunction|CGI|Color|Curses|DBM|DNSResolver|DOConnection|DOProxy|DOServer|Date|Directory|Duration|DynLib|Error|Exception|FFT|File|Fnmatch|Font|Future|GL|GLE|GLScissor|GLU|GLUCylinder|GLUQuadric|GLUSphere|GLUT|Host|Image|Importer|LinkList|List|Lobby|Locals|MD5|MP3Decoder|MP3Encoder|Map|Message|Movie|Notification|Number|Object|OpenGL|Point|Protos|Regex|SGML|SGMLElement|SGMLParser|SQLite|Server|Sequence|ShowMessage|SleepyCat|SleepyCatCursor|Socket|SocketManager|Sound|Soup|Store|String|Tree|UDPSender|UPDReceiver|URL|User|Warning|WeakLink|Random|BigNum|Sequence)\\b/,\n  boolean: /\\b(?:true|false|nil)\\b/,\n  number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e-?\\d+)?/i,\n  operator: /[=!*/%+-^&|]=|>>?=?|<<?=?|:?:?=|\\+\\+?|--?|\\*\\*?|\\/\\/?|%|\\|\\|?|&&?|(\\b(?:return|and|or|not)\\b)|@@?|\\?\\??|\\.\\./,\n  punctuation: /[{}[\\];(),.:]/\n}, Prism.languages.j = {\n  comment: /\\bNB\\..*/,\n  string: {\n    pattern: /'(?:''|[^'\\r\\n])*'/,\n    greedy: !0\n  },\n  keyword: /\\b(?:(?:adverb|conjunction|CR|def|define|dyad|LF|monad|noun|verb)\\b|(?:assert|break|case|catch[dt]?|continue|do|else|elseif|end|fcase|for|for_\\w+|goto_\\w+|if|label_\\w+|return|select|throw|try|while|whilst)\\.)/,\n  verb: {\n    pattern: /(?!\\^:|;\\.|[=!][.:])(?:\\{(?:\\.|::?)?|p(?:\\.\\.?|:)|[=!\\]]|[<>+*\\-%$|,#][.:]?|[?^]\\.?|[;\\[]:?|[~}\"i][.:]|[ACeEIjLor]\\.|(?:[_\\/\\\\qsux]|_?\\d):)/,\n    alias: \"keyword\"\n  },\n  number: /\\b_?(?:(?!\\d:)\\d+(?:\\.\\d+)?(?:(?:[ejpx]|ad|ar)_?\\d+(?:\\.\\d+)?)*(?:b_?[\\da-z]+(?:\\.[\\da-z]+)?)?|_(?!\\.))/,\n  adverb: {\n    pattern: /[~}]|[\\/\\\\]\\.?|[bfM]\\.|t[.:]/,\n    alias: \"builtin\"\n  },\n  operator: /[=a][.:]|_\\./,\n  conjunction: {\n    pattern: /&(?:\\.:?|:)?|[.:@][.:]?|[!D][.:]|[;dHT]\\.|`:?|[\\^LS]:|\"/,\n    alias: \"variable\"\n  },\n  punctuation: /[()]/\n}, function (e) {\n  var t = /\\b(?:abstract|continue|for|new|switch|assert|default|goto|package|synchronized|boolean|do|if|private|this|break|double|implements|protected|throw|byte|else|import|public|throws|case|enum|instanceof|return|transient|catch|extends|int|short|try|char|final|interface|static|void|class|finally|long|strictfp|volatile|const|float|native|super|while|var|null|exports|module|open|opens|provides|requires|to|transitive|uses|with)\\b/,\n      n = /\\b[A-Z](?:\\w*[a-z]\\w*)?\\b/;\n  e.languages.java = e.languages.extend(\"clike\", {\n    \"class-name\": [n, /\\b[A-Z]\\w*(?=\\s+\\w+\\s*[;,=())])/],\n    keyword: t,\n    function: [e.languages.clike.function, {\n      pattern: /(\\:\\:)[a-z_]\\w*/,\n      lookbehind: !0\n    }],\n    number: /\\b0b[01][01_]*L?\\b|\\b0x[\\da-f_]*\\.?[\\da-f_p+-]+\\b|(?:\\b\\d[\\d_]*\\.?[\\d_]*|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n    operator: {\n      pattern: /(^|[^.])(?:<<=?|>>>?=?|->|([-+&|])\\2|[?:~]|[-+*/%&|^!=<>]=?)/m,\n      lookbehind: !0\n    }\n  }), e.languages.insertBefore(\"java\", \"class-name\", {\n    annotation: {\n      alias: \"punctuation\",\n      pattern: /(^|[^.])@\\w+/,\n      lookbehind: !0\n    },\n    namespace: {\n      pattern: /(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)[a-z]\\w*(\\.[a-z]\\w*)+/,\n      lookbehind: !0,\n      inside: {\n        punctuation: /\\./\n      }\n    },\n    generics: {\n      pattern: /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,\n      inside: {\n        \"class-name\": n,\n        keyword: t,\n        punctuation: /[<>(),.:]/,\n        operator: /[?&|]/\n      }\n    }\n  });\n}(Prism), Prism.languages.scala = Prism.languages.extend(\"java\", {\n  keyword: /<-|=>|\\b(?:abstract|case|catch|class|def|do|else|extends|final|finally|for|forSome|if|implicit|import|lazy|match|new|null|object|override|package|private|protected|return|sealed|self|super|this|throw|trait|try|type|val|var|while|with|yield)\\b/,\n  string: [{\n    pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n    greedy: !0\n  }, {\n    pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: !0\n  }],\n  builtin: /\\b(?:String|Int|Long|Short|Byte|Boolean|Double|Float|Char|Any|AnyRef|AnyVal|Unit|Nothing)\\b/,\n  number: /\\b0x[\\da-f]*\\.?[\\da-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e\\d+)?[dfl]?/i,\n  symbol: /'[^\\d\\s\\\\]\\w*/\n}), delete Prism.languages.scala[\"class-name\"], delete Prism.languages.scala.function, function (e) {\n  e.languages.php = e.languages.extend(\"clike\", {\n    keyword: /\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,\n    boolean: {\n      pattern: /\\b(?:false|true)\\b/i,\n      alias: \"constant\"\n    },\n    constant: [/\\b[A-Z_][A-Z0-9_]*\\b/, /\\b(?:null)\\b/i],\n    comment: {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: !0\n    }\n  }), e.languages.insertBefore(\"php\", \"string\", {\n    \"shell-comment\": {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: !0,\n      alias: \"comment\"\n    }\n  }), e.languages.insertBefore(\"php\", \"comment\", {\n    delimiter: {\n      pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n      alias: \"important\"\n    }\n  }), e.languages.insertBefore(\"php\", \"keyword\", {\n    variable: /\\$+(?:\\w+\\b|(?={))/i,\n    package: {\n      pattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n      lookbehind: !0,\n      inside: {\n        punctuation: /\\\\/\n      }\n    }\n  }), e.languages.insertBefore(\"php\", \"operator\", {\n    property: {\n      pattern: /(->)[\\w]+/,\n      lookbehind: !0\n    }\n  });\n  var t = {\n    pattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,\n    lookbehind: !0,\n    inside: {\n      rest: e.languages.php\n    }\n  };\n  e.languages.insertBefore(\"php\", \"string\", {\n    \"nowdoc-string\": {\n      pattern: /<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,\n      greedy: !0,\n      alias: \"string\",\n      inside: {\n        delimiter: {\n          pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n          alias: \"symbol\",\n          inside: {\n            punctuation: /^<<<'?|[';]$/\n          }\n        }\n      }\n    },\n    \"heredoc-string\": {\n      pattern: /<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,\n      greedy: !0,\n      alias: \"string\",\n      inside: {\n        delimiter: {\n          pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n          alias: \"symbol\",\n          inside: {\n            punctuation: /^<<<\"?|[\";]$/\n          }\n        },\n        interpolation: t\n      }\n    },\n    \"single-quoted-string\": {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: !0,\n      alias: \"string\"\n    },\n    \"double-quoted-string\": {\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: !0,\n      alias: \"string\",\n      inside: {\n        interpolation: t\n      }\n    }\n  }), delete e.languages.php.string, e.hooks.add(\"before-tokenize\", function (t) {\n    if (/<\\?/.test(t.code)) {\n      e.languages[\"markup-templating\"].buildPlaceholders(t, \"php\", /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#)(?:[^?\\n\\r]|\\?(?!>))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$))*?(?:\\?>|$)/gi);\n    }\n  }), e.hooks.add(\"after-tokenize\", function (t) {\n    e.languages[\"markup-templating\"].tokenizePlaceholders(t, \"php\");\n  });\n}(Prism), Prism.languages.javastacktrace = {\n  summary: {\n    pattern: /^[\\t ]*(?:(?:Caused by:|Suppressed:|Exception in thread \"[^\"]*\")[\\t ]+)?[\\w$.]+(?:\\:.*)?$/m,\n    inside: {\n      keyword: {\n        pattern: /^(\\s*)(?:(?:Caused by|Suppressed)(?=:)|Exception in thread)/m,\n        lookbehind: !0\n      },\n      string: {\n        pattern: /^(\\s*)\"[^\"]*\"/,\n        lookbehind: !0\n      },\n      exceptions: {\n        pattern: /^(:?\\s*)[\\w$.]+(?=:|$)/,\n        lookbehind: !0,\n        inside: {\n          \"class-name\": /[\\w$]+(?=$|:)/,\n          namespace: /[a-z]\\w*/,\n          punctuation: /[.:]/\n        }\n      },\n      message: {\n        pattern: /(:\\s*)\\S.*/,\n        lookbehind: !0,\n        alias: \"string\"\n      },\n      punctuation: /[:]/\n    }\n  },\n  \"stack-frame\": {\n    pattern: /^[\\t ]*at [\\w$.]+(?:<init>)?\\([^()]*\\)/m,\n    inside: {\n      keyword: {\n        pattern: /^(\\s*)at/,\n        lookbehind: !0\n      },\n      source: [{\n        pattern: /(\\()\\w+.\\w+:\\d+(?=\\))/,\n        lookbehind: !0,\n        inside: {\n          file: /^\\w+\\.\\w+/,\n          punctuation: /:/,\n          \"line-number\": {\n            pattern: /\\d+/,\n            alias: \"number\"\n          }\n        }\n      }, {\n        pattern: /(\\()[^()]*(?=\\))/,\n        lookbehind: !0,\n        inside: {\n          keyword: /^(?:Unknown Source|Native Method)$/\n        }\n      }],\n      \"class-name\": /[\\w$]+(?=\\.(?:<init>|[\\w$]+)\\()/,\n      function: /(?:<init>|[\\w$]+)(?=\\()/,\n      namespace: /[a-z]\\w*/,\n      punctuation: /[.()]/\n    }\n  },\n  more: {\n    pattern: /^[\\t ]*\\.{3} \\d+ [a-z]+(?: [a-z]+)*/m,\n    inside: {\n      punctuation: /\\.{3}/,\n      number: /\\d+/,\n      keyword: /\\b[a-z]+(?: [a-z]+)*\\b/\n    }\n  }\n}, Prism.languages.jolie = Prism.languages.extend(\"clike\", {\n  keyword: /\\b(?:include|define|is_defined|undef|main|init|outputPort|inputPort|Location|Protocol|Interfaces|RequestResponse|OneWay|type|interface|extender|throws|cset|csets|forward|Aggregates|Redirects|embedded|courier|execution|sequential|concurrent|single|scope|install|throw|comp|cH|default|global|linkIn|linkOut|synchronized|this|new|for|if|else|while|in|Jolie|Java|Javascript|nullProcess|spawn|constants|with|provide|until|exit|foreach|instanceof|over|service)\\b/,\n  builtin: /\\b(?:undefined|string|int|void|long|Byte|bool|double|float|char|any)\\b/,\n  number: /(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?l?/i,\n  operator: /-[-=>]?|\\+[+=]?|<[<=]?|[>=*!]=?|&&|\\|\\||[:?\\/%^]/,\n  symbol: /[|;@]/,\n  punctuation: /[,.]/,\n  string: {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: !0\n  }\n}), delete Prism.languages.jolie[\"class-name\"], Prism.languages.insertBefore(\"jolie\", \"keyword\", {\n  function: {\n    pattern: /((?:\\b(?:outputPort|inputPort|in|service|courier)\\b|@)\\s*)\\w+/,\n    lookbehind: !0\n  },\n  aggregates: {\n    pattern: /(\\bAggregates\\s*:\\s*)(?:\\w+(?:\\s+with\\s+\\w+)?\\s*,\\s*)*\\w+(?:\\s+with\\s+\\w+)?/,\n    lookbehind: !0,\n    inside: {\n      withExtension: {\n        pattern: /\\bwith\\s+\\w+/,\n        inside: {\n          keyword: /\\bwith\\b/\n        }\n      },\n      function: {\n        pattern: /\\w+/\n      },\n      punctuation: {\n        pattern: /,/\n      }\n    }\n  },\n  redirects: {\n    pattern: /(\\bRedirects\\s*:\\s*)(?:\\w+\\s*=>\\s*\\w+\\s*,\\s*)*(?:\\w+\\s*=>\\s*\\w+)/,\n    lookbehind: !0,\n    inside: {\n      punctuation: {\n        pattern: /,/\n      },\n      function: {\n        pattern: /\\w+/\n      },\n      symbol: {\n        pattern: /=>/\n      }\n    }\n  }\n}), function (e) {\n  var t = e.languages.javadoclike = {\n    parameter: {\n      pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,\n      lookbehind: !0\n    },\n    keyword: {\n      pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n      lookbehind: !0\n    },\n    punctuation: /[{}]/\n  };\n  Object.defineProperty(t, \"addSupport\", {\n    value: function (t, n) {\n      \"string\" == typeof t && (t = [t]), t.forEach(function (t) {\n        !function (t, n) {\n          var a = e.languages[t];\n\n          if (a) {\n            var i = a[\"doc-comment\"];\n\n            if (!i) {\n              var r = {\n                \"doc-comment\": {\n                  pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n                  alias: \"comment\"\n                }\n              };\n              i = (a = e.languages.insertBefore(t, \"comment\", r))[\"doc-comment\"];\n            }\n\n            if (i instanceof RegExp && (i = a[\"doc-comment\"] = {\n              pattern: i\n            }), Array.isArray(i)) for (var o = 0, s = i.length; o < s; o++) i[o] instanceof RegExp && (i[o] = {\n              pattern: i[o]\n            }), n(i[o]);else n(i);\n          }\n        }(t, function (e) {\n          e.inside || (e.inside = {}), e.inside.rest = n;\n        });\n      });\n    }\n  }), t.addSupport([\"java\", \"javascript\", \"php\"], t);\n}(Prism), Prism.languages.n4js = Prism.languages.extend(\"javascript\", {\n  keyword: /\\b(?:any|Array|boolean|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|false|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|module|new|null|number|package|private|protected|public|return|set|static|string|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)\\b/\n}), Prism.languages.insertBefore(\"n4js\", \"constant\", {\n  annotation: {\n    pattern: /@+\\w+/,\n    alias: \"operator\"\n  }\n}), Prism.languages.n4jsd = Prism.languages.n4js, Prism.languages.json = {\n  comment: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n  property: {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n    greedy: !0\n  },\n  string: {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n    greedy: !0\n  },\n  number: /-?\\d+\\.?\\d*(e[+-]?\\d+)?/i,\n  punctuation: /[{}[\\],]/,\n  operator: /:/,\n  boolean: /\\b(?:true|false)\\b/,\n  null: {\n    pattern: /\\bnull\\b/,\n    alias: \"keyword\"\n  }\n}, Prism.languages.jsonp = Prism.languages.extend(\"json\", {\n  punctuation: /[{}[\\]();,.]/\n}), Prism.languages.insertBefore(\"jsonp\", \"punctuation\", {\n  function: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*\\()/\n}), function (e) {\n  var t = /(\"|')(?:\\\\(?:\\r\\n?|\\n|.)|(?!\\1)[^\\\\\\r\\n])*\\1/;\n  e.languages.json5 = e.languages.extend(\"json\", {\n    property: [{\n      pattern: RegExp(t.source + \"(?=\\\\s*:)\"),\n      greedy: !0\n    }, {\n      pattern: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*:)/,\n      alias: \"unquoted\"\n    }],\n    string: {\n      pattern: t,\n      greedy: !0\n    },\n    number: /[+-]?(?:NaN|Infinity|0x[a-fA-F\\d]+|(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?)/\n  });\n}(Prism), Prism.languages.julia = {\n  comment: {\n    pattern: /(^|[^\\\\])#.*/,\n    lookbehind: !0\n  },\n  string: /(\"\"\"|''')[\\s\\S]+?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2/,\n  keyword: /\\b(?:abstract|baremodule|begin|bitstype|break|catch|ccall|const|continue|do|else|elseif|end|export|finally|for|function|global|if|immutable|import|importall|let|local|macro|module|print|println|quote|return|try|type|typealias|using|while)\\b/,\n  boolean: /\\b(?:true|false)\\b/,\n  number: /(?:\\b(?=\\d)|\\B(?=\\.))(?:0[box])?(?:[\\da-f]+\\.?\\d*|\\.\\d+)(?:[efp][+-]?\\d+)?j?/i,\n  operator: /[-+*^%÷&$\\\\]=?|\\/[\\/=]?|!=?=?|\\|[=>]?|<(?:<=?|[=:])?|>(?:=|>>?=?)?|==?=?|[~≠≤≥]/,\n  punctuation: /[{}[\\];(),.:]/\n}, Prism.languages.keyman = {\n  comment: /\\bc\\s.*/i,\n  function: /\\[\\s*(?:(?:CTRL|SHIFT|ALT|LCTRL|RCTRL|LALT|RALT|CAPS|NCAPS)\\s+)*(?:[TKU]_[\\w?]+|\".+?\"|'.+?')\\s*\\]/i,\n  string: /(\"|').*?\\1/,\n  bold: [/&(?:baselayout|bitmap|capsononly|capsalwaysoff|shiftfreescaps|copyright|ethnologuecode|hotkey|includecodes|keyboardversion|kmw_embedcss|kmw_embedjs|kmw_helpfile|kmw_helptext|kmw_rtl|language|layer|layoutfile|message|mnemoniclayout|name|oldcharposmatching|platform|targets|version|visualkeyboard|windowslanguages)\\b/i, /\\b(?:bitmap|bitmaps|caps on only|caps always off|shift frees caps|copyright|hotkey|language|layout|message|name|version)\\b/i],\n  keyword: /\\b(?:any|baselayout|beep|call|context|deadkey|dk|if|index|layer|notany|nul|outs|platform|return|reset|save|set|store|use)\\b/i,\n  atrule: /\\b(?:ansi|begin|unicode|group|using keys|match|nomatch)\\b/i,\n  number: /\\b(?:U\\+[\\dA-F]+|d\\d+|x[\\da-f]+|\\d+)\\b/i,\n  operator: /[+>\\\\,()]/,\n  tag: /\\$(?:keyman|kmfl|weaver|keymanweb|keymanonly):/i\n}, function (e) {\n  e.languages.kotlin = e.languages.extend(\"clike\", {\n    keyword: {\n      pattern: /(^|[^.])\\b(?:abstract|actual|annotation|as|break|by|catch|class|companion|const|constructor|continue|crossinline|data|do|dynamic|else|enum|expect|external|final|finally|for|fun|get|if|import|in|infix|init|inline|inner|interface|internal|is|lateinit|noinline|null|object|open|operator|out|override|package|private|protected|public|reified|return|sealed|set|super|suspend|tailrec|this|throw|to|try|typealias|val|var|vararg|when|where|while)\\b/,\n      lookbehind: !0\n    },\n    function: [/\\w+(?=\\s*\\()/, {\n      pattern: /(\\.)\\w+(?=\\s*\\{)/,\n      lookbehind: !0\n    }],\n    number: /\\b(?:0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*|0[bB][01]+(?:_[01]+)*|\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?[fFL]?)\\b/,\n    operator: /\\+[+=]?|-[-=>]?|==?=?|!(?:!|==?)?|[\\/*%<>]=?|[?:]:?|\\.\\.|&&|\\|\\||\\b(?:and|inv|or|shl|shr|ushr|xor)\\b/\n  }), delete e.languages.kotlin[\"class-name\"], e.languages.insertBefore(\"kotlin\", \"string\", {\n    \"raw-string\": {\n      pattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\n      alias: \"string\"\n    }\n  }), e.languages.insertBefore(\"kotlin\", \"keyword\", {\n    annotation: {\n      pattern: /\\B@(?:\\w+:)?(?:[A-Z]\\w*|\\[[^\\]]+\\])/,\n      alias: \"builtin\"\n    }\n  }), e.languages.insertBefore(\"kotlin\", \"function\", {\n    label: {\n      pattern: /\\w+@|@\\w+/,\n      alias: \"symbol\"\n    }\n  });\n  var t = [{\n    pattern: /\\$\\{[^}]+\\}/,\n    inside: {\n      delimiter: {\n        pattern: /^\\$\\{|\\}$/,\n        alias: \"variable\"\n      },\n      rest: e.languages.kotlin\n    }\n  }, {\n    pattern: /\\$\\w+/,\n    alias: \"variable\"\n  }];\n  e.languages.kotlin.string.inside = e.languages.kotlin[\"raw-string\"].inside = {\n    interpolation: t\n  };\n}(Prism), function (e) {\n  var t = /\\\\(?:[^a-z()[\\]]|[a-z*]+)/i,\n      n = {\n    \"equation-command\": {\n      pattern: t,\n      alias: \"regex\"\n    }\n  };\n  e.languages.latex = {\n    comment: /%.*/m,\n    cdata: {\n      pattern: /(\\\\begin\\{((?:verbatim|lstlisting)\\*?)\\})[\\s\\S]*?(?=\\\\end\\{\\2\\})/,\n      lookbehind: !0\n    },\n    equation: [{\n      pattern: /\\$(?:\\\\[\\s\\S]|[^\\\\$])*\\$|\\\\\\([\\s\\S]*?\\\\\\)|\\\\\\[[\\s\\S]*?\\\\\\]/,\n      inside: n,\n      alias: \"string\"\n    }, {\n      pattern: /(\\\\begin\\{((?:equation|math|eqnarray|align|multline|gather)\\*?)\\})[\\s\\S]*?(?=\\\\end\\{\\2\\})/,\n      lookbehind: !0,\n      inside: n,\n      alias: \"string\"\n    }],\n    keyword: {\n      pattern: /(\\\\(?:begin|end|ref|cite|label|usepackage|documentclass)(?:\\[[^\\]]+\\])?\\{)[^}]+(?=\\})/,\n      lookbehind: !0\n    },\n    url: {\n      pattern: /(\\\\url\\{)[^}]+(?=\\})/,\n      lookbehind: !0\n    },\n    headline: {\n      pattern: /(\\\\(?:part|chapter|section|subsection|frametitle|subsubsection|paragraph|subparagraph|subsubparagraph|subsubsubparagraph)\\*?(?:\\[[^\\]]+\\])?\\{)[^}]+(?=\\}(?:\\[[^\\]]+\\])?)/,\n      lookbehind: !0,\n      alias: \"class-name\"\n    },\n    function: {\n      pattern: t,\n      alias: \"selector\"\n    },\n    punctuation: /[[\\]{}&]/\n  };\n}(Prism), Prism.languages.markdown = Prism.languages.extend(\"markup\", {}), Prism.languages.insertBefore(\"markdown\", \"prolog\", {\n  blockquote: {\n    pattern: /^>(?:[\\t ]*>)*/m,\n    alias: \"punctuation\"\n  },\n  code: [{\n    pattern: /^(?: {4}|\\t).+/m,\n    alias: \"keyword\"\n  }, {\n    pattern: /``.+?``|`[^`\\n]+`/,\n    alias: \"keyword\"\n  }, {\n    pattern: /^```[\\s\\S]*?^```$/m,\n    greedy: !0,\n    inside: {\n      \"code-block\": {\n        pattern: /^(```.*(?:\\r?\\n|\\r))[\\s\\S]+?(?=(?:\\r?\\n|\\r)^```$)/m,\n        lookbehind: !0\n      },\n      \"code-language\": {\n        pattern: /^(```).+/,\n        lookbehind: !0\n      },\n      punctuation: /```/\n    }\n  }],\n  title: [{\n    pattern: /\\S.*(?:\\r?\\n|\\r)(?:==+|--+)/,\n    alias: \"important\",\n    inside: {\n      punctuation: /==+$|--+$/\n    }\n  }, {\n    pattern: /(^\\s*)#+.+/m,\n    lookbehind: !0,\n    alias: \"important\",\n    inside: {\n      punctuation: /^#+|#+$/\n    }\n  }],\n  hr: {\n    pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n    lookbehind: !0,\n    alias: \"punctuation\"\n  },\n  list: {\n    pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n    lookbehind: !0,\n    alias: \"punctuation\"\n  },\n  \"url-reference\": {\n    pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n    inside: {\n      variable: {\n        pattern: /^(!?\\[)[^\\]]+/,\n        lookbehind: !0\n      },\n      string: /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n      punctuation: /^[\\[\\]!:]|[<>]/\n    },\n    alias: \"url\"\n  },\n  bold: {\n    pattern: /(^|[^\\\\])(\\*\\*|__)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: !0,\n    greedy: !0,\n    inside: {\n      punctuation: /^\\*\\*|^__|\\*\\*$|__$/\n    }\n  },\n  italic: {\n    pattern: /(^|[^\\\\])([*_])(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: !0,\n    greedy: !0,\n    inside: {\n      punctuation: /^[*_]|[*_]$/\n    }\n  },\n  strike: {\n    pattern: /(^|[^\\\\])(~~?)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: !0,\n    greedy: !0,\n    inside: {\n      punctuation: /^~~?|~~?$/\n    }\n  },\n  url: {\n    pattern: /!?\\[[^\\]]+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[[^\\]\\n]*\\])/,\n    inside: {\n      variable: {\n        pattern: /(!?\\[)[^\\]]+(?=\\]$)/,\n        lookbehind: !0\n      },\n      string: {\n        pattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\n      }\n    }\n  }\n}), [\"bold\", \"italic\", \"strike\"].forEach(function (e) {\n  [\"url\", \"bold\", \"italic\", \"strike\"].forEach(function (t) {\n    e !== t && (Prism.languages.markdown[e].inside[t] = Prism.languages.markdown[t]);\n  });\n}), Prism.hooks.add(\"after-tokenize\", function (e) {\n  \"markdown\" !== e.language && \"md\" !== e.language || function e(t) {\n    if (t && \"string\" != typeof t) for (var n = 0, a = t.length; n < a; n++) {\n      var i = t[n];\n\n      if (\"code\" === i.type) {\n        var r = i.content[1],\n            o = i.content[3];\n\n        if (r && o && \"code-language\" === r.type && \"code-block\" === o.type && \"string\" == typeof r.content) {\n          var s = \"language-\" + r.content.trim().split(/\\s+/)[0].toLowerCase();\n          o.alias ? \"string\" == typeof o.alias ? o.alias = [o.alias, s] : o.alias.push(s) : o.alias = [s];\n        }\n      } else e(i.content);\n    }\n  }(e.tokens);\n}), Prism.hooks.add(\"wrap\", function (e) {\n  if (\"code-block\" === e.type) {\n    for (var t = \"\", n = 0, a = e.classes.length; n < a; n++) {\n      var i = e.classes[n],\n          r = /language-(.+)/.exec(i);\n\n      if (r) {\n        t = r[1];\n        break;\n      }\n    }\n\n    var o = Prism.languages[t];\n\n    if (o) {\n      var s = e.content.replace(/&lt;/g, \"<\").replace(/&amp;/g, \"&\");\n      e.content = Prism.highlight(s, o, t);\n    }\n  }\n}), Prism.languages.md = Prism.languages.markdown, Prism.languages.liquid = {\n  keyword: /\\b(?:comment|endcomment|if|elsif|else|endif|unless|endunless|for|endfor|case|endcase|when|in|break|assign|continue|limit|offset|range|reversed|raw|endraw|capture|endcapture|tablerow|endtablerow)\\b/,\n  number: /\\b0b[01]+\\b|\\b0x[\\da-f]*\\.?[\\da-fp-]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?[df]?/i,\n  operator: {\n    pattern: /(^|[^.])(?:\\+[+=]?|-[-=]?|!=?|<<?=?|>>?>?=?|==?|&[&=]?|\\|[|=]?|\\*=?|\\/=?|%=?|\\^=?|[?:~])/m,\n    lookbehind: !0\n  },\n  function: {\n    pattern: /(^|[\\s;|&])(?:append|prepend|capitalize|cycle|cols|increment|decrement|abs|at_least|at_most|ceil|compact|concat|date|default|divided_by|downcase|escape|escape_once|first|floor|join|last|lstrip|map|minus|modulo|newline_to_br|plus|remove|remove_first|replace|replace_first|reverse|round|rstrip|size|slice|sort|sort_natural|split|strip|strip_html|strip_newlines|times|truncate|truncatewords|uniq|upcase|url_decode|url_encode|include|paginate)(?=$|[\\s;|&])/,\n    lookbehind: !0\n  }\n}, function (e) {\n  function t(e) {\n    return RegExp(\"(\\\\()\" + e + \"(?=[\\\\s\\\\)])\");\n  }\n\n  function n(e) {\n    return RegExp(\"([\\\\s([])\" + e + \"(?=[\\\\s)])\");\n  }\n\n  var a = \"[-+*/_~!@$%^=<>{}\\\\w]+\",\n      i = \"(\\\\()\",\n      r = {\n    heading: {\n      pattern: /;;;.*/,\n      alias: [\"comment\", \"title\"]\n    },\n    comment: /;.*/,\n    string: {\n      pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n      greedy: !0,\n      inside: {\n        argument: /[-A-Z]+(?=[.,\\s])/,\n        symbol: RegExp(\"`\" + a + \"'\")\n      }\n    },\n    \"quoted-symbol\": {\n      pattern: RegExp(\"#?'\" + a),\n      alias: [\"variable\", \"symbol\"]\n    },\n    \"lisp-property\": {\n      pattern: RegExp(\":\" + a),\n      alias: \"property\"\n    },\n    splice: {\n      pattern: RegExp(\",@?\" + a),\n      alias: [\"symbol\", \"variable\"]\n    },\n    keyword: [{\n      pattern: RegExp(i + \"(?:(?:lexical-)?let\\\\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)(?=\\\\s)\"),\n      lookbehind: !0\n    }, {\n      pattern: RegExp(i + \"(?:for|do|collect|return|finally|append|concat|in|by)(?=\\\\s)\"),\n      lookbehind: !0\n    }],\n    declare: {\n      pattern: t(\"declare\"),\n      lookbehind: !0,\n      alias: \"keyword\"\n    },\n    interactive: {\n      pattern: t(\"interactive\"),\n      lookbehind: !0,\n      alias: \"keyword\"\n    },\n    boolean: {\n      pattern: n(\"(?:t|nil)\"),\n      lookbehind: !0\n    },\n    number: {\n      pattern: n(\"[-+]?\\\\d+(?:\\\\.\\\\d*)?\"),\n      lookbehind: !0\n    },\n    defvar: {\n      pattern: RegExp(i + \"def(?:var|const|custom|group)\\\\s+\" + a),\n      lookbehind: !0,\n      inside: {\n        keyword: /^def[a-z]+/,\n        variable: RegExp(a)\n      }\n    },\n    defun: {\n      pattern: RegExp(i + \"(?:cl-)?(?:defun\\\\*?|defmacro)\\\\s+\" + a + \"\\\\s+\\\\([\\\\s\\\\S]*?\\\\)\"),\n      lookbehind: !0,\n      inside: {\n        keyword: /^(?:cl-)?def\\S+/,\n        arguments: null,\n        function: {\n          pattern: RegExp(\"(^\\\\s)\" + a),\n          lookbehind: !0\n        },\n        punctuation: /[()]/\n      }\n    },\n    lambda: {\n      pattern: RegExp(i + \"lambda\\\\s+\\\\((?:&?\" + a + \"\\\\s*)*\\\\)\"),\n      lookbehind: !0,\n      inside: {\n        keyword: /^lambda/,\n        arguments: null,\n        punctuation: /[()]/\n      }\n    },\n    car: {\n      pattern: RegExp(i + a),\n      lookbehind: !0\n    },\n    punctuation: [/(['`,]?\\(|[)\\[\\]])/, {\n      pattern: /(\\s)\\.(?=\\s)/,\n      lookbehind: !0\n    }]\n  },\n      o = {\n    \"lisp-marker\": RegExp(\"&[-+*/_~!@$%^=<>{}\\\\w]+\"),\n    rest: {\n      argument: {\n        pattern: RegExp(a),\n        alias: \"variable\"\n      },\n      varform: {\n        pattern: RegExp(i + a + \"\\\\s+\\\\S[\\\\s\\\\S]*(?=\\\\))\"),\n        lookbehind: !0,\n        inside: {\n          string: r.string,\n          boolean: r.boolean,\n          number: r.number,\n          symbol: r.symbol,\n          punctuation: /[()]/\n        }\n      }\n    }\n  },\n      s = \"\\\\S+(?:\\\\s+\\\\S+)*\",\n      l = {\n    pattern: RegExp(i + \"[\\\\s\\\\S]*(?=\\\\))\"),\n    lookbehind: !0,\n    inside: {\n      \"rest-vars\": {\n        pattern: RegExp(\"&(?:rest|body)\\\\s+\" + s),\n        inside: o\n      },\n      \"other-marker-vars\": {\n        pattern: RegExp(\"&(?:optional|aux)\\\\s+\" + s),\n        inside: o\n      },\n      keys: {\n        pattern: RegExp(\"&key\\\\s+\" + s + \"(?:\\\\s+&allow-other-keys)?\"),\n        inside: o\n      },\n      argument: {\n        pattern: RegExp(a),\n        alias: \"variable\"\n      },\n      punctuation: /[()]/\n    }\n  };\n  r.lambda.inside.arguments = l, r.defun.inside.arguments = e.util.clone(l), r.defun.inside.arguments.inside.sublist = l, e.languages.lisp = r, e.languages.elisp = r, e.languages.emacs = r, e.languages[\"emacs-lisp\"] = r;\n}(Prism), Prism.languages.livescript = {\n  comment: [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n    lookbehind: !0\n  }, {\n    pattern: /(^|[^\\\\])#.*/,\n    lookbehind: !0\n  }],\n  \"interpolated-string\": {\n    pattern: /(^|[^\"])(\"\"\"|\")(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2(?!\")/,\n    lookbehind: !0,\n    greedy: !0,\n    inside: {\n      variable: {\n        pattern: /(^|[^\\\\])#[a-z_](?:-?[a-z]|[\\d_])*/m,\n        lookbehind: !0\n      },\n      interpolation: {\n        pattern: /(^|[^\\\\])#\\{[^}]+\\}/m,\n        lookbehind: !0,\n        inside: {\n          \"interpolation-punctuation\": {\n            pattern: /^#\\{|\\}$/,\n            alias: \"variable\"\n          }\n        }\n      },\n      string: /[\\s\\S]+/\n    }\n  },\n  string: [{\n    pattern: /('''|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n    greedy: !0\n  }, {\n    pattern: /<\\[[\\s\\S]*?\\]>/,\n    greedy: !0\n  }, /\\\\[^\\s,;\\])}]+/],\n  regex: [{\n    pattern: /\\/\\/(\\[.+?]|\\\\.|(?!\\/\\/)[^\\\\])+\\/\\/[gimyu]{0,5}/,\n    greedy: !0,\n    inside: {\n      comment: {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: !0\n      }\n    }\n  }, {\n    pattern: /\\/(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gimyu]{0,5}/,\n    greedy: !0\n  }],\n  keyword: {\n    pattern: /(^|(?!-).)\\b(?:break|case|catch|class|const|continue|default|do|else|extends|fallthrough|finally|for(?: ever)?|function|if|implements|it|let|loop|new|null|otherwise|own|return|super|switch|that|then|this|throw|try|unless|until|var|void|when|while|yield)(?!-)\\b/m,\n    lookbehind: !0\n  },\n  \"keyword-operator\": {\n    pattern: /(^|[^-])\\b(?:(?:delete|require|typeof)!|(?:and|by|delete|export|from|import(?: all)?|in|instanceof|is(?:nt| not)?|not|of|or|til|to|typeof|with|xor)(?!-)\\b)/m,\n    lookbehind: !0,\n    alias: \"operator\"\n  },\n  boolean: {\n    pattern: /(^|[^-])\\b(?:false|no|off|on|true|yes)(?!-)\\b/m,\n    lookbehind: !0\n  },\n  argument: {\n    pattern: /(^|(?!\\.&\\.)[^&])&(?!&)\\d*/m,\n    lookbehind: !0,\n    alias: \"variable\"\n  },\n  number: /\\b(?:\\d+~[\\da-z]+|\\d[\\d_]*(?:\\.\\d[\\d_]*)?(?:[a-z]\\w*)?)/i,\n  identifier: /[a-z_](?:-?[a-z]|[\\d_])*/i,\n  operator: [{\n    pattern: /( )\\.(?= )/,\n    lookbehind: !0\n  }, /\\.(?:[=~]|\\.\\.?)|\\.(?:[&|^]|<<|>>>?)\\.|:(?:=|:=?)|&&|\\|[|>]|<(?:<<?<?|--?!?|~~?!?|[|=?])?|>[>=?]?|-(?:->?|>)?|\\+\\+?|@@?|%%?|\\*\\*?|!(?:~?=|--?>|~?~>)?|~(?:~?>|=)?|==?|\\^\\^?|[\\/?]/],\n  punctuation: /[(){}\\[\\]|.,:;`]/\n}, Prism.languages.livescript[\"interpolated-string\"].inside.interpolation.inside.rest = Prism.languages.livescript, Prism.languages.lolcode = {\n  comment: [/\\bOBTW\\s+[\\s\\S]*?\\s+TLDR\\b/, /\\bBTW.+/],\n  string: {\n    pattern: /\"(?::.|[^\"])*\"/,\n    inside: {\n      variable: /:\\{[^}]+\\}/,\n      symbol: [/:\\([a-f\\d]+\\)/i, /:\\[[^\\]]+\\]/, /:[)>o\":]/]\n    },\n    greedy: !0\n  },\n  number: /(?:\\B-)?(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)/,\n  symbol: {\n    pattern: /(^|\\s)(?:A )?(?:YARN|NUMBR|NUMBAR|TROOF|BUKKIT|NOOB)(?=\\s|,|$)/,\n    lookbehind: !0,\n    inside: {\n      keyword: /A(?=\\s)/\n    }\n  },\n  label: {\n    pattern: /((?:^|\\s)(?:IM IN YR|IM OUTTA YR) )[a-zA-Z]\\w*/,\n    lookbehind: !0,\n    alias: \"string\"\n  },\n  function: {\n    pattern: /((?:^|\\s)(?:I IZ|HOW IZ I|IZ) )[a-zA-Z]\\w*/,\n    lookbehind: !0\n  },\n  keyword: [{\n    pattern: /(^|\\s)(?:O HAI IM|KTHX|HAI|KTHXBYE|I HAS A|ITZ(?: A)?|R|AN|MKAY|SMOOSH|MAEK|IS NOW(?: A)?|VISIBLE|GIMMEH|O RLY\\?|YA RLY|NO WAI|OIC|MEBBE|WTF\\?|OMG|OMGWTF|GTFO|IM IN YR|IM OUTTA YR|FOUND YR|YR|TIL|WILE|UPPIN|NERFIN|I IZ|HOW IZ I|IF U SAY SO|SRS|HAS A|LIEK(?: A)?|IZ)(?=\\s|,|$)/,\n    lookbehind: !0\n  }, /'Z(?=\\s|,|$)/],\n  boolean: {\n    pattern: /(^|\\s)(?:WIN|FAIL)(?=\\s|,|$)/,\n    lookbehind: !0\n  },\n  variable: {\n    pattern: /(^|\\s)IT(?=\\s|,|$)/,\n    lookbehind: !0\n  },\n  operator: {\n    pattern: /(^|\\s)(?:NOT|BOTH SAEM|DIFFRINT|(?:SUM|DIFF|PRODUKT|QUOSHUNT|MOD|BIGGR|SMALLR|BOTH|EITHER|WON|ALL|ANY) OF)(?=\\s|,|$)/,\n    lookbehind: !0\n  },\n  punctuation: /\\.{3}|…|,|!/\n}, Prism.languages.lua = {\n  comment: /^#!.+|--(?:\\[(=*)\\[[\\s\\S]*?\\]\\1\\]|.*)/m,\n  string: {\n    pattern: /([\"'])(?:(?!\\1)[^\\\\\\r\\n]|\\\\z(?:\\r\\n|\\s)|\\\\(?:\\r\\n|[\\s\\S]))*\\1|\\[(=*)\\[[\\s\\S]*?\\]\\2\\]/,\n    greedy: !0\n  },\n  number: /\\b0x[a-f\\d]+\\.?[a-f\\d]*(?:p[+-]?\\d+)?\\b|\\b\\d+(?:\\.\\B|\\.?\\d*(?:e[+-]?\\d+)?\\b)|\\B\\.\\d+(?:e[+-]?\\d+)?\\b/i,\n  keyword: /\\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\\b/,\n  function: /(?!\\d)\\w+(?=\\s*(?:[({]))/,\n  operator: [/[-+*%^&|#]|\\/\\/?|<[<=]?|>[>=]?|[=~]=?/, {\n    pattern: /(^|[^.])\\.\\.(?!\\.)/,\n    lookbehind: !0\n  }],\n  punctuation: /[\\[\\](){},;]|\\.+|:+/\n}, Prism.languages.makefile = {\n  comment: {\n    pattern: /(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,\n    lookbehind: !0\n  },\n  string: {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: !0\n  },\n  builtin: /\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,\n  symbol: {\n    pattern: /^[^:=\\r\\n]+(?=\\s*:(?!=))/m,\n    inside: {\n      variable: /\\$+(?:[^(){}:#=\\s]+|(?=[({]))/\n    }\n  },\n  variable: /\\$+(?:[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,\n  keyword: [/-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/, {\n    pattern: /(\\()(?:addsuffix|abspath|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:s|list)?)(?=[ \\t])/,\n    lookbehind: !0\n  }],\n  operator: /(?:::|[?:+!])?=|[|@]/,\n  punctuation: /[:;(){}]/\n}, function (e) {\n  e.languages.crystal = e.languages.extend(\"ruby\", {\n    keyword: [/\\b(?:abstract|alias|as|asm|begin|break|case|class|def|do|else|elsif|end|ensure|enum|extend|for|fun|if|include|instance_sizeof|lib|macro|module|next|of|out|pointerof|private|protected|rescue|return|require|select|self|sizeof|struct|super|then|type|typeof|uninitialized|union|unless|until|when|while|with|yield|__DIR__|__END_LINE__|__FILE__|__LINE__)\\b/, {\n      pattern: /(\\.\\s*)(?:is_a|responds_to)\\?/,\n      lookbehind: !0\n    }],\n    number: /\\b(?:0b[01_]*[01]|0o[0-7_]*[0-7]|0x[\\da-fA-F_]*[\\da-fA-F]|(?:\\d(?:[\\d_]*\\d)?)(?:\\.[\\d_]*\\d)?(?:[eE][+-]?[\\d_]*\\d)?)(?:_(?:[uif](?:8|16|32|64))?)?\\b/\n  }), e.languages.insertBefore(\"crystal\", \"string\", {\n    attribute: {\n      pattern: /@\\[.+?\\]/,\n      alias: \"attr-name\",\n      inside: {\n        delimiter: {\n          pattern: /^@\\[|\\]$/,\n          alias: \"tag\"\n        },\n        rest: e.languages.crystal\n      }\n    },\n    expansion: [{\n      pattern: /\\{\\{.+?\\}\\}/,\n      inside: {\n        delimiter: {\n          pattern: /^\\{\\{|\\}\\}$/,\n          alias: \"tag\"\n        },\n        rest: e.languages.crystal\n      }\n    }, {\n      pattern: /\\{%.+?%\\}/,\n      inside: {\n        delimiter: {\n          pattern: /^\\{%|%\\}$/,\n          alias: \"tag\"\n        },\n        rest: e.languages.crystal\n      }\n    }]\n  });\n}(Prism), function (e) {\n  e.languages.django = {\n    comment: /^{#[\\s\\S]*?#}$/,\n    tag: {\n      pattern: /(^{%[+-]?\\s*)\\w+/,\n      lookbehind: !0,\n      alias: \"keyword\"\n    },\n    delimiter: {\n      pattern: /^{[{%][+-]?|[+-]?[}%]}$/,\n      alias: \"punctuation\"\n    },\n    string: {\n      pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: !0\n    },\n    filter: {\n      pattern: /(\\|)\\w+/,\n      lookbehind: !0,\n      alias: \"function\"\n    },\n    test: {\n      pattern: /(\\bis\\s+(?:not\\s+)?)(?!not\\b)\\w+/,\n      lookbehind: !0,\n      alias: \"function\"\n    },\n    function: /\\b[a-z_]\\w+(?=\\s*\\()/i,\n    keyword: /\\b(?:and|as|by|else|for|if|import|in|is|loop|not|or|recursive|with|without)\\b/,\n    operator: /[-+*/%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n    number: /\\b\\d+(?:\\.\\d+)?\\b/,\n    boolean: /[Tt]rue|[Ff]alse|[Nn]one/,\n    variable: /\\b\\w+?\\b/,\n    punctuation: /[{}[\\](),.:;]/\n  };\n  var t = /{{[\\s\\S]*?}}|{%[\\s\\S]*?%}|{#[\\s\\S]*?#}/g,\n      n = e.languages[\"markup-templating\"];\n  e.hooks.add(\"before-tokenize\", function (e) {\n    n.buildPlaceholders(e, \"django\", t);\n  }), e.hooks.add(\"after-tokenize\", function (e) {\n    n.tokenizePlaceholders(e, \"django\");\n  }), e.languages.jinja2 = e.languages.django, e.hooks.add(\"before-tokenize\", function (e) {\n    n.buildPlaceholders(e, \"jinja2\", t);\n  }), e.hooks.add(\"after-tokenize\", function (e) {\n    n.tokenizePlaceholders(e, \"jinja2\");\n  });\n}(Prism), Prism.languages.matlab = {\n  comment: [/%\\{[\\s\\S]*?\\}%/, /%.+/],\n  string: {\n    pattern: /\\B'(?:''|[^'\\r\\n])*'/,\n    greedy: !0\n  },\n  number: /(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[eE][+-]?\\d+)?(?:[ij])?|\\b[ij]\\b/,\n  keyword: /\\b(?:break|case|catch|continue|else|elseif|end|for|function|if|inf|NaN|otherwise|parfor|pause|pi|return|switch|try|while)\\b/,\n  function: /(?!\\d)\\w+(?=\\s*\\()/,\n  operator: /\\.?[*^\\/\\\\']|[+\\-:@]|[<>=~]=?|&&?|\\|\\|?/,\n  punctuation: /\\.{3}|[.,;\\[\\](){}!]/\n}, Prism.languages.mel = {\n  comment: /\\/\\/.*/,\n  code: {\n    pattern: /`(?:\\\\.|[^\\\\`\\r\\n])*`/,\n    greedy: !0,\n    alias: \"italic\",\n    inside: {\n      delimiter: {\n        pattern: /^`|`$/,\n        alias: \"punctuation\"\n      }\n    }\n  },\n  string: {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n    greedy: !0\n  },\n  variable: /\\$\\w+/,\n  number: /\\b0x[\\da-fA-F]+\\b|\\b\\d+\\.?\\d*|\\B\\.\\d+/,\n  flag: {\n    pattern: /-[^\\d\\W]\\w*/,\n    alias: \"operator\"\n  },\n  keyword: /\\b(?:break|case|continue|default|do|else|float|for|global|if|in|int|matrix|proc|return|string|switch|vector|while)\\b/,\n  function: /\\w+(?=\\()|\\b(?:about|abs|addAttr|addAttributeEditorNodeHelp|addDynamic|addNewShelfTab|addPP|addPanelCategory|addPrefixToName|advanceToNextDrivenKey|affectedNet|affects|aimConstraint|air|alias|aliasAttr|align|alignCtx|alignCurve|alignSurface|allViewFit|ambientLight|angle|angleBetween|animCone|animCurveEditor|animDisplay|animView|annotate|appendStringArray|applicationName|applyAttrPreset|applyTake|arcLenDimContext|arcLengthDimension|arclen|arrayMapper|art3dPaintCtx|artAttrCtx|artAttrPaintVertexCtx|artAttrSkinPaintCtx|artAttrTool|artBuildPaintMenu|artFluidAttrCtx|artPuttyCtx|artSelectCtx|artSetPaintCtx|artUserPaintCtx|assignCommand|assignInputDevice|assignViewportFactories|attachCurve|attachDeviceAttr|attachSurface|attrColorSliderGrp|attrCompatibility|attrControlGrp|attrEnumOptionMenu|attrEnumOptionMenuGrp|attrFieldGrp|attrFieldSliderGrp|attrNavigationControlGrp|attrPresetEditWin|attributeExists|attributeInfo|attributeMenu|attributeQuery|autoKeyframe|autoPlace|bakeClip|bakeFluidShading|bakePartialHistory|bakeResults|bakeSimulation|basename|basenameEx|batchRender|bessel|bevel|bevelPlus|binMembership|bindSkin|blend2|blendShape|blendShapeEditor|blendShapePanel|blendTwoAttr|blindDataType|boneLattice|boundary|boxDollyCtx|boxZoomCtx|bufferCurve|buildBookmarkMenu|buildKeyframeMenu|button|buttonManip|CBG|cacheFile|cacheFileCombine|cacheFileMerge|cacheFileTrack|camera|cameraView|canCreateManip|canvas|capitalizeString|catch|catchQuiet|ceil|changeSubdivComponentDisplayLevel|changeSubdivRegion|channelBox|character|characterMap|characterOutlineEditor|characterize|chdir|checkBox|checkBoxGrp|checkDefaultRenderGlobals|choice|circle|circularFillet|clamp|clear|clearCache|clip|clipEditor|clipEditorCurrentTimeCtx|clipSchedule|clipSchedulerOutliner|clipTrimBefore|closeCurve|closeSurface|cluster|cmdFileOutput|cmdScrollFieldExecuter|cmdScrollFieldReporter|cmdShell|coarsenSubdivSelectionList|collision|color|colorAtPoint|colorEditor|colorIndex|colorIndexSliderGrp|colorSliderButtonGrp|colorSliderGrp|columnLayout|commandEcho|commandLine|commandPort|compactHairSystem|componentEditor|compositingInterop|computePolysetVolume|condition|cone|confirmDialog|connectAttr|connectControl|connectDynamic|connectJoint|connectionInfo|constrain|constrainValue|constructionHistory|container|containsMultibyte|contextInfo|control|convertFromOldLayers|convertIffToPsd|convertLightmap|convertSolidTx|convertTessellation|convertUnit|copyArray|copyFlexor|copyKey|copySkinWeights|cos|cpButton|cpCache|cpClothSet|cpCollision|cpConstraint|cpConvClothToMesh|cpForces|cpGetSolverAttr|cpPanel|cpProperty|cpRigidCollisionFilter|cpSeam|cpSetEdit|cpSetSolverAttr|cpSolver|cpSolverTypes|cpTool|cpUpdateClothUVs|createDisplayLayer|createDrawCtx|createEditor|createLayeredPsdFile|createMotionField|createNewShelf|createNode|createRenderLayer|createSubdivRegion|cross|crossProduct|ctxAbort|ctxCompletion|ctxEditMode|ctxTraverse|currentCtx|currentTime|currentTimeCtx|currentUnit|curve|curveAddPtCtx|curveCVCtx|curveEPCtx|curveEditorCtx|curveIntersect|curveMoveEPCtx|curveOnSurface|curveSketchCtx|cutKey|cycleCheck|cylinder|dagPose|date|defaultLightListCheckBox|defaultNavigation|defineDataServer|defineVirtualDevice|deformer|deg_to_rad|delete|deleteAttr|deleteShadingGroupsAndMaterials|deleteShelfTab|deleteUI|deleteUnusedBrushes|delrandstr|detachCurve|detachDeviceAttr|detachSurface|deviceEditor|devicePanel|dgInfo|dgdirty|dgeval|dgtimer|dimWhen|directKeyCtx|directionalLight|dirmap|dirname|disable|disconnectAttr|disconnectJoint|diskCache|displacementToPoly|displayAffected|displayColor|displayCull|displayLevelOfDetail|displayPref|displayRGBColor|displaySmoothness|displayStats|displayString|displaySurface|distanceDimContext|distanceDimension|doBlur|dolly|dollyCtx|dopeSheetEditor|dot|dotProduct|doubleProfileBirailSurface|drag|dragAttrContext|draggerContext|dropoffLocator|duplicate|duplicateCurve|duplicateSurface|dynCache|dynControl|dynExport|dynExpression|dynGlobals|dynPaintEditor|dynParticleCtx|dynPref|dynRelEdPanel|dynRelEditor|dynamicLoad|editAttrLimits|editDisplayLayerGlobals|editDisplayLayerMembers|editRenderLayerAdjustment|editRenderLayerGlobals|editRenderLayerMembers|editor|editorTemplate|effector|emit|emitter|enableDevice|encodeString|endString|endsWith|env|equivalent|equivalentTol|erf|error|eval|evalDeferred|evalEcho|event|exactWorldBoundingBox|exclusiveLightCheckBox|exec|executeForEachObject|exists|exp|expression|expressionEditorListen|extendCurve|extendSurface|extrude|fcheck|fclose|feof|fflush|fgetline|fgetword|file|fileBrowserDialog|fileDialog|fileExtension|fileInfo|filetest|filletCurve|filter|filterCurve|filterExpand|filterStudioImport|findAllIntersections|findAnimCurves|findKeyframe|findMenuItem|findRelatedSkinCluster|finder|firstParentOf|fitBspline|flexor|floatEq|floatField|floatFieldGrp|floatScrollBar|floatSlider|floatSlider2|floatSliderButtonGrp|floatSliderGrp|floor|flow|fluidCacheInfo|fluidEmitter|fluidVoxelInfo|flushUndo|fmod|fontDialog|fopen|formLayout|format|fprint|frameLayout|fread|freeFormFillet|frewind|fromNativePath|fwrite|gamma|gauss|geometryConstraint|getApplicationVersionAsFloat|getAttr|getClassification|getDefaultBrush|getFileList|getFluidAttr|getInputDeviceRange|getMayaPanelTypes|getModifiers|getPanel|getParticleAttr|getPluginResource|getenv|getpid|glRender|glRenderEditor|globalStitch|gmatch|goal|gotoBindPose|grabColor|gradientControl|gradientControlNoAttr|graphDollyCtx|graphSelectContext|graphTrackCtx|gravity|grid|gridLayout|group|groupObjectsByName|HfAddAttractorToAS|HfAssignAS|HfBuildEqualMap|HfBuildFurFiles|HfBuildFurImages|HfCancelAFR|HfConnectASToHF|HfCreateAttractor|HfDeleteAS|HfEditAS|HfPerformCreateAS|HfRemoveAttractorFromAS|HfSelectAttached|HfSelectAttractors|HfUnAssignAS|hardenPointCurve|hardware|hardwareRenderPanel|headsUpDisplay|headsUpMessage|help|helpLine|hermite|hide|hilite|hitTest|hotBox|hotkey|hotkeyCheck|hsv_to_rgb|hudButton|hudSlider|hudSliderButton|hwReflectionMap|hwRender|hwRenderLoad|hyperGraph|hyperPanel|hyperShade|hypot|iconTextButton|iconTextCheckBox|iconTextRadioButton|iconTextRadioCollection|iconTextScrollList|iconTextStaticLabel|ikHandle|ikHandleCtx|ikHandleDisplayScale|ikSolver|ikSplineHandleCtx|ikSystem|ikSystemInfo|ikfkDisplayMethod|illustratorCurves|image|imfPlugins|inheritTransform|insertJoint|insertJointCtx|insertKeyCtx|insertKnotCurve|insertKnotSurface|instance|instanceable|instancer|intField|intFieldGrp|intScrollBar|intSlider|intSliderGrp|interToUI|internalVar|intersect|iprEngine|isAnimCurve|isConnected|isDirty|isParentOf|isSameObject|isTrue|isValidObjectName|isValidString|isValidUiName|isolateSelect|itemFilter|itemFilterAttr|itemFilterRender|itemFilterType|joint|jointCluster|jointCtx|jointDisplayScale|jointLattice|keyTangent|keyframe|keyframeOutliner|keyframeRegionCurrentTimeCtx|keyframeRegionDirectKeyCtx|keyframeRegionDollyCtx|keyframeRegionInsertKeyCtx|keyframeRegionMoveKeyCtx|keyframeRegionScaleKeyCtx|keyframeRegionSelectKeyCtx|keyframeRegionSetKeyCtx|keyframeRegionTrackCtx|keyframeStats|lassoContext|lattice|latticeDeformKeyCtx|launch|launchImageEditor|layerButton|layeredShaderPort|layeredTexturePort|layout|layoutDialog|lightList|lightListEditor|lightListPanel|lightlink|lineIntersection|linearPrecision|linstep|listAnimatable|listAttr|listCameras|listConnections|listDeviceAttachments|listHistory|listInputDeviceAxes|listInputDeviceButtons|listInputDevices|listMenuAnnotation|listNodeTypes|listPanelCategories|listRelatives|listSets|listTransforms|listUnselected|listerEditor|loadFluid|loadNewShelf|loadPlugin|loadPluginLanguageResources|loadPrefObjects|localizedPanelLabel|lockNode|loft|log|longNameOf|lookThru|ls|lsThroughFilter|lsType|lsUI|Mayatomr|mag|makeIdentity|makeLive|makePaintable|makeRoll|makeSingleSurface|makeTubeOn|makebot|manipMoveContext|manipMoveLimitsCtx|manipOptions|manipRotateContext|manipRotateLimitsCtx|manipScaleContext|manipScaleLimitsCtx|marker|match|max|memory|menu|menuBarLayout|menuEditor|menuItem|menuItemToShelf|menuSet|menuSetPref|messageLine|min|minimizeApp|mirrorJoint|modelCurrentTimeCtx|modelEditor|modelPanel|mouse|movIn|movOut|move|moveIKtoFK|moveKeyCtx|moveVertexAlongDirection|multiProfileBirailSurface|mute|nParticle|nameCommand|nameField|namespace|namespaceInfo|newPanelItems|newton|nodeCast|nodeIconButton|nodeOutliner|nodePreset|nodeType|noise|nonLinear|normalConstraint|normalize|nurbsBoolean|nurbsCopyUVSet|nurbsCube|nurbsEditUV|nurbsPlane|nurbsSelect|nurbsSquare|nurbsToPoly|nurbsToPolygonsPref|nurbsToSubdiv|nurbsToSubdivPref|nurbsUVSet|nurbsViewDirectionVector|objExists|objectCenter|objectLayer|objectType|objectTypeUI|obsoleteProc|oceanNurbsPreviewPlane|offsetCurve|offsetCurveOnSurface|offsetSurface|openGLExtension|openMayaPref|optionMenu|optionMenuGrp|optionVar|orbit|orbitCtx|orientConstraint|outlinerEditor|outlinerPanel|overrideModifier|paintEffectsDisplay|pairBlend|palettePort|paneLayout|panel|panelConfiguration|panelHistory|paramDimContext|paramDimension|paramLocator|parent|parentConstraint|particle|particleExists|particleInstancer|particleRenderInfo|partition|pasteKey|pathAnimation|pause|pclose|percent|performanceOptions|pfxstrokes|pickWalk|picture|pixelMove|planarSrf|plane|play|playbackOptions|playblast|plugAttr|plugNode|pluginInfo|pluginResourceUtil|pointConstraint|pointCurveConstraint|pointLight|pointMatrixMult|pointOnCurve|pointOnSurface|pointPosition|poleVectorConstraint|polyAppend|polyAppendFacetCtx|polyAppendVertex|polyAutoProjection|polyAverageNormal|polyAverageVertex|polyBevel|polyBlendColor|polyBlindData|polyBoolOp|polyBridgeEdge|polyCacheMonitor|polyCheck|polyChipOff|polyClipboard|polyCloseBorder|polyCollapseEdge|polyCollapseFacet|polyColorBlindData|polyColorDel|polyColorPerVertex|polyColorSet|polyCompare|polyCone|polyCopyUV|polyCrease|polyCreaseCtx|polyCreateFacet|polyCreateFacetCtx|polyCube|polyCut|polyCutCtx|polyCylinder|polyCylindricalProjection|polyDelEdge|polyDelFacet|polyDelVertex|polyDuplicateAndConnect|polyDuplicateEdge|polyEditUV|polyEditUVShell|polyEvaluate|polyExtrudeEdge|polyExtrudeFacet|polyExtrudeVertex|polyFlipEdge|polyFlipUV|polyForceUV|polyGeoSampler|polyHelix|polyInfo|polyInstallAction|polyLayoutUV|polyListComponentConversion|polyMapCut|polyMapDel|polyMapSew|polyMapSewMove|polyMergeEdge|polyMergeEdgeCtx|polyMergeFacet|polyMergeFacetCtx|polyMergeUV|polyMergeVertex|polyMirrorFace|polyMoveEdge|polyMoveFacet|polyMoveFacetUV|polyMoveUV|polyMoveVertex|polyNormal|polyNormalPerVertex|polyNormalizeUV|polyOptUvs|polyOptions|polyOutput|polyPipe|polyPlanarProjection|polyPlane|polyPlatonicSolid|polyPoke|polyPrimitive|polyPrism|polyProjection|polyPyramid|polyQuad|polyQueryBlindData|polyReduce|polySelect|polySelectConstraint|polySelectConstraintMonitor|polySelectCtx|polySelectEditCtx|polySeparate|polySetToFaceNormal|polySewEdge|polyShortestPathCtx|polySmooth|polySoftEdge|polySphere|polySphericalProjection|polySplit|polySplitCtx|polySplitEdge|polySplitRing|polySplitVertex|polyStraightenUVBorder|polySubdivideEdge|polySubdivideFacet|polyToSubdiv|polyTorus|polyTransfer|polyTriangulate|polyUVSet|polyUnite|polyWedgeFace|popen|popupMenu|pose|pow|preloadRefEd|print|progressBar|progressWindow|projFileViewer|projectCurve|projectTangent|projectionContext|projectionManip|promptDialog|propModCtx|propMove|psdChannelOutliner|psdEditTextureFile|psdExport|psdTextureFile|putenv|pwd|python|querySubdiv|quit|rad_to_deg|radial|radioButton|radioButtonGrp|radioCollection|radioMenuItemCollection|rampColorPort|rand|randomizeFollicles|randstate|rangeControl|readTake|rebuildCurve|rebuildSurface|recordAttr|recordDevice|redo|reference|referenceEdit|referenceQuery|refineSubdivSelectionList|refresh|refreshAE|registerPluginResource|rehash|reloadImage|removeJoint|removeMultiInstance|removePanelCategory|rename|renameAttr|renameSelectionList|renameUI|render|renderGlobalsNode|renderInfo|renderLayerButton|renderLayerParent|renderLayerPostProcess|renderLayerUnparent|renderManip|renderPartition|renderQualityNode|renderSettings|renderThumbnailUpdate|renderWindowEditor|renderWindowSelectContext|renderer|reorder|reorderDeformers|requires|reroot|resampleFluid|resetAE|resetPfxToPolyCamera|resetTool|resolutionNode|retarget|reverseCurve|reverseSurface|revolve|rgb_to_hsv|rigidBody|rigidSolver|roll|rollCtx|rootOf|rot|rotate|rotationInterpolation|roundConstantRadius|rowColumnLayout|rowLayout|runTimeCommand|runup|sampleImage|saveAllShelves|saveAttrPreset|saveFluid|saveImage|saveInitialState|saveMenu|savePrefObjects|savePrefs|saveShelf|saveToolSettings|scale|scaleBrushBrightness|scaleComponents|scaleConstraint|scaleKey|scaleKeyCtx|sceneEditor|sceneUIReplacement|scmh|scriptCtx|scriptEditorInfo|scriptJob|scriptNode|scriptTable|scriptToShelf|scriptedPanel|scriptedPanelType|scrollField|scrollLayout|sculpt|searchPathArray|seed|selLoadSettings|select|selectContext|selectCurveCV|selectKey|selectKeyCtx|selectKeyframeRegionCtx|selectMode|selectPref|selectPriority|selectType|selectedNodes|selectionConnection|separator|setAttr|setAttrEnumResource|setAttrMapping|setAttrNiceNameResource|setConstraintRestPosition|setDefaultShadingGroup|setDrivenKeyframe|setDynamic|setEditCtx|setEditor|setFluidAttr|setFocus|setInfinity|setInputDeviceMapping|setKeyCtx|setKeyPath|setKeyframe|setKeyframeBlendshapeTargetWts|setMenuMode|setNodeNiceNameResource|setNodeTypeFlag|setParent|setParticleAttr|setPfxToPolyCamera|setPluginResource|setProject|setStampDensity|setStartupMessage|setState|setToolTo|setUITemplate|setXformManip|sets|shadingConnection|shadingGeometryRelCtx|shadingLightRelCtx|shadingNetworkCompare|shadingNode|shapeCompare|shelfButton|shelfLayout|shelfTabLayout|shellField|shortNameOf|showHelp|showHidden|showManipCtx|showSelectionInTitle|showShadingGroupAttrEditor|showWindow|sign|simplify|sin|singleProfileBirailSurface|size|sizeBytes|skinCluster|skinPercent|smoothCurve|smoothTangentSurface|smoothstep|snap2to2|snapKey|snapMode|snapTogetherCtx|snapshot|soft|softMod|softModCtx|sort|sound|soundControl|source|spaceLocator|sphere|sphrand|spotLight|spotLightPreviewPort|spreadSheetEditor|spring|sqrt|squareSurface|srtContext|stackTrace|startString|startsWith|stitchAndExplodeShell|stitchSurface|stitchSurfacePoints|strcmp|stringArrayCatenate|stringArrayContains|stringArrayCount|stringArrayInsertAtIndex|stringArrayIntersector|stringArrayRemove|stringArrayRemoveAtIndex|stringArrayRemoveDuplicates|stringArrayRemoveExact|stringArrayToString|stringToStringArray|strip|stripPrefixFromName|stroke|subdAutoProjection|subdCleanTopology|subdCollapse|subdDuplicateAndConnect|subdEditUV|subdListComponentConversion|subdMapCut|subdMapSewMove|subdMatchTopology|subdMirror|subdToBlind|subdToPoly|subdTransferUVsToCache|subdiv|subdivCrease|subdivDisplaySmoothness|substitute|substituteAllString|substituteGeometry|substring|surface|surfaceSampler|surfaceShaderList|swatchDisplayPort|switchTable|symbolButton|symbolCheckBox|sysFile|system|tabLayout|tan|tangentConstraint|texLatticeDeformContext|texManipContext|texMoveContext|texMoveUVShellContext|texRotateContext|texScaleContext|texSelectContext|texSelectShortestPathCtx|texSmudgeUVContext|texWinToolCtx|text|textCurves|textField|textFieldButtonGrp|textFieldGrp|textManip|textScrollList|textToShelf|textureDisplacePlane|textureHairColor|texturePlacementContext|textureWindow|threadCount|threePointArcCtx|timeControl|timePort|timerX|toNativePath|toggle|toggleAxis|toggleWindowVisibility|tokenize|tokenizeList|tolerance|tolower|toolButton|toolCollection|toolDropped|toolHasOptions|toolPropertyWindow|torus|toupper|trace|track|trackCtx|transferAttributes|transformCompare|transformLimits|translator|trim|trunc|truncateFluidCache|truncateHairCache|tumble|tumbleCtx|turbulence|twoPointArcCtx|uiRes|uiTemplate|unassignInputDevice|undo|undoInfo|ungroup|uniform|unit|unloadPlugin|untangleUV|untitledFileName|untrim|upAxis|updateAE|userCtx|uvLink|uvSnapshot|validateShelfName|vectorize|view2dToolCtx|viewCamera|viewClipPlane|viewFit|viewHeadOn|viewLookAt|viewManip|viewPlace|viewSet|visor|volumeAxis|vortex|waitCursor|warning|webBrowser|webBrowserPrefs|whatIs|window|windowPref|wire|wireContext|workspace|wrinkle|wrinkleContext|writeTake|xbmLangPathList|xform)\\b/,\n  operator: [/\\+[+=]?|-[-=]?|&&|\\|\\||[<>]=|[*\\/!=]=?|[%^]/, {\n    pattern: /(^|[^<])<(?!<)/,\n    lookbehind: !0\n  }, {\n    pattern: /(^|[^>])>(?!>)/,\n    lookbehind: !0\n  }],\n  punctuation: /<<|>>|[.,:;?\\[\\](){}]/\n}, Prism.languages.mel.code.inside.rest = Prism.languages.mel, Prism.languages.mizar = {\n  comment: /::.+/,\n  keyword: /@proof\\b|\\b(?:according|aggregate|all|and|antonym|are|as|associativity|assume|asymmetry|attr|be|begin|being|by|canceled|case|cases|clusters?|coherence|commutativity|compatibility|connectedness|consider|consistency|constructors|contradiction|correctness|def|deffunc|define|definitions?|defpred|do|does|equals|end|environ|ex|exactly|existence|for|from|func|given|hence|hereby|holds|idempotence|identity|iff?|implies|involutiveness|irreflexivity|is|it|let|means|mode|non|not|notations?|now|of|or|otherwise|over|per|pred|prefix|projectivity|proof|provided|qua|reconsider|redefine|reduce|reducibility|reflexivity|registrations?|requirements|reserve|sch|schemes?|section|selector|set|sethood|st|struct|such|suppose|symmetry|synonym|take|that|the|then|theorems?|thesis|thus|to|transitivity|uniqueness|vocabular(?:y|ies)|when|where|with|wrt)\\b/,\n  parameter: {\n    pattern: /\\$(?:10|\\d)/,\n    alias: \"variable\"\n  },\n  variable: /\\w+(?=:)/,\n  number: /(?:\\b|-)\\d+\\b/,\n  operator: /\\.\\.\\.|->|&|\\.?=/,\n  punctuation: /\\(#|#\\)|[,:;\\[\\](){}]/\n}, Prism.languages.monkey = {\n  string: /\"[^\"\\r\\n]*\"/,\n  comment: [{\n    pattern: /^#Rem\\s+[\\s\\S]*?^#End/im,\n    greedy: !0\n  }, {\n    pattern: /'.+/,\n    greedy: !0\n  }],\n  preprocessor: {\n    pattern: /(^[ \\t]*)#.+/m,\n    lookbehind: !0,\n    alias: \"comment\"\n  },\n  function: /\\w+(?=\\()/,\n  \"type-char\": {\n    pattern: /(\\w)[?%#$]/,\n    lookbehind: !0,\n    alias: \"variable\"\n  },\n  number: {\n    pattern: /((?:\\.\\.)?)(?:(?:\\b|\\B-\\.?|\\B\\.)\\d+(?:(?!\\.\\.)\\.\\d*)?|\\$[\\da-f]+)/i,\n    lookbehind: !0\n  },\n  keyword: /\\b(?:Void|Strict|Public|Private|Property|Bool|Int|Float|String|Array|Object|Continue|Exit|Import|Extern|New|Self|Super|Try|Catch|Eachin|True|False|Extends|Abstract|Final|Select|Case|Default|Const|Local|Global|Field|Method|Function|Class|End|If|Then|Else|ElseIf|EndIf|While|Wend|Repeat|Until|Forever|For|To|Step|Next|Return|Module|Interface|Implements|Inline|Throw|Null)\\b/i,\n  operator: /\\.\\.|<[=>]?|>=?|:?=|(?:[+\\-*\\/&~|]|\\b(?:Mod|Shl|Shr)\\b)=?|\\b(?:And|Not|Or)\\b/i,\n  punctuation: /[.,:;()\\[\\]]/\n}, Prism.languages.n1ql = {\n  comment: /\\/\\*[\\s\\S]*?(?:$|\\*\\/)/,\n  parameter: /\\$[\\w.]+/,\n  string: {\n    pattern: /([\"'])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\]|\\1\\1)*\\1/,\n    greedy: !0\n  },\n  identifier: {\n    pattern: /`(?:\\\\[\\s\\S]|[^\\\\`]|``)*`/,\n    greedy: !0\n  },\n  function: /\\b(?:ABS|ACOS|ARRAY_AGG|ARRAY_APPEND|ARRAY_AVG|ARRAY_CONCAT|ARRAY_CONTAINS|ARRAY_COUNT|ARRAY_DISTINCT|ARRAY_FLATTEN|ARRAY_IFNULL|ARRAY_INSERT|ARRAY_INTERSECT|ARRAY_LENGTH|ARRAY_MAX|ARRAY_MIN|ARRAY_POSITION|ARRAY_PREPEND|ARRAY_PUT|ARRAY_RANGE|ARRAY_REMOVE|ARRAY_REPEAT|ARRAY_REPLACE|ARRAY_REVERSE|ARRAY_SORT|ARRAY_STAR|ARRAY_SUM|ARRAY_SYMDIFF|ARRAY_SYMDIFFN|ARRAY_UNION|ASIN|ATAN|ATAN2|AVG|BASE64|BASE64_DECODE|BASE64_ENCODE|BITAND|BITCLEAR|BITNOT|BITOR|BITSET|BITSHIFT|BITTEST|BITXOR|CEIL|CLOCK_LOCAL|CLOCK_MILLIS|CLOCK_STR|CLOCK_TZ|CLOCK_UTC|CONTAINS|CONTAINS_TOKEN|CONTAINS_TOKEN_LIKE|CONTAINS_TOKEN_REGEXP|COS|COUNT|CURL|DATE_ADD_MILLIS|DATE_ADD_STR|DATE_DIFF_MILLIS|DATE_DIFF_STR|DATE_FORMAT_STR|DATE_PART_MILLIS|DATE_PART_STR|DATE_RANGE_MILLIS|DATE_RANGE_STR|DATE_TRUNC_MILLIS|DATE_TRUNC_STR|DECODE_JSON|DEGREES|DURATION_TO_STR|E|ENCODED_SIZE|ENCODE_JSON|EXP|FLOOR|GREATEST|HAS_TOKEN|IFINF|IFMISSING|IFMISSINGORNULL|IFNAN|IFNANORINF|IFNULL|INITCAP|ISARRAY|ISATOM|ISBOOLEAN|ISNUMBER|ISOBJECT|ISSTRING|IsBitSET|LEAST|LENGTH|LN|LOG|LOWER|LTRIM|MAX|META|MILLIS|MILLIS_TO_LOCAL|MILLIS_TO_STR|MILLIS_TO_TZ|MILLIS_TO_UTC|MILLIS_TO_ZONE_NAME|MIN|MISSINGIF|NANIF|NEGINFIF|NOW_LOCAL|NOW_MILLIS|NOW_STR|NOW_TZ|NOW_UTC|NULLIF|OBJECT_ADD|OBJECT_CONCAT|OBJECT_INNER_PAIRS|OBJECT_INNER_VALUES|OBJECT_LENGTH|OBJECT_NAMES|OBJECT_PAIRS|OBJECT_PUT|OBJECT_REMOVE|OBJECT_RENAME|OBJECT_REPLACE|OBJECT_UNWRAP|OBJECT_VALUES|PAIRS|PI|POLY_LENGTH|POSINFIF|POSITION|POWER|RADIANS|RANDOM|REGEXP_CONTAINS|REGEXP_LIKE|REGEXP_POSITION|REGEXP_REPLACE|REPEAT|REPLACE|REVERSE|ROUND|RTRIM|SIGN|SIN|SPLIT|SQRT|STR_TO_DURATION|STR_TO_MILLIS|STR_TO_TZ|STR_TO_UTC|STR_TO_ZONE_NAME|SUBSTR|SUFFIXES|SUM|TAN|TITLE|TOARRAY|TOATOM|TOBOOLEAN|TOKENS|TOKENS|TONUMBER|TOOBJECT|TOSTRING|TRIM|TRUNC|TYPE|UPPER|WEEKDAY_MILLIS|WEEKDAY_STR)(?=\\s*\\()/i,\n  keyword: /\\b(?:ALL|ALTER|ANALYZE|AS|ASC|BEGIN|BINARY|BOOLEAN|BREAK|BUCKET|BUILD|BY|CALL|CAST|CLUSTER|COLLATE|COLLECTION|COMMIT|CONNECT|CONTINUE|CORRELATE|COVER|CREATE|DATABASE|DATASET|DATASTORE|DECLARE|DECREMENT|DELETE|DERIVED|DESC|DESCRIBE|DISTINCT|DO|DROP|EACH|ELEMENT|EXCEPT|EXCLUDE|EXECUTE|EXPLAIN|FETCH|FLATTEN|FOR|FORCE|FROM|FUNCTION|GRANT|GROUP|GSI|HAVING|IF|IGNORE|ILIKE|INCLUDE|INCREMENT|INDEX|INFER|INLINE|INNER|INSERT|INTERSECT|INTO|IS|JOIN|KEY|KEYS|KEYSPACE|KNOWN|LAST|LEFT|LET|LETTING|LIMIT|LSM|MAP|MAPPING|MATCHED|MATERIALIZED|MERGE|MINUS|MISSING|NAMESPACE|NEST|NULL|NUMBER|OBJECT|OFFSET|ON|OPTION|ORDER|OUTER|OVER|PARSE|PARTITION|PASSWORD|PATH|POOL|PREPARE|PRIMARY|PRIVATE|PRIVILEGE|PROCEDURE|PUBLIC|RAW|REALM|REDUCE|RENAME|RETURN|RETURNING|REVOKE|RIGHT|ROLE|ROLLBACK|SATISFIES|SCHEMA|SELECT|SELF|SEMI|SET|SHOW|SOME|START|STATISTICS|STRING|SYSTEM|TO|TRANSACTION|TRIGGER|TRUNCATE|UNDER|UNION|UNIQUE|UNKNOWN|UNNEST|UNSET|UPDATE|UPSERT|USE|USER|USING|VALIDATE|VALUE|VALUES|VIA|VIEW|WHERE|WHILE|WITH|WORK|XOR)\\b/i,\n  boolean: /\\b(?:TRUE|FALSE)\\b/i,\n  number: /(?:\\b\\d+\\.|\\B\\.)\\d+e[+\\-]?\\d+\\b|\\b\\d+\\.?\\d*|\\B\\.\\d+\\b/i,\n  operator: /[-+*\\/=%]|!=|==?|\\|\\||<[>=]?|>=?|\\b(?:AND|ANY|ARRAY|BETWEEN|CASE|ELSE|END|EVERY|EXISTS|FIRST|IN|LIKE|NOT|OR|THEN|VALUED|WHEN|WITHIN)\\b/i,\n  punctuation: /[;[\\](),.{}:]/\n}, Prism.languages.typescript = Prism.languages.extend(\"javascript\", {\n  keyword: /\\b(?:abstract|as|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|var|void|while|with|yield)\\b/,\n  builtin: /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n}), Prism.languages.ts = Prism.languages.typescript, Prism.languages[\"nand2tetris-hdl\"] = {\n  comment: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n  keyword: /\\b(?:CHIP|IN|OUT|PARTS|BUILTIN|CLOCKED)\\b/,\n  boolean: /\\b(?:true|false)\\b/,\n  function: /[A-Za-z][A-Za-z0-9]*(?=\\()/,\n  number: /\\b\\d+\\b/,\n  operator: /=|\\.\\./,\n  punctuation: /[{}[\\];(),:]/\n}, Prism.languages.nasm = {\n  comment: /;.*$/m,\n  string: /([\"'`])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n  label: {\n    pattern: /(^\\s*)[A-Za-z._?$][\\w.?$@~#]*:/m,\n    lookbehind: !0,\n    alias: \"function\"\n  },\n  keyword: [/\\[?BITS (?:16|32|64)\\]?/, {\n    pattern: /(^\\s*)section\\s*[a-zA-Z.]+:?/im,\n    lookbehind: !0\n  }, /(?:extern|global)[^;\\r\\n]*/i, /(?:CPU|FLOAT|DEFAULT).*$/m],\n  register: {\n    pattern: /\\b(?:st\\d|[xyz]mm\\d\\d?|[cdt]r\\d|r\\d\\d?[bwd]?|[er]?[abcd]x|[abcd][hl]|[er]?(?:bp|sp|si|di)|[cdefgs]s)\\b/i,\n    alias: \"variable\"\n  },\n  number: /(?:\\b|(?=\\$))(?:0[hx][\\da-f]*\\.?[\\da-f]+(?:p[+-]?\\d+)?|\\d[\\da-f]+[hx]|\\$\\d[\\da-f]*|0[oq][0-7]+|[0-7]+[oq]|0[by][01]+|[01]+[by]|0[dt]\\d+|\\d*\\.?\\d+(?:\\.?e[+-]?\\d+)?[dt]?)\\b/i,\n  operator: /[\\[\\]*+\\-\\/%<>=&|$!]/\n}, Prism.languages.nginx = Prism.languages.extend(\"clike\", {\n  comment: {\n    pattern: /(^|[^\"{\\\\])#.*/,\n    lookbehind: !0\n  },\n  keyword: /\\b(?:CONTENT_|DOCUMENT_|GATEWAY_|HTTP_|HTTPS|if_not_empty|PATH_|QUERY_|REDIRECT_|REMOTE_|REQUEST_|SCGI|SCRIPT_|SERVER_|http|events|accept_mutex|accept_mutex_delay|access_log|add_after_body|add_before_body|add_header|addition_types|aio|alias|allow|ancient_browser|ancient_browser_value|auth|auth_basic|auth_basic_user_file|auth_http|auth_http_header|auth_http_timeout|autoindex|autoindex_exact_size|autoindex_localtime|break|charset|charset_map|charset_types|chunked_transfer_encoding|client_body_buffer_size|client_body_in_file_only|client_body_in_single_buffer|client_body_temp_path|client_body_timeout|client_header_buffer_size|client_header_timeout|client_max_body_size|connection_pool_size|create_full_put_path|daemon|dav_access|dav_methods|debug_connection|debug_points|default_type|deny|devpoll_changes|devpoll_events|directio|directio_alignment|disable_symlinks|empty_gif|env|epoll_events|error_log|error_page|expires|fastcgi_buffer_size|fastcgi_buffers|fastcgi_busy_buffers_size|fastcgi_cache|fastcgi_cache_bypass|fastcgi_cache_key|fastcgi_cache_lock|fastcgi_cache_lock_timeout|fastcgi_cache_methods|fastcgi_cache_min_uses|fastcgi_cache_path|fastcgi_cache_purge|fastcgi_cache_use_stale|fastcgi_cache_valid|fastcgi_connect_timeout|fastcgi_hide_header|fastcgi_ignore_client_abort|fastcgi_ignore_headers|fastcgi_index|fastcgi_intercept_errors|fastcgi_keep_conn|fastcgi_max_temp_file_size|fastcgi_next_upstream|fastcgi_no_cache|fastcgi_param|fastcgi_pass|fastcgi_pass_header|fastcgi_read_timeout|fastcgi_redirect_errors|fastcgi_send_timeout|fastcgi_split_path_info|fastcgi_store|fastcgi_store_access|fastcgi_temp_file_write_size|fastcgi_temp_path|flv|geo|geoip_city|geoip_country|google_perftools_profiles|gzip|gzip_buffers|gzip_comp_level|gzip_disable|gzip_http_version|gzip_min_length|gzip_proxied|gzip_static|gzip_types|gzip_vary|if|if_modified_since|ignore_invalid_headers|image_filter|image_filter_buffer|image_filter_jpeg_quality|image_filter_sharpen|image_filter_transparency|imap_capabilities|imap_client_buffer|include|index|internal|ip_hash|keepalive|keepalive_disable|keepalive_requests|keepalive_timeout|kqueue_changes|kqueue_events|large_client_header_buffers|limit_conn|limit_conn_log_level|limit_conn_zone|limit_except|limit_rate|limit_rate_after|limit_req|limit_req_log_level|limit_req_zone|limit_zone|lingering_close|lingering_time|lingering_timeout|listen|location|lock_file|log_format|log_format_combined|log_not_found|log_subrequest|map|map_hash_bucket_size|map_hash_max_size|master_process|max_ranges|memcached_buffer_size|memcached_connect_timeout|memcached_next_upstream|memcached_pass|memcached_read_timeout|memcached_send_timeout|merge_slashes|min_delete_depth|modern_browser|modern_browser_value|mp4|mp4_buffer_size|mp4_max_buffer_size|msie_padding|msie_refresh|multi_accept|open_file_cache|open_file_cache_errors|open_file_cache_min_uses|open_file_cache_valid|open_log_file_cache|optimize_server_names|override_charset|pcre_jit|perl|perl_modules|perl_require|perl_set|pid|pop3_auth|pop3_capabilities|port_in_redirect|post_action|postpone_output|protocol|proxy|proxy_buffer|proxy_buffer_size|proxy_buffering|proxy_buffers|proxy_busy_buffers_size|proxy_cache|proxy_cache_bypass|proxy_cache_key|proxy_cache_lock|proxy_cache_lock_timeout|proxy_cache_methods|proxy_cache_min_uses|proxy_cache_path|proxy_cache_use_stale|proxy_cache_valid|proxy_connect_timeout|proxy_cookie_domain|proxy_cookie_path|proxy_headers_hash_bucket_size|proxy_headers_hash_max_size|proxy_hide_header|proxy_http_version|proxy_ignore_client_abort|proxy_ignore_headers|proxy_intercept_errors|proxy_max_temp_file_size|proxy_method|proxy_next_upstream|proxy_no_cache|proxy_pass|proxy_pass_error_message|proxy_pass_header|proxy_pass_request_body|proxy_pass_request_headers|proxy_read_timeout|proxy_redirect|proxy_redirect_errors|proxy_send_lowat|proxy_send_timeout|proxy_set_body|proxy_set_header|proxy_ssl_session_reuse|proxy_store|proxy_store_access|proxy_temp_file_write_size|proxy_temp_path|proxy_timeout|proxy_upstream_fail_timeout|proxy_upstream_max_fails|random_index|read_ahead|real_ip_header|recursive_error_pages|request_pool_size|reset_timedout_connection|resolver|resolver_timeout|return|rewrite|root|rtsig_overflow_events|rtsig_overflow_test|rtsig_overflow_threshold|rtsig_signo|satisfy|satisfy_any|secure_link_secret|send_lowat|send_timeout|sendfile|sendfile_max_chunk|server|server_name|server_name_in_redirect|server_names_hash_bucket_size|server_names_hash_max_size|server_tokens|set|set_real_ip_from|smtp_auth|smtp_capabilities|so_keepalive|source_charset|split_clients|ssi|ssi_silent_errors|ssi_types|ssi_value_length|ssl|ssl_certificate|ssl_certificate_key|ssl_ciphers|ssl_client_certificate|ssl_crl|ssl_dhparam|ssl_engine|ssl_prefer_server_ciphers|ssl_protocols|ssl_session_cache|ssl_session_timeout|ssl_verify_client|ssl_verify_depth|starttls|stub_status|sub_filter|sub_filter_once|sub_filter_types|tcp_nodelay|tcp_nopush|timeout|timer_resolution|try_files|types|types_hash_bucket_size|types_hash_max_size|underscores_in_headers|uninitialized_variable_warn|upstream|use|user|userid|userid_domain|userid_expires|userid_name|userid_p3p|userid_path|userid_service|valid_referers|variables_hash_bucket_size|variables_hash_max_size|worker_connections|worker_cpu_affinity|worker_priority|worker_processes|worker_rlimit_core|worker_rlimit_nofile|worker_rlimit_sigpending|working_directory|xclient|xml_entities|xslt_entities|xslt_stylesheet|xslt_types|ssl_session_tickets|ssl_stapling|ssl_stapling_verify|ssl_ecdh_curve|ssl_trusted_certificate|more_set_headers|ssl_early_data)\\b/i\n}), Prism.languages.insertBefore(\"nginx\", \"keyword\", {\n  variable: /\\$[a-z_]+/i\n}), Prism.languages.nim = {\n  comment: /#.*/,\n  string: {\n    pattern: /(?:(?:\\b(?!\\d)(?:\\w|\\\\x[8-9a-fA-F][0-9a-fA-F])+)?(?:\"\"\"[\\s\\S]*?\"\"\"(?!\")|\"(?:\\\\[\\s\\S]|\"\"|[^\"\\\\])*\")|'(?:\\\\(?:\\d+|x[\\da-fA-F]{2}|.)|[^'])')/,\n    greedy: !0\n  },\n  number: /\\b(?:0[xXoObB][\\da-fA-F_]+|\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:[eE][+-]?\\d[\\d_]*)?)(?:'?[iuf]\\d*)?/,\n  keyword: /\\b(?:addr|as|asm|atomic|bind|block|break|case|cast|concept|const|continue|converter|defer|discard|distinct|do|elif|else|end|enum|except|export|finally|for|from|func|generic|if|import|include|interface|iterator|let|macro|method|mixin|nil|object|out|proc|ptr|raise|ref|return|static|template|try|tuple|type|using|var|when|while|with|without|yield)\\b/,\n  function: {\n    pattern: /(?:(?!\\d)(?:\\w|\\\\x[8-9a-fA-F][0-9a-fA-F])+|`[^`\\r\\n]+`)\\*?(?:\\[[^\\]]+\\])?(?=\\s*\\()/,\n    inside: {\n      operator: /\\*$/\n    }\n  },\n  ignore: {\n    pattern: /`[^`\\r\\n]+`/,\n    inside: {\n      punctuation: /`/\n    }\n  },\n  operator: {\n    pattern: /(^|[({\\[](?=\\.\\.)|(?![({\\[]\\.).)(?:(?:[=+\\-*\\/<>@$~&%|!?^:\\\\]|\\.\\.|\\.(?![)}\\]]))+|\\b(?:and|div|of|or|in|is|isnot|mod|not|notin|shl|shr|xor)\\b)/m,\n    lookbehind: !0\n  },\n  punctuation: /[({\\[]\\.|\\.[)}\\]]|[`(){}\\[\\],:]/\n}, Prism.languages.nix = {\n  comment: /\\/\\*[\\s\\S]*?\\*\\/|#.*/,\n  string: {\n    pattern: /\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"|''(?:(?!'')[\\s\\S]|''(?:'|\\\\|\\$\\{))*''/,\n    greedy: !0,\n    inside: {\n      interpolation: {\n        pattern: /(^|(?:^|(?!'').)[^\\\\])\\$\\{(?:[^}]|\\{[^}]*\\})*}/,\n        lookbehind: !0,\n        inside: {\n          antiquotation: {\n            pattern: /^\\$(?=\\{)/,\n            alias: \"variable\"\n          }\n        }\n      }\n    }\n  },\n  url: [/\\b(?:[a-z]{3,7}:\\/\\/)[\\w\\-+%~\\/.:#=?&]+/, {\n    pattern: /([^\\/])(?:[\\w\\-+%~.:#=?&]*(?!\\/\\/)[\\w\\-+%~\\/.:#=?&])?(?!\\/\\/)\\/[\\w\\-+%~\\/.:#=?&]*/,\n    lookbehind: !0\n  }],\n  antiquotation: {\n    pattern: /\\$(?=\\{)/,\n    alias: \"variable\"\n  },\n  number: /\\b\\d+\\b/,\n  keyword: /\\b(?:assert|builtins|else|if|in|inherit|let|null|or|then|with)\\b/,\n  function: /\\b(?:abort|add|all|any|attrNames|attrValues|baseNameOf|compareVersions|concatLists|currentSystem|deepSeq|derivation|dirOf|div|elem(?:At)?|fetch(?:url|Tarball)|filter(?:Source)?|fromJSON|genList|getAttr|getEnv|hasAttr|hashString|head|import|intersectAttrs|is(?:Attrs|Bool|Function|Int|List|Null|String)|length|lessThan|listToAttrs|map|mul|parseDrvName|pathExists|read(?:Dir|File)|removeAttrs|replaceStrings|seq|sort|stringLength|sub(?:string)?|tail|throw|to(?:File|JSON|Path|String|XML)|trace|typeOf)\\b|\\bfoldl'\\B/,\n  boolean: /\\b(?:true|false)\\b/,\n  operator: /[=!<>]=?|\\+\\+?|\\|\\||&&|\\/\\/|->?|[?@]/,\n  punctuation: /[{}()[\\].,:;]/\n}, Prism.languages.nix.string.inside.interpolation.inside.rest = Prism.languages.nix, Prism.languages.nsis = {\n  comment: {\n    pattern: /(^|[^\\\\])(\\/\\*[\\s\\S]*?\\*\\/|[#;].*)/,\n    lookbehind: !0\n  },\n  string: {\n    pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: !0\n  },\n  keyword: {\n    pattern: /(^\\s*)(?:Abort|Add(?:BrandingImage|Size)|AdvSplash|Allow(?:RootDirInstall|SkipFiles)|AutoCloseWindow|Banner|BG(?:Font|Gradient|Image)|BrandingText|BringToFront|Call(?:InstDLL)?|Caption|ChangeUI|CheckBitmap|ClearErrors|CompletedText|ComponentText|CopyFiles|CRCCheck|Create(?:Directory|Font|ShortCut)|Delete(?:INISec|INIStr|RegKey|RegValue)?|Detail(?:Print|sButtonText)|Dialer|Dir(?:Text|Var|Verify)|EnableWindow|Enum(?:RegKey|RegValue)|Exch|Exec(?:Shell(?:Wait)?|Wait)?|ExpandEnvStrings|File(?:BufSize|Close|ErrorText|Open|Read|ReadByte|ReadUTF16LE|ReadWord|WriteUTF16LE|Seek|Write|WriteByte|WriteWord)?|Find(?:Close|First|Next|Window)|FlushINI|Get(?:CurInstType|CurrentAddress|DlgItem|DLLVersion(?:Local)?|ErrorLevel|FileTime(?:Local)?|FullPathName|Function(?:Address|End)?|InstDirError|LabelAddress|TempFileName)|Goto|HideWindow|Icon|If(?:Abort|Errors|FileExists|RebootFlag|Silent)|InitPluginsDir|Install(?:ButtonText|Colors|Dir(?:RegKey)?)|InstProgressFlags|Inst(?:Type(?:GetText|SetText)?)|Int(?:64|Ptr)?CmpU?|Int(?:64)?Fmt|Int(?:Ptr)?Op|IsWindow|Lang(?:DLL|String)|License(?:BkColor|Data|ForceSelection|LangString|Text)|LoadLanguageFile|LockWindow|Log(?:Set|Text)|Manifest(?:DPIAware|SupportedOS)|Math|MessageBox|MiscButtonText|Name|Nop|ns(?:Dialogs|Exec)|NSISdl|OutFile|Page(?:Callbacks)?|PE(?:DllCharacteristics|SubsysVer)|Pop|Push|Quit|Read(?:EnvStr|INIStr|RegDWORD|RegStr)|Reboot|RegDLL|Rename|RequestExecutionLevel|ReserveFile|Return|RMDir|SearchPath|Section(?:End|GetFlags|GetInstTypes|GetSize|GetText|Group|In|SetFlags|SetInstTypes|SetSize|SetText)?|SendMessage|Set(?:AutoClose|BrandingImage|Compress|Compressor(?:DictSize)?|CtlColors|CurInstType|DatablockOptimize|DateSave|Details(?:Print|View)|ErrorLevel|Errors|FileAttributes|Font|OutPath|Overwrite|PluginUnload|RebootFlag|RegView|ShellVarContext|Silent)|Show(?:InstDetails|UninstDetails|Window)|Silent(?:Install|UnInstall)|Sleep|SpaceTexts|Splash|StartMenu|Str(?:CmpS?|Cpy|Len)|SubCaption|System|Unicode|Uninstall(?:ButtonText|Caption|Icon|SubCaption|Text)|UninstPage|UnRegDLL|UserInfo|Var|VI(?:AddVersionKey|FileVersion|ProductVersion)|VPatch|WindowIcon|Write(?:INIStr|Reg(?:Bin|DWORD|ExpandStr|MultiStr|None|Str)|Uninstaller)|XPStyle)\\b/m,\n    lookbehind: !0\n  },\n  property: /\\b(?:admin|all|auto|both|colored|false|force|hide|highest|lastused|leave|listonly|none|normal|notset|off|on|open|print|show|silent|silentlog|smooth|textonly|true|user|ARCHIVE|FILE_(ATTRIBUTE_ARCHIVE|ATTRIBUTE_NORMAL|ATTRIBUTE_OFFLINE|ATTRIBUTE_READONLY|ATTRIBUTE_SYSTEM|ATTRIBUTE_TEMPORARY)|HK((CR|CU|LM)(32|64)?|DD|PD|U)|HKEY_(CLASSES_ROOT|CURRENT_CONFIG|CURRENT_USER|DYN_DATA|LOCAL_MACHINE|PERFORMANCE_DATA|USERS)|ID(ABORT|CANCEL|IGNORE|NO|OK|RETRY|YES)|MB_(ABORTRETRYIGNORE|DEFBUTTON1|DEFBUTTON2|DEFBUTTON3|DEFBUTTON4|ICONEXCLAMATION|ICONINFORMATION|ICONQUESTION|ICONSTOP|OK|OKCANCEL|RETRYCANCEL|RIGHT|RTLREADING|SETFOREGROUND|TOPMOST|USERICON|YESNO)|NORMAL|OFFLINE|READONLY|SHCTX|SHELL_CONTEXT|SYSTEM|TEMPORARY)\\b/,\n  constant: /\\${[\\w\\.:\\^-]+}|\\$\\([\\w\\.:\\^-]+\\)/i,\n  variable: /\\$\\w+/i,\n  number: /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n  operator: /--?|\\+\\+?|<=?|>=?|==?=?|&&?|\\|\\|?|[?*\\/~^%]/,\n  punctuation: /[{}[\\];(),.:]/,\n  important: {\n    pattern: /(^\\s*)!(?:addincludedir|addplugindir|appendfile|cd|define|delfile|echo|else|endif|error|execute|finalize|getdllversion|gettlbversion|ifdef|ifmacrodef|ifmacrondef|ifndef|if|include|insertmacro|macroend|macro|makensis|packhdr|pragma|searchparse|searchreplace|system|tempfile|undef|verbose|warning)\\b/im,\n    lookbehind: !0\n  }\n}, Prism.languages.objectivec = Prism.languages.extend(\"c\", {\n  keyword: /\\b(?:asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while|in|self|super)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,\n  string: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|@\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n  operator: /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/\n}), delete Prism.languages.objectivec[\"class-name\"], Prism.languages.ocaml = {\n  comment: /\\(\\*[\\s\\S]*?\\*\\)/,\n  string: [{\n    pattern: /\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\n    greedy: !0\n  }, {\n    pattern: /(['`])(?:\\\\(?:\\d+|x[\\da-f]+|.)|(?!\\1)[^\\\\\\r\\n])\\1/i,\n    greedy: !0\n  }],\n  number: /\\b(?:0x[\\da-f][\\da-f_]+|(?:0[bo])?\\d[\\d_]*\\.?[\\d_]*(?:e[+-]?[\\d_]+)?)/i,\n  type: {\n    pattern: /\\B['`]\\w*/,\n    alias: \"variable\"\n  },\n  directive: {\n    pattern: /\\B#\\w+/,\n    alias: \"function\"\n  },\n  keyword: /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|object|of|open|prefix|private|rec|then|sig|struct|to|try|type|val|value|virtual|where|while|with)\\b/,\n  boolean: /\\b(?:false|true)\\b/,\n  operator: /:=|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lxor|lsl|lsr|mod|nor|or)\\b/,\n  punctuation: /[(){}\\[\\]|_.,:;]/\n}, function (e) {\n  e.languages.opencl = e.languages.extend(\"c\", {\n    keyword: /\\b(?:__attribute__|(?:__)?(?:constant|global|kernel|local|private|read_only|read_write|write_only)|_cl_(?:command_queue|context|device_id|event|kernel|mem|platform_id|program|sampler)|auto|break|case|cl_(?:image_format|mem_fence_flags)|clk_event_t|complex|const|continue|default|do|(?:float|double)(?:16(?:x(?:1|16|2|4|8))?|1x(?:1|16|2|4|8)|2(?:x(?:1|16|2|4|8))?|3|4(?:x(?:1|16|2|4|8))?|8(?:x(?:1|16|2|4|8))?)?|else|enum|event_t|extern|for|goto|(?:u?(?:char|short|int|long)|half|quad|bool)(?:2|3|4|8|16)?|if|image(?:1d_(?:array_|buffer_)?t|2d_(?:array_(?:depth_|msaa_depth_|msaa_)?|depth_|msaa_depth_|msaa_)?t|3d_t)|imaginary|inline|intptr_t|ndrange_t|packed|pipe|ptrdiff_t|queue_t|register|reserve_id_t|restrict|return|sampler_t|signed|size_t|sizeof|static|struct|switch|typedef|uintptr_t|uniform|union|unsigned|void|volatile|while)\\b/,\n    \"function-opencl-kernel\": {\n      pattern: /\\b(?:abs(?:_diff)?|a?(?:cos|sin)(?:h|pi)?|add_sat|aligned|all|and|any|async(?:_work_group_copy|_work_group_strided_copy)?|atan(?:2?(?:pi)?|h)?|atom_(?:add|and|cmpxchg|dec|inc|max|min|or|sub|xchg|xor)|barrier|bitselect|cbrt|ceil|clamp|clz|copies|copysign|cross|degrees|distance|dot|endian|erf|erfc|exp(?:2|10)?|expm1|fabs|fast_(?:distance|length|normalize)|fdim|floor|fma|fmax|fmin|fract|frexp|fro|from|get_(?:global_(?:id|offset|size)|group_id|image_(?:channel_data_type|channel_order|depth|dim|height|width)|local(?:_id|_size)|num_groups|work_dim)|hadd|(?:half|native)_(?:cos|divide|exp(?:2|10)?|log(?:2|10)?|powr|recip|r?sqrt|sin|tan)|hypot|ilogb|is(?:equal|finite|greater(?:equal)?|inf|less(?:equal|greater)?|nan|normal|notequal|(?:un)?ordered)|ldexp|length|lgamma|lgamma_r|log(?:b|1p|2|10)?|mad(?:24|_hi|_sat)?|max|mem(?:_fence)?|min|mix|modf|mul24|mul_hi|nan|nextafter|normalize|pow[nr]?|prefetch|radians|read_(?:image)(?:f|h|u?i)|read_mem_fence|remainder|remquo|reqd_work_group_size|rhadd|rint|rootn|rotate|round|rsqrt|select|shuffle2?|sign|signbit|sincos|smoothstep|sqrt|step|sub_sat|tan|tanh|tanpi|tgamma|to|trunc|upsample|vec_(?:step|type_hint)|v(?:load|store)(?:_half)?(?:2|3|4|8|16)?|v(?:loada_half|storea?(?:_half)?)(?:2|3|4|8|16)?(?:_(?:rte|rtn|rtp|rtz))?|wait_group_events|work_group_size_hint|write_image(?:f|h|u?i)|write_mem_fence)\\b/,\n      alias: \"function\"\n    },\n    \"constant-opencl-kernel\": {\n      pattern: /\\b(?:CHAR_(?:BIT|MAX|MIN)|CLK_(?:ADDRESS_(?:CLAMP(?:_TO_EDGE)?|NONE|REPEAT)|FILTER_(?:LINEAR|NEAREST)|(?:LOCAL|GLOBAL)_MEM_FENCE|NORMALIZED_COORDS_(?:FALSE|TRUE))|CL_(?:BGRA|(?:HALF_)?FLOAT|INTENSITY|LUMINANCE|A?R?G?B?[Ax]?|(?:(?:UN)?SIGNED|[US]NORM)_(?:INT(?:8|16|32))|UNORM_(?:INT_101010|SHORT_(?:555|565)))|(?:DBL|FLT)_(?:DIG|EPSILON|MANT_DIG|(?:MIN|MAX)(?:(?:_10)?_EXP)?)|FLT_RADIX|HUGE_VALF|INFINITY|(?:INT|LONG|SCHAR|SHRT|UCHAR|UINT|ULONG)_(?:MAX|MIN)|MAXFLOAT|M_(?:[12]_PI|2_SQRTPI|E|LN(?:2|10)|LOG(?:10|2)E?|PI[24]?|SQRT(?:1_2|2))|NAN)\\b/,\n      alias: \"constant\"\n    }\n  });\n  var t = {\n    \"type-opencl-host\": {\n      pattern: /\\b(?:cl_(?:GLenum|GLint|GLuin|addressing_mode|bitfield|bool|buffer_create_type|build_status|channel_(?:order|type)|(?:u?(?:char|short|int|long)|float|double)(?:2|3|4|8|16)?|command_(?:queue(?:_info|_properties)?|type)|context(?:_info|_properties)?|device_(?:exec_capabilities|fp_config|id|info|local_mem_type|mem_cache_type|type)|(?:event|sampler)(?:_info)?|filter_mode|half|image_info|kernel(?:_info|_work_group_info)?|map_flags|mem(?:_flags|_info|_object_type)?|platform_(?:id|info)|profiling_info|program(?:_build_info|_info)?))\\b/,\n      alias: \"keyword\"\n    },\n    \"boolean-opencl-host\": {\n      pattern: /\\bCL_(?:TRUE|FALSE)\\b/,\n      alias: \"boolean\"\n    },\n    \"constant-opencl-host\": {\n      pattern: /\\bCL_(?:A|ABGR|ADDRESS_(?:CLAMP(?:_TO_EDGE)?|MIRRORED_REPEAT|NONE|REPEAT)|ARGB|BGRA|BLOCKING|BUFFER_CREATE_TYPE_REGION|BUILD_(?:ERROR|IN_PROGRESS|NONE|PROGRAM_FAILURE|SUCCESS)|COMMAND_(?:ACQUIRE_GL_OBJECTS|BARRIER|COPY_(?:BUFFER(?:_RECT|_TO_IMAGE)?|IMAGE(?:_TO_BUFFER)?)|FILL_(?:BUFFER|IMAGE)|MAP(?:_BUFFER|_IMAGE)|MARKER|MIGRATE(?:_SVM)?_MEM_OBJECTS|NATIVE_KERNEL|NDRANGE_KERNEL|READ_(?:BUFFER(?:_RECT)?|IMAGE)|RELEASE_GL_OBJECTS|SVM_(?:FREE|MAP|MEMCPY|MEMFILL|UNMAP)|TASK|UNMAP_MEM_OBJECT|USER|WRITE_(?:BUFFER(?:_RECT)?|IMAGE))|COMPILER_NOT_AVAILABLE|COMPILE_PROGRAM_FAILURE|COMPLETE|CONTEXT_(?:DEVICES|INTEROP_USER_SYNC|NUM_DEVICES|PLATFORM|PROPERTIES|REFERENCE_COUNT)|DEPTH(?:_STENCIL)?|DEVICE_(?:ADDRESS_BITS|AFFINITY_DOMAIN_(?:L[1-4]_CACHE|NEXT_PARTITIONABLE|NUMA)|AVAILABLE|BUILT_IN_KERNELS|COMPILER_AVAILABLE|DOUBLE_FP_CONFIG|ENDIAN_LITTLE|ERROR_CORRECTION_SUPPORT|EXECUTION_CAPABILITIES|EXTENSIONS|GLOBAL_(?:MEM_(?:CACHELINE_SIZE|CACHE_SIZE|CACHE_TYPE|SIZE)|VARIABLE_PREFERRED_TOTAL_SIZE)|HOST_UNIFIED_MEMORY|IL_VERSION|IMAGE(?:2D_MAX_(?:HEIGHT|WIDTH)|3D_MAX_(?:DEPTH|HEIGHT|WIDTH)|_BASE_ADDRESS_ALIGNMENT|_MAX_ARRAY_SIZE|_MAX_BUFFER_SIZE|_PITCH_ALIGNMENT|_SUPPORT)|LINKER_AVAILABLE|LOCAL_MEM_SIZE|LOCAL_MEM_TYPE|MAX_(?:CLOCK_FREQUENCY|COMPUTE_UNITS|CONSTANT_ARGS|CONSTANT_BUFFER_SIZE|GLOBAL_VARIABLE_SIZE|MEM_ALLOC_SIZE|NUM_SUB_GROUPS|ON_DEVICE_(?:EVENTS|QUEUES)|PARAMETER_SIZE|PIPE_ARGS|READ_IMAGE_ARGS|READ_WRITE_IMAGE_ARGS|SAMPLERS|WORK_GROUP_SIZE|WORK_ITEM_DIMENSIONS|WORK_ITEM_SIZES|WRITE_IMAGE_ARGS)|MEM_BASE_ADDR_ALIGN|MIN_DATA_TYPE_ALIGN_SIZE|NAME|NATIVE_VECTOR_WIDTH_(?:CHAR|DOUBLE|FLOAT|HALF|INT|LONG|SHORT)|NOT_(?:AVAILABLE|FOUND)|OPENCL_C_VERSION|PARENT_DEVICE|PARTITION_(?:AFFINITY_DOMAIN|BY_AFFINITY_DOMAIN|BY_COUNTS|BY_COUNTS_LIST_END|EQUALLY|FAILED|MAX_SUB_DEVICES|PROPERTIES|TYPE)|PIPE_MAX_(?:ACTIVE_RESERVATIONS|PACKET_SIZE)|PLATFORM|PREFERRED_(?:GLOBAL_ATOMIC_ALIGNMENT|INTEROP_USER_SYNC|LOCAL_ATOMIC_ALIGNMENT|PLATFORM_ATOMIC_ALIGNMENT|VECTOR_WIDTH_(?:CHAR|DOUBLE|FLOAT|HALF|INT|LONG|SHORT))|PRINTF_BUFFER_SIZE|PROFILE|PROFILING_TIMER_RESOLUTION|QUEUE_(?:ON_(?:DEVICE_(?:MAX_SIZE|PREFERRED_SIZE|PROPERTIES)|HOST_PROPERTIES)|PROPERTIES)|REFERENCE_COUNT|SINGLE_FP_CONFIG|SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS|SVM_(?:ATOMICS|CAPABILITIES|COARSE_GRAIN_BUFFER|FINE_GRAIN_BUFFER|FINE_GRAIN_SYSTEM)|TYPE(?:_ACCELERATOR|_ALL|_CPU|_CUSTOM|_DEFAULT|_GPU)?|VENDOR(?:_ID)?|VERSION)|DRIVER_VERSION|EVENT_(?:COMMAND_(?:EXECUTION_STATUS|QUEUE|TYPE)|CONTEXT|REFERENCE_COUNT)|EXEC_(?:KERNEL|NATIVE_KERNEL|STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST)|FILTER_(?:LINEAR|NEAREST)|FLOAT|FP_(?:CORRECTLY_ROUNDED_DIVIDE_SQRT|DENORM|FMA|INF_NAN|ROUND_TO_INF|ROUND_TO_NEAREST|ROUND_TO_ZERO|SOFT_FLOAT)|GLOBAL|HALF_FLOAT|IMAGE_(?:ARRAY_SIZE|BUFFER|DEPTH|ELEMENT_SIZE|FORMAT|FORMAT_MISMATCH|FORMAT_NOT_SUPPORTED|HEIGHT|NUM_MIP_LEVELS|NUM_SAMPLES|ROW_PITCH|SLICE_PITCH|WIDTH)|INTENSITY|INVALID_(?:ARG_INDEX|ARG_SIZE|ARG_VALUE|BINARY|BUFFER_SIZE|BUILD_OPTIONS|COMMAND_QUEUE|COMPILER_OPTIONS|CONTEXT|DEVICE|DEVICE_PARTITION_COUNT|DEVICE_QUEUE|DEVICE_TYPE|EVENT|EVENT_WAIT_LIST|GLOBAL_OFFSET|GLOBAL_WORK_SIZE|GL_OBJECT|HOST_PTR|IMAGE_DESCRIPTOR|IMAGE_FORMAT_DESCRIPTOR|IMAGE_SIZE|KERNEL|KERNEL_ARGS|KERNEL_DEFINITION|KERNEL_NAME|LINKER_OPTIONS|MEM_OBJECT|MIP_LEVEL|OPERATION|PIPE_SIZE|PLATFORM|PROGRAM|PROGRAM_EXECUTABLE|PROPERTY|QUEUE_PROPERTIES|SAMPLER|VALUE|WORK_DIMENSION|WORK_GROUP_SIZE|WORK_ITEM_SIZE)|KERNEL_(?:ARG_(?:ACCESS_(?:NONE|QUALIFIER|READ_ONLY|READ_WRITE|WRITE_ONLY)|ADDRESS_(?:CONSTANT|GLOBAL|LOCAL|PRIVATE|QUALIFIER)|INFO_NOT_AVAILABLE|NAME|TYPE_(?:CONST|NAME|NONE|PIPE|QUALIFIER|RESTRICT|VOLATILE))|ATTRIBUTES|COMPILE_NUM_SUB_GROUPS|COMPILE_WORK_GROUP_SIZE|CONTEXT|EXEC_INFO_SVM_FINE_GRAIN_SYSTEM|EXEC_INFO_SVM_PTRS|FUNCTION_NAME|GLOBAL_WORK_SIZE|LOCAL_MEM_SIZE|LOCAL_SIZE_FOR_SUB_GROUP_COUNT|MAX_NUM_SUB_GROUPS|MAX_SUB_GROUP_SIZE_FOR_NDRANGE|NUM_ARGS|PREFERRED_WORK_GROUP_SIZE_MULTIPLE|PRIVATE_MEM_SIZE|PROGRAM|REFERENCE_COUNT|SUB_GROUP_COUNT_FOR_NDRANGE|WORK_GROUP_SIZE)|LINKER_NOT_AVAILABLE|LINK_PROGRAM_FAILURE|LOCAL|LUMINANCE|MAP_(?:FAILURE|READ|WRITE|WRITE_INVALIDATE_REGION)|MEM_(?:ALLOC_HOST_PTR|ASSOCIATED_MEMOBJECT|CONTEXT|COPY_HOST_PTR|COPY_OVERLAP|FLAGS|HOST_NO_ACCESS|HOST_PTR|HOST_READ_ONLY|HOST_WRITE_ONLY|KERNEL_READ_AND_WRITE|MAP_COUNT|OBJECT_(?:ALLOCATION_FAILURE|BUFFER|IMAGE1D|IMAGE1D_ARRAY|IMAGE1D_BUFFER|IMAGE2D|IMAGE2D_ARRAY|IMAGE3D|PIPE)|OFFSET|READ_ONLY|READ_WRITE|REFERENCE_COUNT|SIZE|SVM_ATOMICS|SVM_FINE_GRAIN_BUFFER|TYPE|USES_SVM_POINTER|USE_HOST_PTR|WRITE_ONLY)|MIGRATE_MEM_OBJECT_(?:CONTENT_UNDEFINED|HOST)|MISALIGNED_SUB_BUFFER_OFFSET|NONE|NON_BLOCKING|OUT_OF_(?:HOST_MEMORY|RESOURCES)|PIPE_(?:MAX_PACKETS|PACKET_SIZE)|PLATFORM_(?:EXTENSIONS|HOST_TIMER_RESOLUTION|NAME|PROFILE|VENDOR|VERSION)|PROFILING_(?:COMMAND_(?:COMPLETE|END|QUEUED|START|SUBMIT)|INFO_NOT_AVAILABLE)|PROGRAM_(?:BINARIES|BINARY_SIZES|BINARY_TYPE(?:_COMPILED_OBJECT|_EXECUTABLE|_LIBRARY|_NONE)?|BUILD_(?:GLOBAL_VARIABLE_TOTAL_SIZE|LOG|OPTIONS|STATUS)|CONTEXT|DEVICES|IL|KERNEL_NAMES|NUM_DEVICES|NUM_KERNELS|REFERENCE_COUNT|SOURCE)|QUEUED|QUEUE_(?:CONTEXT|DEVICE|DEVICE_DEFAULT|ON_DEVICE|ON_DEVICE_DEFAULT|OUT_OF_ORDER_EXEC_MODE_ENABLE|PROFILING_ENABLE|PROPERTIES|REFERENCE_COUNT|SIZE)|R|RA|READ_(?:ONLY|WRITE)_CACHE|RG|RGB|RGBA|RGBx|RGx|RUNNING|Rx|SAMPLER_(?:ADDRESSING_MODE|CONTEXT|FILTER_MODE|LOD_MAX|LOD_MIN|MIP_FILTER_MODE|NORMALIZED_COORDS|REFERENCE_COUNT)|(?:UN)?SIGNED_INT(?:8|16|32)|SNORM_INT(?:8|16)|SUBMITTED|SUCCESS|UNORM_INT(?:16|24|8|_101010|_101010_2)|UNORM_SHORT_(?:555|565)|VERSION_(?:1_0|1_1|1_2|2_0|2_1)|sBGRA|sRGB|sRGBA|sRGBx)\\b/,\n      alias: \"constant\"\n    },\n    \"function-opencl-host\": {\n      pattern: /\\bcl(?:BuildProgram|CloneKernel|CompileProgram|Create(?:Buffer|CommandQueue(?:WithProperties)?|Context|ContextFromType|Image|Image2D|Image3D|Kernel|KernelsInProgram|Pipe|ProgramWith(?:Binary|BuiltInKernels|IL|Source)|Sampler|SamplerWithProperties|SubBuffer|SubDevices|UserEvent)|Enqueue(?:(?:Barrier|Marker)(?:WithWaitList)?|Copy(?:Buffer(?:Rect|ToImage)?|Image(?:ToBuffer)?)|(?:Fill|Map)(?:Buffer|Image)|MigrateMemObjects|NDRangeKernel|NativeKernel|(?:Read|Write)(?:Buffer(?:Rect)?|Image)|SVM(?:Free|Map|MemFill|Memcpy|MigrateMem|Unmap)|Task|UnmapMemObject|WaitForEvents)|Finish|Flush|Get(?:CommandQueueInfo|ContextInfo|Device(?:AndHostTimer|IDs|Info)|Event(?:Profiling)?Info|ExtensionFunctionAddress(?:ForPlatform)?|HostTimer|ImageInfo|Kernel(?:ArgInfo|Info|SubGroupInfo|WorkGroupInfo)|MemObjectInfo|PipeInfo|Platform(?:IDs|Info)|Program(?:Build)?Info|SamplerInfo|SupportedImageFormats)|LinkProgram|(?:Release|Retain)(?:CommandQueue|Context|Device|Event|Kernel|MemObject|Program|Sampler)|SVM(?:Alloc|Free)|Set(?:CommandQueueProperty|DefaultDeviceCommandQueue|EventCallback|Kernel(?:Arg(?:SVMPointer)?|ExecInfo)|Kernel|MemObjectDestructorCallback|UserEventStatus)|Unload(?:Platform)?Compiler|WaitForEvents)\\b/,\n      alias: \"function\"\n    }\n  };\n  e.languages.insertBefore(\"c\", \"keyword\", t), t[\"type-opencl-host-c++\"] = {\n    pattern: /\\b(?:Buffer|BufferGL|BufferRenderGL|CommandQueue|Context|Device|DeviceCommandQueue|EnqueueArgs|Event|Image|Image1D|Image1DArray|Image1DBuffer|Image2D|Image2DArray|Image2DGL|Image3D|Image3DGL|ImageFormat|ImageGL|Kernel|KernelFunctor|LocalSpaceArg|Memory|NDRange|Pipe|Platform|Program|Sampler|SVMAllocator|SVMTraitAtomic|SVMTraitCoarse|SVMTraitFine|SVMTraitReadOnly|SVMTraitReadWrite|SVMTraitWriteOnly|UserEvent)\\b/,\n    alias: \"keyword\"\n  }, e.languages.insertBefore(\"cpp\", \"keyword\", t);\n}(Prism), Prism.languages.oz = {\n  comment: /\\/\\*[\\s\\S]*?\\*\\/|%.*/,\n  string: {\n    pattern: /\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"/,\n    greedy: !0\n  },\n  atom: {\n    pattern: /'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n    greedy: !0,\n    alias: \"builtin\"\n  },\n  keyword: /[$_]|\\[\\]|\\b(?:at|attr|case|catch|choice|class|cond|declare|define|dis|else(?:case|if)?|end|export|fail|false|feat|finally|from|fun|functor|if|import|in|local|lock|meth|nil|not|of|or|prepare|proc|prop|raise|require|self|skip|then|thread|true|try|unit)\\b/,\n  function: [/[a-z][A-Za-z\\d]*(?=\\()/, {\n    pattern: /(\\{)[A-Z][A-Za-z\\d]*/,\n    lookbehind: !0\n  }],\n  number: /\\b(?:0[bx][\\da-f]+|\\d+\\.?\\d*(?:e~?\\d+)?\\b)|&(?:[^\\\\]|\\\\(?:\\d{3}|.))/i,\n  variable: /\\b[A-Z][A-Za-z\\d]*|`(?:[^`\\\\]|\\\\.)+`/,\n  \"attr-name\": /\\w+(?=:)/,\n  operator: /:(?:=|::?)|<[-:=]?|=(?:=|<?:?)|>=?:?|\\\\=:?|!!?|[|#+\\-*\\/,~^@]|\\b(?:andthen|div|mod|orelse)\\b/,\n  punctuation: /[\\[\\](){}.:;?]/\n}, Prism.languages.parigp = {\n  comment: /\\/\\*[\\s\\S]*?\\*\\/|\\\\\\\\.*/,\n  string: {\n    pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,\n    greedy: !0\n  },\n  keyword: function () {\n    var e = [\"breakpoint\", \"break\", \"dbg_down\", \"dbg_err\", \"dbg_up\", \"dbg_x\", \"forcomposite\", \"fordiv\", \"forell\", \"forpart\", \"forprime\", \"forstep\", \"forsubgroup\", \"forvec\", \"for\", \"iferr\", \"if\", \"local\", \"my\", \"next\", \"return\", \"until\", \"while\"];\n    return e = e.map(function (e) {\n      return e.split(\"\").join(\" *\");\n    }).join(\"|\"), RegExp(\"\\\\b(?:\" + e + \")\\\\b\");\n  }(),\n  function: /\\w[\\w ]*?(?= *\\()/,\n  number: {\n    pattern: /((?:\\. *\\. *)?)(?:\\d(?: *\\d)*(?: *(?!\\. *\\.)\\.(?: *\\d)*)?|\\. *\\d(?: *\\d)*)(?: *e *[+-]? *\\d(?: *\\d)*)?/i,\n    lookbehind: !0\n  },\n  operator: /\\. *\\.|[*\\/!](?: *=)?|%(?: *=|(?: *#)?(?: *')*)?|\\+(?: *[+=])?|-(?: *[-=>])?|<(?:(?: *<)?(?: *=)?| *>)?|>(?: *>)?(?: *=)?|=(?: *=){0,2}|\\\\(?: *\\/)?(?: *=)?|&(?: *&)?|\\| *\\||['#~^]/,\n  punctuation: /[\\[\\]{}().,:;|]/\n}, function (e) {\n  var t = e.languages.parser = e.languages.extend(\"markup\", {\n    keyword: {\n      pattern: /(^|[^^])(?:\\^(?:case|eval|for|if|switch|throw)\\b|@(?:BASE|CLASS|GET(?:_DEFAULT)?|OPTIONS|SET_DEFAULT|USE)\\b)/,\n      lookbehind: !0\n    },\n    variable: {\n      pattern: /(^|[^^])\\B\\$(?:\\w+|(?=[.{]))(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n      lookbehind: !0,\n      inside: {\n        punctuation: /\\.|:+/\n      }\n    },\n    function: {\n      pattern: /(^|[^^])\\B[@^]\\w+(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n      lookbehind: !0,\n      inside: {\n        keyword: {\n          pattern: /(^@)(?:GET_|SET_)/,\n          lookbehind: !0\n        },\n        punctuation: /\\.|:+/\n      }\n    },\n    escape: {\n      pattern: /\\^(?:[$^;@()\\[\\]{}\"':]|#[a-f\\d]*)/i,\n      alias: \"builtin\"\n    },\n    punctuation: /[\\[\\](){};]/\n  });\n  t = e.languages.insertBefore(\"parser\", \"keyword\", {\n    \"parser-comment\": {\n      pattern: /(\\s)#.*/,\n      lookbehind: !0,\n      alias: \"comment\"\n    },\n    expression: {\n      pattern: /(^|[^^])\\((?:[^()]|\\((?:[^()]|\\((?:[^()])*\\))*\\))*\\)/,\n      greedy: !0,\n      lookbehind: !0,\n      inside: {\n        string: {\n          pattern: /(^|[^^])([\"'])(?:(?!\\2)[^^]|\\^[\\s\\S])*\\2/,\n          lookbehind: !0\n        },\n        keyword: t.keyword,\n        variable: t.variable,\n        function: t.function,\n        boolean: /\\b(?:true|false)\\b/,\n        number: /\\b(?:0x[a-f\\d]+|\\d+\\.?\\d*(?:e[+-]?\\d+)?)\\b/i,\n        escape: t.escape,\n        operator: /[~+*\\/\\\\%]|!(?:\\|\\|?|=)?|&&?|\\|\\|?|==|<[<=]?|>[>=]?|-[fd]?|\\b(?:def|eq|ge|gt|in|is|le|lt|ne)\\b/,\n        punctuation: t.punctuation\n      }\n    }\n  }), t = e.languages.insertBefore(\"inside\", \"punctuation\", {\n    expression: t.expression,\n    keyword: t.keyword,\n    variable: t.variable,\n    function: t.function,\n    escape: t.escape,\n    \"parser-punctuation\": {\n      pattern: t.punctuation,\n      alias: \"punctuation\"\n    }\n  }, t.tag.inside[\"attr-value\"]);\n}(Prism), Prism.languages.pascal = {\n  comment: [/\\(\\*[\\s\\S]+?\\*\\)/, /\\{[\\s\\S]+?\\}/, /\\/\\/.*/],\n  string: {\n    pattern: /(?:'(?:''|[^'\\r\\n])*'|#[&$%]?[a-f\\d]+)+|\\^[a-z]/i,\n    greedy: !0\n  },\n  keyword: [{\n    pattern: /(^|[^&])\\b(?:absolute|array|asm|begin|case|const|constructor|destructor|do|downto|else|end|file|for|function|goto|if|implementation|inherited|inline|interface|label|nil|object|of|operator|packed|procedure|program|record|reintroduce|repeat|self|set|string|then|to|type|unit|until|uses|var|while|with)\\b/i,\n    lookbehind: !0\n  }, {\n    pattern: /(^|[^&])\\b(?:dispose|exit|false|new|true)\\b/i,\n    lookbehind: !0\n  }, {\n    pattern: /(^|[^&])\\b(?:class|dispinterface|except|exports|finalization|finally|initialization|inline|library|on|out|packed|property|raise|resourcestring|threadvar|try)\\b/i,\n    lookbehind: !0\n  }, {\n    pattern: /(^|[^&])\\b(?:absolute|abstract|alias|assembler|bitpacked|break|cdecl|continue|cppdecl|cvar|default|deprecated|dynamic|enumerator|experimental|export|external|far|far16|forward|generic|helper|implements|index|interrupt|iochecks|local|message|name|near|nodefault|noreturn|nostackframe|oldfpccall|otherwise|overload|override|pascal|platform|private|protected|public|published|read|register|reintroduce|result|safecall|saveregisters|softfloat|specialize|static|stdcall|stored|strict|unaligned|unimplemented|varargs|virtual|write)\\b/i,\n    lookbehind: !0\n  }],\n  number: [/(?:[&%]\\d+|\\$[a-f\\d]+)/i, /\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?/i],\n  operator: [/\\.\\.|\\*\\*|:=|<[<=>]?|>[>=]?|[+\\-*\\/]=?|[@^=]/i, {\n    pattern: /(^|[^&])\\b(?:and|as|div|exclude|in|include|is|mod|not|or|shl|shr|xor)\\b/,\n    lookbehind: !0\n  }],\n  punctuation: /\\(\\.|\\.\\)|[()\\[\\]:;,.]/\n}, Prism.languages.objectpascal = Prism.languages.pascal, Prism.languages.perl = {\n  comment: [{\n    pattern: /(^\\s*)=\\w+[\\s\\S]*?=cut.*/m,\n    lookbehind: !0\n  }, {\n    pattern: /(^|[^\\\\$])#.*/,\n    lookbehind: !0\n  }],\n  string: [{\n    pattern: /\\b(?:q|qq|qx|qw)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n    greedy: !0\n  }, {\n    pattern: /\\b(?:q|qq|qx|qw)\\s+([a-zA-Z0-9])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n    greedy: !0\n  }, {\n    pattern: /\\b(?:q|qq|qx|qw)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,\n    greedy: !0\n  }, {\n    pattern: /\\b(?:q|qq|qx|qw)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}/,\n    greedy: !0\n  }, {\n    pattern: /\\b(?:q|qq|qx|qw)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]/,\n    greedy: !0\n  }, {\n    pattern: /\\b(?:q|qq|qx|qw)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,\n    greedy: !0\n  }, {\n    pattern: /(\"|`)(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n    greedy: !0\n  }, {\n    pattern: /'(?:[^'\\\\\\r\\n]|\\\\.)*'/,\n    greedy: !0\n  }],\n  regex: [{\n    pattern: /\\b(?:m|qr)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[msixpodualngc]*/,\n    greedy: !0\n  }, {\n    pattern: /\\b(?:m|qr)\\s+([a-zA-Z0-9])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[msixpodualngc]*/,\n    greedy: !0\n  }, {\n    pattern: /\\b(?:m|qr)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[msixpodualngc]*/,\n    greedy: !0\n  }, {\n    pattern: /\\b(?:m|qr)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}[msixpodualngc]*/,\n    greedy: !0\n  }, {\n    pattern: /\\b(?:m|qr)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\][msixpodualngc]*/,\n    greedy: !0\n  }, {\n    pattern: /\\b(?:m|qr)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>[msixpodualngc]*/,\n    greedy: !0\n  }, {\n    pattern: /(^|[^-]\\b)(?:s|tr|y)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2[msixpodualngcer]*/,\n    lookbehind: !0,\n    greedy: !0\n  }, {\n    pattern: /(^|[^-]\\b)(?:s|tr|y)\\s+([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2[msixpodualngcer]*/,\n    lookbehind: !0,\n    greedy: !0\n  }, {\n    pattern: /(^|[^-]\\b)(?:s|tr|y)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[msixpodualngcer]*/,\n    lookbehind: !0,\n    greedy: !0\n  }, {\n    pattern: /(^|[^-]\\b)(?:s|tr|y)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}[msixpodualngcer]*/,\n    lookbehind: !0,\n    greedy: !0\n  }, {\n    pattern: /(^|[^-]\\b)(?:s|tr|y)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\][msixpodualngcer]*/,\n    lookbehind: !0,\n    greedy: !0\n  }, {\n    pattern: /(^|[^-]\\b)(?:s|tr|y)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>[msixpodualngcer]*/,\n    lookbehind: !0,\n    greedy: !0\n  }, {\n    pattern: /\\/(?:[^\\/\\\\\\r\\n]|\\\\.)*\\/[msixpodualngc]*(?=\\s*(?:$|[\\r\\n,.;})&|\\-+*~<>!?^]|(lt|gt|le|ge|eq|ne|cmp|not|and|or|xor|x)\\b))/,\n    greedy: !0\n  }],\n  variable: [/[&*$@%]\\{\\^[A-Z]+\\}/, /[&*$@%]\\^[A-Z_]/, /[&*$@%]#?(?=\\{)/, /[&*$@%]#?(?:(?:::)*'?(?!\\d)[\\w$]+)+(?:::)*/i, /[&*$@%]\\d+/, /(?!%=)[$@%][!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~]/],\n  filehandle: {\n    pattern: /<(?![<=])\\S*>|\\b_\\b/,\n    alias: \"symbol\"\n  },\n  vstring: {\n    pattern: /v\\d+(?:\\.\\d+)*|\\d+(?:\\.\\d+){2,}/,\n    alias: \"string\"\n  },\n  function: {\n    pattern: /sub [a-z0-9_]+/i,\n    inside: {\n      keyword: /sub/\n    }\n  },\n  keyword: /\\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|say|state|sub|switch|undef|unless|until|use|when|while)\\b/,\n  number: /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0b[01](?:_?[01])*|(?:\\d(?:_?\\d)*)?\\.?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)\\b/,\n  operator: /-[rwxoRWXOezsfdlpSbctugkTBMAC]\\b|\\+[+=]?|-[-=>]?|\\*\\*?=?|\\/\\/?=?|=[=~>]?|~[~=]?|\\|\\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\\.(?:=|\\.\\.?)?|[\\\\?]|\\bx(?:=|\\b)|\\b(?:lt|gt|le|ge|eq|ne|cmp|not|and|or|xor)\\b/,\n  punctuation: /[{}[\\];(),:]/\n}, function (e) {\n  var t = e.languages.javascript,\n      n = /{(?:[^{}]|{(?:[^{}]|{[^{}]*})*})+}/.source,\n      a = \"(@(?:param|arg|argument|property)\\\\s+(?:\" + n + \"\\\\s+)?)\";\n  e.languages.jsdoc = e.languages.extend(\"javadoclike\", {\n    parameter: {\n      pattern: RegExp(a + /[$\\w\\xA0-\\uFFFF.]+(?=\\s|$)/.source),\n      lookbehind: !0,\n      inside: {\n        punctuation: /\\./\n      }\n    }\n  }), e.languages.insertBefore(\"jsdoc\", \"keyword\", {\n    \"optional-parameter\": {\n      pattern: RegExp(a + /\\[[$\\w\\xA0-\\uFFFF.]+(?:=[^[\\]]+)?\\](?=\\s|$)/.source),\n      lookbehind: !0,\n      inside: {\n        parameter: {\n          pattern: /(^\\[)[$\\w\\xA0-\\uFFFF\\.]+/,\n          lookbehind: !0,\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        code: {\n          pattern: /(=)[\\s\\S]*(?=\\]$)/,\n          lookbehind: !0,\n          inside: t,\n          alias: \"language-javascript\"\n        },\n        punctuation: /[=[\\]]/\n      }\n    },\n    \"class-name\": [{\n      pattern: RegExp(\"(@[a-z]+\\\\s+)\" + n),\n      lookbehind: !0,\n      inside: {\n        punctuation: /[.,:?=<>|{}()[\\]]/\n      }\n    }, {\n      pattern: /(@(?:augments|extends|class|interface|memberof!?|this)\\s+)[A-Z]\\w*(?:\\.[A-Z]\\w*)*/,\n      lookbehind: !0,\n      inside: {\n        punctuation: /\\./\n      }\n    }],\n    example: {\n      pattern: /(@example\\s+)[^@]+?(?=\\s*(?:\\*\\s*)?(?:@\\w|\\*\\/))/,\n      lookbehind: !0,\n      inside: {\n        code: {\n          pattern: /^(\\s*(?:\\*\\s*)?).+$/m,\n          lookbehind: !0,\n          inside: t,\n          alias: \"language-javascript\"\n        }\n      }\n    }\n  }), e.languages.javadoclike.addSupport(\"javascript\", e.languages.jsdoc);\n}(Prism), function (e) {\n  var t = /(?:[a-zA-Z]\\w*|[|\\\\[\\]])+/.source;\n  e.languages.phpdoc = e.languages.extend(\"javadoclike\", {\n    parameter: {\n      pattern: RegExp(\"(@(?:global|param|property(?:-read|-write)?|var)\\\\s+(?:\" + t + \"\\\\s+)?)\\\\$\\\\w+\"),\n      lookbehind: !0\n    }\n  }), e.languages.insertBefore(\"phpdoc\", \"keyword\", {\n    \"class-name\": [{\n      pattern: RegExp(\"(@(?:global|package|param|property(?:-read|-write)?|return|subpackage|throws|var)\\\\s+)\" + t),\n      lookbehind: !0,\n      inside: {\n        keyword: /\\b(?:callback|resource|boolean|integer|double|object|string|array|false|float|mixed|bool|null|self|true|void|int)\\b/,\n        punctuation: /[|\\\\[\\]()]/\n      }\n    }]\n  }), e.languages.javadoclike.addSupport(\"php\", e.languages.phpdoc);\n}(Prism), Prism.languages.insertBefore(\"php\", \"variable\", {\n  this: /\\$this\\b/,\n  global: /\\$(?:_(?:SERVER|GET|POST|FILES|REQUEST|SESSION|ENV|COOKIE)|GLOBALS|HTTP_RAW_POST_DATA|argc|argv|php_errormsg|http_response_header)\\b/,\n  scope: {\n    pattern: /\\b[\\w\\\\]+::/,\n    inside: {\n      keyword: /static|self|parent/,\n      punctuation: /::|\\\\/\n    }\n  }\n}), Prism.languages.sql = {\n  comment: {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n    lookbehind: !0\n  },\n  variable: [{\n    pattern: /@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,\n    greedy: !0\n  }, /@[\\w.$]+/],\n  string: {\n    pattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,\n    greedy: !0,\n    lookbehind: !0\n  },\n  function: /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i,\n  keyword: /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURNS?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,\n  boolean: /\\b(?:TRUE|FALSE|NULL)\\b/i,\n  number: /\\b0x[\\da-f]+\\b|\\b\\d+\\.?\\d*|\\B\\.\\d+\\b/i,\n  operator: /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|IN|LIKE|NOT|OR|IS|DIV|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,\n  punctuation: /[;[\\]()`,.]/\n}, function (e) {\n  var t = e.languages.powershell = {\n    comment: [{\n      pattern: /(^|[^`])<#[\\s\\S]*?#>/,\n      lookbehind: !0\n    }, {\n      pattern: /(^|[^`])#.*/,\n      lookbehind: !0\n    }],\n    string: [{\n      pattern: /\"(?:`[\\s\\S]|[^`\"])*\"/,\n      greedy: !0,\n      inside: {\n        function: {\n          pattern: /(^|[^`])\\$\\((?:\\$\\(.*?\\)|(?!\\$\\()[^\\r\\n)])*\\)/,\n          lookbehind: !0,\n          inside: {}\n        }\n      }\n    }, {\n      pattern: /'(?:[^']|'')*'/,\n      greedy: !0\n    }],\n    namespace: /\\[[a-z](?:\\[(?:\\[[^\\]]*]|[^\\[\\]])*]|[^\\[\\]])*]/i,\n    boolean: /\\$(?:true|false)\\b/i,\n    variable: /\\$\\w+\\b/i,\n    function: [/\\b(?:Add-(?:Computer|Content|History|Member|PSSnapin|Type)|Checkpoint-Computer|Clear-(?:Content|EventLog|History|Item|ItemProperty|Variable)|Compare-Object|Complete-Transaction|Connect-PSSession|ConvertFrom-(?:Csv|Json|StringData)|Convert-Path|ConvertTo-(?:Csv|Html|Json|Xml)|Copy-(?:Item|ItemProperty)|Debug-Process|Disable-(?:ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)|Disconnect-PSSession|Enable-(?:ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)|Enter-PSSession|Exit-PSSession|Export-(?:Alias|Clixml|Console|Csv|FormatData|ModuleMember|PSSession)|ForEach-Object|Format-(?:Custom|List|Table|Wide)|Get-(?:Alias|ChildItem|Command|ComputerRestorePoint|Content|ControlPanelItem|Culture|Date|Event|EventLog|EventSubscriber|FormatData|Help|History|Host|HotFix|Item|ItemProperty|Job|Location|Member|Module|Process|PSBreakpoint|PSCallStack|PSDrive|PSProvider|PSSession|PSSessionConfiguration|PSSnapin|Random|Service|TraceSource|Transaction|TypeData|UICulture|Unique|Variable|WmiObject)|Group-Object|Import-(?:Alias|Clixml|Csv|LocalizedData|Module|PSSession)|Invoke-(?:Command|Expression|History|Item|RestMethod|WebRequest|WmiMethod)|Join-Path|Limit-EventLog|Measure-(?:Command|Object)|Move-(?:Item|ItemProperty)|New-(?:Alias|Event|EventLog|Item|ItemProperty|Module|ModuleManifest|Object|PSDrive|PSSession|PSSessionConfigurationFile|PSSessionOption|PSTransportOption|Service|TimeSpan|Variable|WebServiceProxy)|Out-(?:Default|File|GridView|Host|Null|Printer|String)|Pop-Location|Push-Location|Read-Host|Receive-(?:Job|PSSession)|Register-(?:EngineEvent|ObjectEvent|PSSessionConfiguration|WmiEvent)|Remove-(?:Computer|Event|EventLog|Item|ItemProperty|Job|Module|PSBreakpoint|PSDrive|PSSession|PSSnapin|TypeData|Variable|WmiObject)|Rename-(?:Computer|Item|ItemProperty)|Reset-ComputerMachinePassword|Resolve-Path|Restart-(?:Computer|Service)|Restore-Computer|Resume-(?:Job|Service)|Save-Help|Select-(?:Object|String|Xml)|Send-MailMessage|Set-(?:Alias|Content|Date|Item|ItemProperty|Location|PSBreakpoint|PSDebug|PSSessionConfiguration|Service|StrictMode|TraceSource|Variable|WmiInstance)|Show-(?:Command|ControlPanelItem|EventLog)|Sort-Object|Split-Path|Start-(?:Job|Process|Service|Sleep|Transaction)|Stop-(?:Computer|Job|Process|Service)|Suspend-(?:Job|Service)|Tee-Object|Test-(?:ComputerSecureChannel|Connection|ModuleManifest|Path|PSSessionConfigurationFile)|Trace-Command|Unblock-File|Undo-Transaction|Unregister-(?:Event|PSSessionConfiguration)|Update-(?:FormatData|Help|List|TypeData)|Use-Transaction|Wait-(?:Event|Job|Process)|Where-Object|Write-(?:Debug|Error|EventLog|Host|Output|Progress|Verbose|Warning))\\b/i, /\\b(?:ac|cat|chdir|clc|cli|clp|clv|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|ebp|echo|epal|epcsv|epsn|erase|fc|fl|ft|fw|gal|gbp|gc|gci|gcs|gdr|gi|gl|gm|gp|gps|group|gsv|gu|gv|gwmi|iex|ii|ipal|ipcsv|ipsn|irm|iwmi|iwr|kill|lp|ls|measure|mi|mount|move|mp|mv|nal|ndr|ni|nv|ogv|popd|ps|pushd|pwd|rbp|rd|rdr|ren|ri|rm|rmdir|rni|rnp|rp|rv|rvpa|rwmi|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls|sort|sp|spps|spsv|start|sv|swmi|tee|trcm|type|write)\\b/i],\n    keyword: /\\b(?:Begin|Break|Catch|Class|Continue|Data|Define|Do|DynamicParam|Else|ElseIf|End|Exit|Filter|Finally|For|ForEach|From|Function|If|InlineScript|Parallel|Param|Process|Return|Sequence|Switch|Throw|Trap|Try|Until|Using|Var|While|Workflow)\\b/i,\n    operator: {\n      pattern: /(\\W?)(?:!|-(eq|ne|gt|ge|lt|le|sh[lr]|not|b?(?:and|x?or)|(?:Not)?(?:Like|Match|Contains|In)|Replace|Join|is(?:Not)?|as)\\b|-[-=]?|\\+[+=]?|[*\\/%]=?)/i,\n      lookbehind: !0\n    },\n    punctuation: /[|{}[\\];(),.]/\n  },\n      n = t.string[0].inside;\n  n.boolean = t.boolean, n.variable = t.variable, n.function.inside = t;\n}(Prism), Prism.languages.processing = Prism.languages.extend(\"clike\", {\n  keyword: /\\b(?:break|catch|case|class|continue|default|else|extends|final|for|if|implements|import|new|null|private|public|return|static|super|switch|this|try|void|while)\\b/,\n  operator: /<[<=]?|>[>=]?|&&?|\\|\\|?|[%?]|[!=+\\-*\\/]=?/\n}), Prism.languages.insertBefore(\"processing\", \"number\", {\n  constant: /\\b(?!XML\\b)[A-Z][A-Z\\d_]+\\b/,\n  type: {\n    pattern: /\\b(?:boolean|byte|char|color|double|float|int|XML|[A-Z]\\w*)\\b/,\n    alias: \"variable\"\n  }\n}), Prism.languages.processing.function.pattern = /\\w+(?=\\s*\\()/, Prism.languages.processing[\"class-name\"].alias = \"variable\", Prism.languages.prolog = {\n  comment: [/%.+/, /\\/\\*[\\s\\S]*?\\*\\//],\n  string: {\n    pattern: /([\"'])(?:\\1\\1|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: !0\n  },\n  builtin: /\\b(?:fx|fy|xf[xy]?|yfx?)\\b/,\n  variable: /\\b[A-Z_]\\w*/,\n  function: /\\b[a-z]\\w*(?:(?=\\()|\\/\\d+)/,\n  number: /\\b\\d+\\.?\\d*/,\n  operator: /[:\\\\=><\\-?*@\\/;+^|!$.]+|\\b(?:is|mod|not|xor)\\b/,\n  punctuation: /[(){}\\[\\],]/\n}, Prism.languages.properties = {\n  comment: /^[ \\t]*[#!].*$/m,\n  \"attr-value\": {\n    pattern: /(^[ \\t]*(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\s:=])+?(?: *[=:] *| ))(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])+/m,\n    lookbehind: !0\n  },\n  \"attr-name\": /^[ \\t]*(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\s:=])+?(?= *[=:] *| )/m,\n  punctuation: /[=:]/\n}, Prism.languages.protobuf = Prism.languages.extend(\"clike\", {\n  keyword: /\\b(?:package|import|message|enum)\\b/,\n  builtin: /\\b(?:required|repeated|optional|reserved)\\b/,\n  primitive: {\n    pattern: /\\b(?:double|float|int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string|bytes)\\b/,\n    alias: \"symbol\"\n  }\n}), Prism.languages.scss = Prism.languages.extend(\"css\", {\n  comment: {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n    lookbehind: !0\n  },\n  atrule: {\n    pattern: /@[\\w-]+(?:\\([^()]+\\)|[^(])*?(?=\\s+[{;])/,\n    inside: {\n      rule: /@[\\w-]+/\n    }\n  },\n  url: /(?:[-a-z]+-)*url(?=\\()/i,\n  selector: {\n    pattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()]|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}]+[:{][^}]+))/m,\n    inside: {\n      parent: {\n        pattern: /&/,\n        alias: \"important\"\n      },\n      placeholder: /%[-\\w]+/,\n      variable: /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  },\n  property: {\n    pattern: /(?:[\\w-]|\\$[-\\w]+|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\n    inside: {\n      variable: /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  }\n}), Prism.languages.insertBefore(\"scss\", \"atrule\", {\n  keyword: [/@(?:if|else(?: if)?|for|each|while|import|extend|debug|warn|mixin|include|function|return|content)/i, {\n    pattern: /( +)(?:from|through)(?= )/,\n    lookbehind: !0\n  }]\n}), Prism.languages.insertBefore(\"scss\", \"important\", {\n  variable: /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n}), Prism.languages.insertBefore(\"scss\", \"function\", {\n  placeholder: {\n    pattern: /%[-\\w]+/,\n    alias: \"selector\"\n  },\n  statement: {\n    pattern: /\\B!(?:default|optional)\\b/i,\n    alias: \"keyword\"\n  },\n  boolean: /\\b(?:true|false)\\b/,\n  null: {\n    pattern: /\\bnull\\b/,\n    alias: \"keyword\"\n  },\n  operator: {\n    pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|or|not)(?=\\s)/,\n    lookbehind: !0\n  }\n}), Prism.languages.scss.atrule.inside.rest = Prism.languages.scss, function (e) {\n  e.languages.puppet = {\n    heredoc: [{\n      pattern: /(@\\(\"([^\"\\r\\n\\/):]+)\"(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r))*?[ \\t]*\\|?[ \\t]*-?[ \\t]*\\2/,\n      lookbehind: !0,\n      alias: \"string\",\n      inside: {\n        punctuation: /(?=\\S).*\\S(?= *$)/\n      }\n    }, {\n      pattern: /(@\\(([^\"\\r\\n\\/):]+)(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r))*?[ \\t]*\\|?[ \\t]*-?[ \\t]*\\2/,\n      lookbehind: !0,\n      greedy: !0,\n      alias: \"string\",\n      inside: {\n        punctuation: /(?=\\S).*\\S(?= *$)/\n      }\n    }, {\n      pattern: /@\\(\"?(?:[^\"\\r\\n\\/):]+)\"?(?:\\/[nrts$uL]*)?\\)/,\n      alias: \"string\",\n      inside: {\n        punctuation: {\n          pattern: /(\\().+?(?=\\))/,\n          lookbehind: !0\n        }\n      }\n    }],\n    \"multiline-comment\": {\n      pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n      lookbehind: !0,\n      greedy: !0,\n      alias: \"comment\"\n    },\n    regex: {\n      pattern: /((?:\\bnode\\s+|[~=\\(\\[\\{,]\\s*|[=+]>\\s*|^\\s*))\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/(?:[imx]+\\b|\\B)/,\n      lookbehind: !0,\n      greedy: !0,\n      inside: {\n        \"extended-regex\": {\n          pattern: /^\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/[im]*x[im]*$/,\n          inside: {\n            comment: /#.*/\n          }\n        }\n      }\n    },\n    comment: {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: !0,\n      greedy: !0\n    },\n    string: {\n      pattern: /([\"'])(?:\\$\\{(?:[^'\"}]|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}|(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n      greedy: !0,\n      inside: {\n        \"double-quoted\": {\n          pattern: /^\"[\\s\\S]*\"$/,\n          inside: {}\n        }\n      }\n    },\n    variable: {\n      pattern: /\\$(?:::)?\\w+(?:::\\w+)*/,\n      inside: {\n        punctuation: /::/\n      }\n    },\n    \"attr-name\": /(?:\\w+|\\*)(?=\\s*=>)/,\n    function: [{\n      pattern: /(\\.)(?!\\d)\\w+/,\n      lookbehind: !0\n    }, /\\b(?:contain|debug|err|fail|include|info|notice|realize|require|tag|warning)\\b|\\b(?!\\d)\\w+(?=\\()/],\n    number: /\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d+)?(?:e-?\\d+)?)\\b/i,\n    boolean: /\\b(?:true|false)\\b/,\n    keyword: /\\b(?:application|attr|case|class|consumes|default|define|else|elsif|function|if|import|inherits|node|private|produces|type|undef|unless)\\b/,\n    datatype: {\n      pattern: /\\b(?:Any|Array|Boolean|Callable|Catalogentry|Class|Collection|Data|Default|Enum|Float|Hash|Integer|NotUndef|Numeric|Optional|Pattern|Regexp|Resource|Runtime|Scalar|String|Struct|Tuple|Type|Undef|Variant)\\b/,\n      alias: \"symbol\"\n    },\n    operator: /=[=~>]?|![=~]?|<(?:<\\|?|[=~|-])?|>[>=]?|->?|~>|\\|>?>?|[*\\/%+?]|\\b(?:and|in|or)\\b/,\n    punctuation: /[\\[\\]{}().,;]|:+/\n  };\n  var t = [{\n    pattern: /(^|[^\\\\])\\$\\{(?:[^'\"{}]|\\{[^}]*\\}|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}/,\n    lookbehind: !0,\n    inside: {\n      \"short-variable\": {\n        pattern: /(^\\$\\{)(?!\\w+\\()(?:::)?\\w+(?:::\\w+)*/,\n        lookbehind: !0,\n        alias: \"variable\",\n        inside: {\n          punctuation: /::/\n        }\n      },\n      delimiter: {\n        pattern: /^\\$/,\n        alias: \"variable\"\n      },\n      rest: e.languages.puppet\n    }\n  }, {\n    pattern: /(^|[^\\\\])\\$(?:::)?\\w+(?:::\\w+)*/,\n    lookbehind: !0,\n    alias: \"variable\",\n    inside: {\n      punctuation: /::/\n    }\n  }];\n  e.languages.puppet.heredoc[0].inside.interpolation = t, e.languages.puppet.string.inside[\"double-quoted\"].inside.interpolation = t;\n}(Prism), function (e) {\n  e.languages.pure = {\n    comment: [{\n      pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n      lookbehind: !0\n    }, {\n      pattern: /(^|[^\\\\:])\\/\\/.*/,\n      lookbehind: !0\n    }, /#!.+/],\n    \"inline-lang\": {\n      pattern: /%<[\\s\\S]+?%>/,\n      greedy: !0,\n      inside: {\n        lang: {\n          pattern: /(^%< *)-\\*-.+?-\\*-/,\n          lookbehind: !0,\n          alias: \"comment\"\n        },\n        delimiter: {\n          pattern: /^%<.*|%>$/,\n          alias: \"punctuation\"\n        }\n      }\n    },\n    string: {\n      pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n      greedy: !0\n    },\n    number: {\n      pattern: /((?:\\.\\.)?)(?:\\b(?:inf|nan)\\b|\\b0x[\\da-f]+|(?:\\b(?:0b)?\\d+(?:\\.\\d)?|\\B\\.\\d)\\d*(?:e[+-]?\\d+)?L?)/i,\n      lookbehind: !0\n    },\n    keyword: /\\b(?:ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|NULL|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\\b/,\n    function: /\\b(?:abs|add_(?:(?:fundef|interface|macdef|typedef)(?:_at)?|addr|constdef|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_(?:matrix|pointer)|byte_c?string(?:_pointer)?|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|short|sentry|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\\b/,\n    special: {\n      pattern: /\\b__[a-z]+__\\b/i,\n      alias: \"builtin\"\n    },\n    operator: /(?=\\b_|[^_])[!\"#$%&'*+,\\-.\\/:<=>?@\\\\^_`|~\\u00a1-\\u00bf\\u00d7-\\u00f7\\u20d0-\\u2bff]+|\\b(?:and|div|mod|not|or)\\b/,\n    punctuation: /[(){}\\[\\];,|]/\n  };\n  var t = /%< *-\\*- *{lang}\\d* *-\\*-[\\s\\S]+?%>/.source;\n  [\"c\", {\n    lang: \"c++\",\n    alias: \"cpp\"\n  }, \"fortran\"].forEach(function (n) {\n    var a = n;\n\n    if (\"string\" != typeof n && (a = n.alias, n = n.lang), e.languages[a]) {\n      var i = {};\n      i[\"inline-lang-\" + a] = {\n        pattern: RegExp(t.replace(\"{lang}\", n.replace(/([.+*?\\/\\\\(){}\\[\\]])/g, \"\\\\$1\")), \"i\"),\n        inside: e.util.clone(e.languages.pure[\"inline-lang\"].inside)\n      }, i[\"inline-lang-\" + a].inside.rest = e.util.clone(e.languages[a]), e.languages.insertBefore(\"pure\", \"inline-lang\", i);\n    }\n  }), e.languages.c && (e.languages.pure[\"inline-lang\"].inside.rest = e.util.clone(e.languages.c));\n}(Prism), Prism.languages.python = {\n  comment: {\n    pattern: /(^|[^\\\\])#.*/,\n    lookbehind: !0\n  },\n  \"string-interpolation\": {\n    pattern: /(?:f|rf|fr)(?:(\"\"\"|''')[\\s\\S]+?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\n    greedy: !0,\n    inside: {\n      interpolation: {\n        pattern: /((?:^|[^{])(?:{{)*){(?!{)(?:[^{}]|{(?!{)(?:[^{}]|{(?!{)(?:[^{}])+})+})+}/,\n        lookbehind: !0,\n        inside: {\n          \"format-spec\": {\n            pattern: /(:)[^:(){}]+(?=}$)/,\n            lookbehind: !0\n          },\n          \"conversion-option\": {\n            pattern: /![sra](?=[:}]$)/,\n            alias: \"punctuation\"\n          },\n          rest: null\n        }\n      },\n      string: /[\\s\\S]+/\n    }\n  },\n  \"triple-quoted-string\": {\n    pattern: /(?:[rub]|rb|br)?(\"\"\"|''')[\\s\\S]+?\\1/i,\n    greedy: !0,\n    alias: \"string\"\n  },\n  string: {\n    pattern: /(?:[rub]|rb|br)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\n    greedy: !0\n  },\n  function: {\n    pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n    lookbehind: !0\n  },\n  \"class-name\": {\n    pattern: /(\\bclass\\s+)\\w+/i,\n    lookbehind: !0\n  },\n  decorator: {\n    pattern: /(^\\s*)@\\w+(?:\\.\\w+)*/i,\n    lookbehind: !0,\n    alias: [\"annotation\", \"punctuation\"],\n    inside: {\n      punctuation: /\\./\n    }\n  },\n  keyword: /\\b(?:and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\n  builtin: /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n  boolean: /\\b(?:True|False|None)\\b/,\n  number: /(?:\\b(?=\\d)|\\B(?=\\.))(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*\\.?\\d*|\\.\\d+)(?:e[+-]?\\d+)?j?\\b/i,\n  operator: /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n  punctuation: /[{}[\\];(),.:]/\n}, Prism.languages.python[\"string-interpolation\"].inside.interpolation.inside.rest = Prism.languages.python, Prism.languages.py = Prism.languages.python, Prism.languages.q = {\n  string: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n  comment: [{\n    pattern: /([\\t )\\]}])\\/.*/,\n    lookbehind: !0,\n    greedy: !0\n  }, {\n    pattern: /(^|\\r?\\n|\\r)\\/[\\t ]*(?:(?:\\r?\\n|\\r)(?:.*(?:\\r?\\n|\\r))*?(?:\\\\(?=[\\t ]*(?:\\r?\\n|\\r))|$)|\\S.*)/,\n    lookbehind: !0,\n    greedy: !0\n  }, {\n    pattern: /^\\\\[\\t ]*(?:\\r?\\n|\\r)[\\s\\S]+/m,\n    greedy: !0\n  }, {\n    pattern: /^#!.+/m,\n    greedy: !0\n  }],\n  symbol: /`(?::\\S+|[\\w.]*)/,\n  datetime: {\n    pattern: /0N[mdzuvt]|0W[dtz]|\\d{4}\\.\\d\\d(?:m|\\.\\d\\d(?:T(?:\\d\\d(?::\\d\\d(?::\\d\\d(?:[.:]\\d\\d\\d)?)?)?)?)?[dz]?)|\\d\\d:\\d\\d(?::\\d\\d(?:[.:]\\d\\d\\d)?)?[uvt]?/,\n    alias: \"number\"\n  },\n  number: /\\b(?![01]:)(?:0[wn]|0W[hj]?|0N[hje]?|0x[\\da-fA-F]+|\\d+\\.?\\d*(?:e[+-]?\\d+)?[hjfeb]?)/,\n  keyword: /\\\\\\w+\\b|\\b(?:abs|acos|aj0?|all|and|any|asc|asin|asof|atan|attr|avgs?|binr?|by|ceiling|cols|cor|cos|count|cov|cross|csv|cut|delete|deltas|desc|dev|differ|distinct|div|do|dsave|ej|enlist|eval|except|exec|exit|exp|fby|fills|first|fkeys|flip|floor|from|get|getenv|group|gtime|hclose|hcount|hdel|hopen|hsym|iasc|identity|idesc|if|ij|in|insert|inter|inv|keys?|last|like|list|ljf?|load|log|lower|lsq|ltime|ltrim|mavg|maxs?|mcount|md5|mdev|med|meta|mins?|mmax|mmin|mmu|mod|msum|neg|next|not|null|or|over|parse|peach|pj|plist|prds?|prev|prior|rand|rank|ratios|raze|read0|read1|reciprocal|reval|reverse|rload|rotate|rsave|rtrim|save|scan|scov|sdev|select|set|setenv|show|signum|sin|sqrt|ssr?|string|sublist|sums?|sv|svar|system|tables|tan|til|trim|txf|type|uj|ungroup|union|update|upper|upsert|value|var|views?|vs|wavg|where|while|within|wj1?|wsum|ww|xasc|xbar|xcols?|xdesc|xexp|xgroup|xkey|xlog|xprev|xrank)\\b/,\n  adverb: {\n    pattern: /['\\/\\\\]:?|\\beach\\b/,\n    alias: \"function\"\n  },\n  verb: {\n    pattern: /(?:\\B\\.\\B|\\b[01]:|<[=>]?|>=?|[:+\\-*%,!?_~=|$&#@^]):?/,\n    alias: \"operator\"\n  },\n  punctuation: /[(){}\\[\\];.]/\n}, Prism.languages.qore = Prism.languages.extend(\"clike\", {\n  comment: {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:\\/\\/|#).*)/,\n    lookbehind: !0\n  },\n  string: {\n    pattern: /(\"|')(\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n    greedy: !0\n  },\n  variable: /\\$(?!\\d)\\w+\\b/,\n  keyword: /\\b(?:abstract|any|assert|binary|bool|boolean|break|byte|case|catch|char|class|code|const|continue|data|default|do|double|else|enum|extends|final|finally|float|for|goto|hash|if|implements|import|inherits|instanceof|int|interface|long|my|native|new|nothing|null|object|our|own|private|reference|rethrow|return|short|soft(?:int|float|number|bool|string|date|list)|static|strictfp|string|sub|super|switch|synchronized|this|throw|throws|transient|try|void|volatile|while)\\b/,\n  number: /\\b(?:0b[01]+|0x[\\da-f]*\\.?[\\da-fp\\-]+|\\d*\\.?\\d+e?\\d*[df]|\\d*\\.?\\d+)\\b/i,\n  boolean: /\\b(?:true|false)\\b/i,\n  operator: {\n    pattern: /(^|[^.])(?:\\+[+=]?|-[-=]?|[!=](?:==?|~)?|>>?=?|<(?:=>?|<=?)?|&[&=]?|\\|[|=]?|[*\\/%^]=?|[~?])/,\n    lookbehind: !0\n  },\n  function: /\\$?\\b(?!\\d)\\w+(?=\\()/\n}), Prism.languages.r = {\n  comment: /#.*/,\n  string: {\n    pattern: /(['\"])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: !0\n  },\n  \"percent-operator\": {\n    pattern: /%[^%\\s]*%/,\n    alias: \"operator\"\n  },\n  boolean: /\\b(?:TRUE|FALSE)\\b/,\n  ellipsis: /\\.\\.(?:\\.|\\d+)/,\n  number: [/\\b(?:NaN|Inf)\\b/, /(?:\\b0x[\\dA-Fa-f]+(?:\\.\\d*)?|\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[EePp][+-]?\\d+)?[iL]?/],\n  keyword: /\\b(?:if|else|repeat|while|function|for|in|next|break|NULL|NA|NA_integer_|NA_real_|NA_complex_|NA_character_)\\b/,\n  operator: /->?>?|<(?:=|<?-)?|[>=!]=?|::?|&&?|\\|\\|?|[+*\\/^$@~]/,\n  punctuation: /[(){}\\[\\],;]/\n}, function (e) {\n  e.languages.insertBefore(\"javascript\", \"function-variable\", {\n    \"method-variable\": {\n      pattern: RegExp(\"(\\\\.\\\\s*)\" + e.languages.javascript[\"function-variable\"].pattern.source),\n      lookbehind: !0,\n      alias: [\"function-variable\", \"method\", \"function\", \"property-access\"]\n    }\n  }), e.languages.insertBefore(\"javascript\", \"function\", {\n    method: {\n      pattern: RegExp(\"(\\\\.\\\\s*)\" + e.languages.javascript.function.source),\n      lookbehind: !0,\n      alias: [\"function\", \"property-access\"]\n    }\n  }), e.languages.insertBefore(\"javascript\", \"constant\", {\n    \"known-class-name\": [{\n      pattern: /\\b(?:(?:(?:Uint|Int)(?:8|16|32)|Uint8Clamped|Float(?:32|64))?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|(?:Weak)?(?:Set|Map)|WebAssembly)\\b/,\n      alias: \"class-name\"\n    }, {\n      pattern: /\\b(?:[A-Z]\\w*)Error\\b/,\n      alias: \"class-name\"\n    }]\n  }), e.languages.javascript.keyword.unshift({\n    pattern: /\\b(?:as|default|export|from|import)\\b/,\n    alias: \"module\"\n  }, {\n    pattern: /\\bnull\\b/,\n    alias: [\"null\", \"nil\"]\n  }, {\n    pattern: /\\bundefined\\b/,\n    alias: \"nil\"\n  }), e.languages.insertBefore(\"javascript\", \"operator\", {\n    spread: {\n      pattern: /\\.{3}/,\n      alias: \"operator\"\n    },\n    arrow: {\n      pattern: /=>/,\n      alias: \"operator\"\n    }\n  }), e.languages.insertBefore(\"javascript\", \"punctuation\", {\n    \"property-access\": {\n      pattern: /(\\.\\s*)[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*/,\n      lookbehind: !0\n    },\n    \"maybe-class-name\": {\n      pattern: /(^|[^$\\w\\xA0-\\uFFFF])[A-Z][$\\w\\xA0-\\uFFFF]+/,\n      lookbehind: !0\n    },\n    dom: {\n      pattern: /\\b(?:document|location|navigator|performance|(?:local|session)Storage|window)\\b/,\n      alias: \"variable\"\n    },\n    console: {\n      pattern: /\\bconsole(?=\\s*\\.)/,\n      alias: \"class-name\"\n    }\n  });\n\n  for (var t = [\"function\", \"function-variable\", \"method\", \"method-variable\", \"property-access\"], n = 0; n < t.length; n++) {\n    var a = t[n],\n        i = e.languages.javascript[a];\n    \"RegExp\" === e.util.type(i) && (i = e.languages.javascript[a] = {\n      pattern: i\n    });\n    var r = i.inside || {};\n    i.inside = r, r[\"maybe-class-name\"] = /^[A-Z][\\s\\S]*/;\n  }\n}(Prism), function (e) {\n  var t = e.util.clone(e.languages.javascript);\n  e.languages.jsx = e.languages.extend(\"markup\", t), e.languages.jsx.tag.pattern = /<\\/?(?:[\\w.:-]+\\s*(?:\\s+(?:[\\w.:-]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s{'\">=]+|\\{(?:\\{(?:\\{[^}]*\\}|[^{}])*\\}|[^{}])+\\}))?|\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}))*\\s*\\/?)?>/i, e.languages.jsx.tag.inside.tag.pattern = /^<\\/?[^\\s>\\/]*/i, e.languages.jsx.tag.inside[\"attr-value\"].pattern = /=(?!\\{)(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">]+)/i, e.languages.jsx.tag.inside.tag.inside[\"class-name\"] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/, e.languages.insertBefore(\"inside\", \"attr-name\", {\n    spread: {\n      pattern: /\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}/,\n      inside: {\n        punctuation: /\\.{3}|[{}.]/,\n        \"attr-value\": /\\w+/\n      }\n    }\n  }, e.languages.jsx.tag), e.languages.insertBefore(\"inside\", \"attr-value\", {\n    script: {\n      pattern: /=(\\{(?:\\{(?:\\{[^}]*\\}|[^}])*\\}|[^}])+\\})/i,\n      inside: {\n        \"script-punctuation\": {\n          pattern: /^=(?={)/,\n          alias: \"punctuation\"\n        },\n        rest: e.languages.jsx\n      },\n      alias: \"language-javascript\"\n    }\n  }, e.languages.jsx.tag);\n\n  var n = function (e) {\n    return e ? \"string\" == typeof e ? e : \"string\" == typeof e.content ? e.content : e.content.map(n).join(\"\") : \"\";\n  },\n      a = function (t) {\n    for (var i = [], r = 0; r < t.length; r++) {\n      var o = t[r],\n          s = !1;\n\n      if (\"string\" != typeof o && (\"tag\" === o.type && o.content[0] && \"tag\" === o.content[0].type ? \"</\" === o.content[0].content[0].content ? i.length > 0 && i[i.length - 1].tagName === n(o.content[0].content[1]) && i.pop() : \"/>\" === o.content[o.content.length - 1].content || i.push({\n        tagName: n(o.content[0].content[1]),\n        openedBraces: 0\n      }) : i.length > 0 && \"punctuation\" === o.type && \"{\" === o.content ? i[i.length - 1].openedBraces++ : i.length > 0 && i[i.length - 1].openedBraces > 0 && \"punctuation\" === o.type && \"}\" === o.content ? i[i.length - 1].openedBraces-- : s = !0), (s || \"string\" == typeof o) && i.length > 0 && 0 === i[i.length - 1].openedBraces) {\n        var l = n(o);\n        r < t.length - 1 && (\"string\" == typeof t[r + 1] || \"plain-text\" === t[r + 1].type) && (l += n(t[r + 1]), t.splice(r + 1, 1)), r > 0 && (\"string\" == typeof t[r - 1] || \"plain-text\" === t[r - 1].type) && (l = n(t[r - 1]) + l, t.splice(r - 1, 1), r--), t[r] = new e.Token(\"plain-text\", l, null, l);\n      }\n\n      o.content && \"string\" != typeof o.content && a(o.content);\n    }\n  };\n\n  e.hooks.add(\"after-tokenize\", function (e) {\n    \"jsx\" !== e.language && \"tsx\" !== e.language || a(e.tokens);\n  });\n}(Prism), Prism.languages.renpy = {\n  comment: {\n    pattern: /(^|[^\\\\])#.+/,\n    lookbehind: !0\n  },\n  string: {\n    pattern: /(\"\"\"|''')[\\s\\S]+?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2|(?:^#?(?:(?:[0-9a-fA-F]{2}){3}|(?:[0-9a-fA-F]){3})$)/m,\n    greedy: !0\n  },\n  function: /[a-z_]\\w*(?=\\()/i,\n  property: /\\b(?:insensitive|idle|hover|selected_idle|selected_hover|background|position|alt|xpos|ypos|pos|xanchor|yanchor|anchor|xalign|yalign|align|xcenter|ycenter|xofsset|yoffset|ymaximum|maximum|xmaximum|xminimum|yminimum|minimum|xsize|ysizexysize|xfill|yfill|area|antialias|black_color|bold|caret|color|first_indent|font|size|italic|justify|kerning|language|layout|line_leading|line_overlap_split|line_spacing|min_width|newline_indent|outlines|rest_indent|ruby_style|slow_cps|slow_cps_multiplier|strikethrough|text_align|underline|hyperlink_functions|vertical|hinting|foreground|left_margin|xmargin|top_margin|bottom_margin|ymargin|left_padding|right_padding|xpadding|top_padding|bottom_padding|ypadding|size_group|child|hover_sound|activate_sound|mouse|focus_mask|keyboard_focus|bar_vertical|bar_invert|bar_resizing|left_gutter|right_gutter|top_gutter|bottom_gutter|left_bar|right_bar|top_bar|bottom_bar|thumb|thumb_shadow|thumb_offset|unscrollable|spacing|first_spacing|box_reverse|box_wrap|order_reverse|fit_first|ysize|thumbnail_width|thumbnail_height|help|text_ypos|text_xpos|idle_color|hover_color|selected_idle_color|selected_hover_color|insensitive_color|alpha|insensitive_background|hover_background|zorder|value|width|xadjustment|xanchoraround|xaround|xinitial|xoffset|xzoom|yadjustment|yanchoraround|yaround|yinitial|yzoom|zoom|ground|height|text_style|text_y_fudge|selected_insensitive|has_sound|has_music|has_voice|focus|hovered|image_style|length|minwidth|mousewheel|offset|prefix|radius|range|right_margin|rotate|rotate_pad|developer|screen_width|screen_height|window_title|name|version|windows_icon|default_fullscreen|default_text_cps|default_afm_time|main_menu_music|sample_sound|enter_sound|exit_sound|save_directory|enter_transition|exit_transition|intra_transition|main_game_transition|game_main_transition|end_splash_transition|end_game_transition|after_load_transition|window_show_transition|window_hide_transition|adv_nvl_transition|nvl_adv_transition|enter_yesno_transition|exit_yesno_transition|enter_replay_transition|exit_replay_transition|say_attribute_transition|directory_name|executable_name|include_update|window_icon|modal|google_play_key|google_play_salt|drag_name|drag_handle|draggable|dragged|droppable|dropped|narrator_menu|action|default_afm_enable|version_name|version_tuple|inside|fadeout|fadein|layers|layer_clipping|linear|scrollbars|side_xpos|side_ypos|side_spacing|edgescroll|drag_joined|drag_raise|drop_shadow|drop_shadow_color|subpixel|easein|easeout|time|crop|auto|update|get_installed_packages|can_update|UpdateVersion|Update|overlay_functions|translations|window_left_padding|show_side_image|show_two_window)\\b/,\n  tag: /\\b(?:label|image|menu|[hv]box|frame|text|imagemap|imagebutton|bar|vbar|screen|textbutton|buttoscreenn|fixed|grid|input|key|mousearea|side|timer|viewport|window|hotspot|hotbar|self|button|drag|draggroup|tag|mm_menu_frame|nvl|block|parallel)\\b|\\$/,\n  keyword: /\\b(?:as|assert|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|pass|print|raise|return|try|while|yield|adjustment|alignaround|allow|angle|around|box_layout|cache|changed|child_size|clicked|clipping|corner1|corner2|default|delay|exclude|scope|slow|slow_abortable|slow_done|sound|style_group|substitute|suffix|transform_anchor|transpose|unhovered|config|theme|mm_root|gm_root|rounded_window|build|disabled_text|disabled|widget_selected|widget_text|widget_hover|widget|updater|behind|call|expression|hide|init|jump|onlayer|python|renpy|scene|set|show|transform|play|queue|stop|pause|define|window|repeat|contains|choice|on|function|event|animation|clockwise|counterclockwise|circles|knot|null|None|random|has|add|use|fade|dissolve|style|store|id|voice|center|left|right|less_rounded|music|movie|clear|persistent|ui)\\b/,\n  boolean: /\\b(?:[Tt]rue|[Ff]alse)\\b/,\n  number: /(?:\\b(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*\\.?\\d*)|\\B\\.\\d+)(?:e[+-]?\\d+)?j?/i,\n  operator: /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]|\\b(?:or|and|not|with|at)\\b/,\n  punctuation: /[{}[\\];(),.:]/\n}, Prism.languages.reason = Prism.languages.extend(\"clike\", {\n  comment: {\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n    lookbehind: !0\n  },\n  string: {\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n    greedy: !0\n  },\n  \"class-name\": /\\b[A-Z]\\w*/,\n  keyword: /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n  operator: /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:mod|land|lor|lxor|lsl|lsr|asr)\\b/\n}), Prism.languages.insertBefore(\"reason\", \"class-name\", {\n  character: {\n    pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n    alias: \"string\"\n  },\n  constructor: {\n    pattern: /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n    alias: \"variable\"\n  },\n  label: {\n    pattern: /\\b[a-z]\\w*(?=::)/,\n    alias: \"symbol\"\n  }\n}), delete Prism.languages.reason.function, Prism.languages.vala = Prism.languages.extend(\"clike\", {\n  \"class-name\": [{\n    pattern: /\\b[A-Z]\\w*(?:\\.\\w+)*\\b(?=(?:\\?\\s+|\\*?\\s+\\*?)\\w+)/,\n    inside: {\n      punctuation: /\\./\n    }\n  }, {\n    pattern: /(\\[)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n    lookbehind: !0,\n    inside: {\n      punctuation: /\\./\n    }\n  }, {\n    pattern: /(\\b(?:class|interface)\\s+[A-Z]\\w*(?:\\.\\w+)*\\s*:\\s*)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n    lookbehind: !0,\n    inside: {\n      punctuation: /\\./\n    }\n  }, {\n    pattern: /((?:\\b(?:class|interface|new|struct|enum)\\s+)|(?:catch\\s+\\())[A-Z]\\w*(?:\\.\\w+)*\\b/,\n    lookbehind: !0,\n    inside: {\n      punctuation: /\\./\n    }\n  }],\n  constant: /\\b[A-Z0-9_]+\\b/,\n  function: /\\w+(?=\\s*\\()/,\n  keyword: /\\b(?:bool|char|double|float|null|size_t|ssize_t|string|unichar|void|int|int8|int16|int32|int64|long|short|uchar|uint|uint8|uint16|uint32|uint64|ulong|ushort|class|delegate|enum|errordomain|interface|namespace|struct|break|continue|do|for|foreach|return|while|else|if|switch|assert|case|default|abstract|const|dynamic|ensures|extern|inline|internal|override|private|protected|public|requires|signal|static|virtual|volatile|weak|async|owned|unowned|try|catch|finally|throw|as|base|construct|delete|get|in|is|lock|new|out|params|ref|sizeof|set|this|throws|typeof|using|value|var|yield)\\b/i,\n  number: /(?:\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)(?:f|u?l?)?/i,\n  operator: /\\+\\+|--|&&|\\|\\||<<=?|>>=?|=>|->|~|[+\\-*\\/%&^|=!<>]=?|\\?\\??|\\.\\.\\./,\n  punctuation: /[{}[\\];(),.:]/\n}), Prism.languages.insertBefore(\"vala\", \"string\", {\n  \"raw-string\": {\n    pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n    greedy: !0,\n    alias: \"string\"\n  },\n  \"template-string\": {\n    pattern: /@\"[\\s\\S]*?\"/,\n    greedy: !0,\n    inside: {\n      interpolation: {\n        pattern: /\\$(?:\\([^)]*\\)|[a-zA-Z]\\w*)/,\n        inside: {\n          delimiter: {\n            pattern: /^\\$\\(?|\\)$/,\n            alias: \"punctuation\"\n          },\n          rest: Prism.languages.vala\n        }\n      },\n      string: /[\\s\\S]+/\n    }\n  }\n}), Prism.languages.insertBefore(\"vala\", \"keyword\", {\n  regex: {\n    pattern: /\\/(\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[imsx]{0,4}(?=\\s*($|[\\r\\n,.;})\\]]))/,\n    greedy: !0\n  }\n}), Prism.languages.rest = {\n  table: [{\n    pattern: /(\\s*)(?:\\+[=-]+)+\\+(?:\\r?\\n|\\r)(?:\\1(?:[+|].+)+[+|](?:\\r?\\n|\\r))+\\1(?:\\+[=-]+)+\\+/,\n    lookbehind: !0,\n    inside: {\n      punctuation: /\\||(?:\\+[=-]+)+\\+/\n    }\n  }, {\n    pattern: /(\\s*)(?:=+ +)+=+(?:(?:\\r?\\n|\\r)\\1.+)+(?:\\r?\\n|\\r)\\1(?:=+ +)+=+(?=(?:\\r?\\n|\\r){2}|\\s*$)/,\n    lookbehind: !0,\n    inside: {\n      punctuation: /[=-]+/\n    }\n  }],\n  \"substitution-def\": {\n    pattern: /(^\\s*\\.\\. )\\|(?:[^|\\s](?:[^|]*[^|\\s])?)\\| [^:]+::/m,\n    lookbehind: !0,\n    inside: {\n      substitution: {\n        pattern: /^\\|(?:[^|\\s]|[^|\\s][^|]*[^|\\s])\\|/,\n        alias: \"attr-value\",\n        inside: {\n          punctuation: /^\\||\\|$/\n        }\n      },\n      directive: {\n        pattern: /( +)[^:]+::/,\n        lookbehind: !0,\n        alias: \"function\",\n        inside: {\n          punctuation: /::$/\n        }\n      }\n    }\n  },\n  \"link-target\": [{\n    pattern: /(^\\s*\\.\\. )\\[[^\\]]+\\]/m,\n    lookbehind: !0,\n    alias: \"string\",\n    inside: {\n      punctuation: /^\\[|\\]$/\n    }\n  }, {\n    pattern: /(^\\s*\\.\\. )_(?:`[^`]+`|(?:[^:\\\\]|\\\\.)+):/m,\n    lookbehind: !0,\n    alias: \"string\",\n    inside: {\n      punctuation: /^_|:$/\n    }\n  }],\n  directive: {\n    pattern: /(^\\s*\\.\\. )[^:]+::/m,\n    lookbehind: !0,\n    alias: \"function\",\n    inside: {\n      punctuation: /::$/\n    }\n  },\n  comment: {\n    pattern: /(^\\s*\\.\\.)(?:(?: .+)?(?:(?:\\r?\\n|\\r).+)+| .+)(?=(?:\\r?\\n|\\r){2}|$)/m,\n    lookbehind: !0\n  },\n  title: [{\n    pattern: /^(([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2+)(?:\\r?\\n|\\r).+(?:\\r?\\n|\\r)\\1$/m,\n    inside: {\n      punctuation: /^[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+|[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+$/,\n      important: /.+/\n    }\n  }, {\n    pattern: /(^|(?:\\r?\\n|\\r){2}).+(?:\\r?\\n|\\r)([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2+(?=\\r?\\n|\\r|$)/,\n    lookbehind: !0,\n    inside: {\n      punctuation: /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+$/,\n      important: /.+/\n    }\n  }],\n  hr: {\n    pattern: /((?:\\r?\\n|\\r){2})([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2{3,}(?=(?:\\r?\\n|\\r){2})/,\n    lookbehind: !0,\n    alias: \"punctuation\"\n  },\n  field: {\n    pattern: /(^\\s*):[^:\\r\\n]+:(?= )/m,\n    lookbehind: !0,\n    alias: \"attr-name\"\n  },\n  \"command-line-option\": {\n    pattern: /(^\\s*)(?:[+-][a-z\\d]|(?:--|\\/)[a-z\\d-]+)(?:[ =](?:[a-z][\\w-]*|<[^<>]+>))?(?:, (?:[+-][a-z\\d]|(?:--|\\/)[a-z\\d-]+)(?:[ =](?:[a-z][\\w-]*|<[^<>]+>))?)*(?=(?:\\r?\\n|\\r)? {2,}\\S)/im,\n    lookbehind: !0,\n    alias: \"symbol\"\n  },\n  \"literal-block\": {\n    pattern: /::(?:\\r?\\n|\\r){2}([ \\t]+).+(?:(?:\\r?\\n|\\r)\\1.+)*/,\n    inside: {\n      \"literal-block-punctuation\": {\n        pattern: /^::/,\n        alias: \"punctuation\"\n      }\n    }\n  },\n  \"quoted-literal-block\": {\n    pattern: /::(?:\\r?\\n|\\r){2}([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]).*(?:(?:\\r?\\n|\\r)\\1.*)*/,\n    inside: {\n      \"literal-block-punctuation\": {\n        pattern: /^(?:::|([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\1*)/m,\n        alias: \"punctuation\"\n      }\n    }\n  },\n  \"list-bullet\": {\n    pattern: /(^\\s*)(?:[*+\\-•‣⁃]|\\(?(?:\\d+|[a-z]|[ivxdclm]+)\\)|(?:\\d+|[a-z]|[ivxdclm]+)\\.)(?= )/im,\n    lookbehind: !0,\n    alias: \"punctuation\"\n  },\n  \"doctest-block\": {\n    pattern: /(^\\s*)>>> .+(?:(?:\\r?\\n|\\r).+)*/m,\n    lookbehind: !0,\n    inside: {\n      punctuation: /^>>>/\n    }\n  },\n  inline: [{\n    pattern: /(^|[\\s\\-:\\/'\"<(\\[{])(?::[^:]+:`.*?`|`.*?`:[^:]+:|(\\*\\*?|``?|\\|)(?!\\s).*?[^\\s]\\2(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$))/m,\n    lookbehind: !0,\n    inside: {\n      bold: {\n        pattern: /(^\\*\\*).+(?=\\*\\*$)/,\n        lookbehind: !0\n      },\n      italic: {\n        pattern: /(^\\*).+(?=\\*$)/,\n        lookbehind: !0\n      },\n      \"inline-literal\": {\n        pattern: /(^``).+(?=``$)/,\n        lookbehind: !0,\n        alias: \"symbol\"\n      },\n      role: {\n        pattern: /^:[^:]+:|:[^:]+:$/,\n        alias: \"function\",\n        inside: {\n          punctuation: /^:|:$/\n        }\n      },\n      \"interpreted-text\": {\n        pattern: /(^`).+(?=`$)/,\n        lookbehind: !0,\n        alias: \"attr-value\"\n      },\n      substitution: {\n        pattern: /(^\\|).+(?=\\|$)/,\n        lookbehind: !0,\n        alias: \"attr-value\"\n      },\n      punctuation: /\\*\\*?|``?|\\|/\n    }\n  }],\n  link: [{\n    pattern: /\\[[^\\]]+\\]_(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$)/,\n    alias: \"string\",\n    inside: {\n      punctuation: /^\\[|\\]_$/\n    }\n  }, {\n    pattern: /(?:\\b[a-z\\d](?:[_.:+]?[a-z\\d]+)*_?_|`[^`]+`_?_|_`[^`]+`)(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$)/i,\n    alias: \"string\",\n    inside: {\n      punctuation: /^_?`|`$|`?_?_$/\n    }\n  }],\n  punctuation: {\n    pattern: /(^\\s*)(?:\\|(?= |$)|(?:---?|—|\\.\\.|__)(?= )|\\.\\.$)/m,\n    lookbehind: !0\n  }\n}, Prism.languages.rip = {\n  comment: /#.*/,\n  keyword: /(?:=>|->)|\\b(?:class|if|else|switch|case|return|exit|try|catch|finally|raise)\\b/,\n  builtin: /@|\\bSystem\\b/,\n  boolean: /\\b(?:true|false)\\b/,\n  date: /\\b\\d{4}-\\d{2}-\\d{2}\\b/,\n  time: /\\b\\d{2}:\\d{2}:\\d{2}\\b/,\n  datetime: /\\b\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\b/,\n  character: /\\B`[^\\s`'\",.:;#\\/\\\\()<>\\[\\]{}]\\b/,\n  regex: {\n    pattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/(?=\\s*($|[\\r\\n,.;})]))/,\n    lookbehind: !0,\n    greedy: !0\n  },\n  symbol: /:[^\\d\\s`'\",.:;#\\/\\\\()<>\\[\\]{}][^\\s`'\",.:;#\\/\\\\()<>\\[\\]{}]*/,\n  string: {\n    pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: !0\n  },\n  number: /[+-]?(?:(?:\\d+\\.\\d+)|(?:\\d+))/,\n  punctuation: /(?:\\.{2,3})|[`,.:;=\\/\\\\()<>\\[\\]{}]/,\n  reference: /[^\\d\\s`'\",.:;#\\/\\\\()<>\\[\\]{}][^\\s`'\",.:;#\\/\\\\()<>\\[\\]{}]*/\n}, Prism.languages.roboconf = {\n  comment: /#.*/,\n  keyword: {\n    pattern: /(^|\\s)(?:(?:facet|instance of)(?=[ \\t]+[\\w-]+[ \\t]*\\{)|(?:external|import)\\b)/,\n    lookbehind: !0\n  },\n  component: {\n    pattern: /[\\w-]+(?=[ \\t]*\\{)/,\n    alias: \"variable\"\n  },\n  property: /[\\w.-]+(?=[ \\t]*:)/,\n  value: {\n    pattern: /(=[ \\t]*)[^,;]+/,\n    lookbehind: !0,\n    alias: \"attr-value\"\n  },\n  optional: {\n    pattern: /\\(optional\\)/,\n    alias: \"builtin\"\n  },\n  wildcard: {\n    pattern: /(\\.)\\*/,\n    lookbehind: !0,\n    alias: \"operator\"\n  },\n  punctuation: /[{},.;:=]/\n}, function (e) {\n  var t = /(?:\\([^|)]+\\)|\\[[^\\]]+\\]|\\{[^}]+\\})+/.source,\n      n = {\n    css: {\n      pattern: /\\{[^}]+\\}/,\n      inside: {\n        rest: e.languages.css\n      }\n    },\n    \"class-id\": {\n      pattern: /(\\()[^)]+(?=\\))/,\n      lookbehind: !0,\n      alias: \"attr-value\"\n    },\n    lang: {\n      pattern: /(\\[)[^\\]]+(?=\\])/,\n      lookbehind: !0,\n      alias: \"attr-value\"\n    },\n    punctuation: /[\\\\\\/]\\d+|\\S/\n  },\n      a = e.languages.textile = e.languages.extend(\"markup\", {\n    phrase: {\n      pattern: /(^|\\r|\\n)\\S[\\s\\S]*?(?=$|\\r?\\n\\r?\\n|\\r\\r)/,\n      lookbehind: !0,\n      inside: {\n        \"block-tag\": {\n          pattern: RegExp(\"^[a-z]\\\\w*(?:\" + t + \"|[<>=()])*\\\\.\"),\n          inside: {\n            modifier: {\n              pattern: RegExp(\"(^[a-z]\\\\w*)(?:\" + t + \"|[<>=()])+(?=\\\\.)\"),\n              lookbehind: !0,\n              inside: n\n            },\n            tag: /^[a-z]\\w*/,\n            punctuation: /\\.$/\n          }\n        },\n        list: {\n          pattern: RegExp(\"^[*#]+(?:\" + t + \")?\\\\s+.+\", \"m\"),\n          inside: {\n            modifier: {\n              pattern: RegExp(\"(^[*#]+)\" + t),\n              lookbehind: !0,\n              inside: n\n            },\n            punctuation: /^[*#]+/\n          }\n        },\n        table: {\n          pattern: RegExp(\"^(?:(?:\" + t + \"|[<>=()^~])+\\\\.\\\\s*)?(?:\\\\|(?:(?:\" + t + \"|[<>=()^~_]|[\\\\\\\\/]\\\\d+)+\\\\.)?[^|]*)+\\\\|\", \"m\"),\n          inside: {\n            modifier: {\n              pattern: RegExp(\"(^|\\\\|(?:\\\\r?\\\\n|\\\\r)?)(?:\" + t + \"|[<>=()^~_]|[\\\\\\\\/]\\\\d+)+(?=\\\\.)\"),\n              lookbehind: !0,\n              inside: n\n            },\n            punctuation: /\\||^\\./\n          }\n        },\n        inline: {\n          pattern: RegExp(\"(\\\\*\\\\*|__|\\\\?\\\\?|[*_%@+\\\\-^~])(?:\" + t + \")?.+?\\\\1\"),\n          inside: {\n            bold: {\n              pattern: RegExp(\"(^(\\\\*\\\\*?)(?:\" + t + \")?).+?(?=\\\\2)\"),\n              lookbehind: !0\n            },\n            italic: {\n              pattern: RegExp(\"(^(__?)(?:\" + t + \")?).+?(?=\\\\2)\"),\n              lookbehind: !0\n            },\n            cite: {\n              pattern: RegExp(\"(^\\\\?\\\\?(?:\" + t + \")?).+?(?=\\\\?\\\\?)\"),\n              lookbehind: !0,\n              alias: \"string\"\n            },\n            code: {\n              pattern: RegExp(\"(^@(?:\" + t + \")?).+?(?=@)\"),\n              lookbehind: !0,\n              alias: \"keyword\"\n            },\n            inserted: {\n              pattern: RegExp(\"(^\\\\+(?:\" + t + \")?).+?(?=\\\\+)\"),\n              lookbehind: !0\n            },\n            deleted: {\n              pattern: RegExp(\"(^-(?:\" + t + \")?).+?(?=-)\"),\n              lookbehind: !0\n            },\n            span: {\n              pattern: RegExp(\"(^%(?:\" + t + \")?).+?(?=%)\"),\n              lookbehind: !0\n            },\n            modifier: {\n              pattern: RegExp(\"(^\\\\*\\\\*|__|\\\\?\\\\?|[*_%@+\\\\-^~])\" + t),\n              lookbehind: !0,\n              inside: n\n            },\n            punctuation: /[*_%?@+\\-^~]+/\n          }\n        },\n        \"link-ref\": {\n          pattern: /^\\[[^\\]]+\\]\\S+$/m,\n          inside: {\n            string: {\n              pattern: /(\\[)[^\\]]+(?=\\])/,\n              lookbehind: !0\n            },\n            url: {\n              pattern: /(\\])\\S+$/,\n              lookbehind: !0\n            },\n            punctuation: /[\\[\\]]/\n          }\n        },\n        link: {\n          pattern: RegExp('\"(?:' + t + ')?[^\"]+\":.+?(?=[^\\\\w/]?(?:\\\\s|$))'),\n          inside: {\n            text: {\n              pattern: RegExp('(^\"(?:' + t + ')?)[^\"]+(?=\")'),\n              lookbehind: !0\n            },\n            modifier: {\n              pattern: RegExp('(^\")' + t),\n              lookbehind: !0,\n              inside: n\n            },\n            url: {\n              pattern: /(:).+/,\n              lookbehind: !0\n            },\n            punctuation: /[\":]/\n          }\n        },\n        image: {\n          pattern: RegExp(\"!(?:\" + t + \"|[<>=()])*[^!\\\\s()]+(?:\\\\([^)]+\\\\))?!(?::.+?(?=[^\\\\w/]?(?:\\\\s|$)))?\"),\n          inside: {\n            source: {\n              pattern: RegExp(\"(^!(?:\" + t + \"|[<>=()])*)[^!\\\\s()]+(?:\\\\([^)]+\\\\))?(?=!)\"),\n              lookbehind: !0,\n              alias: \"url\"\n            },\n            modifier: {\n              pattern: RegExp(\"(^!)(?:\" + t + \"|[<>=()])+\"),\n              lookbehind: !0,\n              inside: n\n            },\n            url: {\n              pattern: /(:).+/,\n              lookbehind: !0\n            },\n            punctuation: /[!:]/\n          }\n        },\n        footnote: {\n          pattern: /\\b\\[\\d+\\]/,\n          alias: \"comment\",\n          inside: {\n            punctuation: /\\[|\\]/\n          }\n        },\n        acronym: {\n          pattern: /\\b[A-Z\\d]+\\([^)]+\\)/,\n          inside: {\n            comment: {\n              pattern: /(\\()[^)]+(?=\\))/,\n              lookbehind: !0\n            },\n            punctuation: /[()]/\n          }\n        },\n        mark: {\n          pattern: /\\b\\((?:TM|R|C)\\)/,\n          alias: \"comment\",\n          inside: {\n            punctuation: /[()]/\n          }\n        }\n      }\n    }\n  }),\n      i = a.phrase.inside,\n      r = {\n    inline: i.inline,\n    link: i.link,\n    image: i.image,\n    footnote: i.footnote,\n    acronym: i.acronym,\n    mark: i.mark\n  };\n  a.tag.pattern = /<\\/?(?!\\d)[a-z0-9]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i;\n  var o = i.inline.inside;\n  o.bold.inside = r, o.italic.inside = r, o.inserted.inside = r, o.deleted.inside = r, o.span.inside = r;\n  var s = i.table.inside;\n  s.inline = r.inline, s.link = r.link, s.image = r.image, s.footnote = r.footnote, s.acronym = r.acronym, s.mark = r.mark;\n}(Prism), Prism.languages.rust = {\n  comment: [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n    lookbehind: !0\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: !0\n  }],\n  string: [{\n    pattern: /b?r(#*)\"(?:\\\\.|(?!\"\\1)[^\\\\\\r\\n])*\"\\1/,\n    greedy: !0\n  }, {\n    pattern: /b?\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\n    greedy: !0\n  }],\n  char: {\n    pattern: /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u{(?:[\\da-fA-F]_*){1,6}|.)|[^\\\\\\r\\n\\t'])'/,\n    alias: \"string\"\n  },\n  \"lifetime-annotation\": {\n    pattern: /'[^\\s>']+/,\n    alias: \"symbol\"\n  },\n  keyword: /\\b(?:abstract|alignof|as|be|box|break|const|continue|crate|do|dyn|else|enum|extern|false|final|fn|for|if|impl|in|let|loop|match|mod|move|mut|offsetof|once|override|priv|pub|pure|ref|return|sizeof|static|self|Self|struct|super|true|trait|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/,\n  attribute: {\n    pattern: /#!?\\[.+?\\]/,\n    greedy: !0,\n    alias: \"attr-name\"\n  },\n  function: [/\\w+(?=\\s*\\()/, /\\w+!(?=\\s*\\(|\\[)/],\n  \"macro-rules\": {\n    pattern: /\\w+!/,\n    alias: \"function\"\n  },\n  number: /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(\\d(?:_?\\d)*)?\\.?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:[iu](?:8|16|32|64)?|f32|f64))?\\b/,\n  \"closure-params\": {\n    pattern: /\\|[^|]*\\|(?=\\s*[{-])/,\n    inside: {\n      punctuation: /[|:,]/,\n      operator: /[&*]/\n    }\n  },\n  punctuation: /[{}[\\];(),:]|\\.+|->/,\n  operator: /[-+*\\/%!^]=?|=[=>]?|@|&[&=]?|\\|[|=]?|<<?=?|>>?=?/\n}, Prism.languages.sas = {\n  datalines: {\n    pattern: /^\\s*(?:(?:data)?lines|cards);[\\s\\S]+?(?:\\r?\\n|\\r);/im,\n    alias: \"string\",\n    inside: {\n      keyword: {\n        pattern: /^(\\s*)(?:(?:data)?lines|cards)/i,\n        lookbehind: !0\n      },\n      punctuation: /;/\n    }\n  },\n  comment: [{\n    pattern: /(^\\s*|;\\s*)\\*.*;/m,\n    lookbehind: !0\n  }, /\\/\\*[\\s\\S]+?\\*\\//],\n  datetime: {\n    pattern: /'[^']+'(?:dt?|t)\\b/i,\n    alias: \"number\"\n  },\n  string: {\n    pattern: /([\"'])(?:\\1\\1|(?!\\1)[\\s\\S])*\\1/,\n    greedy: !0\n  },\n  keyword: /\\b(?:data|else|format|if|input|proc\\s\\w+|quit|run|then|libname|set|output|options)\\b/i,\n  number: /\\b(?:[\\da-f]+x|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)/i,\n  operator: /\\*\\*?|\\|\\|?|!!?|¦¦?|<[>=]?|>[<=]?|[-+\\/=&]|[~¬^]=?|\\b(?:eq|ne|gt|lt|ge|le|in|not)\\b/i,\n  punctuation: /[$%@.(){}\\[\\];,\\\\]/\n}, function (e) {\n  e.languages.sass = e.languages.extend(\"css\", {\n    comment: {\n      pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t]+.+)*/m,\n      lookbehind: !0\n    }\n  }), e.languages.insertBefore(\"sass\", \"atrule\", {\n    \"atrule-line\": {\n      pattern: /^(?:[ \\t]*)[@+=].+/m,\n      inside: {\n        atrule: /(?:@[\\w-]+|[+=])/m\n      }\n    }\n  }), delete e.languages.sass.atrule;\n  var t = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/,\n      n = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/, {\n    pattern: /(\\s+)-(?=\\s)/,\n    lookbehind: !0\n  }];\n  e.languages.insertBefore(\"sass\", \"property\", {\n    \"variable-line\": {\n      pattern: /^[ \\t]*\\$.+/m,\n      inside: {\n        punctuation: /:/,\n        variable: t,\n        operator: n\n      }\n    },\n    \"property-line\": {\n      pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s]+.*)/m,\n      inside: {\n        property: [/[^:\\s]+(?=\\s*:)/, {\n          pattern: /(:)[^:\\s]+/,\n          lookbehind: !0\n        }],\n        punctuation: /:/,\n        variable: t,\n        operator: n,\n        important: e.languages.sass.important\n      }\n    }\n  }), delete e.languages.sass.property, delete e.languages.sass.important, e.languages.insertBefore(\"sass\", \"punctuation\", {\n    selector: {\n      pattern: /([ \\t]*)\\S(?:,?[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,?[^,\\r\\n]+)*)*/,\n      lookbehind: !0\n    }\n  });\n}(Prism), function (e) {\n  var t = {\n    url: /url\\(([\"']?).*?\\1\\)/i,\n    string: {\n      pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n      greedy: !0\n    },\n    interpolation: null,\n    func: null,\n    important: /\\B!(?:important|optional)\\b/i,\n    keyword: {\n      pattern: /(^|\\s+)(?:(?:if|else|for|return|unless)(?=\\s+|$)|@[\\w-]+)/,\n      lookbehind: !0\n    },\n    hexcode: /#[\\da-f]{3,6}/i,\n    number: /\\b\\d+(?:\\.\\d+)?%?/,\n    boolean: /\\b(?:true|false)\\b/,\n    operator: [/~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.+|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/],\n    punctuation: /[{}()\\[\\];:,]/\n  };\n  t.interpolation = {\n    pattern: /\\{[^\\r\\n}:]+\\}/,\n    alias: \"variable\",\n    inside: {\n      delimiter: {\n        pattern: /^{|}$/,\n        alias: \"punctuation\"\n      },\n      rest: t\n    }\n  }, t.func = {\n    pattern: /[\\w-]+\\([^)]*\\).*/,\n    inside: {\n      function: /^[^(]+/,\n      rest: t\n    }\n  }, e.languages.stylus = {\n    comment: {\n      pattern: /(^|[^\\\\])(\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: !0\n    },\n    \"atrule-declaration\": {\n      pattern: /(^\\s*)@.+/m,\n      lookbehind: !0,\n      inside: {\n        atrule: /^@[\\w-]+/,\n        rest: t\n      }\n    },\n    \"variable-declaration\": {\n      pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:(?:\\{[^}]*\\}|.+)|$)/m,\n      lookbehind: !0,\n      inside: {\n        variable: /^\\S+/,\n        rest: t\n      }\n    },\n    statement: {\n      pattern: /(^[ \\t]*)(?:if|else|for|return|unless)[ \\t]+.+/m,\n      lookbehind: !0,\n      inside: {\n        keyword: /^\\S+/,\n        rest: t\n      }\n    },\n    \"property-declaration\": {\n      pattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)[^{\\r\\n]*(?:;|[^{\\r\\n,](?=$)(?!(\\r?\\n|\\r)(?:\\{|\\2[ \\t]+)))/m,\n      lookbehind: !0,\n      inside: {\n        property: {\n          pattern: /^[^\\s:]+/,\n          inside: {\n            interpolation: t.interpolation\n          }\n        },\n        rest: t\n      }\n    },\n    selector: {\n      pattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t]+)))/m,\n      lookbehind: !0,\n      inside: {\n        interpolation: t.interpolation,\n        punctuation: /[{},]/\n      }\n    },\n    func: t.func,\n    string: t.string,\n    interpolation: t.interpolation,\n    punctuation: /[{}()\\[\\];:.]/\n  };\n}(Prism), function (e) {\n  var t = {\n    code: {\n      pattern: /(^(\\s*(?:\\*\\s*)*)).*[^*\\s].+$/m,\n      lookbehind: !0,\n      inside: e.languages.java,\n      alias: \"language-java\"\n    }\n  };\n  e.languages.javadoc = e.languages.extend(\"javadoclike\", {}), e.languages.insertBefore(\"javadoc\", \"keyword\", {\n    \"class-name\": [{\n      pattern: /(@(?:exception|throws|see|link|linkplain|value)\\s+(?:[a-z\\d]+\\.)*)[A-Z](?:\\w*[a-z]\\w*)?(?:\\.[A-Z](?:\\w*[a-z]\\w*)?)*/,\n      lookbehind: !0,\n      inside: {\n        punctuation: /\\./\n      }\n    }, {\n      pattern: /(@param\\s+)<[A-Z]\\w*>/,\n      lookbehind: !0,\n      inside: {\n        punctuation: /[.<>]/\n      }\n    }],\n    namespace: {\n      pattern: /(@(?:exception|throws|see|link|linkplain)\\s+)(?:[a-z\\d]+\\.)+/,\n      lookbehind: !0,\n      inside: {\n        punctuation: /\\./\n      }\n    },\n    \"code-section\": [{\n      pattern: /(\\{@code\\s+)(?:[^{}]|\\{[^{}]*\\})+?(?=\\s*\\})/,\n      lookbehind: !0,\n      inside: t\n    }, {\n      pattern: /(<(code|tt)>\\s*)[\\s\\S]+?(?=\\s*<\\/\\2>)/,\n      lookbehind: !0,\n      inside: t\n    }],\n    tag: e.languages.markup.tag\n  }), e.languages.javadoclike.addSupport(\"java\", e.languages.javadoc);\n}(Prism), Prism.languages.scheme = {\n  comment: /;.*/,\n  string: {\n    pattern: /\"(?:[^\"\\\\]|\\\\.)*\"|'[^()#'\\s]+/,\n    greedy: !0\n  },\n  character: {\n    pattern: /#\\\\(?:[ux][a-fA-F\\d]+|[a-zA-Z]+|\\S)/,\n    alias: \"string\"\n  },\n  keyword: {\n    pattern: /(\\()(?:define(?:-syntax|-library|-values)?|(?:case-)?lambda|let(?:\\*|rec)?(?:-values)?|else|if|cond|begin|delay(?:-force)?|parameterize|guard|set!|(?:quasi-)?quote|syntax-rules)(?=[()\\s])/,\n    lookbehind: !0\n  },\n  builtin: {\n    pattern: /(\\()(?:(?:cons|car|cdr|list|call-with-current-continuation|call\\/cc|append|abs|apply|eval)\\b|null\\?|pair\\?|boolean\\?|eof-object\\?|char\\?|procedure\\?|number\\?|port\\?|string\\?|vector\\?|symbol\\?|bytevector\\?)(?=[()\\s])/,\n    lookbehind: !0\n  },\n  number: {\n    pattern: /([\\s()])[-+]?\\d*\\.?\\d+(?:\\s*[-+]\\s*\\d*\\.?\\d+i)?\\b/,\n    lookbehind: !0\n  },\n  boolean: /#[tf]/,\n  operator: {\n    pattern: /(\\()(?:[-+*%\\/]|[<>]=?|=>?)(?=\\s|$)/,\n    lookbehind: !0\n  },\n  function: {\n    pattern: /(\\()[^()'\\s]+(?=[()\\s)]|$)/,\n    lookbehind: !0\n  },\n  punctuation: /[()']/\n}, Prism.languages.smalltalk = {\n  comment: /\"(?:\"\"|[^\"])*\"/,\n  string: /'(?:''|[^'])*'/,\n  symbol: /#[\\da-z]+|#(?:-|([+\\/\\\\*~<>=@%|&?!])\\1?)|#(?=\\()/i,\n  \"block-arguments\": {\n    pattern: /(\\[\\s*):[^\\[|]*\\|/,\n    lookbehind: !0,\n    inside: {\n      variable: /:[\\da-z]+/i,\n      punctuation: /\\|/\n    }\n  },\n  \"temporary-variables\": {\n    pattern: /\\|[^|]+\\|/,\n    inside: {\n      variable: /[\\da-z]+/i,\n      punctuation: /\\|/\n    }\n  },\n  keyword: /\\b(?:nil|true|false|self|super|new)\\b/,\n  character: {\n    pattern: /\\$./,\n    alias: \"string\"\n  },\n  number: [/\\d+r-?[\\dA-Z]+(?:\\.[\\dA-Z]+)?(?:e-?\\d+)?/, /\\b\\d+(?:\\.\\d+)?(?:e-?\\d+)?/],\n  operator: /[<=]=?|:=|~[~=]|\\/\\/?|\\\\\\\\|>[>=]?|[!^+\\-*&|,@]/,\n  punctuation: /[.;:?\\[\\](){}]/\n}, function (e) {\n  e.languages.smarty = {\n    comment: /\\{\\*[\\s\\S]*?\\*\\}/,\n    delimiter: {\n      pattern: /^\\{|\\}$/i,\n      alias: \"punctuation\"\n    },\n    string: /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n    variable: [/\\$(?!\\d)\\w+/, /#(?!\\d)\\w+#/, {\n      pattern: /(\\.|->)(?!\\d)\\w+/,\n      lookbehind: !0\n    }, {\n      pattern: /(\\[)(?!\\d)\\w+(?=\\])/,\n      lookbehind: !0\n    }],\n    function: [{\n      pattern: /(\\|\\s*)@?(?!\\d)\\w+/,\n      lookbehind: !0\n    }, /^\\/?(?!\\d)\\w+/, /(?!\\d)\\w+(?=\\()/],\n    \"attr-name\": {\n      pattern: /\\w+\\s*=\\s*(?:(?!\\d)\\w+)?/,\n      inside: {\n        variable: {\n          pattern: /(=\\s*)(?!\\d)\\w+/,\n          lookbehind: !0\n        },\n        operator: /=/\n      }\n    },\n    punctuation: [/[\\[\\]().,:`]|->/],\n    operator: [/[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/, /\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/, /\\b(?:eq|neq?|gt|lt|gt?e|lt?e|not|mod|or|and)\\b/],\n    keyword: /\\b(?:false|off|on|no|true|yes)\\b/\n  }, e.hooks.add(\"before-tokenize\", function (t) {\n    var n = !1;\n    e.languages[\"markup-templating\"].buildPlaceholders(t, \"smarty\", /\\{\\*[\\s\\S]*?\\*\\}|\\{[\\s\\S]+?\\}/g, function (e) {\n      return \"{/literal}\" === e && (n = !1), !n && (\"{literal}\" === e && (n = !0), !0);\n    });\n  }), e.hooks.add(\"after-tokenize\", function (t) {\n    e.languages[\"markup-templating\"].tokenizePlaceholders(t, \"smarty\");\n  });\n}(Prism), function (e) {\n  var t = e.languages.plsql = e.languages.extend(\"sql\", {\n    comment: [/\\/\\*[\\s\\S]*?\\*\\//, /--.*/]\n  }),\n      n = t.keyword;\n  Array.isArray(n) || (n = t.keyword = [n]), n.unshift(/\\b(?:ACCESS|AGENT|AGGREGATE|ARRAY|ARROW|AT|ATTRIBUTE|AUDIT|AUTHID|BFILE_BASE|BLOB_BASE|BLOCK|BODY|BOTH|BOUND|BYTE|CALLING|CHAR_BASE|CHARSET(?:FORM|ID)|CLOB_BASE|COLAUTH|COLLECT|CLUSTERS?|COMPILED|COMPRESS|CONSTANT|CONSTRUCTOR|CONTEXT|CRASH|CUSTOMDATUM|DANGLING|DATE_BASE|DEFINE|DETERMINISTIC|DURATION|ELEMENT|EMPTY|EXCEPTIONS?|EXCLUSIVE|EXTERNAL|FINAL|FORALL|FORM|FOUND|GENERAL|HEAP|HIDDEN|IDENTIFIED|IMMEDIATE|INCLUDING|INCREMENT|INDICATOR|INDEXES|INDICES|INFINITE|INITIAL|ISOPEN|INSTANTIABLE|INTERFACE|INVALIDATE|JAVA|LARGE|LEADING|LENGTH|LIBRARY|LIKE[24C]|LIMITED|LONG|LOOP|MAP|MAXEXTENTS|MAXLEN|MEMBER|MINUS|MLSLABEL|MULTISET|NAME|NAN|NATIVE|NEW|NOAUDIT|NOCOMPRESS|NOCOPY|NOTFOUND|NOWAIT|NUMBER(?:_BASE)?|OBJECT|OCI(?:COLL|DATE|DATETIME|DURATION|INTERVAL|LOBLOCATOR|NUMBER|RAW|REF|REFCURSOR|ROWID|STRING|TYPE)|OFFLINE|ONLINE|ONLY|OPAQUE|OPERATOR|ORACLE|ORADATA|ORGANIZATION|ORL(?:ANY|VARY)|OTHERS|OVERLAPS|OVERRIDING|PACKAGE|PARALLEL_ENABLE|PARAMETERS?|PASCAL|PCTFREE|PIPE(?:LINED)?|PRAGMA|PRIOR|PRIVATE|RAISE|RANGE|RAW|RECORD|REF|REFERENCE|REM|REMAINDER|RESULT|RESOURCE|RETURNING|REVERSE|ROW(?:ID|NUM|TYPE)|SAMPLE|SB[124]|SEGMENT|SELF|SEPARATE|SEQUENCE|SHORT|SIZE(?:_T)?|SPARSE|SQL(?:CODE|DATA|NAME|STATE)|STANDARD|STATIC|STDDEV|STORED|STRING|STRUCT|STYLE|SUBMULTISET|SUBPARTITION|SUBSTITUTABLE|SUBTYPE|SUCCESSFUL|SYNONYM|SYSDATE|TABAUTH|TDO|THE|TIMEZONE_(?:ABBR|HOUR|MINUTE|REGION)|TRAILING|TRANSAC(?:TIONAL)?|TRUSTED|UB[124]|UID|UNDER|UNTRUSTED|VALIDATE|VALIST|VARCHAR2|VARIABLE|VARIANCE|VARRAY|VIEWS|VOID|WHENEVER|WRAPPED|ZONE)\\b/i);\n  var a = t.operator;\n  Array.isArray(a) || (a = t.operator = [a]), a.unshift(/:=/);\n}(Prism), function (e) {\n  var t = /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      n = /\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/;\n  e.languages.soy = {\n    comment: [/\\/\\*[\\s\\S]*?\\*\\//, {\n      pattern: /(\\s)\\/\\/.*/,\n      lookbehind: !0,\n      greedy: !0\n    }],\n    \"command-arg\": {\n      pattern: /({+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,\n      lookbehind: !0,\n      alias: \"string\",\n      inside: {\n        punctuation: /\\./\n      }\n    },\n    parameter: {\n      pattern: /({+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,\n      lookbehind: !0,\n      alias: \"variable\"\n    },\n    keyword: [{\n      pattern: /({+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,\n      lookbehind: !0\n    }, /\\b(?:any|as|attributes|bool|css|float|in|int|js|html|list|map|null|number|string|uri)\\b/],\n    delimiter: {\n      pattern: /^{+\\/?|\\/?}+$/,\n      alias: \"punctuation\"\n    },\n    property: /\\w+(?==)/,\n    variable: {\n      pattern: /\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+]))*/,\n      inside: {\n        string: {\n          pattern: t,\n          greedy: !0\n        },\n        number: n,\n        punctuation: /[\\[\\].?]/\n      }\n    },\n    string: {\n      pattern: t,\n      greedy: !0\n    },\n    function: [/\\w+(?=\\()/, {\n      pattern: /(\\|[^\\S\\r\\n]*)\\w+/,\n      lookbehind: !0\n    }],\n    boolean: /\\b(?:true|false)\\b/,\n    number: n,\n    operator: /\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\b(?:and|not|or)\\b/,\n    punctuation: /[{}()\\[\\]|.,:]/\n  }, e.hooks.add(\"before-tokenize\", function (t) {\n    var n = !1;\n    e.languages[\"markup-templating\"].buildPlaceholders(t, \"soy\", /{{.+?}}|{.+?}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g, function (e) {\n      return \"{/literal}\" === e && (n = !1), !n && (\"{literal}\" === e && (n = !0), !0);\n    });\n  }), e.hooks.add(\"after-tokenize\", function (t) {\n    e.languages[\"markup-templating\"].tokenizePlaceholders(t, \"soy\");\n  });\n}(Prism), Prism.languages.twig = {\n  comment: /\\{#[\\s\\S]*?#\\}/,\n  tag: {\n    pattern: /\\{\\{[\\s\\S]*?\\}\\}|\\{%[\\s\\S]*?%\\}/,\n    inside: {\n      ld: {\n        pattern: /^(?:\\{\\{-?|\\{%-?\\s*\\w+)/,\n        inside: {\n          punctuation: /^(?:\\{\\{|\\{%)-?/,\n          keyword: /\\w+/\n        }\n      },\n      rd: {\n        pattern: /-?(?:%\\}|\\}\\})$/,\n        inside: {\n          punctuation: /.+/\n        }\n      },\n      string: {\n        pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        inside: {\n          punctuation: /^['\"]|['\"]$/\n        }\n      },\n      keyword: /\\b(?:even|if|odd)\\b/,\n      boolean: /\\b(?:true|false|null)\\b/,\n      number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n      operator: [{\n        pattern: /(\\s)(?:and|b-and|b-xor|b-or|ends with|in|is|matches|not|or|same as|starts with)(?=\\s)/,\n        lookbehind: !0\n      }, /[=<>]=?|!=|\\*\\*?|\\/\\/?|\\?:?|[-+~%|]/],\n      property: /\\b[a-zA-Z_]\\w*\\b/,\n      punctuation: /[()\\[\\]{}:.,]/\n    }\n  },\n  other: {\n    pattern: /\\S(?:[\\s\\S]*\\S)?/,\n    inside: Prism.languages.markup\n  }\n}, Prism.languages.swift = Prism.languages.extend(\"clike\", {\n  string: {\n    pattern: /(\"|')(\\\\(?:\\((?:[^()]|\\([^)]+\\))+\\)|\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: !0,\n    inside: {\n      interpolation: {\n        pattern: /\\\\\\((?:[^()]|\\([^)]+\\))+\\)/,\n        inside: {\n          delimiter: {\n            pattern: /^\\\\\\(|\\)$/,\n            alias: \"variable\"\n          }\n        }\n      }\n    }\n  },\n  keyword: /\\b(?:as|associativity|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic(?:Type)?|else|enum|extension|fallthrough|final|for|func|get|guard|if|import|in|infix|init|inout|internal|is|lazy|left|let|mutating|new|none|nonmutating|operator|optional|override|postfix|precedence|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|Self|set|static|struct|subscript|super|switch|throws?|try|Type|typealias|unowned|unsafe|var|weak|where|while|willSet|__(?:COLUMN__|FILE__|FUNCTION__|LINE__))\\b/,\n  number: /\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,\n  constant: /\\b(?:nil|[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,\n  atrule: /@\\b(?:IB(?:Outlet|Designable|Action|Inspectable)|class_protocol|exported|noreturn|NS(?:Copying|Managed)|objc|UIApplicationMain|auto_closure)\\b/,\n  builtin: /\\b(?:[A-Z]\\S+|abs|advance|alignof(?:Value)?|assert|contains|count(?:Elements)?|debugPrint(?:ln)?|distance|drop(?:First|Last)|dump|enumerate|equal|filter|find|first|getVaList|indices|isEmpty|join|last|lexicographicalCompare|map|max(?:Element)?|min(?:Element)?|numericCast|overlaps|partition|print(?:ln)?|reduce|reflect|reverse|sizeof(?:Value)?|sort(?:ed)?|split|startsWith|stride(?:of(?:Value)?)?|suffix|swap|toDebugString|toString|transcode|underestimateCount|unsafeBitCast|with(?:ExtendedLifetime|Unsafe(?:MutablePointers?|Pointers?)|VaList))\\b/\n}), Prism.languages.swift.string.inside.interpolation.inside.rest = Prism.languages.swift, Prism.languages.yaml = {\n  scalar: {\n    pattern: /([\\-:]\\s*(?:![^\\s]+)?[ \\t]*[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)[^\\r\\n]+(?:\\2[^\\r\\n]+)*)/,\n    lookbehind: !0,\n    alias: \"string\"\n  },\n  comment: /#.*/,\n  key: {\n    pattern: /(\\s*(?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:![^\\s]+)?[ \\t]*)[^\\r\\n{[\\]},#\\s]+?(?=\\s*:\\s)/,\n    lookbehind: !0,\n    alias: \"atrule\"\n  },\n  directive: {\n    pattern: /(^[ \\t]*)%.+/m,\n    lookbehind: !0,\n    alias: \"important\"\n  },\n  datetime: {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?)?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?)(?=[ \\t]*(?:$|,|]|}))/m,\n    lookbehind: !0,\n    alias: \"number\"\n  },\n  boolean: {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:true|false)[ \\t]*(?=$|,|]|})/im,\n    lookbehind: !0,\n    alias: \"important\"\n  },\n  null: {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:null|~)[ \\t]*(?=$|,|]|})/im,\n    lookbehind: !0,\n    alias: \"important\"\n  },\n  string: {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(\"|')(?:(?!\\2)[^\\\\\\r\\n]|\\\\.)*\\2(?=[ \\t]*(?:$|,|]|}|\\s*#))/m,\n    lookbehind: !0,\n    greedy: !0\n  },\n  number: {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+\\.?\\d*|\\.?\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)[ \\t]*(?=$|,|]|})/im,\n    lookbehind: !0\n  },\n  tag: /![^\\s]+/,\n  important: /[&*][\\w]+/,\n  punctuation: /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n}, Prism.languages.yml = Prism.languages.yaml, Prism.languages.tcl = {\n  comment: {\n    pattern: /(^|[^\\\\])#.*/,\n    lookbehind: !0\n  },\n  string: {\n    pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"/,\n    greedy: !0\n  },\n  variable: [{\n    pattern: /(\\$)(?:::)?(?:[a-zA-Z0-9]+::)*\\w+/,\n    lookbehind: !0\n  }, {\n    pattern: /(\\$){[^}]+}/,\n    lookbehind: !0\n  }, {\n    pattern: /(^\\s*set[ \\t]+)(?:::)?(?:[a-zA-Z0-9]+::)*\\w+/m,\n    lookbehind: !0\n  }],\n  function: {\n    pattern: /(^\\s*proc[ \\t]+)[^\\s]+/m,\n    lookbehind: !0\n  },\n  builtin: [{\n    pattern: /(^\\s*)(?:proc|return|class|error|eval|exit|for|foreach|if|switch|while|break|continue)\\b/m,\n    lookbehind: !0\n  }, /\\b(?:elseif|else)\\b/],\n  scope: {\n    pattern: /(^\\s*)(?:global|upvar|variable)\\b/m,\n    lookbehind: !0,\n    alias: \"constant\"\n  },\n  keyword: {\n    pattern: /(^\\s*|\\[)(?:after|append|apply|array|auto_(?:execok|import|load|mkindex|qualify|reset)|automkindex_old|bgerror|binary|catch|cd|chan|clock|close|concat|dde|dict|encoding|eof|exec|expr|fblocked|fconfigure|fcopy|file(?:event|name)?|flush|gets|glob|history|http|incr|info|interp|join|lappend|lassign|lindex|linsert|list|llength|load|lrange|lrepeat|lreplace|lreverse|lsearch|lset|lsort|math(?:func|op)|memory|msgcat|namespace|open|package|parray|pid|pkg_mkIndex|platform|puts|pwd|re_syntax|read|refchan|regexp|registry|regsub|rename|Safe_Base|scan|seek|set|socket|source|split|string|subst|Tcl|tcl(?:_endOfWord|_findLibrary|startOf(?:Next|Previous)Word|wordBreak(?:After|Before)|test|vars)|tell|time|tm|trace|unknown|unload|unset|update|uplevel|vwait)\\b/m,\n    lookbehind: !0\n  },\n  operator: /!=?|\\*\\*?|==|&&?|\\|\\|?|<[=<]?|>[=>]?|[-+~\\/%?^]|\\b(?:eq|ne|in|ni)\\b/,\n  punctuation: /[{}()\\[\\]]/\n}, function (e) {\n  e.languages.haml = {\n    \"multiline-comment\": {\n      pattern: /((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/,\n      lookbehind: !0,\n      alias: \"comment\"\n    },\n    \"multiline-code\": [{\n      pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)/,\n      lookbehind: !0,\n      inside: {\n        rest: e.languages.ruby\n      }\n    }, {\n      pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*\\|[\\t ]*)*/,\n      lookbehind: !0,\n      inside: {\n        rest: e.languages.ruby\n      }\n    }],\n    filter: {\n      pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/,\n      lookbehind: !0,\n      inside: {\n        \"filter-name\": {\n          pattern: /^:[\\w-]+/,\n          alias: \"variable\"\n        }\n      }\n    },\n    markup: {\n      pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,\n      lookbehind: !0,\n      inside: {\n        rest: e.languages.markup\n      }\n    },\n    doctype: {\n      pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,\n      lookbehind: !0\n    },\n    tag: {\n      pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,\n      lookbehind: !0,\n      inside: {\n        attributes: [{\n          pattern: /(^|[^#])\\{(?:\\{[^}]+\\}|[^}])+\\}/,\n          lookbehind: !0,\n          inside: {\n            rest: e.languages.ruby\n          }\n        }, {\n          pattern: /\\([^)]+\\)/,\n          inside: {\n            \"attr-value\": {\n              pattern: /(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,\n              lookbehind: !0\n            },\n            \"attr-name\": /[\\w:-]+(?=\\s*!?=|\\s*[,)])/,\n            punctuation: /[=(),]/\n          }\n        }, {\n          pattern: /\\[[^\\]]+\\]/,\n          inside: {\n            rest: e.languages.ruby\n          }\n        }],\n        punctuation: /[<>]/\n      }\n    },\n    code: {\n      pattern: /((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,\n      lookbehind: !0,\n      inside: {\n        rest: e.languages.ruby\n      }\n    },\n    interpolation: {\n      pattern: /#\\{[^}]+\\}/,\n      inside: {\n        delimiter: {\n          pattern: /^#\\{|\\}$/,\n          alias: \"punctuation\"\n        },\n        rest: e.languages.ruby\n      }\n    },\n    punctuation: {\n      pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,\n      lookbehind: !0\n    }\n  };\n\n  for (var t = [\"css\", {\n    filter: \"coffee\",\n    language: \"coffeescript\"\n  }, \"erb\", \"javascript\", \"less\", \"markdown\", \"ruby\", \"scss\", \"textile\"], n = {}, a = 0, i = t.length; a < i; a++) {\n    var r = t[a];\n    r = \"string\" == typeof r ? {\n      filter: r,\n      language: r\n    } : r, e.languages[r.language] && (n[\"filter-\" + r.filter] = {\n      pattern: RegExp(\"((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ]+.+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+\".replace(\"{{filter_name}}\", r.filter)),\n      lookbehind: !0,\n      inside: {\n        \"filter-name\": {\n          pattern: /^:[\\w-]+/,\n          alias: \"variable\"\n        },\n        rest: e.languages[r.language]\n      }\n    });\n  }\n\n  e.languages.insertBefore(\"haml\", \"filter\", n);\n}(Prism), function (e) {\n  var t = \"(?:[\\\\w-]+|'[^'\\n\\r]*'|\\\"(?:\\\\.|[^\\\\\\\\\\\"\\r\\n])*\\\")\";\n  e.languages.toml = {\n    comment: {\n      pattern: /#.*/,\n      greedy: !0\n    },\n    table: {\n      pattern: RegExp(\"(\\\\[\\\\s*)\" + t + \"(?:\\\\s*\\\\.\\\\s*\" + t + \")*(?=\\\\s*\\\\])\"),\n      lookbehind: !0,\n      greedy: !0,\n      alias: \"class-name\"\n    },\n    key: {\n      pattern: RegExp(\"(^\\\\s*|[{,]\\\\s*)\" + t + \"(?:\\\\s*\\\\.\\\\s*\" + t + \")*(?=\\\\s*=)\", \"m\"),\n      lookbehind: !0,\n      greedy: !0,\n      alias: \"property\"\n    },\n    string: {\n      pattern: /\"\"\"(?:\\\\[\\s\\S]|[^\\\\])*?\"\"\"|'''[\\s\\S]*?'''|'[^'\\n\\r]*'|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n      greedy: !0\n    },\n    date: [{\n      pattern: /\\d{4}-\\d{2}-\\d{2}(?:[T\\s]\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|[+-]\\d{2}:\\d{2})?)?/i,\n      alias: \"number\"\n    }, {\n      pattern: /\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?/i,\n      alias: \"number\"\n    }],\n    number: /(?:\\b0(?:x[\\da-zA-Z]+(?:_[\\da-zA-Z]+)*|o[0-7]+(?:_[0-7]+)*|b[10]+(?:_[10]+)*))\\b|[-+]?\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?\\b|[-+]?(?:inf|nan)\\b/,\n    boolean: /\\b(?:true|false)\\b/,\n    punctuation: /[.,=[\\]{}]/\n  };\n}(Prism), function (e) {\n  e.languages.tt2 = e.languages.extend(\"clike\", {\n    comment: {\n      pattern: /#.*|\\[%#[\\s\\S]*?%\\]/,\n      lookbehind: !0\n    },\n    keyword: /\\b(?:BLOCK|CALL|CASE|CATCH|CLEAR|DEBUG|DEFAULT|ELSE|ELSIF|END|FILTER|FINAL|FOREACH|GET|IF|IN|INCLUDE|INSERT|LAST|MACRO|META|NEXT|PERL|PROCESS|RAWPERL|RETURN|SET|STOP|TAGS|THROW|TRY|SWITCH|UNLESS|USE|WHILE|WRAPPER)\\b/,\n    punctuation: /[[\\]{},()]/\n  }), e.languages.insertBefore(\"tt2\", \"number\", {\n    operator: /=[>=]?|!=?|<=?|>=?|&&|\\|\\|?|\\b(?:and|or|not)\\b/,\n    variable: {\n      pattern: /[a-z]\\w*(?:\\s*\\.\\s*(?:\\d+|\\$?[a-z]\\w*))*/i\n    }\n  }), e.languages.insertBefore(\"tt2\", \"keyword\", {\n    delimiter: {\n      pattern: /^(?:\\[%|%%)-?|-?%]$/,\n      alias: \"punctuation\"\n    }\n  }), e.languages.insertBefore(\"tt2\", \"string\", {\n    \"single-quoted-string\": {\n      pattern: /'[^\\\\']*(?:\\\\[\\s\\S][^\\\\']*)*'/,\n      greedy: !0,\n      alias: \"string\"\n    },\n    \"double-quoted-string\": {\n      pattern: /\"[^\\\\\"]*(?:\\\\[\\s\\S][^\\\\\"]*)*\"/,\n      greedy: !0,\n      alias: \"string\",\n      inside: {\n        variable: {\n          pattern: /\\$(?:[a-z]\\w*(?:\\.(?:\\d+|\\$?[a-z]\\w*))*)/i\n        }\n      }\n    }\n  }), delete e.languages.tt2.string, e.hooks.add(\"before-tokenize\", function (t) {\n    e.languages[\"markup-templating\"].buildPlaceholders(t, \"tt2\", /\\[%[\\s\\S]+?%\\]/g);\n  }), e.hooks.add(\"after-tokenize\", function (t) {\n    e.languages[\"markup-templating\"].tokenizePlaceholders(t, \"tt2\");\n  });\n}(Prism), function (e) {\n  e.languages.pug = {\n    comment: {\n      pattern: /(^([\\t ]*))\\/\\/.*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/m,\n      lookbehind: !0\n    },\n    \"multiline-script\": {\n      pattern: /(^([\\t ]*)script\\b.*\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,\n      lookbehind: !0,\n      inside: {\n        rest: e.languages.javascript\n      }\n    },\n    filter: {\n      pattern: /(^([\\t ]*)):.+(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,\n      lookbehind: !0,\n      inside: {\n        \"filter-name\": {\n          pattern: /^:[\\w-]+/,\n          alias: \"variable\"\n        }\n      }\n    },\n    \"multiline-plain-text\": {\n      pattern: /(^([\\t ]*)[\\w\\-#.]+\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,\n      lookbehind: !0\n    },\n    markup: {\n      pattern: /(^[\\t ]*)<.+/m,\n      lookbehind: !0,\n      inside: {\n        rest: e.languages.markup\n      }\n    },\n    doctype: {\n      pattern: /((?:^|\\n)[\\t ]*)doctype(?: .+)?/,\n      lookbehind: !0\n    },\n    \"flow-control\": {\n      pattern: /(^[\\t ]*)(?:if|unless|else|case|when|default|each|while)\\b(?: .+)?/m,\n      lookbehind: !0,\n      inside: {\n        each: {\n          pattern: /^each .+? in\\b/,\n          inside: {\n            keyword: /\\b(?:each|in)\\b/,\n            punctuation: /,/\n          }\n        },\n        branch: {\n          pattern: /^(?:if|unless|else|case|when|default|while)\\b/,\n          alias: \"keyword\"\n        },\n        rest: e.languages.javascript\n      }\n    },\n    keyword: {\n      pattern: /(^[\\t ]*)(?:block|extends|include|append|prepend)\\b.+/m,\n      lookbehind: !0\n    },\n    mixin: [{\n      pattern: /(^[\\t ]*)mixin .+/m,\n      lookbehind: !0,\n      inside: {\n        keyword: /^mixin/,\n        function: /\\w+(?=\\s*\\(|\\s*$)/,\n        punctuation: /[(),.]/\n      }\n    }, {\n      pattern: /(^[\\t ]*)\\+.+/m,\n      lookbehind: !0,\n      inside: {\n        name: {\n          pattern: /^\\+\\w+/,\n          alias: \"function\"\n        },\n        rest: e.languages.javascript\n      }\n    }],\n    script: {\n      pattern: /(^[\\t ]*script(?:(?:&[^(]+)?\\([^)]+\\))*[\\t ]+).+/m,\n      lookbehind: !0,\n      inside: {\n        rest: e.languages.javascript\n      }\n    },\n    \"plain-text\": {\n      pattern: /(^[\\t ]*(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?[\\t ]+).+/m,\n      lookbehind: !0\n    },\n    tag: {\n      pattern: /(^[\\t ]*)(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?:?/m,\n      lookbehind: !0,\n      inside: {\n        attributes: [{\n          pattern: /&[^(]+\\([^)]+\\)/,\n          inside: {\n            rest: e.languages.javascript\n          }\n        }, {\n          pattern: /\\([^)]+\\)/,\n          inside: {\n            \"attr-value\": {\n              pattern: /(=\\s*)(?:\\{[^}]*\\}|[^,)\\r\\n]+)/,\n              lookbehind: !0,\n              inside: {\n                rest: e.languages.javascript\n              }\n            },\n            \"attr-name\": /[\\w-]+(?=\\s*!?=|\\s*[,)])/,\n            punctuation: /[!=(),]+/\n          }\n        }],\n        punctuation: /:/\n      }\n    },\n    code: [{\n      pattern: /(^[\\t ]*(?:-|!?=)).+/m,\n      lookbehind: !0,\n      inside: {\n        rest: e.languages.javascript\n      }\n    }],\n    punctuation: /[.\\-!=|]+/\n  };\n\n  for (var t = /(^([\\t ]*)):{{filter_name}}(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/.source, n = [{\n    filter: \"atpl\",\n    language: \"twig\"\n  }, {\n    filter: \"coffee\",\n    language: \"coffeescript\"\n  }, \"ejs\", \"handlebars\", \"less\", \"livescript\", \"markdown\", {\n    filter: \"sass\",\n    language: \"scss\"\n  }, \"stylus\"], a = {}, i = 0, r = n.length; i < r; i++) {\n    var o = n[i];\n    o = \"string\" == typeof o ? {\n      filter: o,\n      language: o\n    } : o, e.languages[o.language] && (a[\"filter-\" + o.filter] = {\n      pattern: RegExp(t.replace(\"{{filter_name}}\", o.filter), \"m\"),\n      lookbehind: !0,\n      inside: {\n        \"filter-name\": {\n          pattern: /^:[\\w-]+/,\n          alias: \"variable\"\n        },\n        rest: e.languages[o.language]\n      }\n    });\n  }\n\n  e.languages.insertBefore(\"pug\", \"filter\", a);\n}(Prism);\nvar typescript = Prism.util.clone(Prism.languages.typescript);\nPrism.languages.tsx = Prism.languages.extend(\"jsx\", typescript), function (e) {\n  function t(e, t, n) {\n    return {\n      pattern: RegExp(\"<#\" + e + \"[\\\\s\\\\S]*?#>\"),\n      alias: \"block\",\n      inside: {\n        delimiter: {\n          pattern: RegExp(\"^<#\" + e + \"|#>$\"),\n          alias: \"important\"\n        },\n        content: {\n          pattern: /[\\s\\S]+/,\n          inside: t,\n          alias: n\n        }\n      }\n    };\n  }\n\n  e.languages[\"t4-templating\"] = Object.defineProperty({}, \"createT4\", {\n    value: function (n) {\n      var a = e.languages[n],\n          i = \"language-\" + n;\n      return {\n        block: {\n          pattern: /<#[\\s\\S]+?#>/,\n          inside: {\n            directive: t(\"@\", {\n              \"attr-value\": {\n                pattern: /=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/,\n                inside: {\n                  punctuation: /^=|^[\"']|[\"']$/\n                }\n              },\n              keyword: /\\w+(?=\\s)/,\n              \"attr-name\": /\\w+/\n            }),\n            expression: t(\"=\", a, i),\n            \"class-feature\": t(\"\\\\+\", a, i),\n            standard: t(\"\", a, i)\n          }\n        }\n      };\n    }\n  });\n}(Prism), Prism.languages[\"visual-basic\"] = {\n  comment: {\n    pattern: /(?:['‘’]|REM\\b).*/i,\n    inside: {\n      keyword: /^REM/i\n    }\n  },\n  directive: {\n    pattern: /#(?:Const|Else|ElseIf|End|ExternalChecksum|ExternalSource|If|Region)(?:[^\\S\\r\\n]_[^\\S\\r\\n]*(?:\\r\\n?|\\n)|.)+/i,\n    alias: \"comment\",\n    greedy: !0\n  },\n  string: {\n    pattern: /[\"“”](?:[\"“”]{2}|[^\"“”])*[\"“”]C?/i,\n    greedy: !0\n  },\n  date: {\n    pattern: /#[^\\S\\r\\n]*(?:\\d+([/-])\\d+\\1\\d+(?:[^\\S\\r\\n]+(?:\\d+[^\\S\\r\\n]*(?:AM|PM)|\\d+:\\d+(?::\\d+)?(?:[^\\S\\r\\n]*(?:AM|PM))?))?|(?:\\d+[^\\S\\r\\n]*(?:AM|PM)|\\d+:\\d+(?::\\d+)?(?:[^\\S\\r\\n]*(?:AM|PM))?))[^\\S\\r\\n]*#/i,\n    alias: \"builtin\"\n  },\n  number: /(?:(?:\\b\\d+(?:\\.\\d+)?|\\.\\d+)(?:E[+-]?\\d+)?|&[HO][\\dA-F]+)(?:U?[ILS]|[FRD])?/i,\n  boolean: /\\b(?:True|False|Nothing)\\b/i,\n  keyword: /\\b(?:AddHandler|AddressOf|Alias|And(?:Also)?|As|Boolean|ByRef|Byte|ByVal|Call|Case|Catch|C(?:Bool|Byte|Char|Date|Dbl|Dec|Int|Lng|Obj|SByte|Short|Sng|Str|Type|UInt|ULng|UShort)|Char|Class|Const|Continue|Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Do|Double|Each|Else(?:If)?|End(?:If)?|Enum|Erase|Error|Event|Exit|Finally|For|Friend|Function|Get(?:Type|XMLNamespace)?|Global|GoSub|GoTo|Handles|If|Implements|Imports|In|Inherits|Integer|Interface|Is|IsNot|Let|Lib|Like|Long|Loop|Me|Mod|Module|Must(?:Inherit|Override)|My(?:Base|Class)|Namespace|Narrowing|New|Next|Not(?:Inheritable|Overridable)?|Object|Of|On|Operator|Option(?:al)?|Or(?:Else)?|Out|Overloads|Overridable|Overrides|ParamArray|Partial|Private|Property|Protected|Public|RaiseEvent|ReadOnly|ReDim|RemoveHandler|Resume|Return|SByte|Select|Set|Shadows|Shared|short|Single|Static|Step|Stop|String|Structure|Sub|SyncLock|Then|Throw|To|Try|TryCast|TypeOf|U(?:Integer|Long|Short)|Using|Variant|Wend|When|While|Widening|With(?:Events)?|WriteOnly|Xor)\\b/i,\n  operator: [/[+\\-*/\\\\^<=>&#@$%!]/, {\n    pattern: /([^\\S\\r\\n])_(?=[^\\S\\r\\n]*[\\r\\n])/,\n    lookbehind: !0\n  }],\n  punctuation: /[{}().,:?]/\n}, Prism.languages.vb = Prism.languages[\"visual-basic\"], Prism.languages.t4 = Prism.languages[\"t4-cs\"] = Prism.languages[\"t4-templating\"].createT4(\"csharp\"), function (e) {\n  var t = {\n    pattern: /\\\\[\\\\(){}[\\]^$+*?|.]/,\n    alias: \"escape\"\n  },\n      n = /\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|c[a-zA-Z]|0[0-7]{0,2}|[123][0-7]{2}|.)/,\n      a = /\\\\[wsd]|\\.|\\\\p{[^{}]+}/i,\n      i = \"(?:[^\\\\\\\\-]|\" + n.source + \")\",\n      r = RegExp(i + \"-\" + i),\n      o = {\n    pattern: /(<|')[^<>']+(?=[>']$)/,\n    lookbehind: !0,\n    alias: \"variable\"\n  },\n      s = [/\\\\(?![123][0-7]{2})[1-9]/, {\n    pattern: /\\\\k<[^<>']+>/,\n    inside: {\n      \"group-name\": o\n    }\n  }];\n  e.languages.regex = {\n    charset: {\n      pattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,\n      lookbehind: !0,\n      inside: {\n        \"charset-negation\": {\n          pattern: /(^\\[)\\^/,\n          lookbehind: !0\n        },\n        \"charset-punctuation\": /^\\[|\\]$/,\n        range: {\n          pattern: r,\n          inside: {\n            escape: n,\n            \"range-punctuation\": /-/\n          }\n        },\n        \"special-escape\": t,\n        charclass: a,\n        backreference: s,\n        escape: n\n      }\n    },\n    \"special-escape\": t,\n    charclass: a,\n    backreference: s,\n    anchor: /[$^]|\\\\[ABbGZz]/,\n    escape: n,\n    group: [{\n      pattern: /\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,\n      inside: {\n        \"group-name\": o\n      }\n    }, /\\)/],\n    quantifier: /[+*?]|\\{(?:\\d+,?\\d*)\\}/,\n    alternation: /\\|/\n  }, [\"actionscript\", \"coffescript\", \"flow\", \"javascript\", \"typescript\", \"vala\"].forEach(function (t) {\n    var n = e.languages[t];\n    n && (n.regex.inside = {\n      \"regex-flags\": /[a-z]+$/,\n      \"regex-delimiter\": /^\\/|\\/$/,\n      \"language-regex\": {\n        pattern: /[\\s\\S]+/,\n        inside: e.languages.regex\n      }\n    });\n  });\n}(Prism), Prism.languages.vbnet = Prism.languages.extend(\"basic\", {\n  keyword: /(?:\\b(?:ADDHANDLER|ADDRESSOF|ALIAS|AND|ANDALSO|AS|BEEP|BLOAD|BOOLEAN|BSAVE|BYREF|BYTE|BYVAL|CALL(?: ABSOLUTE)?|CASE|CATCH|CBOOL|CBYTE|CCHAR|CDATE|CDEC|CDBL|CHAIN|CHAR|CHDIR|CINT|CLASS|CLEAR|CLNG|CLOSE|CLS|COBJ|COM|COMMON|CONST|CONTINUE|CSBYTE|CSHORT|CSNG|CSTR|CTYPE|CUINT|CULNG|CUSHORT|DATA|DATE|DECIMAL|DECLARE|DEFAULT|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DELEGATE|DIM|DIRECTCAST|DO|DOUBLE|ELSE|ELSEIF|END|ENUM|ENVIRON|ERASE|ERROR|EVENT|EXIT|FALSE|FIELD|FILES|FINALLY|FOR(?: EACH)?|FRIEND|FUNCTION|GET|GETTYPE|GETXMLNAMESPACE|GLOBAL|GOSUB|GOTO|HANDLES|IF|IMPLEMENTS|IMPORTS|IN|INHERITS|INPUT|INTEGER|INTERFACE|IOCTL|IS|ISNOT|KEY|KILL|LINE INPUT|LET|LIB|LIKE|LOCATE|LOCK|LONG|LOOP|LSET|ME|MKDIR|MOD|MODULE|MUSTINHERIT|MUSTOVERRIDE|MYBASE|MYCLASS|NAME|NAMESPACE|NARROWING|NEW|NEXT|NOT|NOTHING|NOTINHERITABLE|NOTOVERRIDABLE|OBJECT|OF|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPERATOR|OPEN|OPTION(?: BASE)?|OPTIONAL|OR|ORELSE|OUT|OVERLOADS|OVERRIDABLE|OVERRIDES|PARAMARRAY|PARTIAL|POKE|PRIVATE|PROPERTY|PROTECTED|PUBLIC|PUT|RAISEEVENT|READ|READONLY|REDIM|REM|REMOVEHANDLER|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SBYTE|SELECT(?: CASE)?|SET|SHADOWS|SHARED|SHORT|SINGLE|SHELL|SLEEP|STATIC|STEP|STOP|STRING|STRUCTURE|SUB|SYNCLOCK|SWAP|SYSTEM|THEN|THROW|TIMER|TO|TROFF|TRON|TRUE|TRY|TRYCAST|TYPE|TYPEOF|UINTEGER|ULONG|UNLOCK|UNTIL|USHORT|USING|VIEW PRINT|WAIT|WEND|WHEN|WHILE|WIDENING|WITH|WITHEVENTS|WRITE|WRITEONLY|XOR)|\\B(?:#CONST|#ELSE|#ELSEIF|#END|#IF))(?:\\$|\\b)/i,\n  comment: [{\n    pattern: /(?:!|REM\\b).+/i,\n    inside: {\n      keyword: /^REM/i\n    }\n  }, {\n    pattern: /(^|[^\\\\:])'.*/,\n    lookbehind: !0\n  }]\n}), function (e) {\n  e.languages.velocity = e.languages.extend(\"markup\", {});\n  var t = {\n    variable: {\n      pattern: /(^|[^\\\\](?:\\\\\\\\)*)\\$!?(?:[a-z][\\w-]*(?:\\([^)]*\\))?(?:\\.[a-z][\\w-]*(?:\\([^)]*\\))?|\\[[^\\]]+])*|{[^}]+})/i,\n      lookbehind: !0,\n      inside: {}\n    },\n    string: {\n      pattern: /\"[^\"]*\"|'[^']*'/,\n      greedy: !0\n    },\n    number: /\\b\\d+\\b/,\n    boolean: /\\b(?:true|false)\\b/,\n    operator: /[=!<>]=?|[+*/%-]|&&|\\|\\||\\.\\.|\\b(?:eq|g[et]|l[et]|n(?:e|ot))\\b/,\n    punctuation: /[(){}[\\]:,.]/\n  };\n  t.variable.inside = {\n    string: t.string,\n    function: {\n      pattern: /([^\\w-])[a-z][\\w-]*(?=\\()/,\n      lookbehind: !0\n    },\n    number: t.number,\n    boolean: t.boolean,\n    punctuation: t.punctuation\n  }, e.languages.insertBefore(\"velocity\", \"comment\", {\n    unparsed: {\n      pattern: /(^|[^\\\\])#\\[\\[[\\s\\S]*?]]#/,\n      lookbehind: !0,\n      greedy: !0,\n      inside: {\n        punctuation: /^#\\[\\[|]]#$/\n      }\n    },\n    \"velocity-comment\": [{\n      pattern: /(^|[^\\\\])#\\*[\\s\\S]*?\\*#/,\n      lookbehind: !0,\n      greedy: !0,\n      alias: \"comment\"\n    }, {\n      pattern: /(^|[^\\\\])##.*/,\n      lookbehind: !0,\n      greedy: !0,\n      alias: \"comment\"\n    }],\n    directive: {\n      pattern: /(^|[^\\\\](?:\\\\\\\\)*)#@?(?:[a-z][\\w-]*|{[a-z][\\w-]*})(?:\\s*\\((?:[^()]|\\([^()]*\\))*\\))?/i,\n      lookbehind: !0,\n      inside: {\n        keyword: {\n          pattern: /^#@?(?:[a-z][\\w-]*|{[a-z][\\w-]*})|\\bin\\b/,\n          inside: {\n            punctuation: /[{}]/\n          }\n        },\n        rest: t\n      }\n    },\n    variable: t.variable\n  }), e.languages.velocity.tag.inside[\"attr-value\"].inside.rest = e.languages.velocity;\n}(Prism), Prism.languages.verilog = {\n  comment: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n  string: {\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n    greedy: !0\n  },\n  property: /\\B\\$\\w+\\b/,\n  constant: /\\B`\\w+\\b/,\n  function: /\\w+(?=\\()/,\n  keyword: /\\b(?:alias|and|assert|assign|assume|automatic|before|begin|bind|bins|binsof|bit|break|buf|bufif0|bufif1|byte|class|case|casex|casez|cell|chandle|clocking|cmos|config|const|constraint|context|continue|cover|covergroup|coverpoint|cross|deassign|default|defparam|design|disable|dist|do|edge|else|end|endcase|endclass|endclocking|endconfig|endfunction|endgenerate|endgroup|endinterface|endmodule|endpackage|endprimitive|endprogram|endproperty|endspecify|endsequence|endtable|endtask|enum|event|expect|export|extends|extern|final|first_match|for|force|foreach|forever|fork|forkjoin|function|generate|genvar|highz0|highz1|if|iff|ifnone|ignore_bins|illegal_bins|import|incdir|include|initial|inout|input|inside|instance|int|integer|interface|intersect|join|join_any|join_none|large|liblist|library|local|localparam|logic|longint|macromodule|matches|medium|modport|module|nand|negedge|new|nmos|nor|noshowcancelled|not|notif0|notif1|null|or|output|package|packed|parameter|pmos|posedge|primitive|priority|program|property|protected|pull0|pull1|pulldown|pullup|pulsestyle_onevent|pulsestyle_ondetect|pure|rand|randc|randcase|randsequence|rcmos|real|realtime|ref|reg|release|repeat|return|rnmos|rpmos|rtran|rtranif0|rtranif1|scalared|sequence|shortint|shortreal|showcancelled|signed|small|solve|specify|specparam|static|string|strong0|strong1|struct|super|supply0|supply1|table|tagged|task|this|throughout|time|timeprecision|timeunit|tran|tranif0|tranif1|tri|tri0|tri1|triand|trior|trireg|type|typedef|union|unique|unsigned|use|uwire|var|vectored|virtual|void|wait|wait_order|wand|weak0|weak1|while|wildcard|wire|with|within|wor|xnor|xor)\\b/,\n  important: /\\b(?:always_latch|always_comb|always_ff|always)\\b ?@?/,\n  number: /\\B##?\\d+|(?:\\b\\d+)?'[odbh] ?[\\da-fzx_?]+|\\b\\d*[._]?\\d+(?:e[-+]?\\d+)?/i,\n  operator: /[-+{}^~%*\\/?=!<>&|]+/,\n  punctuation: /[[\\];(),.:]/\n}, Prism.languages.vhdl = {\n  comment: /--.+/,\n  \"vhdl-vectors\": {\n    pattern: /\\b[oxb]\"[\\da-f_]+\"|\"[01uxzwlh-]+\"/i,\n    alias: \"number\"\n  },\n  \"quoted-function\": {\n    pattern: /\"\\S+?\"(?=\\()/,\n    alias: \"function\"\n  },\n  string: /\"(?:[^\\\\\"\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"/,\n  constant: /\\b(?:use|library)\\b/i,\n  keyword: /\\b(?:'active|'ascending|'base|'delayed|'driving|'driving_value|'event|'high|'image|'instance_name|'last_active|'last_event|'last_value|'left|'leftof|'length|'low|'path_name|'pos|'pred|'quiet|'range|'reverse_range|'right|'rightof|'simple_name|'stable|'succ|'transaction|'val|'value|access|after|alias|all|architecture|array|assert|attribute|begin|block|body|buffer|bus|case|component|configuration|constant|disconnect|downto|else|elsif|end|entity|exit|file|for|function|generate|generic|group|guarded|if|impure|in|inertial|inout|is|label|library|linkage|literal|loop|map|new|next|null|of|on|open|others|out|package|port|postponed|procedure|process|pure|range|record|register|reject|report|return|select|severity|shared|signal|subtype|then|to|transport|type|unaffected|units|until|use|variable|wait|when|while|with)\\b/i,\n  boolean: /\\b(?:true|false)\\b/i,\n  function: /\\w+(?=\\()/,\n  number: /'[01uxzwlh-]'|\\b(?:\\d+#[\\da-f_.]+#|\\d[\\d_.]*)(?:e[-+]?\\d+)?/i,\n  operator: /[<>]=?|:=|[-+*/&=]|\\b(?:abs|not|mod|rem|sll|srl|sla|sra|rol|ror|and|or|nand|xnor|xor|nor)\\b/i,\n  punctuation: /[{}[\\];(),.:]/\n}, Prism.languages.vim = {\n  string: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\r\\n]|'')*'/,\n  comment: /\".*/,\n  function: /\\w+(?=\\()/,\n  keyword: /\\b(?:ab|abbreviate|abc|abclear|abo|aboveleft|al|all|arga|argadd|argd|argdelete|argdo|arge|argedit|argg|argglobal|argl|arglocal|ar|args|argu|argument|as|ascii|bad|badd|ba|ball|bd|bdelete|be|bel|belowright|bf|bfirst|bl|blast|bm|bmodified|bn|bnext|bN|bNext|bo|botright|bp|bprevious|brea|break|breaka|breakadd|breakd|breakdel|breakl|breaklist|br|brewind|bro|browse|bufdo|b|buffer|buffers|bun|bunload|bw|bwipeout|ca|cabbrev|cabc|cabclear|caddb|caddbuffer|cad|caddexpr|caddf|caddfile|cal|call|cat|catch|cb|cbuffer|cc|ccl|cclose|cd|ce|center|cex|cexpr|cf|cfile|cfir|cfirst|cgetb|cgetbuffer|cgete|cgetexpr|cg|cgetfile|c|change|changes|chd|chdir|che|checkpath|checkt|checktime|cla|clast|cl|clist|clo|close|cmapc|cmapclear|cnew|cnewer|cn|cnext|cN|cNext|cnf|cnfile|cNfcNfile|cnorea|cnoreabbrev|col|colder|colo|colorscheme|comc|comclear|comp|compiler|conf|confirm|con|continue|cope|copen|co|copy|cpf|cpfile|cp|cprevious|cq|cquit|cr|crewind|cuna|cunabbrev|cu|cunmap|cw|cwindow|debugg|debuggreedy|delc|delcommand|d|delete|delf|delfunction|delm|delmarks|diffg|diffget|diffoff|diffpatch|diffpu|diffput|diffsplit|diffthis|diffu|diffupdate|dig|digraphs|di|display|dj|djump|dl|dlist|dr|drop|ds|dsearch|dsp|dsplit|earlier|echoe|echoerr|echom|echomsg|echon|e|edit|el|else|elsei|elseif|em|emenu|endfo|endfor|endf|endfunction|endfun|en|endif|endt|endtry|endw|endwhile|ene|enew|ex|exi|exit|exu|exusage|f|file|files|filetype|fina|finally|fin|find|fini|finish|fir|first|fix|fixdel|fo|fold|foldc|foldclose|folddoc|folddoclosed|foldd|folddoopen|foldo|foldopen|for|fu|fun|function|go|goto|gr|grep|grepa|grepadd|ha|hardcopy|h|help|helpf|helpfind|helpg|helpgrep|helpt|helptags|hid|hide|his|history|ia|iabbrev|iabc|iabclear|if|ij|ijump|il|ilist|imapc|imapclear|in|inorea|inoreabbrev|isearch|isp|isplit|iuna|iunabbrev|iu|iunmap|j|join|ju|jumps|k|keepalt|keepj|keepjumps|kee|keepmarks|laddb|laddbuffer|lad|laddexpr|laddf|laddfile|lan|language|la|last|later|lb|lbuffer|lc|lcd|lch|lchdir|lcl|lclose|let|left|lefta|leftabove|lex|lexpr|lf|lfile|lfir|lfirst|lgetb|lgetbuffer|lgete|lgetexpr|lg|lgetfile|lgr|lgrep|lgrepa|lgrepadd|lh|lhelpgrep|l|list|ll|lla|llast|lli|llist|lmak|lmake|lm|lmap|lmapc|lmapclear|lnew|lnewer|lne|lnext|lN|lNext|lnf|lnfile|lNf|lNfile|ln|lnoremap|lo|loadview|loc|lockmarks|lockv|lockvar|lol|lolder|lop|lopen|lpf|lpfile|lp|lprevious|lr|lrewind|ls|lt|ltag|lu|lunmap|lv|lvimgrep|lvimgrepa|lvimgrepadd|lw|lwindow|mak|make|ma|mark|marks|mat|match|menut|menutranslate|mk|mkexrc|mks|mksession|mksp|mkspell|mkvie|mkview|mkv|mkvimrc|mod|mode|m|move|mzf|mzfile|mz|mzscheme|nbkey|new|n|next|N|Next|nmapc|nmapclear|noh|nohlsearch|norea|noreabbrev|nu|number|nun|nunmap|omapc|omapclear|on|only|o|open|opt|options|ou|ounmap|pc|pclose|ped|pedit|pe|perl|perld|perldo|po|pop|popu|popup|pp|ppop|pre|preserve|prev|previous|p|print|P|Print|profd|profdel|prof|profile|promptf|promptfind|promptr|promptrepl|ps|psearch|pta|ptag|ptf|ptfirst|ptj|ptjump|ptl|ptlast|ptn|ptnext|ptN|ptNext|ptp|ptprevious|ptr|ptrewind|pts|ptselect|pu|put|pw|pwd|pyf|pyfile|py|python|qa|qall|q|quit|quita|quitall|r|read|rec|recover|redi|redir|red|redo|redr|redraw|redraws|redrawstatus|reg|registers|res|resize|ret|retab|retu|return|rew|rewind|ri|right|rightb|rightbelow|rub|ruby|rubyd|rubydo|rubyf|rubyfile|ru|runtime|rv|rviminfo|sal|sall|san|sandbox|sa|sargument|sav|saveas|sba|sball|sbf|sbfirst|sbl|sblast|sbm|sbmodified|sbn|sbnext|sbN|sbNext|sbp|sbprevious|sbr|sbrewind|sb|sbuffer|scripte|scriptencoding|scrip|scriptnames|se|set|setf|setfiletype|setg|setglobal|setl|setlocal|sf|sfind|sfir|sfirst|sh|shell|sign|sil|silent|sim|simalt|sla|slast|sl|sleep|sm|smagic|sm|smap|smapc|smapclear|sme|smenu|sn|snext|sN|sNext|sni|sniff|sno|snomagic|snor|snoremap|snoreme|snoremenu|sor|sort|so|source|spelld|spelldump|spe|spellgood|spelli|spellinfo|spellr|spellrepall|spellu|spellundo|spellw|spellwrong|sp|split|spr|sprevious|sre|srewind|sta|stag|startg|startgreplace|star|startinsert|startr|startreplace|stj|stjump|st|stop|stopi|stopinsert|sts|stselect|sun|sunhide|sunm|sunmap|sus|suspend|sv|sview|syncbind|t|tab|tabc|tabclose|tabd|tabdo|tabe|tabedit|tabf|tabfind|tabfir|tabfirst|tabl|tablast|tabm|tabmove|tabnew|tabn|tabnext|tabN|tabNext|tabo|tabonly|tabp|tabprevious|tabr|tabrewind|tabs|ta|tag|tags|tc|tcl|tcld|tcldo|tclf|tclfile|te|tearoff|tf|tfirst|th|throw|tj|tjump|tl|tlast|tm|tm|tmenu|tn|tnext|tN|tNext|to|topleft|tp|tprevious|tr|trewind|try|ts|tselect|tu|tu|tunmenu|una|unabbreviate|u|undo|undoj|undojoin|undol|undolist|unh|unhide|unlet|unlo|unlockvar|unm|unmap|up|update|verb|verbose|ve|version|vert|vertical|vie|view|vim|vimgrep|vimgrepa|vimgrepadd|vi|visual|viu|viusage|vmapc|vmapclear|vne|vnew|vs|vsplit|vu|vunmap|wa|wall|wh|while|winc|wincmd|windo|winp|winpos|win|winsize|wn|wnext|wN|wNext|wp|wprevious|wq|wqa|wqall|w|write|ws|wsverb|wv|wviminfo|X|xa|xall|x|xit|xm|xmap|xmapc|xmapclear|xme|xmenu|XMLent|XMLns|xn|xnoremap|xnoreme|xnoremenu|xu|xunmap|y|yank)\\b/,\n  builtin: /\\b(?:autocmd|acd|ai|akm|aleph|allowrevins|altkeymap|ambiwidth|ambw|anti|antialias|arab|arabic|arabicshape|ari|arshape|autochdir|autoindent|autoread|autowrite|autowriteall|aw|awa|background|backspace|backup|backupcopy|backupdir|backupext|backupskip|balloondelay|ballooneval|balloonexpr|bdir|bdlay|beval|bex|bexpr|bg|bh|bin|binary|biosk|bioskey|bk|bkc|bomb|breakat|brk|browsedir|bs|bsdir|bsk|bt|bufhidden|buflisted|buftype|casemap|ccv|cdpath|cedit|cfu|ch|charconvert|ci|cin|cindent|cink|cinkeys|cino|cinoptions|cinw|cinwords|clipboard|cmdheight|cmdwinheight|cmp|cms|columns|com|comments|commentstring|compatible|complete|completefunc|completeopt|consk|conskey|copyindent|cot|cpo|cpoptions|cpt|cscopepathcomp|cscopeprg|cscopequickfix|cscopetag|cscopetagorder|cscopeverbose|cspc|csprg|csqf|cst|csto|csverb|cuc|cul|cursorcolumn|cursorline|cwh|debug|deco|def|define|delcombine|dex|dg|dict|dictionary|diff|diffexpr|diffopt|digraph|dip|dir|directory|dy|ea|ead|eadirection|eb|ed|edcompatible|ef|efm|ei|ek|enc|encoding|endofline|eol|ep|equalalways|equalprg|errorbells|errorfile|errorformat|esckeys|et|eventignore|expandtab|exrc|fcl|fcs|fdc|fde|fdi|fdl|fdls|fdm|fdn|fdo|fdt|fen|fenc|fencs|fex|ff|ffs|fileencoding|fileencodings|fileformat|fileformats|fillchars|fk|fkmap|flp|fml|fmr|foldcolumn|foldenable|foldexpr|foldignore|foldlevel|foldlevelstart|foldmarker|foldmethod|foldminlines|foldnestmax|foldtext|formatexpr|formatlistpat|formatoptions|formatprg|fp|fs|fsync|ft|gcr|gd|gdefault|gfm|gfn|gfs|gfw|ghr|gp|grepformat|grepprg|gtl|gtt|guicursor|guifont|guifontset|guifontwide|guiheadroom|guioptions|guipty|guitablabel|guitabtooltip|helpfile|helpheight|helplang|hf|hh|hi|hidden|highlight|hk|hkmap|hkmapp|hkp|hl|hlg|hls|hlsearch|ic|icon|iconstring|ignorecase|im|imactivatekey|imak|imc|imcmdline|imd|imdisable|imi|iminsert|ims|imsearch|inc|include|includeexpr|incsearch|inde|indentexpr|indentkeys|indk|inex|inf|infercase|insertmode|isf|isfname|isi|isident|isk|iskeyword|isprint|joinspaces|js|key|keymap|keymodel|keywordprg|km|kmp|kp|langmap|langmenu|laststatus|lazyredraw|lbr|lcs|linebreak|lines|linespace|lisp|lispwords|listchars|loadplugins|lpl|lsp|lz|macatsui|magic|makeef|makeprg|matchpairs|matchtime|maxcombine|maxfuncdepth|maxmapdepth|maxmem|maxmempattern|maxmemtot|mco|mef|menuitems|mfd|mh|mis|mkspellmem|ml|mls|mm|mmd|mmp|mmt|modeline|modelines|modifiable|modified|more|mouse|mousef|mousefocus|mousehide|mousem|mousemodel|mouses|mouseshape|mouset|mousetime|mp|mps|msm|mzq|mzquantum|nf|nrformats|numberwidth|nuw|odev|oft|ofu|omnifunc|opendevice|operatorfunc|opfunc|osfiletype|pa|para|paragraphs|paste|pastetoggle|patchexpr|patchmode|path|pdev|penc|pex|pexpr|pfn|ph|pheader|pi|pm|pmbcs|pmbfn|popt|preserveindent|previewheight|previewwindow|printdevice|printencoding|printexpr|printfont|printheader|printmbcharset|printmbfont|printoptions|prompt|pt|pumheight|pvh|pvw|qe|quoteescape|readonly|remap|report|restorescreen|revins|rightleft|rightleftcmd|rl|rlc|ro|rs|rtp|ruf|ruler|rulerformat|runtimepath|sbo|sc|scb|scr|scroll|scrollbind|scrolljump|scrolloff|scrollopt|scs|sect|sections|secure|sel|selection|selectmode|sessionoptions|sft|shcf|shellcmdflag|shellpipe|shellquote|shellredir|shellslash|shelltemp|shelltype|shellxquote|shiftround|shiftwidth|shm|shortmess|shortname|showbreak|showcmd|showfulltag|showmatch|showmode|showtabline|shq|si|sidescroll|sidescrolloff|siso|sj|slm|smartcase|smartindent|smarttab|smc|smd|softtabstop|sol|spc|spell|spellcapcheck|spellfile|spelllang|spellsuggest|spf|spl|splitbelow|splitright|sps|sr|srr|ss|ssl|ssop|stal|startofline|statusline|stl|stmp|su|sua|suffixes|suffixesadd|sw|swapfile|swapsync|swb|swf|switchbuf|sws|sxq|syn|synmaxcol|syntax|tabline|tabpagemax|tabstop|tagbsearch|taglength|tagrelative|tagstack|tal|tb|tbi|tbidi|tbis|tbs|tenc|term|termbidi|termencoding|terse|textauto|textmode|textwidth|tgst|thesaurus|tildeop|timeout|timeoutlen|title|titlelen|titleold|titlestring|toolbar|toolbariconsize|top|tpm|tsl|tsr|ttimeout|ttimeoutlen|ttm|tty|ttybuiltin|ttyfast|ttym|ttymouse|ttyscroll|ttytype|tw|tx|uc|ul|undolevels|updatecount|updatetime|ut|vb|vbs|vdir|verbosefile|vfile|viewdir|viewoptions|viminfo|virtualedit|visualbell|vop|wak|warn|wb|wc|wcm|wd|weirdinvert|wfh|wfw|whichwrap|wi|wig|wildchar|wildcharm|wildignore|wildmenu|wildmode|wildoptions|wim|winaltkeys|window|winfixheight|winfixwidth|winheight|winminheight|winminwidth|winwidth|wiv|wiw|wm|wmh|wmnu|wmw|wop|wrap|wrapmargin|wrapscan|writeany|writebackup|writedelay|ww|noacd|noai|noakm|noallowrevins|noaltkeymap|noanti|noantialias|noar|noarab|noarabic|noarabicshape|noari|noarshape|noautochdir|noautoindent|noautoread|noautowrite|noautowriteall|noaw|noawa|nobackup|noballooneval|nobeval|nobin|nobinary|nobiosk|nobioskey|nobk|nobl|nobomb|nobuflisted|nocf|noci|nocin|nocindent|nocompatible|noconfirm|noconsk|noconskey|nocopyindent|nocp|nocscopetag|nocscopeverbose|nocst|nocsverb|nocuc|nocul|nocursorcolumn|nocursorline|nodeco|nodelcombine|nodg|nodiff|nodigraph|nodisable|noea|noeb|noed|noedcompatible|noek|noendofline|noeol|noequalalways|noerrorbells|noesckeys|noet|noex|noexpandtab|noexrc|nofen|nofk|nofkmap|nofoldenable|nogd|nogdefault|noguipty|nohid|nohidden|nohk|nohkmap|nohkmapp|nohkp|nohls|noic|noicon|noignorecase|noim|noimc|noimcmdline|noimd|noincsearch|noinf|noinfercase|noinsertmode|nois|nojoinspaces|nojs|nolazyredraw|nolbr|nolinebreak|nolisp|nolist|noloadplugins|nolpl|nolz|noma|nomacatsui|nomagic|nomh|noml|nomod|nomodeline|nomodifiable|nomodified|nomore|nomousef|nomousefocus|nomousehide|nonu|nonumber|noodev|noopendevice|nopaste|nopi|nopreserveindent|nopreviewwindow|noprompt|nopvw|noreadonly|noremap|norestorescreen|norevins|nori|norightleft|norightleftcmd|norl|norlc|noro|nors|noru|noruler|nosb|nosc|noscb|noscrollbind|noscs|nosecure|nosft|noshellslash|noshelltemp|noshiftround|noshortname|noshowcmd|noshowfulltag|noshowmatch|noshowmode|nosi|nosm|nosmartcase|nosmartindent|nosmarttab|nosmd|nosn|nosol|nospell|nosplitbelow|nosplitright|nospr|nosr|nossl|nosta|nostartofline|nostmp|noswapfile|noswf|nota|notagbsearch|notagrelative|notagstack|notbi|notbidi|notbs|notermbidi|noterse|notextauto|notextmode|notf|notgst|notildeop|notimeout|notitle|noto|notop|notr|nottimeout|nottybuiltin|nottyfast|notx|novb|novisualbell|nowa|nowarn|nowb|noweirdinvert|nowfh|nowfw|nowildmenu|nowinfixheight|nowinfixwidth|nowiv|nowmnu|nowrap|nowrapscan|nowrite|nowriteany|nowritebackup|nows|invacd|invai|invakm|invallowrevins|invaltkeymap|invanti|invantialias|invar|invarab|invarabic|invarabicshape|invari|invarshape|invautochdir|invautoindent|invautoread|invautowrite|invautowriteall|invaw|invawa|invbackup|invballooneval|invbeval|invbin|invbinary|invbiosk|invbioskey|invbk|invbl|invbomb|invbuflisted|invcf|invci|invcin|invcindent|invcompatible|invconfirm|invconsk|invconskey|invcopyindent|invcp|invcscopetag|invcscopeverbose|invcst|invcsverb|invcuc|invcul|invcursorcolumn|invcursorline|invdeco|invdelcombine|invdg|invdiff|invdigraph|invdisable|invea|inveb|inved|invedcompatible|invek|invendofline|inveol|invequalalways|inverrorbells|invesckeys|invet|invex|invexpandtab|invexrc|invfen|invfk|invfkmap|invfoldenable|invgd|invgdefault|invguipty|invhid|invhidden|invhk|invhkmap|invhkmapp|invhkp|invhls|invhlsearch|invic|invicon|invignorecase|invim|invimc|invimcmdline|invimd|invincsearch|invinf|invinfercase|invinsertmode|invis|invjoinspaces|invjs|invlazyredraw|invlbr|invlinebreak|invlisp|invlist|invloadplugins|invlpl|invlz|invma|invmacatsui|invmagic|invmh|invml|invmod|invmodeline|invmodifiable|invmodified|invmore|invmousef|invmousefocus|invmousehide|invnu|invnumber|invodev|invopendevice|invpaste|invpi|invpreserveindent|invpreviewwindow|invprompt|invpvw|invreadonly|invremap|invrestorescreen|invrevins|invri|invrightleft|invrightleftcmd|invrl|invrlc|invro|invrs|invru|invruler|invsb|invsc|invscb|invscrollbind|invscs|invsecure|invsft|invshellslash|invshelltemp|invshiftround|invshortname|invshowcmd|invshowfulltag|invshowmatch|invshowmode|invsi|invsm|invsmartcase|invsmartindent|invsmarttab|invsmd|invsn|invsol|invspell|invsplitbelow|invsplitright|invspr|invsr|invssl|invsta|invstartofline|invstmp|invswapfile|invswf|invta|invtagbsearch|invtagrelative|invtagstack|invtbi|invtbidi|invtbs|invtermbidi|invterse|invtextauto|invtextmode|invtf|invtgst|invtildeop|invtimeout|invtitle|invto|invtop|invtr|invttimeout|invttybuiltin|invttyfast|invtx|invvb|invvisualbell|invwa|invwarn|invwb|invweirdinvert|invwfh|invwfw|invwildmenu|invwinfixheight|invwinfixwidth|invwiv|invwmnu|invwrap|invwrapscan|invwrite|invwriteany|invwritebackup|invws|t_AB|t_AF|t_al|t_AL|t_bc|t_cd|t_ce|t_Ce|t_cl|t_cm|t_Co|t_cs|t_Cs|t_CS|t_CV|t_da|t_db|t_dl|t_DL|t_EI|t_F1|t_F2|t_F3|t_F4|t_F5|t_F6|t_F7|t_F8|t_F9|t_fs|t_IE|t_IS|t_k1|t_K1|t_k2|t_k3|t_K3|t_k4|t_K4|t_k5|t_K5|t_k6|t_K6|t_k7|t_K7|t_k8|t_K8|t_k9|t_K9|t_KA|t_kb|t_kB|t_KB|t_KC|t_kd|t_kD|t_KD|t_ke|t_KE|t_KF|t_KG|t_kh|t_KH|t_kI|t_KI|t_KJ|t_KK|t_kl|t_KL|t_kN|t_kP|t_kr|t_ks|t_ku|t_le|t_mb|t_md|t_me|t_mr|t_ms|t_nd|t_op|t_RI|t_RV|t_Sb|t_se|t_Sf|t_SI|t_so|t_sr|t_te|t_ti|t_ts|t_ue|t_us|t_ut|t_vb|t_ve|t_vi|t_vs|t_WP|t_WS|t_xs|t_ZH|t_ZR)\\b/,\n  number: /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?)\\b/i,\n  operator: /\\|\\||&&|[-+.]=?|[=!](?:[=~][#?]?)?|[<>]=?[#?]?|[*\\/%?]|\\b(?:is(?:not)?)\\b/,\n  punctuation: /[{}[\\](),;:]/\n}, Prism.languages[\"t4-vb\"] = Prism.languages[\"t4-templating\"].createT4(\"visual-basic\"), Prism.languages.wasm = {\n  comment: [/\\(;[\\s\\S]*?;\\)/, {\n    pattern: /;;.*/,\n    greedy: !0\n  }],\n  string: {\n    pattern: /\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,\n    greedy: !0\n  },\n  keyword: [{\n    pattern: /\\b(?:align|offset)=/,\n    inside: {\n      operator: /=/\n    }\n  }, {\n    pattern: /\\b(?:(?:f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))?|memory\\.(?:grow|size))\\b/,\n    inside: {\n      punctuation: /\\./\n    }\n  }, /\\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\\b/],\n  variable: /\\$[\\w!#$%&'*+\\-./:<=>?@\\\\^_`|~]+/i,\n  number: /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/,\n  punctuation: /[()]/\n}, Prism.languages.wiki = Prism.languages.extend(\"markup\", {\n  \"block-comment\": {\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n    lookbehind: !0,\n    alias: \"comment\"\n  },\n  heading: {\n    pattern: /^(=+).+?\\1/m,\n    inside: {\n      punctuation: /^=+|=+$/,\n      important: /.+/\n    }\n  },\n  emphasis: {\n    pattern: /('{2,5}).+?\\1/,\n    inside: {\n      \"bold italic\": {\n        pattern: /(''''').+?(?=\\1)/,\n        lookbehind: !0\n      },\n      bold: {\n        pattern: /(''')[^'](?:.*?[^'])?(?=\\1)/,\n        lookbehind: !0\n      },\n      italic: {\n        pattern: /('')[^'](?:.*?[^'])?(?=\\1)/,\n        lookbehind: !0\n      },\n      punctuation: /^''+|''+$/\n    }\n  },\n  hr: {\n    pattern: /^-{4,}/m,\n    alias: \"punctuation\"\n  },\n  url: [/ISBN +(?:97[89][ -]?)?(?:\\d[ -]?){9}[\\dx]\\b|(?:RFC|PMID) +\\d+/i, /\\[\\[.+?\\]\\]|\\[.+?\\]/],\n  variable: [/__[A-Z]+__/, /\\{{3}.+?\\}{3}/, /\\{\\{.+?\\}\\}/],\n  symbol: [/^#redirect/im, /~{3,5}/],\n  \"table-tag\": {\n    pattern: /((?:^|[|!])[|!])[^|\\r\\n]+\\|(?!\\|)/m,\n    lookbehind: !0,\n    inside: {\n      \"table-bar\": {\n        pattern: /\\|$/,\n        alias: \"punctuation\"\n      },\n      rest: Prism.languages.markup.tag.inside\n    }\n  },\n  punctuation: /^(?:\\{\\||\\|\\}|\\|-|[*#:;!|])|\\|\\||!!/m\n}), Prism.languages.insertBefore(\"wiki\", \"tag\", {\n  nowiki: {\n    pattern: /<(nowiki|pre|source)\\b[\\s\\S]*?>[\\s\\S]*?<\\/\\1>/i,\n    inside: {\n      tag: {\n        pattern: /<(?:nowiki|pre|source)\\b[\\s\\S]*?>|<\\/(?:nowiki|pre|source)>/i,\n        inside: Prism.languages.markup.tag.inside\n      }\n    }\n  }\n}), function (e) {\n  e.languages.xeora = e.languages.extend(\"markup\", {\n    constant: {\n      pattern: /\\$(?:DomainContents|PageRenderDuration)\\$/,\n      inside: {\n        punctuation: {\n          pattern: /\\$/\n        }\n      }\n    },\n    variable: {\n      pattern: /\\$@?(?:#+|[-+*~=^])?[\\w.]+\\$/,\n      inside: {\n        punctuation: {\n          pattern: /[$.]/\n        },\n        operator: {\n          pattern: /#+|[-+*~=^@]/\n        }\n      }\n    },\n    \"function-inline\": {\n      pattern: /\\$F:[-\\w.]+\\?[-\\w.]+(?:,(?:\\|?(?:[-#.^+*~]*(?:[\\w+][^$]*)|=(?:[\\S+][^$]*)|@[-#]*(?:\\w+.)[\\w+.]+)?)*)?\\$/,\n      inside: {\n        variable: {\n          pattern: /(?:[,|])@?(?:#+|[-+*~=^])?[\\w.]+/,\n          inside: {\n            punctuation: {\n              pattern: /[,.|]/\n            },\n            operator: {\n              pattern: /#+|[-+*~=^@]/\n            }\n          }\n        },\n        punctuation: {\n          pattern: /\\$\\w:|[$:?.,|]/\n        }\n      },\n      alias: \"function\"\n    },\n    \"function-block\": {\n      pattern: /\\$XF:{[-\\w.]+\\?[-\\w.]+(?:,(?:\\|?(?:[-#.^+*~]*(?:[\\w+][^$]*)|=(?:[\\S+][^$]*)|@[-#]*(?:\\w+.)[\\w+.]+)?)*)?}:XF\\$/,\n      inside: {\n        punctuation: {\n          pattern: /[$:{}?.,|]/\n        }\n      },\n      alias: \"function\"\n    },\n    \"directive-inline\": {\n      pattern: /\\$\\w(?:#\\d+\\+?)?(?:\\[[-\\w.]+])?:[-\\/\\w.]+\\$/,\n      inside: {\n        punctuation: {\n          pattern: /\\$(?:\\w:|C(?:\\[|#\\d))?|[:{[\\]]/,\n          inside: {\n            tag: {\n              pattern: /#\\d/\n            }\n          }\n        }\n      },\n      alias: \"function\"\n    },\n    \"directive-block-open\": {\n      pattern: /\\$\\w+:{|\\$\\w(?:#\\d+\\+?)?(?:\\[[-\\w.]+])?:[-\\w.]+:{(![A-Z]+)?/,\n      inside: {\n        punctuation: {\n          pattern: /\\$(?:\\w:|C(?:\\[|#\\d))?|[:{[\\]]/,\n          inside: {\n            tag: {\n              pattern: /#\\d/\n            }\n          }\n        },\n        attribute: {\n          pattern: /![A-Z]+$/,\n          inside: {\n            punctuation: {\n              pattern: /!/\n            }\n          },\n          alias: \"keyword\"\n        }\n      },\n      alias: \"function\"\n    },\n    \"directive-block-separator\": {\n      pattern: /}:[-\\w.]+:{/,\n      inside: {\n        punctuation: {\n          pattern: /[:{}]/\n        }\n      },\n      alias: \"function\"\n    },\n    \"directive-block-close\": {\n      pattern: /}:[-\\w.]+\\$/,\n      inside: {\n        punctuation: {\n          pattern: /[:{}$]/\n        }\n      },\n      alias: \"function\"\n    }\n  }), e.languages.insertBefore(\"inside\", \"punctuation\", {\n    variable: e.languages.xeora[\"function-inline\"].inside.variable\n  }, e.languages.xeora[\"function-block\"]), e.languages.xeoracube = e.languages.xeora;\n}(Prism), Prism.languages.xojo = {\n  comment: {\n    pattern: /(?:'|\\/\\/|Rem\\b).+/i,\n    inside: {\n      keyword: /^Rem/i\n    }\n  },\n  string: {\n    pattern: /\"(?:\"\"|[^\"])*\"/,\n    greedy: !0\n  },\n  number: [/(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:E[+-]?\\d+)?/i, /&[bchou][a-z\\d]+/i],\n  symbol: /#(?:If|Else|ElseIf|Endif|Pragma)\\b/i,\n  keyword: /\\b(?:AddHandler|App|Array|As(?:signs)?|By(?:Ref|Val)|Break|Call|Case|Catch|Const|Continue|CurrentMethodName|Declare|Dim|Do(?:wnTo)?|Each|Else(?:If)?|End|Exit|Extends|False|Finally|For|Global|If|In|Lib|Loop|Me|Next|Nil|Optional|ParamArray|Raise(?:Event)?|ReDim|Rem|RemoveHandler|Return|Select|Self|Soft|Static|Step|Super|Then|To|True|Try|Ubound|Until|Using|Wend|While)\\b/i,\n  operator: /<[=>]?|>=?|[+\\-*\\/\\\\^=]|\\b(?:AddressOf|And|Ctype|IsA?|Mod|New|Not|Or|Xor|WeakAddressOf)\\b/i,\n  punctuation: /[.,;:()]/\n}, function (e) {\n  e.languages.xquery = e.languages.extend(\"markup\", {\n    \"xquery-comment\": {\n      pattern: /\\(:[\\s\\S]*?:\\)/,\n      greedy: !0,\n      alias: \"comment\"\n    },\n    string: {\n      pattern: /([\"'])(?:\\1\\1|(?!\\1)[\\s\\S])*\\1/,\n      greedy: !0\n    },\n    extension: {\n      pattern: /\\(#.+?#\\)/,\n      alias: \"symbol\"\n    },\n    variable: /\\$[\\w-:]+/,\n    axis: {\n      pattern: /(^|[^-])(?:ancestor(?:-or-self)?|attribute|child|descendant(?:-or-self)?|following(?:-sibling)?|parent|preceding(?:-sibling)?|self)(?=::)/,\n      lookbehind: !0,\n      alias: \"operator\"\n    },\n    \"keyword-operator\": {\n      pattern: /(^|[^:-])\\b(?:and|castable as|div|eq|except|ge|gt|idiv|instance of|intersect|is|le|lt|mod|ne|or|union)\\b(?=$|[^:-])/,\n      lookbehind: !0,\n      alias: \"operator\"\n    },\n    keyword: {\n      pattern: /(^|[^:-])\\b(?:as|ascending|at|base-uri|boundary-space|case|cast as|collation|construction|copy-namespaces|declare|default|descending|else|empty (?:greatest|least)|encoding|every|external|for|function|if|import|in|inherit|lax|let|map|module|namespace|no-inherit|no-preserve|option|order(?: by|ed|ing)?|preserve|return|satisfies|schema|some|stable|strict|strip|then|to|treat as|typeswitch|unordered|validate|variable|version|where|xquery)\\b(?=$|[^:-])/,\n      lookbehind: !0\n    },\n    function: /[\\w-]+(?::[\\w-]+)*(?=\\s*\\()/,\n    \"xquery-element\": {\n      pattern: /(element\\s+)[\\w-]+(?::[\\w-]+)*/,\n      lookbehind: !0,\n      alias: \"tag\"\n    },\n    \"xquery-attribute\": {\n      pattern: /(attribute\\s+)[\\w-]+(?::[\\w-]+)*/,\n      lookbehind: !0,\n      alias: \"attr-name\"\n    },\n    builtin: {\n      pattern: /(^|[^:-])\\b(?:attribute|comment|document|element|processing-instruction|text|xs:(?:anyAtomicType|anyType|anyURI|base64Binary|boolean|byte|date|dateTime|dayTimeDuration|decimal|double|duration|ENTITIES|ENTITY|float|gDay|gMonth|gMonthDay|gYear|gYearMonth|hexBinary|ID|IDREFS?|int|integer|language|long|Name|NCName|negativeInteger|NMTOKENS?|nonNegativeInteger|nonPositiveInteger|normalizedString|NOTATION|positiveInteger|QName|short|string|time|token|unsigned(?:Byte|Int|Long|Short)|untyped(?:Atomic)?|yearMonthDuration))\\b(?=$|[^:-])/,\n      lookbehind: !0\n    },\n    number: /\\b\\d+(?:\\.\\d+)?(?:E[+-]?\\d+)?/,\n    operator: [/[+*=?|@]|\\.\\.?|:=|!=|<[=<]?|>[=>]?/, {\n      pattern: /(\\s)-(?=\\s)/,\n      lookbehind: !0\n    }],\n    punctuation: /[[\\](){},;:/]/\n  }), e.languages.xquery.tag.pattern = /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i, e.languages.xquery.tag.inside[\"attr-value\"].pattern = /=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/i, e.languages.xquery.tag.inside[\"attr-value\"].inside.punctuation = /^=\"|\"$/, e.languages.xquery.tag.inside[\"attr-value\"].inside.expression = {\n    pattern: /{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}/,\n    inside: {\n      rest: e.languages.xquery\n    },\n    alias: \"language-xquery\"\n  };\n\n  var t = function (e) {\n    return \"string\" == typeof e ? e : \"string\" == typeof e.content ? e.content : e.content.map(t).join(\"\");\n  },\n      n = function (a) {\n    for (var i = [], r = 0; r < a.length; r++) {\n      var o = a[r],\n          s = !1;\n\n      if (\"string\" != typeof o && (\"tag\" === o.type && o.content[0] && \"tag\" === o.content[0].type ? \"</\" === o.content[0].content[0].content ? i.length > 0 && i[i.length - 1].tagName === t(o.content[0].content[1]) && i.pop() : \"/>\" === o.content[o.content.length - 1].content || i.push({\n        tagName: t(o.content[0].content[1]),\n        openedBraces: 0\n      }) : !(i.length > 0 && \"punctuation\" === o.type && \"{\" === o.content) || a[r + 1] && \"punctuation\" === a[r + 1].type && \"{\" === a[r + 1].content || a[r - 1] && \"plain-text\" === a[r - 1].type && \"{\" === a[r - 1].content ? i.length > 0 && i[i.length - 1].openedBraces > 0 && \"punctuation\" === o.type && \"}\" === o.content ? i[i.length - 1].openedBraces-- : \"comment\" !== o.type && (s = !0) : i[i.length - 1].openedBraces++), (s || \"string\" == typeof o) && i.length > 0 && 0 === i[i.length - 1].openedBraces) {\n        var l = t(o);\n        r < a.length - 1 && (\"string\" == typeof a[r + 1] || \"plain-text\" === a[r + 1].type) && (l += t(a[r + 1]), a.splice(r + 1, 1)), r > 0 && (\"string\" == typeof a[r - 1] || \"plain-text\" === a[r - 1].type) && (l = t(a[r - 1]) + l, a.splice(r - 1, 1), r--), /^\\s+$/.test(l) ? a[r] = l : a[r] = new e.Token(\"plain-text\", l, null, l);\n      }\n\n      o.content && \"string\" != typeof o.content && n(o.content);\n    }\n  };\n\n  e.hooks.add(\"after-tokenize\", function (e) {\n    \"xquery\" === e.language && n(e.tokens);\n  });\n}(Prism), Prism.languages.tap = {\n  fail: /not ok[^#{\\n\\r]*/,\n  pass: /ok[^#{\\n\\r]*/,\n  pragma: /pragma [+-][a-z]+/,\n  bailout: /bail out!.*/i,\n  version: /TAP version \\d+/i,\n  plan: /\\d+\\.\\.\\d+(?: +#.*)?/,\n  subtest: {\n    pattern: /# Subtest(?:: .*)?/,\n    greedy: !0\n  },\n  punctuation: /[{}]/,\n  directive: /#.*/,\n  yamlish: {\n    pattern: /(^[^\\S\\r\\n]*)---(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?[^\\S\\r\\n]*\\.\\.\\.$/m,\n    lookbehind: !0,\n    inside: Prism.languages.yaml,\n    alias: \"language-yaml\"\n  }\n}, function () {\n  if (\"undefined\" != typeof self && self.Prism && self.document && document.querySelector) {\n    var e,\n        t = function () {\n      if (void 0 === e) {\n        var t = document.createElement(\"div\");\n        t.style.fontSize = \"13px\", t.style.lineHeight = \"1.5\", t.style.padding = 0, t.style.border = 0, t.innerHTML = \"&nbsp;<br />&nbsp;\", document.body.appendChild(t), e = 38 === t.offsetHeight, document.body.removeChild(t);\n      }\n\n      return e;\n    },\n        n = 0;\n\n    Prism.hooks.add(\"before-sanity-check\", function (e) {\n      var t = e.element.parentNode,\n          n = t && t.getAttribute(\"data-line\");\n\n      if (t && n && /pre/i.test(t.nodeName)) {\n        var i = 0;\n        a(\".line-highlight\", t).forEach(function (e) {\n          i += e.textContent.length, e.parentNode.removeChild(e);\n        }), i && /^( \\n)+$/.test(e.code.slice(-i)) && (e.code = e.code.slice(0, -i));\n      }\n    }), Prism.hooks.add(\"complete\", function e(t) {\n      var a = t.element.parentNode,\n          s = a && a.getAttribute(\"data-line\");\n\n      if (a && s && /pre/i.test(a.nodeName)) {\n        clearTimeout(n);\n        var l = Prism.plugins.lineNumbers,\n            d = t.plugins && t.plugins.lineNumbers;\n        i(a, \"line-numbers\") && l && !d ? Prism.hooks.add(\"line-numbers\", e) : (r(a, s), n = setTimeout(o, 1));\n      }\n    }), window.addEventListener(\"hashchange\", o), window.addEventListener(\"resize\", function () {\n      var e = document.querySelectorAll(\"pre[data-line]\");\n      Array.prototype.forEach.call(e, function (e) {\n        r(e);\n      });\n    });\n  }\n\n  function a(e, t) {\n    return Array.prototype.slice.call((t || document).querySelectorAll(e));\n  }\n\n  function i(e, t) {\n    return t = \" \" + t + \" \", (\" \" + e.className + \" \").replace(/[\\n\\t]/g, \" \").indexOf(t) > -1;\n  }\n\n  function r(e, n, a) {\n    for (var r, o = (n = \"string\" == typeof n ? n : e.getAttribute(\"data-line\")).replace(/\\s+/g, \"\").split(\",\"), s = +e.getAttribute(\"data-line-offset\") || 0, l = (t() ? parseInt : parseFloat)(getComputedStyle(e).lineHeight), d = i(e, \"line-numbers\"), c = 0; r = o[c++];) {\n      var p = r.split(\"-\"),\n          u = +p[0],\n          m = +p[1] || u,\n          g = e.querySelector('.line-highlight[data-range=\"' + r + '\"]') || document.createElement(\"div\");\n\n      if (g.setAttribute(\"aria-hidden\", \"true\"), g.setAttribute(\"data-range\", r), g.className = (a || \"\") + \" line-highlight\", d && Prism.plugins.lineNumbers) {\n        var b = Prism.plugins.lineNumbers.getLine(e, u),\n            E = Prism.plugins.lineNumbers.getLine(e, m);\n        b && (g.style.top = b.offsetTop + \"px\"), E && (g.style.height = E.offsetTop - b.offsetTop + E.offsetHeight + \"px\");\n      } else g.setAttribute(\"data-start\", u), m > u && g.setAttribute(\"data-end\", m), g.style.top = (u - s - 1) * l + \"px\", g.textContent = new Array(m - u + 2).join(\" \\n\");\n\n      d ? e.appendChild(g) : (e.querySelector(\"code\") || e).appendChild(g);\n    }\n  }\n\n  function o() {\n    var e = location.hash.slice(1);\n    a(\".temporary.line-highlight\").forEach(function (e) {\n      e.parentNode.removeChild(e);\n    });\n    var t = (e.match(/\\.([\\d,-]+)$/) || [, \"\"])[1];\n\n    if (t && !document.getElementById(e)) {\n      var n = e.slice(0, e.lastIndexOf(\".\")),\n          i = document.getElementById(n);\n      i && (i.hasAttribute(\"data-line\") || i.setAttribute(\"data-line\", \"\"), r(i, t, \"temporary \"), document.querySelector(\".temporary.line-highlight\").scrollIntoView());\n    }\n  }\n}(), function () {\n  if (\"undefined\" != typeof self && self.Prism && self.document) {\n    var e = /\\n(?!$)/g,\n        t = function (t) {\n      var a = n(t)[\"white-space\"];\n\n      if (\"pre-wrap\" === a || \"pre-line\" === a) {\n        var i = t.querySelector(\"code\"),\n            r = t.querySelector(\".line-numbers-rows\"),\n            o = t.querySelector(\".line-numbers-sizer\"),\n            s = i.textContent.split(e);\n        o || ((o = document.createElement(\"span\")).className = \"line-numbers-sizer\", i.appendChild(o)), o.style.display = \"block\", s.forEach(function (e, t) {\n          o.textContent = e || \"\\n\";\n          var n = o.getBoundingClientRect().height;\n          r.children[t].style.height = n + \"px\";\n        }), o.textContent = \"\", o.style.display = \"none\";\n      }\n    },\n        n = function (e) {\n      return e ? window.getComputedStyle ? getComputedStyle(e) : e.currentStyle || null : null;\n    };\n\n    window.addEventListener(\"resize\", function () {\n      Array.prototype.forEach.call(document.querySelectorAll(\"pre.line-numbers\"), t);\n    }), Prism.hooks.add(\"complete\", function (n) {\n      if (n.code) {\n        var a = n.element,\n            i = a.parentNode;\n\n        if (i && /pre/i.test(i.nodeName) && !a.querySelector(\".line-numbers-rows\")) {\n          for (var r = !1, o = /(?:^|\\s)line-numbers(?:\\s|$)/, s = a; s; s = s.parentNode) if (o.test(s.className)) {\n            r = !0;\n            break;\n          }\n\n          if (r) {\n            a.className = a.className.replace(o, \" \"), o.test(i.className) || (i.className += \" line-numbers\");\n            var l,\n                d = n.code.match(e),\n                c = d ? d.length + 1 : 1,\n                p = new Array(c + 1).join(\"<span></span>\");\n            (l = document.createElement(\"span\")).setAttribute(\"aria-hidden\", \"true\"), l.className = \"line-numbers-rows\", l.innerHTML = p, i.hasAttribute(\"data-start\") && (i.style.counterReset = \"linenumber \" + (parseInt(i.getAttribute(\"data-start\"), 10) - 1)), n.element.appendChild(l), t(i), Prism.hooks.run(\"line-numbers\", n);\n          }\n        }\n      }\n    }), Prism.hooks.add(\"line-numbers\", function (e) {\n      e.plugins = e.plugins || {}, e.plugins.lineNumbers = !0;\n    }), Prism.plugins.lineNumbers = {\n      getLine: function (e, t) {\n        if (\"PRE\" === e.tagName && e.classList.contains(\"line-numbers\")) {\n          var n = e.querySelector(\".line-numbers-rows\"),\n              a = parseInt(e.getAttribute(\"data-start\"), 10) || 1,\n              i = a + (n.children.length - 1);\n          t < a && (t = a), t > i && (t = i);\n          var r = t - a;\n          return n.children[r];\n        }\n      }\n    };\n  }\n}(), function () {\n  if ((\"undefined\" == typeof self || self.Prism) && (\"undefined\" == typeof global || global.Prism)) {\n    var e = /\\b([a-z]{3,7}:\\/\\/|tel:)[\\w\\-+%~/.:=&]+(?:\\?[\\w\\-+%~/.:#=?&!$'()*,;]*)?(?:#[\\w\\-+%~/.:#=?&!$'()*,;]*)?/,\n        t = /\\b\\S+@[\\w.]+[a-z]{2}/,\n        n = /\\[([^\\]]+)]\\(([^)]+)\\)/,\n        a = [\"comment\", \"url\", \"attr-value\", \"string\"];\n    Prism.plugins.autolinker = {\n      processGrammar: function (i) {\n        i && !i[\"url-link\"] && (Prism.languages.DFS(i, function (i, r, o) {\n          a.indexOf(o) > -1 && !Array.isArray(r) && (r.pattern || (r = this[i] = {\n            pattern: r\n          }), r.inside = r.inside || {}, \"comment\" == o && (r.inside[\"md-link\"] = n), \"attr-value\" == o ? Prism.languages.insertBefore(\"inside\", \"punctuation\", {\n            \"url-link\": e\n          }, r) : r.inside[\"url-link\"] = e, r.inside[\"email-link\"] = t);\n        }), i[\"url-link\"] = e, i[\"email-link\"] = t);\n      }\n    }, Prism.hooks.add(\"before-highlight\", function (e) {\n      Prism.plugins.autolinker.processGrammar(e.grammar);\n    }), Prism.hooks.add(\"wrap\", function (e) {\n      if (/-link$/.test(e.type)) {\n        e.tag = \"a\";\n        var t = e.content;\n        if (\"email-link\" == e.type && 0 != t.indexOf(\"mailto:\")) t = \"mailto:\" + t;else if (\"md-link\" == e.type) {\n          var a = e.content.match(n);\n          t = a[2], e.content = a[1];\n        }\n        e.attributes.href = t;\n\n        try {\n          e.content = decodeURIComponent(e.content);\n        } catch (e) {}\n      }\n    });\n  }\n}(), function () {\n  if ((\"undefined\" == typeof self || self.Prism) && (\"undefined\" == typeof global || global.Prism)) {\n    var e = {\n      pattern: /(.)\\bdata:[^\\/]+\\/[^,]+,(?:(?!\\1)[\\s\\S]|\\\\\\1)+(?=\\1)/,\n      lookbehind: !0,\n      inside: {\n        \"language-css\": {\n          pattern: /(data:[^\\/]+\\/(?:[^+,]+\\+)?css,)[\\s\\S]+/,\n          lookbehind: !0\n        },\n        \"language-javascript\": {\n          pattern: /(data:[^\\/]+\\/(?:[^+,]+\\+)?javascript,)[\\s\\S]+/,\n          lookbehind: !0\n        },\n        \"language-json\": {\n          pattern: /(data:[^\\/]+\\/(?:[^+,]+\\+)?json,)[\\s\\S]+/,\n          lookbehind: !0\n        },\n        \"language-markup\": {\n          pattern: /(data:[^\\/]+\\/(?:[^+,]+\\+)?(?:html|xml),)[\\s\\S]+/,\n          lookbehind: !0\n        }\n      }\n    },\n        t = [\"url\", \"attr-value\", \"string\"];\n    Prism.plugins.dataURIHighlight = {\n      processGrammar: function (n) {\n        n && !n[\"data-uri\"] && (Prism.languages.DFS(n, function (n, a, i) {\n          t.indexOf(i) > -1 && !Array.isArray(a) && (a.pattern || (a = this[n] = {\n            pattern: a\n          }), a.inside = a.inside || {}, \"attr-value\" == i ? Prism.languages.insertBefore(\"inside\", a.inside[\"url-link\"] ? \"url-link\" : \"punctuation\", {\n            \"data-uri\": e\n          }, a) : a.inside[\"url-link\"] ? Prism.languages.insertBefore(\"inside\", \"url-link\", {\n            \"data-uri\": e\n          }, a) : a.inside[\"data-uri\"] = e);\n        }), n[\"data-uri\"] = e);\n      }\n    }, Prism.hooks.add(\"before-highlight\", function (t) {\n      if (e.pattern.test(t.code)) for (var n in e.inside) if (e.inside.hasOwnProperty(n) && !e.inside[n].inside && e.inside[n].pattern.test(t.code)) {\n        var a = n.match(/^language-(.+)/)[1];\n        Prism.languages[a] && (e.inside[n].inside = {\n          rest: (i = Prism.languages[a], Prism.plugins.autolinker && Prism.plugins.autolinker.processGrammar(i), i)\n        });\n      }\n      var i;\n      Prism.plugins.dataURIHighlight.processGrammar(t.grammar);\n    });\n  }\n}(), function () {\n  if ((\"undefined\" == typeof self || self.Prism) && (\"undefined\" == typeof global || global.Prism)) {\n    if (Prism.languages.css && (Prism.languages.css.selector.pattern ? (Prism.languages.css.selector.inside[\"pseudo-class\"] = /:[\\w-]+/, Prism.languages.css.selector.inside[\"pseudo-element\"] = /::[\\w-]+/) : Prism.languages.css.selector = {\n      pattern: Prism.languages.css.selector,\n      inside: {\n        \"pseudo-class\": /:[\\w-]+/,\n        \"pseudo-element\": /::[\\w-]+/\n      }\n    }), Prism.languages.markup) {\n      Prism.languages.markup.tag.inside.tag.inside[\"tag-id\"] = /[\\w-]+/;\n      var e = {\n        HTML: {\n          a: 1,\n          abbr: 1,\n          acronym: 1,\n          b: 1,\n          basefont: 1,\n          bdo: 1,\n          big: 1,\n          blink: 1,\n          cite: 1,\n          code: 1,\n          dfn: 1,\n          em: 1,\n          kbd: 1,\n          i: 1,\n          rp: 1,\n          rt: 1,\n          ruby: 1,\n          s: 1,\n          samp: 1,\n          small: 1,\n          spacer: 1,\n          strike: 1,\n          strong: 1,\n          sub: 1,\n          sup: 1,\n          time: 1,\n          tt: 1,\n          u: 1,\n          var: 1,\n          wbr: 1,\n          noframes: 1,\n          summary: 1,\n          command: 1,\n          dt: 1,\n          dd: 1,\n          figure: 1,\n          figcaption: 1,\n          center: 1,\n          section: 1,\n          nav: 1,\n          article: 1,\n          aside: 1,\n          hgroup: 1,\n          header: 1,\n          footer: 1,\n          address: 1,\n          noscript: 1,\n          isIndex: 1,\n          main: 1,\n          mark: 1,\n          marquee: 1,\n          meter: 1,\n          menu: 1\n        },\n        SVG: {\n          animateColor: 1,\n          animateMotion: 1,\n          animateTransform: 1,\n          glyph: 1,\n          feBlend: 1,\n          feColorMatrix: 1,\n          feComponentTransfer: 1,\n          feFuncR: 1,\n          feFuncG: 1,\n          feFuncB: 1,\n          feFuncA: 1,\n          feComposite: 1,\n          feConvolveMatrix: 1,\n          feDiffuseLighting: 1,\n          feDisplacementMap: 1,\n          feFlood: 1,\n          feGaussianBlur: 1,\n          feImage: 1,\n          feMerge: 1,\n          feMergeNode: 1,\n          feMorphology: 1,\n          feOffset: 1,\n          feSpecularLighting: 1,\n          feTile: 1,\n          feTurbulence: 1,\n          feDistantLight: 1,\n          fePointLight: 1,\n          feSpotLight: 1,\n          linearGradient: 1,\n          radialGradient: 1,\n          altGlyph: 1,\n          textPath: 1,\n          tref: 1,\n          altglyph: 1,\n          textpath: 1,\n          altglyphdef: 1,\n          altglyphitem: 1,\n          clipPath: 1,\n          \"color-profile\": 1,\n          cursor: 1,\n          \"font-face\": 1,\n          \"font-face-format\": 1,\n          \"font-face-name\": 1,\n          \"font-face-src\": 1,\n          \"font-face-uri\": 1,\n          foreignObject: 1,\n          glyphRef: 1,\n          hkern: 1,\n          vkern: 1\n        },\n        MathML: {}\n      };\n    }\n\n    var t;\n    Prism.hooks.add(\"wrap\", function (n) {\n      if ((\"tag-id\" == n.type || \"property\" == n.type && 0 != n.content.indexOf(\"-\") || \"rule\" == n.type && 0 != n.content.indexOf(\"@-\") || \"pseudo-class\" == n.type && 0 != n.content.indexOf(\":-\") || \"pseudo-element\" == n.type && 0 != n.content.indexOf(\"::-\") || \"attr-name\" == n.type && 0 != n.content.indexOf(\"data-\")) && -1 === n.content.indexOf(\"<\") && (\"css\" == n.language || \"scss\" == n.language || \"markup\" == n.language)) {\n        var a = \"https://webplatform.github.io/docs/\",\n            i = n.content;\n        if (\"css\" == n.language || \"scss\" == n.language) a += \"css/\", \"property\" == n.type ? a += \"properties/\" : \"rule\" == n.type ? (a += \"atrules/\", i = i.substring(1)) : \"pseudo-class\" == n.type ? (a += \"selectors/pseudo-classes/\", i = i.substring(1)) : \"pseudo-element\" == n.type && (a += \"selectors/pseudo-elements/\", i = i.substring(2));else if (\"markup\" == n.language) if (\"tag-id\" == n.type) {\n          if (!(t = function (t) {\n            var n = t.toLowerCase();\n            if (e.HTML[n]) return \"html\";\n            if (e.SVG[t]) return \"svg\";\n            if (e.MathML[t]) return \"mathml\";\n\n            if (0 !== e.HTML[n] && \"undefined\" != typeof document) {\n              var a = (document.createElement(t).toString().match(/\\[object HTML(.+)Element\\]/) || [])[1];\n              if (a && \"Unknown\" != a) return e.HTML[n] = 1, \"html\";\n            }\n\n            if (e.HTML[n] = 0, 0 !== e.SVG[t] && \"undefined\" != typeof document) {\n              var i = (document.createElementNS(\"http://www.w3.org/2000/svg\", t).toString().match(/\\[object SVG(.+)Element\\]/) || [])[1];\n              if (i && \"Unknown\" != i) return e.SVG[t] = 1, \"svg\";\n            }\n\n            if (e.SVG[t] = 0, 0 !== e.MathML[t] && 0 === t.indexOf(\"m\")) return e.MathML[t] = 1, \"mathml\";\n            return e.MathML[t] = 0, null;\n          }(n.content) || t)) return;\n          a += t + \"/elements/\";\n        } else if (\"attr-name\" == n.type) {\n          if (!t) return;\n          a += t + \"/attributes/\";\n        }\n        a += i, n.tag = \"a\", n.attributes.href = a, n.attributes.target = \"_blank\";\n      }\n    });\n  }\n}(), function () {\n  if (\"undefined\" != typeof self && self.Prism || \"undefined\" != typeof global && global.Prism) {\n    var e = {\n      classMap: {}\n    };\n    Prism.plugins.customClass = {\n      map: function (t) {\n        e.classMap = t;\n      },\n      prefix: function (t) {\n        e.prefixString = t;\n      }\n    }, Prism.hooks.add(\"wrap\", function (t) {\n      (e.classMap || e.prefixString) && (t.classes = t.classes.map(function (t) {\n        return (e.prefixString || \"\") + (e.classMap[t] || t);\n      }));\n    });\n  }\n}(), \"undefined\" != typeof self && self.Prism && self.document && document.querySelector && (self.Prism.fileHighlight = function (e) {\n  e = e || document;\n  var t = {\n    js: \"javascript\",\n    py: \"python\",\n    rb: \"ruby\",\n    ps1: \"powershell\",\n    psm1: \"powershell\",\n    sh: \"bash\",\n    bat: \"batch\",\n    h: \"c\",\n    tex: \"latex\"\n  };\n  Array.prototype.slice.call(e.querySelectorAll(\"pre[data-src]\")).forEach(function (e) {\n    if (!e.hasAttribute(\"data-src-loaded\")) {\n      for (var n, a = e.getAttribute(\"data-src\"), i = e, r = /\\blang(?:uage)?-([\\w-]+)\\b/i; i && !r.test(i.className);) i = i.parentNode;\n\n      if (i && (n = (e.className.match(r) || [, \"\"])[1]), !n) {\n        var o = (a.match(/\\.(\\w+)$/) || [, \"\"])[1];\n        n = t[o] || o;\n      }\n\n      var s = document.createElement(\"code\");\n      s.className = \"language-\" + n, e.textContent = \"\", s.textContent = \"Loading…\", e.appendChild(s);\n      var l = new XMLHttpRequest();\n      l.open(\"GET\", a, !0), l.onreadystatechange = function () {\n        4 == l.readyState && (l.status < 400 && l.responseText ? (s.textContent = l.responseText, Prism.highlightElement(s), e.setAttribute(\"data-src-loaded\", \"\")) : l.status >= 400 ? s.textContent = \"✖ Error \" + l.status + \" while fetching file: \" + l.statusText : s.textContent = \"✖ Error: File does not exist or is empty\");\n      }, l.send(null);\n    }\n  }), Prism.plugins.toolbar && Prism.plugins.toolbar.registerButton(\"download-file\", function (e) {\n    var t = e.element.parentNode;\n\n    if (t && /pre/i.test(t.nodeName) && t.hasAttribute(\"data-src\") && t.hasAttribute(\"data-download-link\")) {\n      var n = t.getAttribute(\"data-src\"),\n          a = document.createElement(\"a\");\n      return a.textContent = t.getAttribute(\"data-download-link-label\") || \"Download\", a.setAttribute(\"download\", \"\"), a.href = n, a;\n    }\n  });\n}, document.addEventListener(\"DOMContentLoaded\", function () {\n  self.Prism.fileHighlight();\n})), function () {\n  if (\"undefined\" != typeof self && self.Prism && self.document) {\n    var e = [],\n        t = {},\n        n = function () {};\n\n    Prism.plugins.toolbar = {};\n\n    var a = Prism.plugins.toolbar.registerButton = function (n, a) {\n      var i;\n      i = \"function\" == typeof a ? a : function (e) {\n        var t;\n        return \"function\" == typeof a.onClick ? ((t = document.createElement(\"button\")).type = \"button\", t.addEventListener(\"click\", function () {\n          a.onClick.call(this, e);\n        })) : \"string\" == typeof a.url ? (t = document.createElement(\"a\")).href = a.url : t = document.createElement(\"span\"), t.textContent = a.text, t;\n      }, n in t ? console.warn('There is a button with the key \"' + n + '\" registered already.') : e.push(t[n] = i);\n    },\n        i = Prism.plugins.toolbar.hook = function (a) {\n      var i = a.element.parentNode;\n\n      if (i && /pre/i.test(i.nodeName) && !i.parentNode.classList.contains(\"code-toolbar\")) {\n        var r = document.createElement(\"div\");\n        r.classList.add(\"code-toolbar\"), i.parentNode.insertBefore(r, i), r.appendChild(i);\n        var o = document.createElement(\"div\");\n        o.classList.add(\"toolbar\"), document.body.hasAttribute(\"data-toolbar-order\") && (e = document.body.getAttribute(\"data-toolbar-order\").split(\",\").map(function (e) {\n          return t[e] || n;\n        })), e.forEach(function (e) {\n          var t = e(a);\n\n          if (t) {\n            var n = document.createElement(\"div\");\n            n.classList.add(\"toolbar-item\"), n.appendChild(t), o.appendChild(n);\n          }\n        }), r.appendChild(o);\n      }\n    };\n\n    a(\"label\", function (e) {\n      var t = e.element.parentNode;\n\n      if (t && /pre/i.test(t.nodeName) && t.hasAttribute(\"data-label\")) {\n        var n,\n            a,\n            i = t.getAttribute(\"data-label\");\n\n        try {\n          a = document.querySelector(\"template#\" + i);\n        } catch (e) {}\n\n        return a ? n = a.content : (t.hasAttribute(\"data-url\") ? (n = document.createElement(\"a\")).href = t.getAttribute(\"data-url\") : n = document.createElement(\"span\"), n.textContent = i), n;\n      }\n    }), Prism.hooks.add(\"complete\", i);\n  }\n}(), function () {\n  if (self.Prism && self.document && document.querySelectorAll && [].filter) {\n    var e = [];\n    a(function (e, t) {\n      if (e && e.meta && e.data) {\n        if (e.meta.status && e.meta.status >= 400) return \"Error: \" + (e.data.message || e.meta.status);\n        if (\"string\" == typeof e.data.content) return \"function\" == typeof atob ? atob(e.data.content.replace(/\\s/g, \"\")) : \"Your browser cannot decode base64\";\n      }\n\n      return null;\n    }, \"github\"), a(function (e, t) {\n      if (e && e.meta && e.data && e.data.files) {\n        if (e.meta.status && e.meta.status >= 400) return \"Error: \" + (e.data.message || e.meta.status);\n        var n = e.data.files,\n            a = t.getAttribute(\"data-filename\");\n        if (null == a) for (var i in n) if (n.hasOwnProperty(i)) {\n          a = i;\n          break;\n        }\n        return void 0 !== n[a] ? n[a].content : \"Error: unknown or missing gist file \" + a;\n      }\n\n      return null;\n    }, \"gist\"), a(function (e, t) {\n      return e && e.node && \"string\" == typeof e.data ? e.data : null;\n    }, \"bitbucket\");\n    var t = 0,\n        n = \"Loading…\";\n    Prism.plugins.jsonphighlight = {\n      registerAdapter: a,\n      removeAdapter: function (t) {\n        if (\"string\" == typeof t && (t = i(t)), \"function\" == typeof t) {\n          var n = e.map(function (e) {\n            return e.adapter;\n          }).indexOf(t);\n          n >= 0 && e.splice(n, 1);\n        }\n      },\n      highlight: r\n    }, r();\n  }\n\n  function a(t, n) {\n    n = n || t.name, \"function\" != typeof t || i(t) || i(n) || e.push({\n      adapter: t,\n      name: n\n    });\n  }\n\n  function i(t) {\n    if (\"function\" == typeof t) {\n      for (var n = 0; a = e[n++];) if (a.adapter.valueOf() === t.valueOf()) return a.adapter;\n    } else if (\"string\" == typeof t) {\n      var a;\n\n      for (n = 0; a = e[n++];) if (a.name === t) return a.adapter;\n    }\n\n    return null;\n  }\n\n  function r() {\n    Array.prototype.slice.call(document.querySelectorAll(\"pre[data-jsonp]\")).forEach(function (a) {\n      a.textContent = \"\";\n      var i = document.createElement(\"code\");\n      i.textContent = n, a.appendChild(i);\n      var r = a.getAttribute(\"data-adapter\"),\n          o = null;\n\n      if (r) {\n        if (\"function\" != typeof window[r]) return void (i.textContent = \"JSONP adapter function '\" + r + \"' doesn't exist\");\n        o = window[r];\n      }\n\n      var s = \"prismjsonp\" + t++,\n          l = document.createElement(\"a\"),\n          d = l.href = a.getAttribute(\"data-jsonp\");\n      l.href += (l.search ? \"&\" : \"?\") + (a.getAttribute(\"data-callback\") || \"callback\") + \"=\" + s;\n      var c = setTimeout(function () {\n        i.textContent === n && (i.textContent = \"Timeout loading '\" + d + \"'\");\n      }, 5e3),\n          p = document.createElement(\"script\");\n      p.src = l.href, window[s] = function (t) {\n        document.head.removeChild(p), clearTimeout(c), delete window[s];\n        var n = \"\";\n        if (o) n = o(t, a);else for (var r in e) if (null !== (n = e[r].adapter(t, a))) break;\n        null === n ? i.textContent = \"Cannot parse response (perhaps you need an adapter function?)\" : (i.textContent = n, Prism.highlightElement(i));\n      }, document.head.appendChild(p);\n    });\n  }\n}(), \"undefined\" != typeof self && !self.Prism || \"undefined\" != typeof global && !global.Prism || Prism.hooks.add(\"wrap\", function (e) {\n  \"keyword\" === e.type && e.classes.push(\"keyword-\" + e.content);\n}), function () {\n  if ((\"undefined\" == typeof self || self.Prism) && self.document && Function.prototype.bind) {\n    var e,\n        t,\n        n = {\n      gradient: {\n        create: (e = {}, t = function (t) {\n          if (e[t]) return e[t];\n          var n = t.match(/^(\\b|\\B-[a-z]{1,10}-)((?:repeating-)?(?:linear|radial)-gradient)/),\n              a = n && n[1],\n              i = n && n[2],\n              r = t.replace(/^(?:\\b|\\B-[a-z]{1,10}-)(?:repeating-)?(?:linear|radial)-gradient\\(|\\)$/g, \"\").split(/\\s*,\\s*/);\n          return i.indexOf(\"linear\") >= 0 ? e[t] = function (e, t, n) {\n            var a = \"180deg\";\n            return /^(?:-?\\d*\\.?\\d+(?:deg|rad)|to\\b|top|right|bottom|left)/.test(n[0]) && (a = n.shift()).indexOf(\"to \") < 0 && (a.indexOf(\"top\") >= 0 ? a = a.indexOf(\"left\") >= 0 ? \"to bottom right\" : a.indexOf(\"right\") >= 0 ? \"to bottom left\" : \"to bottom\" : a.indexOf(\"bottom\") >= 0 ? a = a.indexOf(\"left\") >= 0 ? \"to top right\" : a.indexOf(\"right\") >= 0 ? \"to top left\" : \"to top\" : a.indexOf(\"left\") >= 0 ? a = \"to right\" : a.indexOf(\"right\") >= 0 ? a = \"to left\" : e && (a.indexOf(\"deg\") >= 0 ? a = 90 - parseFloat(a) + \"deg\" : a.indexOf(\"rad\") >= 0 && (a = Math.PI / 2 - parseFloat(a) + \"rad\"))), t + \"(\" + a + \",\" + n.join(\",\") + \")\";\n          }(a, i, r) : i.indexOf(\"radial\") >= 0 ? e[t] = function (e, t, n) {\n            if (n[0].indexOf(\"at\") < 0) {\n              var a = \"center\",\n                  i = \"ellipse\",\n                  r = \"farthest-corner\";\n\n              if (/\\bcenter|top|right|bottom|left\\b|^\\d+/.test(n[0]) && (a = n.shift().replace(/\\s*-?\\d+(?:rad|deg)\\s*/, \"\")), /\\bcircle|ellipse|closest|farthest|contain|cover\\b/.test(n[0])) {\n                var o = n.shift().split(/\\s+/);\n                !o[0] || \"circle\" !== o[0] && \"ellipse\" !== o[0] || (i = o.shift()), o[0] && (r = o.shift()), \"cover\" === r ? r = \"farthest-corner\" : \"contain\" === r && (r = \"clothest-side\");\n              }\n\n              return t + \"(\" + i + \" \" + r + \" at \" + a + \",\" + n.join(\",\") + \")\";\n            }\n\n            return t + \"(\" + n.join(\",\") + \")\";\n          }(0, i, r) : e[t] = i + \"(\" + r.join(\",\") + \")\";\n        }, function () {\n          new Prism.plugins.Previewer(\"gradient\", function (e) {\n            return this.firstChild.style.backgroundImage = \"\", this.firstChild.style.backgroundImage = t(e), !!this.firstChild.style.backgroundImage;\n          }, \"*\", function () {\n            this._elt.innerHTML = \"<div></div>\";\n          });\n        }),\n        tokens: {\n          gradient: {\n            pattern: /(?:\\b|\\B-[a-z]{1,10}-)(?:repeating-)?(?:linear|radial)-gradient\\((?:(?:rgb|hsl)a?\\(.+?\\)|[^\\)])+\\)/gi,\n            inside: {\n              function: /[\\w-]+(?=\\()/,\n              punctuation: /[(),]/\n            }\n          }\n        },\n        languages: {\n          css: !0,\n          less: !0,\n          sass: [{\n            lang: \"sass\",\n            before: \"punctuation\",\n            inside: \"inside\",\n            root: Prism.languages.sass && Prism.languages.sass[\"variable-line\"]\n          }, {\n            lang: \"sass\",\n            before: \"punctuation\",\n            inside: \"inside\",\n            root: Prism.languages.sass && Prism.languages.sass[\"property-line\"]\n          }],\n          scss: !0,\n          stylus: [{\n            lang: \"stylus\",\n            before: \"func\",\n            inside: \"rest\",\n            root: Prism.languages.stylus && Prism.languages.stylus[\"property-declaration\"].inside\n          }, {\n            lang: \"stylus\",\n            before: \"func\",\n            inside: \"rest\",\n            root: Prism.languages.stylus && Prism.languages.stylus[\"variable-declaration\"].inside\n          }]\n        }\n      },\n      angle: {\n        create: function () {\n          new Prism.plugins.Previewer(\"angle\", function (e) {\n            var t,\n                n,\n                a = parseFloat(e),\n                i = e.match(/[a-z]+$/i);\n            if (!a || !i) return !1;\n\n            switch (i = i[0]) {\n              case \"deg\":\n                t = 360;\n                break;\n\n              case \"grad\":\n                t = 400;\n                break;\n\n              case \"rad\":\n                t = 2 * Math.PI;\n                break;\n\n              case \"turn\":\n                t = 1;\n            }\n\n            return n = 100 * a / t, n %= 100, this[(a < 0 ? \"set\" : \"remove\") + \"Attribute\"](\"data-negative\", \"\"), this.querySelector(\"circle\").style.strokeDasharray = Math.abs(n) + \",500\", !0;\n          }, \"*\", function () {\n            this._elt.innerHTML = '<svg viewBox=\"0 0 64 64\"><circle r=\"16\" cy=\"32\" cx=\"32\"></circle></svg>';\n          });\n        },\n        tokens: {\n          angle: /(?:\\b|\\B-|(?=\\B\\.))\\d*\\.?\\d+(?:deg|g?rad|turn)\\b/i\n        },\n        languages: {\n          css: !0,\n          less: !0,\n          markup: {\n            lang: \"markup\",\n            before: \"punctuation\",\n            inside: \"inside\",\n            root: Prism.languages.markup && Prism.languages.markup.tag.inside[\"attr-value\"]\n          },\n          sass: [{\n            lang: \"sass\",\n            inside: \"inside\",\n            root: Prism.languages.sass && Prism.languages.sass[\"property-line\"]\n          }, {\n            lang: \"sass\",\n            before: \"operator\",\n            inside: \"inside\",\n            root: Prism.languages.sass && Prism.languages.sass[\"variable-line\"]\n          }],\n          scss: !0,\n          stylus: [{\n            lang: \"stylus\",\n            before: \"func\",\n            inside: \"rest\",\n            root: Prism.languages.stylus && Prism.languages.stylus[\"property-declaration\"].inside\n          }, {\n            lang: \"stylus\",\n            before: \"func\",\n            inside: \"rest\",\n            root: Prism.languages.stylus && Prism.languages.stylus[\"variable-declaration\"].inside\n          }]\n        }\n      },\n      color: {\n        create: function () {\n          new Prism.plugins.Previewer(\"color\", function (e) {\n            return this.style.backgroundColor = \"\", this.style.backgroundColor = e, !!this.style.backgroundColor;\n          });\n        },\n        tokens: {\n          color: {\n            pattern: /\\B#(?:[0-9a-f]{3}){1,2}\\b|\\b(?:rgb|hsl)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:rgb|hsl)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B|\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGray|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGray|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGray|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gray|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGray|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGray|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGray|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i,\n            inside: {\n              function: /[\\w-]+(?=\\()/,\n              punctuation: /[(),]/\n            }\n          }\n        },\n        languages: {\n          css: !0,\n          less: !0,\n          markup: {\n            lang: \"markup\",\n            before: \"punctuation\",\n            inside: \"inside\",\n            root: Prism.languages.markup && Prism.languages.markup.tag.inside[\"attr-value\"]\n          },\n          sass: [{\n            lang: \"sass\",\n            before: \"punctuation\",\n            inside: \"inside\",\n            root: Prism.languages.sass && Prism.languages.sass[\"variable-line\"]\n          }, {\n            lang: \"sass\",\n            inside: \"inside\",\n            root: Prism.languages.sass && Prism.languages.sass[\"property-line\"]\n          }],\n          scss: !0,\n          stylus: [{\n            lang: \"stylus\",\n            before: \"hexcode\",\n            inside: \"rest\",\n            root: Prism.languages.stylus && Prism.languages.stylus[\"property-declaration\"].inside\n          }, {\n            lang: \"stylus\",\n            before: \"hexcode\",\n            inside: \"rest\",\n            root: Prism.languages.stylus && Prism.languages.stylus[\"variable-declaration\"].inside\n          }]\n        }\n      },\n      easing: {\n        create: function () {\n          new Prism.plugins.Previewer(\"easing\", function (e) {\n            var t = (e = {\n              linear: \"0,0,1,1\",\n              ease: \".25,.1,.25,1\",\n              \"ease-in\": \".42,0,1,1\",\n              \"ease-out\": \"0,0,.58,1\",\n              \"ease-in-out\": \".42,0,.58,1\"\n            }[e] || e).match(/-?\\d*\\.?\\d+/g);\n\n            if (4 === t.length) {\n              t = t.map(function (e, t) {\n                return 100 * (t % 2 ? 1 - e : e);\n              }), this.querySelector(\"path\").setAttribute(\"d\", \"M0,100 C\" + t[0] + \",\" + t[1] + \", \" + t[2] + \",\" + t[3] + \", 100,0\");\n              var n = this.querySelectorAll(\"line\");\n              return n[0].setAttribute(\"x2\", t[0]), n[0].setAttribute(\"y2\", t[1]), n[1].setAttribute(\"x2\", t[2]), n[1].setAttribute(\"y2\", t[3]), !0;\n            }\n\n            return !1;\n          }, \"*\", function () {\n            this._elt.innerHTML = '<svg viewBox=\"-20 -20 140 140\" width=\"100\" height=\"100\"><defs><marker id=\"prism-previewer-easing-marker\" viewBox=\"0 0 4 4\" refX=\"2\" refY=\"2\" markerUnits=\"strokeWidth\"><circle cx=\"2\" cy=\"2\" r=\"1.5\" /></marker></defs><path d=\"M0,100 C20,50, 40,30, 100,0\" /><line x1=\"0\" y1=\"100\" x2=\"20\" y2=\"50\" marker-start=\"url(' + location.href + '#prism-previewer-easing-marker)\" marker-end=\"url(' + location.href + '#prism-previewer-easing-marker)\" /><line x1=\"100\" y1=\"0\" x2=\"40\" y2=\"30\" marker-start=\"url(' + location.href + '#prism-previewer-easing-marker)\" marker-end=\"url(' + location.href + '#prism-previewer-easing-marker)\" /></svg>';\n          });\n        },\n        tokens: {\n          easing: {\n            pattern: /\\bcubic-bezier\\((?:-?\\d*\\.?\\d+,\\s*){3}-?\\d*\\.?\\d+\\)\\B|\\b(?:linear|ease(?:-in)?(?:-out)?)(?=\\s|[;}]|$)/i,\n            inside: {\n              function: /[\\w-]+(?=\\()/,\n              punctuation: /[(),]/\n            }\n          }\n        },\n        languages: {\n          css: !0,\n          less: !0,\n          sass: [{\n            lang: \"sass\",\n            inside: \"inside\",\n            before: \"punctuation\",\n            root: Prism.languages.sass && Prism.languages.sass[\"variable-line\"]\n          }, {\n            lang: \"sass\",\n            inside: \"inside\",\n            root: Prism.languages.sass && Prism.languages.sass[\"property-line\"]\n          }],\n          scss: !0,\n          stylus: [{\n            lang: \"stylus\",\n            before: \"hexcode\",\n            inside: \"rest\",\n            root: Prism.languages.stylus && Prism.languages.stylus[\"property-declaration\"].inside\n          }, {\n            lang: \"stylus\",\n            before: \"hexcode\",\n            inside: \"rest\",\n            root: Prism.languages.stylus && Prism.languages.stylus[\"variable-declaration\"].inside\n          }]\n        }\n      },\n      time: {\n        create: function () {\n          new Prism.plugins.Previewer(\"time\", function (e) {\n            var t = parseFloat(e),\n                n = e.match(/[a-z]+$/i);\n            return !(!t || !n) && (n = n[0], this.querySelector(\"circle\").style.animationDuration = 2 * t + n, !0);\n          }, \"*\", function () {\n            this._elt.innerHTML = '<svg viewBox=\"0 0 64 64\"><circle r=\"16\" cy=\"32\" cx=\"32\"></circle></svg>';\n          });\n        },\n        tokens: {\n          time: /(?:\\b|\\B-|(?=\\B\\.))\\d*\\.?\\d+m?s\\b/i\n        },\n        languages: {\n          css: !0,\n          less: !0,\n          markup: {\n            lang: \"markup\",\n            before: \"punctuation\",\n            inside: \"inside\",\n            root: Prism.languages.markup && Prism.languages.markup.tag.inside[\"attr-value\"]\n          },\n          sass: [{\n            lang: \"sass\",\n            inside: \"inside\",\n            root: Prism.languages.sass && Prism.languages.sass[\"property-line\"]\n          }, {\n            lang: \"sass\",\n            before: \"operator\",\n            inside: \"inside\",\n            root: Prism.languages.sass && Prism.languages.sass[\"variable-line\"]\n          }],\n          scss: !0,\n          stylus: [{\n            lang: \"stylus\",\n            before: \"hexcode\",\n            inside: \"rest\",\n            root: Prism.languages.stylus && Prism.languages.stylus[\"property-declaration\"].inside\n          }, {\n            lang: \"stylus\",\n            before: \"hexcode\",\n            inside: \"rest\",\n            root: Prism.languages.stylus && Prism.languages.stylus[\"variable-declaration\"].inside\n          }]\n        }\n      }\n    },\n        a = /(?:^|\\s)token(?=$|\\s)/,\n        i = /(?:^|\\s)active(?=$|\\s)/g,\n        r = /(?:^|\\s)flipped(?=$|\\s)/g,\n        o = function (e, t, n, a) {\n      this._elt = null, this._type = e, this._clsRegexp = RegExp(\"(?:^|\\\\s)\" + e + \"(?=$|\\\\s)\"), this._token = null, this.updater = t, this._mouseout = this.mouseout.bind(this), this.initializer = a;\n      var i = this;\n      n || (n = [\"*\"]), Array.isArray(n) || (n = [n]), n.forEach(function (e) {\n        \"string\" != typeof e && (e = e.lang), o.byLanguages[e] || (o.byLanguages[e] = []), o.byLanguages[e].indexOf(i) < 0 && o.byLanguages[e].push(i);\n      }), o.byType[e] = this;\n    };\n\n    for (var s in o.prototype.init = function () {\n      this._elt || (this._elt = document.createElement(\"div\"), this._elt.className = \"prism-previewer prism-previewer-\" + this._type, document.body.appendChild(this._elt), this.initializer && this.initializer());\n    }, o.prototype.isDisabled = function (e) {\n      do {\n        if (e.hasAttribute && e.hasAttribute(\"data-previewers\")) return -1 === (e.getAttribute(\"data-previewers\") || \"\").split(/\\s+/).indexOf(this._type);\n      } while (e = e.parentNode);\n\n      return !1;\n    }, o.prototype.check = function (e) {\n      if (!a.test(e.className) || !this.isDisabled(e)) {\n        do {\n          if (a.test(e.className) && this._clsRegexp.test(e.className)) break;\n        } while (e = e.parentNode);\n\n        e && e !== this._token && (this._token = e, this.show());\n      }\n    }, o.prototype.mouseout = function () {\n      this._token.removeEventListener(\"mouseout\", this._mouseout, !1), this._token = null, this.hide();\n    }, o.prototype.show = function () {\n      var e, t, n, a, i;\n      if (this._elt || this.init(), this._token) if (this.updater.call(this._elt, this._token.textContent)) {\n        this._token.addEventListener(\"mouseout\", this._mouseout, !1);\n\n        var o = (e = this._token, t = e.getBoundingClientRect(), n = t.left, a = t.top, i = document.documentElement.getBoundingClientRect(), n -= i.left, {\n          top: a -= i.top,\n          right: innerWidth - n - t.width,\n          bottom: innerHeight - a - t.height,\n          left: n,\n          width: t.width,\n          height: t.height\n        });\n        this._elt.className += \" active\", o.top - this._elt.offsetHeight > 0 ? (this._elt.className = this._elt.className.replace(r, \"\"), this._elt.style.top = o.top + \"px\", this._elt.style.bottom = \"\") : (this._elt.className += \" flipped\", this._elt.style.bottom = o.bottom + \"px\", this._elt.style.top = \"\"), this._elt.style.left = o.left + Math.min(200, o.width / 2) + \"px\";\n      } else this.hide();\n    }, o.prototype.hide = function () {\n      this._elt.className = this._elt.className.replace(i, \"\");\n    }, o.byLanguages = {}, o.byType = {}, o.initEvents = function (e, t) {\n      var n = [];\n      o.byLanguages[t] && (n = n.concat(o.byLanguages[t])), o.byLanguages[\"*\"] && (n = n.concat(o.byLanguages[\"*\"])), e.addEventListener(\"mouseover\", function (e) {\n        var t = e.target;\n        n.forEach(function (e) {\n          e.check(t);\n        });\n      }, !1);\n    }, Prism.plugins.Previewer = o, Prism.hooks.add(\"before-highlight\", function (e) {\n      for (var t in n) {\n        var a = n[t].languages;\n\n        if (e.language && a[e.language] && !a[e.language].initialized) {\n          var i = a[e.language];\n          Array.isArray(i) || (i = [i]), i.forEach(function (i) {\n            var r, o, s, l;\n            !0 === i ? (r = \"important\", o = e.language, i = e.language) : (r = i.before || \"important\", o = i.inside || i.lang, s = i.root || Prism.languages, l = i.skip, i = e.language), !l && Prism.languages[i] && (Prism.languages.insertBefore(o, r, n[t].tokens, s), e.grammar = Prism.languages[i], a[e.language] = {\n              initialized: !0\n            });\n          });\n        }\n      }\n    }), Prism.hooks.add(\"after-highlight\", function (e) {\n      (o.byLanguages[\"*\"] || o.byLanguages[e.language]) && o.initEvents(e.element, e.language);\n    }), n) n[s].create();\n  }\n}(), function () {\n  if (\"undefined\" != typeof self && self.Prism && self.document && document.createElement) {\n    var e = {\n      javascript: \"clike\",\n      actionscript: \"javascript\",\n      arduino: \"cpp\",\n      aspnet: [\"markup\", \"csharp\"],\n      bison: \"c\",\n      c: \"clike\",\n      csharp: \"clike\",\n      cpp: \"c\",\n      coffeescript: \"javascript\",\n      crystal: \"ruby\",\n      \"css-extras\": \"css\",\n      d: \"clike\",\n      dart: \"clike\",\n      django: \"markup-templating\",\n      ejs: [\"javascript\", \"markup-templating\"],\n      erb: [\"ruby\", \"markup-templating\"],\n      fsharp: \"clike\",\n      flow: \"javascript\",\n      glsl: \"clike\",\n      gml: \"clike\",\n      go: \"clike\",\n      groovy: \"clike\",\n      haml: \"ruby\",\n      handlebars: \"markup-templating\",\n      haxe: \"clike\",\n      java: \"clike\",\n      javadoc: [\"markup\", \"java\", \"javadoclike\"],\n      jolie: \"clike\",\n      jsdoc: [\"javascript\", \"javadoclike\"],\n      \"js-extras\": \"javascript\",\n      jsonp: \"json\",\n      json5: \"json\",\n      kotlin: \"clike\",\n      less: \"css\",\n      markdown: \"markup\",\n      \"markup-templating\": \"markup\",\n      n4js: \"javascript\",\n      nginx: \"clike\",\n      objectivec: \"c\",\n      opencl: \"cpp\",\n      parser: \"markup\",\n      php: [\"clike\", \"markup-templating\"],\n      phpdoc: [\"php\", \"javadoclike\"],\n      \"php-extras\": \"php\",\n      plsql: \"sql\",\n      processing: \"clike\",\n      protobuf: \"clike\",\n      pug: [\"markup\", \"javascript\"],\n      qore: \"clike\",\n      jsx: [\"markup\", \"javascript\"],\n      tsx: [\"jsx\", \"typescript\"],\n      reason: \"clike\",\n      ruby: \"clike\",\n      sass: \"css\",\n      scss: \"css\",\n      scala: \"java\",\n      smarty: \"markup-templating\",\n      soy: \"markup-templating\",\n      swift: \"clike\",\n      tap: \"yaml\",\n      textile: \"markup\",\n      tt2: [\"clike\", \"markup-templating\"],\n      twig: \"markup\",\n      typescript: \"javascript\",\n      \"t4-cs\": [\"t4-templating\", \"csharp\"],\n      \"t4-vb\": [\"t4-templating\", \"visual-basic\"],\n      vala: \"clike\",\n      vbnet: \"basic\",\n      velocity: \"markup\",\n      wiki: \"markup\",\n      xeora: \"markup\",\n      xquery: \"markup\"\n    },\n        t = {\n      html: \"markup\",\n      xml: \"markup\",\n      svg: \"markup\",\n      mathml: \"markup\",\n      js: \"javascript\",\n      adoc: \"asciidoc\",\n      shell: \"bash\",\n      rbnf: \"bnf\",\n      dotnet: \"csharp\",\n      coffee: \"coffeescript\",\n      jinja2: \"django\",\n      dockerfile: \"docker\",\n      gamemakerlanguage: \"gml\",\n      hs: \"haskell\",\n      emacs: \"lisp\",\n      elisp: \"lisp\",\n      \"emacs-lisp\": \"lisp\",\n      md: \"markdown\",\n      n4jsd: \"n4js\",\n      objectpascal: \"pascal\",\n      py: \"python\",\n      rb: \"ruby\",\n      ts: \"typescript\",\n      t4: \"t4-cs\",\n      vb: \"visual-basic\",\n      xeoracube: \"xeora\",\n      yml: \"yaml\"\n    },\n        n = {},\n        a = document.getElementsByTagName(\"script\"),\n        i = \"components/\";\n\n    if ((a = a[a.length - 1]).hasAttribute(\"data-autoloader-path\")) {\n      var r = a.getAttribute(\"data-autoloader-path\").trim();\n      r.length > 0 && !/^[a-z]+:\\/\\//i.test(a.src) && (i = r.replace(/\\/?$/, \"/\"));\n    } else /[\\w-]+\\.js$/.test(a.src) && (i = a.src.replace(/[\\w-]+\\.js$/, \"components/\"));\n\n    var o = Prism.plugins.autoloader = {\n      languages_path: i,\n      use_minified: !0\n    },\n        s = function (e, t, n) {\n      \"string\" == typeof e && (e = [e]);\n\n      var a = 0,\n          i = e.length,\n          r = function () {\n        a < i ? l(e[a], function () {\n          a++, r();\n        }, function () {\n          n && n(e[a]);\n        }) : a === i && t && t(e);\n      };\n\n      r();\n    },\n        l = function (a, i, r) {\n      var l = a.indexOf(\"!\") >= 0;\n      a = a.replace(\"!\", \"\");\n\n      var p = function () {\n        var e = n[a];\n        if (e || (e = n[a] = {}), i && (e.success_callbacks || (e.success_callbacks = []), e.success_callbacks.push(i)), r && (e.error_callbacks || (e.error_callbacks = []), e.error_callbacks.push(r)), !l && Prism.languages[a]) d(a);else if (!l && e.error) c(a);else if (l || !e.loading) {\n          e.loading = !0, function (e, t, n) {\n            var a = document.createElement(\"script\");\n            a.src = e, a.async = !0, a.onload = function () {\n              document.body.removeChild(a), t && t();\n            }, a.onerror = function () {\n              document.body.removeChild(a), n && n();\n            }, document.body.appendChild(a);\n          }(function (e) {\n            return o.languages_path + \"prism-\" + e + (o.use_minified ? \".min\" : \"\") + \".js\";\n          }(a), function () {\n            e.loading = !1, d(a);\n          }, function () {\n            e.loading = !1, e.error = !0, c(a);\n          });\n        }\n      },\n          u = e[a = t[a] || a];\n\n      u && u.length ? s(u, p) : p();\n    },\n        d = function (e) {\n      n[e] && n[e].success_callbacks && n[e].success_callbacks.length && n[e].success_callbacks.forEach(function (t) {\n        t(e);\n      });\n    },\n        c = function (e) {\n      n[e] && n[e].error_callbacks && n[e].error_callbacks.length && n[e].error_callbacks.forEach(function (t) {\n        t(e);\n      });\n    };\n\n    Prism.hooks.add(\"complete\", function (e) {\n      e.element && e.language && !e.grammar && \"none\" !== e.language && function (e, a) {\n        e in t && (e = t[e]);\n        var i = n[e];\n        i || (i = n[e] = {});\n        var r = a.getAttribute(\"data-dependencies\");\n        !r && a.parentNode && \"pre\" === a.parentNode.tagName.toLowerCase() && (r = a.parentNode.getAttribute(\"data-dependencies\")), r = r ? r.split(/\\s*,\\s*/g) : [], s(r, function () {\n          l(e, function () {\n            Prism.highlightElement(a);\n          });\n        });\n      }(e.language, e.element);\n    });\n  }\n}(), \"undefined\" != typeof self && self.Prism && self.document && Prism.languages.markup && (Prism.plugins.UnescapedMarkup = !0, Prism.hooks.add(\"before-highlightall\", function (e) {\n  e.selector += \", [class*='lang-'] script[type='text/plain'], [class*='language-'] script[type='text/plain'], script[type='text/plain'][class*='lang-'], script[type='text/plain'][class*='language-']\";\n}), Prism.hooks.add(\"before-sanity-check\", function (e) {\n  if ((e.element.matches || e.element.msMatchesSelector).call(e.element, \"script[type='text/plain']\")) {\n    var t = document.createElement(\"code\");\n    return (n = document.createElement(\"pre\")).className = t.className = e.element.className, e.element.dataset && Object.keys(e.element.dataset).forEach(function (t) {\n      Object.prototype.hasOwnProperty.call(e.element.dataset, t) && (n.dataset[t] = e.element.dataset[t]);\n    }), e.code = e.code.replace(/&lt;\\/script(>|&gt;)/gi, \"<\\/script>\"), t.textContent = e.code, n.appendChild(t), e.element.parentNode.replaceChild(n, e.element), void (e.element = t);\n  }\n\n  var n = e.element.parentNode;\n  !e.code && n && \"pre\" == n.nodeName.toLowerCase() && e.element.childNodes.length && \"#comment\" == e.element.childNodes[0].nodeName && (e.element.textContent = e.code = e.element.childNodes[0].textContent);\n})), function () {\n  if (\"undefined\" != typeof self && self.Prism && self.document) {\n    var e = /(?:^|\\s)command-line(?:\\s|$)/;\n    Prism.hooks.add(\"before-highlight\", function (t) {\n      var n = t.vars = t.vars || {},\n          a = n[\"command-line\"] = n[\"command-line\"] || {};\n\n      if (!a.complete && t.code) {\n        var i = t.element.parentNode;\n        if (i && /pre/i.test(i.nodeName) && (e.test(i.className) || e.test(t.element.className))) {\n          if (t.element.querySelector(\".command-line-prompt\")) a.complete = !0;else {\n            var r = t.code.split(\"\\n\");\n            a.numberOfLines = r.length;\n            var o = a.outputLines = [],\n                s = i.getAttribute(\"data-output\"),\n                l = i.getAttribute(\"data-filter-output\");\n\n            if (s || \"\" === s) {\n              s = s.split(\",\");\n\n              for (var d = 0; d < s.length; d++) {\n                var c = s[d].split(\"-\"),\n                    p = parseInt(c[0], 10),\n                    u = 2 === c.length ? parseInt(c[1], 10) : p;\n\n                if (!isNaN(p) && !isNaN(u)) {\n                  p < 1 && (p = 1), u > r.length && (u = r.length), u--;\n\n                  for (var m = --p; m <= u; m++) o[m] = r[m], r[m] = \"\";\n                }\n              }\n            } else if (l) for (d = 0; d < r.length; d++) 0 === r[d].indexOf(l) && (o[d] = r[d].slice(l.length), r[d] = \"\");\n\n            t.code = r.join(\"\\n\");\n          }\n        } else a.complete = !0;\n      } else a.complete = !0;\n    }), Prism.hooks.add(\"before-insert\", function (e) {\n      var t = e.vars = e.vars || {},\n          n = t[\"command-line\"] = t[\"command-line\"] || {};\n\n      if (!n.complete) {\n        for (var a = e.highlightedCode.split(\"\\n\"), i = 0; i < n.outputLines.length; i++) n.outputLines.hasOwnProperty(i) && (a[i] = n.outputLines[i]);\n\n        e.highlightedCode = a.join(\"\\n\");\n      }\n    }), Prism.hooks.add(\"complete\", function (t) {\n      var n = t.vars = t.vars || {},\n          a = n[\"command-line\"] = n[\"command-line\"] || {};\n\n      if (!a.complete) {\n        var i = t.element.parentNode;\n        e.test(t.element.className) && (t.element.className = t.element.className.replace(e, \" \")), e.test(i.className) || (i.className += \" command-line\");\n\n        var r = function (e, t) {\n          return (i.getAttribute(e) || t).replace(/\"/g, \"&quot\");\n        },\n            o = new Array(a.numberOfLines + 1),\n            s = r(\"data-prompt\", \"\");\n\n        if (\"\" !== s) o = o.join('<span data-prompt=\"' + s + '\"></span>');else {\n          var l = r(\"data-user\", \"user\"),\n              d = r(\"data-host\", \"localhost\");\n          o = o.join('<span data-user=\"' + l + '\" data-host=\"' + d + '\"></span>');\n        }\n        var c = document.createElement(\"span\");\n        c.className = \"command-line-prompt\", c.innerHTML = o;\n\n        for (var p = 0; p < a.outputLines.length; p++) if (a.outputLines.hasOwnProperty(p)) {\n          var u = c.children[p];\n          u.removeAttribute(\"data-user\"), u.removeAttribute(\"data-host\"), u.removeAttribute(\"data-prompt\");\n        }\n\n        t.element.insertBefore(c, t.element.firstChild), a.complete = !0;\n      }\n    });\n  }\n}(), function () {\n  var e = Object.assign || function (e, t) {\n    for (var n in t) t.hasOwnProperty(n) && (e[n] = t[n]);\n\n    return e;\n  };\n\n  function t(t) {\n    this.defaults = e({}, t);\n  }\n\n  function n(e) {\n    for (var t = 0, n = 0; n < e.length; ++n) e.charCodeAt(n) == \"\\t\".charCodeAt(0) && (t += 3);\n\n    return e.length + t;\n  }\n\n  t.prototype = {\n    setDefaults: function (t) {\n      this.defaults = e(this.defaults, t);\n    },\n    normalize: function (t, n) {\n      for (var a in n = e(this.defaults, n)) {\n        var i = a.replace(/-(\\w)/g, function (e, t) {\n          return t.toUpperCase();\n        });\n        \"normalize\" !== a && \"setDefaults\" !== i && n[a] && this[i] && (t = this[i].call(this, t, n[a]));\n      }\n\n      return t;\n    },\n    leftTrim: function (e) {\n      return e.replace(/^\\s+/, \"\");\n    },\n    rightTrim: function (e) {\n      return e.replace(/\\s+$/, \"\");\n    },\n    tabsToSpaces: function (e, t) {\n      return t = 0 | t || 4, e.replace(/\\t/g, new Array(++t).join(\" \"));\n    },\n    spacesToTabs: function (e, t) {\n      return t = 0 | t || 4, e.replace(RegExp(\" {\" + t + \"}\", \"g\"), \"\\t\");\n    },\n    removeTrailing: function (e) {\n      return e.replace(/\\s*?$/gm, \"\");\n    },\n    removeInitialLineFeed: function (e) {\n      return e.replace(/^(?:\\r?\\n|\\r)/, \"\");\n    },\n    removeIndent: function (e) {\n      var t = e.match(/^[^\\S\\n\\r]*(?=\\S)/gm);\n      return t && t[0].length ? (t.sort(function (e, t) {\n        return e.length - t.length;\n      }), t[0].length ? e.replace(RegExp(\"^\" + t[0], \"gm\"), \"\") : e) : e;\n    },\n    indent: function (e, t) {\n      return e.replace(/^[^\\S\\n\\r]*(?=\\S)/gm, new Array(++t).join(\"\\t\") + \"$&\");\n    },\n    breakLines: function (e, t) {\n      t = !0 === t ? 80 : 0 | t || 80;\n\n      for (var a = e.split(\"\\n\"), i = 0; i < a.length; ++i) if (!(n(a[i]) <= t)) {\n        for (var r = a[i].split(/(\\s+)/g), o = 0, s = 0; s < r.length; ++s) {\n          var l = n(r[s]);\n          (o += l) > t && (r[s] = \"\\n\" + r[s], o = l);\n        }\n\n        a[i] = r.join(\"\");\n      }\n\n      return a.join(\"\\n\");\n    }\n  },  true && module.exports && (module.exports = t), void 0 !== Prism && (Prism.plugins.NormalizeWhitespace = new t({\n    \"remove-trailing\": !0,\n    \"remove-indent\": !0,\n    \"left-trim\": !0,\n    \"right-trim\": !0\n  }), Prism.hooks.add(\"before-sanity-check\", function (e) {\n    var t = Prism.plugins.NormalizeWhitespace;\n    if (!e.settings || !1 !== e.settings[\"whitespace-normalization\"]) if (e.element && e.element.parentNode || !e.code) {\n      var n = e.element.parentNode,\n          a = /(?:^|\\s)no-whitespace-normalization(?:\\s|$)/;\n\n      if (e.code && n && \"pre\" === n.nodeName.toLowerCase() && !a.test(n.className) && !a.test(e.element.className)) {\n        for (var i = n.childNodes, r = \"\", o = \"\", s = !1, l = 0; l < i.length; ++l) {\n          var d = i[l];\n          d == e.element ? s = !0 : \"#text\" === d.nodeName && (s ? o += d.nodeValue : r += d.nodeValue, n.removeChild(d), --l);\n        }\n\n        if (e.element.children.length && Prism.plugins.KeepMarkup) {\n          var c = r + e.element.innerHTML + o;\n          e.element.innerHTML = t.normalize(c, e.settings), e.code = e.element.textContent;\n        } else e.code = r + e.code + o, e.code = t.normalize(e.code, e.settings);\n      }\n    } else e.code = t.normalize(e.code, e.settings);\n  }));\n}(), function (e, t) {\n  void 0 !== e && e.Prism && e.document && t.createRange && (Prism.plugins.KeepMarkup = !0, Prism.hooks.add(\"before-highlight\", function (e) {\n    if (e.element.children.length) {\n      var t = 0,\n          n = [],\n          a = function (e, i) {\n        var r = {};\n        i || (r.clone = e.cloneNode(!1), r.posOpen = t, n.push(r));\n\n        for (var o = 0, s = e.childNodes.length; o < s; o++) {\n          var l = e.childNodes[o];\n          1 === l.nodeType ? a(l) : 3 === l.nodeType && (t += l.data.length);\n        }\n\n        i || (r.posClose = t);\n      };\n\n      a(e.element, !0), n && n.length && (e.keepMarkup = n);\n    }\n  }), Prism.hooks.add(\"after-highlight\", function (e) {\n    if (e.keepMarkup && e.keepMarkup.length) {\n      var n = function (e, a) {\n        for (var i = 0, r = e.childNodes.length; i < r; i++) {\n          var o = e.childNodes[i];\n\n          if (1 === o.nodeType) {\n            if (!n(o, a)) return !1;\n          } else 3 === o.nodeType && (!a.nodeStart && a.pos + o.data.length > a.node.posOpen && (a.nodeStart = o, a.nodeStartPos = a.node.posOpen - a.pos), a.nodeStart && a.pos + o.data.length >= a.node.posClose && (a.nodeEnd = o, a.nodeEndPos = a.node.posClose - a.pos), a.pos += o.data.length);\n\n          if (a.nodeStart && a.nodeEnd) {\n            var s = t.createRange();\n            return s.setStart(a.nodeStart, a.nodeStartPos), s.setEnd(a.nodeEnd, a.nodeEndPos), a.node.clone.appendChild(s.extractContents()), s.insertNode(a.node.clone), s.detach(), !1;\n          }\n        }\n\n        return !0;\n      };\n\n      e.keepMarkup.forEach(function (t) {\n        n(e.element, {\n          node: t,\n          pos: 0\n        });\n      }), e.highlightedCode = e.element.innerHTML;\n    }\n  }));\n}(self, document), function () {\n  if (\"undefined\" != typeof self && self.Prism && self.document) if (Prism.plugins.toolbar) {\n    var e = {\n      html: \"HTML\",\n      xml: \"XML\",\n      svg: \"SVG\",\n      mathml: \"MathML\",\n      css: \"CSS\",\n      clike: \"C-like\",\n      js: \"JavaScript\",\n      abap: \"ABAP\",\n      abnf: \"Augmented Backus–Naur form\",\n      apacheconf: \"Apache Configuration\",\n      apl: \"APL\",\n      arff: \"ARFF\",\n      asciidoc: \"AsciiDoc\",\n      adoc: \"AsciiDoc\",\n      asm6502: \"6502 Assembly\",\n      aspnet: \"ASP.NET (C#)\",\n      autohotkey: \"AutoHotkey\",\n      autoit: \"AutoIt\",\n      shell: \"Bash\",\n      basic: \"BASIC\",\n      bnf: \"Backus–Naur form\",\n      rbnf: \"Routing Backus–Naur form\",\n      csharp: \"C#\",\n      dotnet: \"C#\",\n      cpp: \"C++\",\n      cil: \"CIL\",\n      coffee: \"CoffeeScript\",\n      cmake: \"CMake\",\n      csp: \"Content-Security-Policy\",\n      \"css-extras\": \"CSS Extras\",\n      django: \"Django/Jinja2\",\n      jinja2: \"Django/Jinja2\",\n      dockerfile: \"Docker\",\n      ebnf: \"Extended Backus–Naur form\",\n      ejs: \"EJS\",\n      erb: \"ERB\",\n      fsharp: \"F#\",\n      gcode: \"G-code\",\n      gedcom: \"GEDCOM\",\n      glsl: \"GLSL\",\n      gml: \"GameMaker Language\",\n      gamemakerlanguage: \"GameMaker Language\",\n      graphql: \"GraphQL\",\n      hs: \"Haskell\",\n      hcl: \"HCL\",\n      http: \"HTTP\",\n      hpkp: \"HTTP Public-Key-Pins\",\n      hsts: \"HTTP Strict-Transport-Security\",\n      ichigojam: \"IchigoJam\",\n      inform7: \"Inform 7\",\n      javadoc: \"JavaDoc\",\n      javadoclike: \"JavaDoc-like\",\n      javastacktrace: \"Java stack trace\",\n      jsdoc: \"JSDoc\",\n      \"js-extras\": \"JS Extras\",\n      json: \"JSON\",\n      jsonp: \"JSONP\",\n      json5: \"JSON5\",\n      latex: \"LaTeX\",\n      emacs: \"Lisp\",\n      elisp: \"Lisp\",\n      \"emacs-lisp\": \"Lisp\",\n      lolcode: \"LOLCODE\",\n      md: \"Markdown\",\n      \"markup-templating\": \"Markup templating\",\n      matlab: \"MATLAB\",\n      mel: \"MEL\",\n      n1ql: \"N1QL\",\n      n4js: \"N4JS\",\n      n4jsd: \"N4JS\",\n      \"nand2tetris-hdl\": \"Nand To Tetris HDL\",\n      nasm: \"NASM\",\n      nginx: \"nginx\",\n      nsis: \"NSIS\",\n      objectivec: \"Objective-C\",\n      ocaml: \"OCaml\",\n      opencl: \"OpenCL\",\n      parigp: \"PARI/GP\",\n      objectpascal: \"Object Pascal\",\n      php: \"PHP\",\n      phpdoc: \"PHPDoc\",\n      \"php-extras\": \"PHP Extras\",\n      plsql: \"PL/SQL\",\n      powershell: \"PowerShell\",\n      properties: \".properties\",\n      protobuf: \"Protocol Buffers\",\n      py: \"Python\",\n      q: \"Q (kdb+ database)\",\n      jsx: \"React JSX\",\n      tsx: \"React TSX\",\n      renpy: \"Ren'py\",\n      rest: \"reST (reStructuredText)\",\n      rb: \"Ruby\",\n      sas: \"SAS\",\n      sass: \"Sass (Sass)\",\n      scss: \"Sass (Scss)\",\n      sql: \"SQL\",\n      soy: \"Soy (Closure Template)\",\n      tap: \"TAP\",\n      toml: \"TOML\",\n      tt2: \"Template Toolkit 2\",\n      ts: \"TypeScript\",\n      \"t4-cs\": \"T4 Text Templates (C#)\",\n      t4: \"T4 Text Templates (C#)\",\n      \"t4-vb\": \"T4 Text Templates (VB)\",\n      \"t4-templating\": \"T4 templating\",\n      vbnet: \"VB.Net\",\n      vhdl: \"VHDL\",\n      vim: \"vim\",\n      \"visual-basic\": \"Visual Basic\",\n      vb: \"Visual Basic\",\n      wasm: \"WebAssembly\",\n      wiki: \"Wiki markup\",\n      xeoracube: \"XeoraCube\",\n      xojo: \"Xojo (REALbasic)\",\n      xquery: \"XQuery\",\n      yaml: \"YAML\",\n      yml: \"YAML\"\n    };\n    Prism.plugins.toolbar.registerButton(\"show-language\", function (t) {\n      var n = t.element.parentNode;\n\n      if (n && /pre/i.test(n.nodeName)) {\n        var a,\n            i = n.getAttribute(\"data-language\") || e[t.language] || ((a = t.language) ? (a.substring(0, 1).toUpperCase() + a.substring(1)).replace(/s(?=cript)/, \"S\") : a);\n\n        if (i) {\n          var r = document.createElement(\"span\");\n          return r.textContent = i, r;\n        }\n      }\n    });\n  } else console.warn(\"Show Languages plugin loaded before Toolbar plugin.\");\n}(), function () {\n  if (\"undefined\" != typeof self && self.Prism && self.document) if (Prism.plugins.toolbar) {\n    var e = window.ClipboardJS || void 0;\n    e || \"function\" != \"function\" || (e = __webpack_require__(/*! clipboard */ \"./node_modules/clipboard/dist/clipboard.js\"));\n    var t = [];\n\n    if (!e) {\n      var n = document.createElement(\"script\"),\n          a = document.querySelector(\"head\");\n      n.onload = function () {\n        if (e = window.ClipboardJS) for (; t.length;) t.pop()();\n      }, n.src = \"https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.0/clipboard.min.js\", a.appendChild(n);\n    }\n\n    Prism.plugins.toolbar.registerButton(\"copy-to-clipboard\", function (n) {\n      var a = document.createElement(\"a\");\n      return a.textContent = \"Copy\", e ? i() : t.push(i), a;\n\n      function i() {\n        var t = new e(a, {\n          text: function () {\n            return n.code;\n          }\n        });\n        t.on(\"success\", function () {\n          a.textContent = \"Copied!\", r();\n        }), t.on(\"error\", function () {\n          a.textContent = \"Press Ctrl+C to copy\", r();\n        });\n      }\n\n      function r() {\n        setTimeout(function () {\n          a.textContent = \"Copy\";\n        }, 5e3);\n      }\n    });\n  } else console.warn(\"Copy to Clipboard plugin loaded before Toolbar plugin.\");\n}();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./HTML Manual Repository/public/js/prism.min.js\n");

/***/ }),

/***/ "./HTML Manual Repository/public/js/smooth-scroll.min.js":
/*!***************************************************************!*\
  !*** ./HTML Manual Repository/public/js/smooth-scroll.min.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! smooth-scroll v14.2.1 | (c) 2018 Chris Ferdinandi | MIT License | http://github.com/cferdinandi/smooth-scroll */\n!function (e, t) {\n   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    return t(e);\n  }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;\n}(\"undefined\" != typeof global ? global : \"undefined\" != typeof window ? window : this, function (e) {\n  \"use strict\";\n\n  var t = {\n    ignore: \"[data-scroll-ignore]\",\n    header: null,\n    topOnEmptyHash: !0,\n    speed: 500,\n    clip: !0,\n    offset: 0,\n    easing: \"easeInOutCubic\",\n    customEasing: null,\n    updateURL: !0,\n    popstate: !0,\n    emitEvents: !0\n  },\n      n = function () {\n    return \"querySelector\" in document && \"addEventListener\" in e && \"requestAnimationFrame\" in e && \"closest\" in e.Element.prototype;\n  },\n      o = function () {\n    for (var e = {}, t = 0; t < arguments.length; t++) !function (t) {\n      for (var n in t) t.hasOwnProperty(n) && (e[n] = t[n]);\n    }(arguments[t]);\n\n    return e;\n  },\n      r = function (t) {\n    return !!(\"matchMedia\" in e && e.matchMedia(\"(prefers-reduced-motion)\").matches);\n  },\n      a = function (t) {\n    return parseInt(e.getComputedStyle(t).height, 10);\n  },\n      i = function (e) {\n    var t;\n\n    try {\n      t = decodeURIComponent(e);\n    } catch (n) {\n      t = e;\n    }\n\n    return t;\n  },\n      c = function (e) {\n    \"#\" === e.charAt(0) && (e = e.substr(1));\n\n    for (var t, n = String(e), o = n.length, r = -1, a = \"\", i = n.charCodeAt(0); ++r < o;) {\n      if (0 === (t = n.charCodeAt(r))) throw new InvalidCharacterError(\"Invalid character: the input contains U+0000.\");\n      t >= 1 && t <= 31 || 127 == t || 0 === r && t >= 48 && t <= 57 || 1 === r && t >= 48 && t <= 57 && 45 === i ? a += \"\\\\\" + t.toString(16) + \" \" : a += t >= 128 || 45 === t || 95 === t || t >= 48 && t <= 57 || t >= 65 && t <= 90 || t >= 97 && t <= 122 ? n.charAt(r) : \"\\\\\" + n.charAt(r);\n    }\n\n    var c;\n\n    try {\n      c = decodeURIComponent(\"#\" + a);\n    } catch (e) {\n      c = \"#\" + a;\n    }\n\n    return c;\n  },\n      u = function (e, t) {\n    var n;\n    return \"easeInQuad\" === e.easing && (n = t * t), \"easeOutQuad\" === e.easing && (n = t * (2 - t)), \"easeInOutQuad\" === e.easing && (n = t < .5 ? 2 * t * t : (4 - 2 * t) * t - 1), \"easeInCubic\" === e.easing && (n = t * t * t), \"easeOutCubic\" === e.easing && (n = --t * t * t + 1), \"easeInOutCubic\" === e.easing && (n = t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1), \"easeInQuart\" === e.easing && (n = t * t * t * t), \"easeOutQuart\" === e.easing && (n = 1 - --t * t * t * t), \"easeInOutQuart\" === e.easing && (n = t < .5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t), \"easeInQuint\" === e.easing && (n = t * t * t * t * t), \"easeOutQuint\" === e.easing && (n = 1 + --t * t * t * t * t), \"easeInOutQuint\" === e.easing && (n = t < .5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t), e.customEasing && (n = e.customEasing(t)), n || t;\n  },\n      s = function () {\n    return Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight);\n  },\n      l = function (t, n, o, r) {\n    var a = 0;\n    if (t.offsetParent) do {\n      a += t.offsetTop, t = t.offsetParent;\n    } while (t);\n    return a = Math.max(a - n - o, 0), r && (a = Math.min(a, s() - e.innerHeight)), a;\n  },\n      d = function (e) {\n    return e ? a(e) + e.offsetTop : 0;\n  },\n      f = function (e, t, n) {\n    t || history.pushState && n.updateURL && history.pushState({\n      smoothScroll: JSON.stringify(n),\n      anchor: e.id\n    }, document.title, e === document.documentElement ? \"#top\" : \"#\" + e.id);\n  },\n      m = function (t, n, o) {\n    0 === t && document.body.focus(), o || (t.focus(), document.activeElement !== t && (t.setAttribute(\"tabindex\", \"-1\"), t.focus(), t.style.outline = \"none\"), e.scrollTo(0, n));\n  },\n      h = function (t, n, o, r) {\n    if (n.emitEvents && \"function\" == typeof e.CustomEvent) {\n      var a = new CustomEvent(t, {\n        bubbles: !0,\n        detail: {\n          anchor: o,\n          toggle: r\n        }\n      });\n      document.dispatchEvent(a);\n    }\n  };\n\n  return function (a, p) {\n    var g,\n        v,\n        y,\n        S,\n        E,\n        b,\n        O,\n        I = {};\n    I.cancelScroll = function (e) {\n      cancelAnimationFrame(O), O = null, e || h(\"scrollCancel\", g);\n    }, I.animateScroll = function (n, r, a) {\n      var i = o(g || t, a || {}),\n          c = \"[object Number]\" === Object.prototype.toString.call(n),\n          p = c || !n.tagName ? null : n;\n\n      if (c || p) {\n        var v = e.pageYOffset;\n        i.header && !S && (S = document.querySelector(i.header)), E || (E = d(S));\n\n        var y,\n            b,\n            C,\n            w = c ? n : l(p, E, parseInt(\"function\" == typeof i.offset ? i.offset(n, r) : i.offset, 10), i.clip),\n            L = w - v,\n            A = s(),\n            H = 0,\n            q = function (t, o) {\n          var a = e.pageYOffset;\n          if (t == o || a == o || (v < o && e.innerHeight + a) >= A) return I.cancelScroll(!0), m(n, o, c), h(\"scrollStop\", i, n, r), y = null, O = null, !0;\n        },\n            Q = function (t) {\n          y || (y = t), H += t - y, b = H / parseInt(i.speed, 10), b = b > 1 ? 1 : b, C = v + L * u(i, b), e.scrollTo(0, Math.floor(C)), q(C, w) || (O = e.requestAnimationFrame(Q), y = t);\n        };\n\n        0 === e.pageYOffset && e.scrollTo(0, 0), f(n, c, i), h(\"scrollStart\", i, n, r), I.cancelScroll(!0), e.requestAnimationFrame(Q);\n      }\n    };\n\n    var C = function (t) {\n      if (!r() && 0 === t.button && !t.metaKey && !t.ctrlKey && \"closest\" in t.target && (y = t.target.closest(a)) && \"a\" === y.tagName.toLowerCase() && !t.target.closest(g.ignore) && y.hostname === e.location.hostname && y.pathname === e.location.pathname && /#/.test(y.href)) {\n        var n = c(i(y.hash)),\n            o = g.topOnEmptyHash && \"#\" === n ? document.documentElement : document.querySelector(n);\n        o = o || \"#top\" !== n ? o : document.documentElement, o && (t.preventDefault(), I.animateScroll(o, y));\n      }\n    },\n        w = function (e) {\n      if (null !== history.state && history.state.smoothScroll && history.state.smoothScroll === JSON.stringify(g) && history.state.anchor) {\n        var t = document.querySelector(c(i(history.state.anchor)));\n        t && I.animateScroll(t, null, {\n          updateURL: !1\n        });\n      }\n    },\n        L = function (e) {\n      b || (b = setTimeout(function () {\n        b = null, E = d(S);\n      }, 66));\n    };\n\n    return I.destroy = function () {\n      g && (document.removeEventListener(\"click\", C, !1), e.removeEventListener(\"resize\", L, !1), e.removeEventListener(\"popstate\", w, !1), I.cancelScroll(), g = null, v = null, y = null, S = null, E = null, b = null, O = null);\n    }, I.init = function (r) {\n      if (!n()) throw \"Smooth Scroll: This browser does not support the required JavaScript methods and browser APIs.\";\n      I.destroy(), g = o(t, r || {}), S = g.header ? document.querySelector(g.header) : null, E = d(S), document.addEventListener(\"click\", C, !1), S && e.addEventListener(\"resize\", L, !1), g.updateURL && g.popstate && e.addEventListener(\"popstate\", w, !1);\n    }, I.init(p), I;\n  };\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./HTML Manual Repository/public/js/smooth-scroll.min.js\n");

/***/ }),

/***/ "./node_modules/clipboard/dist/clipboard.js":
/*!**************************************************!*\
  !*** ./node_modules/clipboard/dist/clipboard.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*!\n * clipboard.js v2.0.4\n * https://zenorocha.github.io/clipboard.js\n * \n * Licensed MIT © Zeno Rocha\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse {}\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _clipboardAction = __webpack_require__(1);\n\nvar _clipboardAction2 = _interopRequireDefault(_clipboardAction);\n\nvar _tinyEmitter = __webpack_require__(3);\n\nvar _tinyEmitter2 = _interopRequireDefault(_tinyEmitter);\n\nvar _goodListener = __webpack_require__(4);\n\nvar _goodListener2 = _interopRequireDefault(_goodListener);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * Base class which takes one or more elements, adds event listeners to them,\n * and instantiates a new `ClipboardAction` on each click.\n */\nvar Clipboard = function (_Emitter) {\n    _inherits(Clipboard, _Emitter);\n\n    /**\n     * @param {String|HTMLElement|HTMLCollection|NodeList} trigger\n     * @param {Object} options\n     */\n    function Clipboard(trigger, options) {\n        _classCallCheck(this, Clipboard);\n\n        var _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this));\n\n        _this.resolveOptions(options);\n        _this.listenClick(trigger);\n        return _this;\n    }\n\n    /**\n     * Defines if attributes would be resolved using internal setter functions\n     * or custom functions that were passed in the constructor.\n     * @param {Object} options\n     */\n\n\n    _createClass(Clipboard, [{\n        key: 'resolveOptions',\n        value: function resolveOptions() {\n            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            this.action = typeof options.action === 'function' ? options.action : this.defaultAction;\n            this.target = typeof options.target === 'function' ? options.target : this.defaultTarget;\n            this.text = typeof options.text === 'function' ? options.text : this.defaultText;\n            this.container = _typeof(options.container) === 'object' ? options.container : document.body;\n        }\n\n        /**\n         * Adds a click event listener to the passed trigger.\n         * @param {String|HTMLElement|HTMLCollection|NodeList} trigger\n         */\n\n    }, {\n        key: 'listenClick',\n        value: function listenClick(trigger) {\n            var _this2 = this;\n\n            this.listener = (0, _goodListener2.default)(trigger, 'click', function (e) {\n                return _this2.onClick(e);\n            });\n        }\n\n        /**\n         * Defines a new `ClipboardAction` on each click event.\n         * @param {Event} e\n         */\n\n    }, {\n        key: 'onClick',\n        value: function onClick(e) {\n            var trigger = e.delegateTarget || e.currentTarget;\n\n            if (this.clipboardAction) {\n                this.clipboardAction = null;\n            }\n\n            this.clipboardAction = new _clipboardAction2.default({\n                action: this.action(trigger),\n                target: this.target(trigger),\n                text: this.text(trigger),\n                container: this.container,\n                trigger: trigger,\n                emitter: this\n            });\n        }\n\n        /**\n         * Default `action` lookup function.\n         * @param {Element} trigger\n         */\n\n    }, {\n        key: 'defaultAction',\n        value: function defaultAction(trigger) {\n            return getAttributeValue('action', trigger);\n        }\n\n        /**\n         * Default `target` lookup function.\n         * @param {Element} trigger\n         */\n\n    }, {\n        key: 'defaultTarget',\n        value: function defaultTarget(trigger) {\n            var selector = getAttributeValue('target', trigger);\n\n            if (selector) {\n                return document.querySelector(selector);\n            }\n        }\n\n        /**\n         * Returns the support of the given action, or all actions if no action is\n         * given.\n         * @param {String} [action]\n         */\n\n    }, {\n        key: 'defaultText',\n\n\n        /**\n         * Default `text` lookup function.\n         * @param {Element} trigger\n         */\n        value: function defaultText(trigger) {\n            return getAttributeValue('text', trigger);\n        }\n\n        /**\n         * Destroy lifecycle.\n         */\n\n    }, {\n        key: 'destroy',\n        value: function destroy() {\n            this.listener.destroy();\n\n            if (this.clipboardAction) {\n                this.clipboardAction.destroy();\n                this.clipboardAction = null;\n            }\n        }\n    }], [{\n        key: 'isSupported',\n        value: function isSupported() {\n            var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['copy', 'cut'];\n\n            var actions = typeof action === 'string' ? [action] : action;\n            var support = !!document.queryCommandSupported;\n\n            actions.forEach(function (action) {\n                support = support && !!document.queryCommandSupported(action);\n            });\n\n            return support;\n        }\n    }]);\n\n    return Clipboard;\n}(_tinyEmitter2.default);\n\n/**\n * Helper function to retrieve attribute value.\n * @param {String} suffix\n * @param {Element} element\n */\n\n\nfunction getAttributeValue(suffix, element) {\n    var attribute = 'data-clipboard-' + suffix;\n\n    if (!element.hasAttribute(attribute)) {\n        return;\n    }\n\n    return element.getAttribute(attribute);\n}\n\nmodule.exports = Clipboard;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _select = __webpack_require__(2);\n\nvar _select2 = _interopRequireDefault(_select);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Inner class which performs selection from either `text` or `target`\n * properties and then executes copy or cut operations.\n */\nvar ClipboardAction = function () {\n    /**\n     * @param {Object} options\n     */\n    function ClipboardAction(options) {\n        _classCallCheck(this, ClipboardAction);\n\n        this.resolveOptions(options);\n        this.initSelection();\n    }\n\n    /**\n     * Defines base properties passed from constructor.\n     * @param {Object} options\n     */\n\n\n    _createClass(ClipboardAction, [{\n        key: 'resolveOptions',\n        value: function resolveOptions() {\n            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            this.action = options.action;\n            this.container = options.container;\n            this.emitter = options.emitter;\n            this.target = options.target;\n            this.text = options.text;\n            this.trigger = options.trigger;\n\n            this.selectedText = '';\n        }\n\n        /**\n         * Decides which selection strategy is going to be applied based\n         * on the existence of `text` and `target` properties.\n         */\n\n    }, {\n        key: 'initSelection',\n        value: function initSelection() {\n            if (this.text) {\n                this.selectFake();\n            } else if (this.target) {\n                this.selectTarget();\n            }\n        }\n\n        /**\n         * Creates a fake textarea element, sets its value from `text` property,\n         * and makes a selection on it.\n         */\n\n    }, {\n        key: 'selectFake',\n        value: function selectFake() {\n            var _this = this;\n\n            var isRTL = document.documentElement.getAttribute('dir') == 'rtl';\n\n            this.removeFake();\n\n            this.fakeHandlerCallback = function () {\n                return _this.removeFake();\n            };\n            this.fakeHandler = this.container.addEventListener('click', this.fakeHandlerCallback) || true;\n\n            this.fakeElem = document.createElement('textarea');\n            // Prevent zooming on iOS\n            this.fakeElem.style.fontSize = '12pt';\n            // Reset box model\n            this.fakeElem.style.border = '0';\n            this.fakeElem.style.padding = '0';\n            this.fakeElem.style.margin = '0';\n            // Move element out of screen horizontally\n            this.fakeElem.style.position = 'absolute';\n            this.fakeElem.style[isRTL ? 'right' : 'left'] = '-9999px';\n            // Move element to the same position vertically\n            var yPosition = window.pageYOffset || document.documentElement.scrollTop;\n            this.fakeElem.style.top = yPosition + 'px';\n\n            this.fakeElem.setAttribute('readonly', '');\n            this.fakeElem.value = this.text;\n\n            this.container.appendChild(this.fakeElem);\n\n            this.selectedText = (0, _select2.default)(this.fakeElem);\n            this.copyText();\n        }\n\n        /**\n         * Only removes the fake element after another click event, that way\n         * a user can hit `Ctrl+C` to copy because selection still exists.\n         */\n\n    }, {\n        key: 'removeFake',\n        value: function removeFake() {\n            if (this.fakeHandler) {\n                this.container.removeEventListener('click', this.fakeHandlerCallback);\n                this.fakeHandler = null;\n                this.fakeHandlerCallback = null;\n            }\n\n            if (this.fakeElem) {\n                this.container.removeChild(this.fakeElem);\n                this.fakeElem = null;\n            }\n        }\n\n        /**\n         * Selects the content from element passed on `target` property.\n         */\n\n    }, {\n        key: 'selectTarget',\n        value: function selectTarget() {\n            this.selectedText = (0, _select2.default)(this.target);\n            this.copyText();\n        }\n\n        /**\n         * Executes the copy operation based on the current selection.\n         */\n\n    }, {\n        key: 'copyText',\n        value: function copyText() {\n            var succeeded = void 0;\n\n            try {\n                succeeded = document.execCommand(this.action);\n            } catch (err) {\n                succeeded = false;\n            }\n\n            this.handleResult(succeeded);\n        }\n\n        /**\n         * Fires an event based on the copy operation result.\n         * @param {Boolean} succeeded\n         */\n\n    }, {\n        key: 'handleResult',\n        value: function handleResult(succeeded) {\n            this.emitter.emit(succeeded ? 'success' : 'error', {\n                action: this.action,\n                text: this.selectedText,\n                trigger: this.trigger,\n                clearSelection: this.clearSelection.bind(this)\n            });\n        }\n\n        /**\n         * Moves focus away from `target` and back to the trigger, removes current selection.\n         */\n\n    }, {\n        key: 'clearSelection',\n        value: function clearSelection() {\n            if (this.trigger) {\n                this.trigger.focus();\n            }\n\n            window.getSelection().removeAllRanges();\n        }\n\n        /**\n         * Sets the `action` to be performed which can be either 'copy' or 'cut'.\n         * @param {String} action\n         */\n\n    }, {\n        key: 'destroy',\n\n\n        /**\n         * Destroy lifecycle.\n         */\n        value: function destroy() {\n            this.removeFake();\n        }\n    }, {\n        key: 'action',\n        set: function set() {\n            var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'copy';\n\n            this._action = action;\n\n            if (this._action !== 'copy' && this._action !== 'cut') {\n                throw new Error('Invalid \"action\" value, use either \"copy\" or \"cut\"');\n            }\n        }\n\n        /**\n         * Gets the `action` property.\n         * @return {String}\n         */\n        ,\n        get: function get() {\n            return this._action;\n        }\n\n        /**\n         * Sets the `target` property using an element\n         * that will be have its content copied.\n         * @param {Element} target\n         */\n\n    }, {\n        key: 'target',\n        set: function set(target) {\n            if (target !== undefined) {\n                if (target && (typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object' && target.nodeType === 1) {\n                    if (this.action === 'copy' && target.hasAttribute('disabled')) {\n                        throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\n                    }\n\n                    if (this.action === 'cut' && (target.hasAttribute('readonly') || target.hasAttribute('disabled'))) {\n                        throw new Error('Invalid \"target\" attribute. You can\\'t cut text from elements with \"readonly\" or \"disabled\" attributes');\n                    }\n\n                    this._target = target;\n                } else {\n                    throw new Error('Invalid \"target\" value, use a valid Element');\n                }\n            }\n        }\n\n        /**\n         * Gets the `target` property.\n         * @return {String|HTMLElement}\n         */\n        ,\n        get: function get() {\n            return this._target;\n        }\n    }]);\n\n    return ClipboardAction;\n}();\n\nmodule.exports = ClipboardAction;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\nfunction select(element) {\n    var selectedText;\n\n    if (element.nodeName === 'SELECT') {\n        element.focus();\n\n        selectedText = element.value;\n    }\n    else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n        var isReadOnly = element.hasAttribute('readonly');\n\n        if (!isReadOnly) {\n            element.setAttribute('readonly', '');\n        }\n\n        element.select();\n        element.setSelectionRange(0, element.value.length);\n\n        if (!isReadOnly) {\n            element.removeAttribute('readonly');\n        }\n\n        selectedText = element.value;\n    }\n    else {\n        if (element.hasAttribute('contenteditable')) {\n            element.focus();\n        }\n\n        var selection = window.getSelection();\n        var range = document.createRange();\n\n        range.selectNodeContents(element);\n        selection.removeAllRanges();\n        selection.addRange(range);\n\n        selectedText = selection.toString();\n    }\n\n    return selectedText;\n}\n\nmodule.exports = select;\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\nfunction E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    };\n\n    listener._ = callback\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nmodule.exports = E;\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar is = __webpack_require__(5);\nvar delegate = __webpack_require__(6);\n\n/**\n * Validates all params and calls the right\n * listener function based on its target type.\n *\n * @param {String|HTMLElement|HTMLCollection|NodeList} target\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\nfunction listen(target, type, callback) {\n    if (!target && !type && !callback) {\n        throw new Error('Missing required arguments');\n    }\n\n    if (!is.string(type)) {\n        throw new TypeError('Second argument must be a String');\n    }\n\n    if (!is.fn(callback)) {\n        throw new TypeError('Third argument must be a Function');\n    }\n\n    if (is.node(target)) {\n        return listenNode(target, type, callback);\n    }\n    else if (is.nodeList(target)) {\n        return listenNodeList(target, type, callback);\n    }\n    else if (is.string(target)) {\n        return listenSelector(target, type, callback);\n    }\n    else {\n        throw new TypeError('First argument must be a String, HTMLElement, HTMLCollection, or NodeList');\n    }\n}\n\n/**\n * Adds an event listener to a HTML element\n * and returns a remove listener function.\n *\n * @param {HTMLElement} node\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\nfunction listenNode(node, type, callback) {\n    node.addEventListener(type, callback);\n\n    return {\n        destroy: function() {\n            node.removeEventListener(type, callback);\n        }\n    }\n}\n\n/**\n * Add an event listener to a list of HTML elements\n * and returns a remove listener function.\n *\n * @param {NodeList|HTMLCollection} nodeList\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\nfunction listenNodeList(nodeList, type, callback) {\n    Array.prototype.forEach.call(nodeList, function(node) {\n        node.addEventListener(type, callback);\n    });\n\n    return {\n        destroy: function() {\n            Array.prototype.forEach.call(nodeList, function(node) {\n                node.removeEventListener(type, callback);\n            });\n        }\n    }\n}\n\n/**\n * Add an event listener to a selector\n * and returns a remove listener function.\n *\n * @param {String} selector\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\nfunction listenSelector(selector, type, callback) {\n    return delegate(document.body, selector, type, callback);\n}\n\nmodule.exports = listen;\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports) {\n\n/**\n * Check if argument is a HTML element.\n *\n * @param {Object} value\n * @return {Boolean}\n */\nexports.node = function(value) {\n    return value !== undefined\n        && value instanceof HTMLElement\n        && value.nodeType === 1;\n};\n\n/**\n * Check if argument is a list of HTML elements.\n *\n * @param {Object} value\n * @return {Boolean}\n */\nexports.nodeList = function(value) {\n    var type = Object.prototype.toString.call(value);\n\n    return value !== undefined\n        && (type === '[object NodeList]' || type === '[object HTMLCollection]')\n        && ('length' in value)\n        && (value.length === 0 || exports.node(value[0]));\n};\n\n/**\n * Check if argument is a string.\n *\n * @param {Object} value\n * @return {Boolean}\n */\nexports.string = function(value) {\n    return typeof value === 'string'\n        || value instanceof String;\n};\n\n/**\n * Check if argument is a function.\n *\n * @param {Object} value\n * @return {Boolean}\n */\nexports.fn = function(value) {\n    var type = Object.prototype.toString.call(value);\n\n    return type === '[object Function]';\n};\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar closest = __webpack_require__(7);\n\n/**\n * Delegates event to a selector.\n *\n * @param {Element} element\n * @param {String} selector\n * @param {String} type\n * @param {Function} callback\n * @param {Boolean} useCapture\n * @return {Object}\n */\nfunction _delegate(element, selector, type, callback, useCapture) {\n    var listenerFn = listener.apply(this, arguments);\n\n    element.addEventListener(type, listenerFn, useCapture);\n\n    return {\n        destroy: function() {\n            element.removeEventListener(type, listenerFn, useCapture);\n        }\n    }\n}\n\n/**\n * Delegates event to a selector.\n *\n * @param {Element|String|Array} [elements]\n * @param {String} selector\n * @param {String} type\n * @param {Function} callback\n * @param {Boolean} useCapture\n * @return {Object}\n */\nfunction delegate(elements, selector, type, callback, useCapture) {\n    // Handle the regular Element usage\n    if (typeof elements.addEventListener === 'function') {\n        return _delegate.apply(null, arguments);\n    }\n\n    // Handle Element-less usage, it defaults to global delegation\n    if (typeof type === 'function') {\n        // Use `document` as the first parameter, then apply arguments\n        // This is a short way to .unshift `arguments` without running into deoptimizations\n        return _delegate.bind(null, document).apply(null, arguments);\n    }\n\n    // Handle Selector-based usage\n    if (typeof elements === 'string') {\n        elements = document.querySelectorAll(elements);\n    }\n\n    // Handle Array-like based usage\n    return Array.prototype.map.call(elements, function (element) {\n        return _delegate(element, selector, type, callback, useCapture);\n    });\n}\n\n/**\n * Finds closest match and invokes callback.\n *\n * @param {Element} element\n * @param {String} selector\n * @param {String} type\n * @param {Function} callback\n * @return {Function}\n */\nfunction listener(element, selector, type, callback) {\n    return function(e) {\n        e.delegateTarget = closest(e.target, selector);\n\n        if (e.delegateTarget) {\n            callback.call(element, e);\n        }\n    }\n}\n\nmodule.exports = delegate;\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\nvar DOCUMENT_NODE_TYPE = 9;\n\n/**\n * A polyfill for Element.matches()\n */\nif (typeof Element !== 'undefined' && !Element.prototype.matches) {\n    var proto = Element.prototype;\n\n    proto.matches = proto.matchesSelector ||\n                    proto.mozMatchesSelector ||\n                    proto.msMatchesSelector ||\n                    proto.oMatchesSelector ||\n                    proto.webkitMatchesSelector;\n}\n\n/**\n * Finds the closest parent that matches a selector.\n *\n * @param {Element} element\n * @param {String} selector\n * @return {Function}\n */\nfunction closest (element, selector) {\n    while (element && element.nodeType !== DOCUMENT_NODE_TYPE) {\n        if (typeof element.matches === 'function' &&\n            element.matches(selector)) {\n          return element;\n        }\n        element = element.parentNode;\n    }\n}\n\nmodule.exports = closest;\n\n\n/***/ })\n/******/ ]);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/clipboard/dist/clipboard.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanM/Y2QwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ 0:

  !*** multi ./HTML Manual/js/ajax-response.js ./HTML Manual/js/ajax-response.min.js ./HTML Manual/js/common.js ./HTML Manual/js/common.min.js ./HTML Manual/js/index.js ./HTML Manual/js/index.min.js ./HTML Manual/js/lazysizes.min.js ./HTML Manual/js/Main.js ./HTML Manual/js/Main.min.js ./HTML Manual/js/prism.js ./HTML Manual/js/prism.min.js ./HTML Manual/js/smooth-scroll.min.js ./HTML Manual/js/WorkerTask.js ./HTML Manual/js/WorkerTask.min.js ./HTML Manual/js/nomodule/ajax-response.js ./HTML Manual/js/nomodule/ajax-response.min.js ./HTML Manual/js/nomodule/ajax-response.min.min.js ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! C:\xampp\htdocs\test\HTML Manual\js\ajax-response.js */"./HTML Manual Repository/public/js/ajax-response.js");
__webpack_require__(/*! C:\xampp\htdocs\test\HTML Manual\js\ajax-response.min.js */"./HTML Manual Repository/public/js/ajax-response.min.js");
__webpack_require__(/*! C:\xampp\htdocs\test\HTML Manual\js\common.js */"./HTML Manual Repository/public/js/common.js");
__webpack_require__(/*! C:\xampp\htdocs\test\HTML Manual\js\common.min.js */"./HTML Manual Repository/public/js/common.min.js");
__webpack_require__(/*! C:\xampp\htdocs\test\HTML Manual\js\index.js */"./HTML Manual Repository/public/js/index.js");
__webpack_require__(/*! C:\xampp\htdocs\test\HTML Manual\js\index.min.js */"./HTML Manual Repository/public/js/index.min.js");
__webpack_require__(/*! C:\xampp\htdocs\test\HTML Manual\js\lazysizes.min.js */"./HTML Manual Repository/public/js/lazysizes.min.js");
__webpack_require__(/*! C:\xampp\htdocs\test\HTML Manual\js\Main.js */"./HTML Manual Repository/public/js/Main.js");
__webpack_require__(/*! C:\xampp\htdocs\test\HTML Manual\js\Main.min.js */"./HTML Manual Repository/public/js/Main.min.js");
__webpack_require__(/*! C:\xampp\htdocs\test\HTML Manual\js\prism.js */"./HTML Manual Repository/public/js/prism.js");
__webpack_require__(/*! C:\xampp\htdocs\test\HTML Manual\js\prism.min.js */"./HTML Manual Repository/public/js/prism.min.js");
__webpack_require__(/*! C:\xampp\htdocs\test\HTML Manual\js\smooth-scroll.min.js */"./HTML Manual Repository/public/js/smooth-scroll.min.js");
__webpack_require__(/*! C:\xampp\htdocs\test\HTML Manual\js\WorkerTask.js */"./HTML Manual Repository/public/js/WorkerTask.js");
__webpack_require__(/*! C:\xampp\htdocs\test\HTML Manual\js\WorkerTask.min.js */"./HTML Manual Repository/public/js/WorkerTask.min.js");
__webpack_require__(/*! C:\xampp\htdocs\test\HTML Manual\js\nomodule\ajax-response.js */"./HTML Manual Repository/public/js/nomodule/ajax-response.js");
__webpack_require__(/*! C:\xampp\htdocs\test\HTML Manual\js\nomodule\ajax-response.min.js */"./HTML Manual Repository/public/js/nomodule/ajax-response.min.js");
module.exports = __webpack_require__(/*! C:\xampp\htdocs\test\HTML Manual\js\nomodule\ajax-response.min.min.js */"./HTML Manual Repository/public/js/nomodule/ajax-response.min.min.js");


/***/ })

/******/ });